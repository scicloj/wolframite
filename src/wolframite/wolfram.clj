(ns wolframite.wolfram "[GENERATED - see `...wolfram-syms.write-ns/write-ns!`]\n           Vars for all Wolfram functions (and their Clojurite aliases, where those exist).\n          These can be composed into expressions and passed to `wl/eval`.\n\n          BEWARE: This is based off a particular version of Wolfram and you may need to refresh it." (:require wolframite.impl.wolfram-syms.intern clojure.walk) (:refer-clojure :only [ns-unmap map let defmacro list]))
(do (clojure.core/ns-unmap clojure.core/*ns* (quote Byte)) (clojure.core/ns-unmap clojure.core/*ns* (quote Character)) (clojure.core/ns-unmap clojure.core/*ns* (quote Integer)) (clojure.core/ns-unmap clojure.core/*ns* (quote Number)) (clojure.core/ns-unmap clojure.core/*ns* (quote Short)) (clojure.core/ns-unmap clojure.core/*ns* (quote String)) (clojure.core/ns-unmap clojure.core/*ns* (quote Thread)))
(def ^:dynamic *wolfram-version* 14.2)
(def ^:dynamic *wolfram-kernel-name* "Wolfram Language 14.2.0 Engine")
(def $Aborted "$Aborted is a special symbol that is returned as the result from a calculation that has been aborted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Aborted)))
(def $ActivationKey "$ActivationKey is a string that gives the activation key under which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ActivationKey)))
(def $AllowDataUpdates "$AllowDataUpdates controls whether the Wolfram System is allowed to automatically update certain types of content." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AllowDataUpdates)))
(def $AllowExternalChannelFunctions "$AllowExternalChannelFunctions specifies whether to allow interaction with channels that contain functions that might be executed in your session in response to events on the channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AllowExternalChannelFunctions)))
(def $AllowInternet "$AllowInternet controls whether the Wolfram System is allowed to access the internet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AllowInternet)))
(def $AssertFunction "$AssertFunction specifies a function to apply to assertions that fail." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AssertFunction)))
(def $Assumptions "$Assumptions is the default setting for the Assumptions option used in such functions as Simplify, Refine, and Integrate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Assumptions)))
(def $AudioDecoders "$AudioDecoders gives the list of audio decoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AudioDecoders)))
(def $AudioEncoders "$AudioEncoders gives the list of audio encoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AudioEncoders)))
(def $AudioInputDevices "$AudioInputDevices gives the list of available audio input devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AudioInputDevices)))
(def $AudioOutputDevices "$AudioOutputDevices gives the list of available audio output devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $AudioOutputDevices)))
(def $BaseDirectory "$BaseDirectory gives the base directory in which systemwide files to be loaded by the Wolfram System are conventionally placed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $BaseDirectory)))
(def $BasePacletsDirectory "$BasePacletsDirectory gives the base directory that the Wolfram System uses to find paclets that can be seen by all users on the system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $BasePacletsDirectory)))
(def $BatchInput "$BatchInput is True if input in the current session is being fed directly to the Wolfram Language kernel in batch mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $BatchInput)))
(def $BatchOutput "$BatchOutput is True if output in the current session is being sent in batch mode, suitable for reading by other programs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $BatchOutput)))
(def $BlockchainBase "$BlockchainBase gives the name of the default blockchain to be used for blockchain computations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $BlockchainBase)))
(def $ByteOrdering "$ByteOrdering gives the native ordering of bytes in binary data on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ByteOrdering)))
(def $CacheBaseDirectory "$CacheBaseDirectory is the directory on your local file system used for storing cache data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CacheBaseDirectory)))
(def $Canceled "$Canceled is a symbol returned when notebook input is canceled, for example from a dialog box." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Canceled)))
(def $ChannelBase "$ChannelBase gives the base URL of the server to use for brokering channel communications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ChannelBase)))
(def $CharacterEncoding "$CharacterEncoding specifies the default raw character encoding to use for input and output functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CharacterEncoding)))
(def $CharacterEncodings "$CharacterEncodings gives the list of character encodings that can be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CharacterEncodings)))
(def $CloudAccountName "$CloudAccountName gives the name assigned to the cloud account of a currently logged-in user or the user who owns a cloud object containing the code used for the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudAccountName)))
(def $CloudBase "$CloudBase gives the base URI of the server to use for cloud operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudBase)))
(def $CloudConnected "$CloudConnected gives True if an authenticated connection to the Wolfram Cloud has been set up, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudConnected)))
(def $CloudCreditsAvailable "$CloudCreditsAvailable gives the total number of cloud credits currently available in the cloud account being used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudCreditsAvailable)))
(def $CloudEvaluation "$CloudEvaluation gives True if the current evaluation is occurring in the cloud, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudEvaluation)))
(def $CloudExpressionBase "$CloudExpressionBase gives the base URI used for storing cloud expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudExpressionBase)))
(def $CloudObjectNameFormat "$CloudObjectNameFormat is the default setting used for the CloudObjectNameFormat option when constructing a CloudObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudObjectNameFormat)))
(def $CloudObjectURLType "$CloudObjectURLType is the default setting for the CloudObjectURLType option when constructing a CloudObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudObjectURLType)))
(def $CloudRootDirectory "$CloudRootDirectory is the cloud object corresponding to the root directory for the file structure in which the current user's cloud objects are stored." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudRootDirectory)))
(def $CloudSymbolBase "$CloudSymbolBase gives the base for storing the values of CloudSymbol objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudSymbolBase)))
(def $CloudUserID "$CloudUserID gives the cloud user ID of a currently logged-in user, or the user who owns a cloud object containing the code used for the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudUserID)))
(def $CloudUserUUID "$CloudUserUUID gives the cloud UUID of a currently logged-in user, or the user who owns a cloud object containing the code used for the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudUserUUID)))
(def $CloudVersion "$CloudVersion gives the version of the currently connected cloud server." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CloudVersion)))
(def $CommandLine "$CommandLine is a list of strings giving the elements of the original operating system command line with which the current instantiation of the Wolfram Language was invoked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CommandLine)))
(def $CompilationTarget "$CompilationTarget gives the default value for the option CompilationTarget of Compile." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CompilationTarget)))
(def $CompilerEnvironment "$CompilerEnvironment is the collection of definitions typically used by FunctionCompile and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CompilerEnvironment)))
(def $ConfiguredKernels "$ConfiguredKernels is the list of kernels that are configured to be selected for remote or parallel computing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ConfiguredKernels)))
(def $Context "$Context is a global variable that gives the current context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Context)))
(def $ContextAliases "$ContextAliases is a global variable that gives an association with mappings from aliases to contexts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ContextAliases)))
(def $ContextPath "$ContextPath is a global variable that gives a list of contexts to search, before $Context, in trying to find a symbol that has been entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ContextPath)))
(def $ControlActiveSetting "$ControlActiveSetting is a symbol whose value is True if it is evaluated while a control is active, or in certain other previewing situations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ControlActiveSetting)))
(def $CookieStore "$CookieStore gives the location at which to store information on persistent cookies to be used by URLRead and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CookieStore)))
(def $Cookies "$Cookies is a global variable that contains a list of cookies to be used by functions such as URLExecute." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Cookies)))
(def $CreationDate "$CreationDate gives the date at which the particular release of the Wolfram Language kernel you are running was created." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CreationDate)))
(def $CryptographicEllipticCurveNames "$CryptographicEllipticCurveNames gives a list of the elliptic curves supported for key generation and digital signatures." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CryptographicEllipticCurveNames)))
(def $CurrentLink "$CurrentLink is the LinkObject representing the WSTP connection for an external program currently being installed or being called." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CurrentLink)))
(def $CurrentTask "$CurrentTask gives the TaskObject[…] corresponding to the task in which it is being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CurrentTask)))
(def $CurrentWebSession "$CurrentWebSession gives the currently active web session used by WebExecute." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $CurrentWebSession)))
(def $DataStructures "$DataStructures gives a list of the currently available data structure types for the CreateDataStructure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DataStructures)))
(def $DateStringFormat "$DateStringFormat gives the default format to use for date strings generated by DateString." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DateStringFormat)))
(def $DefaultAudioInputDevice "$DefaultAudioInputDevice gives the name of the default audio input device attached to the computer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultAudioInputDevice)))
(def $DefaultAudioOutputDevice "$DefaultAudioOutputDevice gives the name of the default audio output device attached to the computer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultAudioOutputDevice)))
(def $DefaultFrontEnd "$DefaultFrontEnd is a global symbol that can be queried for the factory‐default front end option values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultFrontEnd)))
(def $DefaultImagingDevice "$DefaultImagingDevice gives the name of the default imaging device attached to the computer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultImagingDevice)))
(def $DefaultLocalBase "$DefaultLocalBase gives the default base directory to use for local object storage." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultLocalBase)))
(def $DefaultLocalKernel "$DefaultLocalKernel gives the kernel configuration corresponding to the default kernel to be used by LocalEvaluate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultLocalKernel)))
(def $DefaultNetworkInterface "$DefaultNetworkInterface gives the default network interface used on your machine." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultNetworkInterface)))
(def $DefaultParallelKernels "$DefaultParallelKernels is the list of kernels that are configured for parallel computing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultParallelKernels)))
(def $DefaultProxyRules "$DefaultProxyRules gives the proxy settings used by the Wolfram System when accessing the network.\n$DefaultProxyRules[\"prop\"]=value sets the value of a proxy setting." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultProxyRules)))
(def $DefaultRemoteBatchSubmissionEnvironment "$DefaultRemoteBatchSubmissionEnvironment gives the default environment to which remote batch jobs will be submitted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultRemoteBatchSubmissionEnvironment)))
(def $DefaultRemoteKernel "$DefaultRemoteKernel gives the kernel configuration corresponding to the default remote kernel to be used by RemoteEvaluate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultRemoteKernel)))
(def $DefaultSystemCredentialStore "$DefaultSystemCredentialStore gives the default credential store settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DefaultSystemCredentialStore)))
(def $Display "$Display gives a list of files and pipes to be used with the default $DisplayFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Display)))
(def $DisplayFunction "$DisplayFunction gives the default setting for the option DisplayFunction in graphics functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DisplayFunction)))
(def $DistributedContexts "$DistributedContexts is the default value of the DistributedContexts option of functions such as ParallelTable and ParallelMap." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DistributedContexts)))
(def $DistributedDefinitions "$DistributedDefinitions gives the list of all symbols whose definitions have been distributed to parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DistributedDefinitions)))
(def $DynamicEvaluation "$DynamicEvaluation is a symbol whose value is True if it is evaluated as part of the evaluation of a Dynamic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $DynamicEvaluation)))
(def $Echo "$Echo gives a list of files and pipes to which all input is echoed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Echo)))
(def $EmbedCodeEnvironments "$EmbedCodeEnvironments gives a list of environments currently supported by EmbedCode in your Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $EmbedCodeEnvironments)))
(def $EmbeddableServices "$EmbeddableServices gives a list of external embeddable services that can be accessed through EmbeddedService." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $EmbeddableServices)))
(def $Epilog "$Epilog is a symbol whose value, if any, is evaluated when a dialog or a Wolfram System session is terminated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Epilog)))
(def $EvaluationCloudBase "$EvaluationCloudBase gives the base URI of the cloud server on which the current evaluation is being done." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $EvaluationCloudBase)))
(def $EvaluationCloudObject "$EvaluationCloudObject gives the cloud object containing the code currently being executed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $EvaluationCloudObject)))
(def $EvaluationEnvironment "$EvaluationEnvironment gives a string indicating the type of local or cloud environment in which the current Wolfram Language evaluation is being performed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $EvaluationEnvironment)))
(def $ExportFormats "$ExportFormats gives a list of export formats currently supported in your Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ExportFormats)))
(def $ExternalIdentifierTypes "$ExternalIdentifierTypes gives a list of types available to ExternalIdentifier." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ExternalIdentifierTypes)))
(def $ExternalStorageBase "$ExternalStorageBase gives the name of the default external storage service to be used for external storage operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ExternalStorageBase)))
(def $Failed "$Failed is a special symbol returned by certain functions when they cannot do what they were asked to do." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Failed)))
(def $FontFamilies "$FontFamilies gives the list of the font families available to the Wolfram System." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $FontFamilies)))
(def $FrontEnd "$FrontEnd is a global variable that specifies to what front end object, if any, the kernel is currently connected." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $FrontEnd)))
(def $FrontEndSession "$FrontEndSession is a global symbol that represents the current session of the front end from which the kernel is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $FrontEndSession)))
(def $GeneratedAssetLocation "$GeneratedAssetLocation gives the default setting for GeneratedAssetLocation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $GeneratedAssetLocation)))
(def $GeoLocation "$GeoLocation is a settable global variable that specifies the default geodetic location to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $GeoLocation)))
(def $GeoLocationCity "$GeoLocationCity gives the city entity for the current setting for $GeoLocation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $GeoLocationCity)))
(def $GeoLocationCountry "$GeoLocationCountry gives the country entity for the current setting for $GeoLocation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $GeoLocationCountry)))
(def $GeoLocationSource "$GeoLocationSource is a string giving the source of the current geodetic location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $GeoLocationSource)))
(def $HistoryLength "$HistoryLength specifies the number of previous lines of input and output to keep in a Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $HistoryLength)))
(def $HomeDirectory "$HomeDirectory gives your \"home\" directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $HomeDirectory)))
(def $IgnoreEOF "$IgnoreEOF specifies whether the Wolfram System should terminate when it receives an end‐of‐file character as input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $IgnoreEOF)))
(def $ImageFormattingWidth "$ImageFormattingWidth gives the default target width at which to wrap when formatting objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ImageFormattingWidth)))
(def $ImageResolution "$ImageResolution gives the default image resolution to use when rasterizing to create images." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ImageResolution)))
(def $ImagingDevice "$ImagingDevice gives the name of the imaging device used to capture images." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ImagingDevice)))
(def $ImagingDevices "$ImagingDevices gives a list of available imaging devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ImagingDevices)))
(def $ImportFormats "$ImportFormats gives a list of import formats currently supported in your Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ImportFormats)))
(def $IncomingMailSettings "$IncomingMailSettings gives the default settings used by MailServerConnect to connect to an incoming mail server." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $IncomingMailSettings)))
(def $InitialDirectory "$InitialDirectory gives the initial directory when the current Wolfram System session was started." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InitialDirectory)))
(def $Initialization "$Initialization is a symbol whose value, if any, is evaluated with ReleaseHold[$Initialization] at the start of a Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Initialization)))
(def $InitializationContexts "$InitializationContexts is a symbol whose value, if any, specifies a list of packages to read with Needs at the start of a Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InitializationContexts)))
(def $Input "$Input is a global variable whose value is the name of the stream from which input to the Wolfram Language is currently being sought." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Input)))
(def $InputFileName "$InputFileName is a global variable whose value is the absolute file name of the input file from which input to the Wolfram Language is currently being sought." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InputFileName)))
(def $InputStreamMethods "$InputStreamMethods gives the list of input stream methods that can be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InputStreamMethods)))
(def $Inspector "$Inspector is a global variable which gives a function to apply when the inspector is invoked from an interrupt menu." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Inspector)))
(def $InstallationDirectory "$InstallationDirectory gives the top‐level directory in which your Wolfram System installation resides." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InstallationDirectory)))
(def $InterpreterTypes "$InterpreterTypes gives a list of the currently available types for the Interpreter function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $InterpreterTypes)))
(def $IterationLimit "$IterationLimit gives the maximum length of evaluation chain used in trying to evaluate any expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $IterationLimit)))
(def $KernelCount "$KernelCount gives the number of subkernels available for parallel computations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $KernelCount)))
(def $KernelID "$KernelID is a unique ID number assigned to each running parallel kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $KernelID)))
(def $LLMEvaluator "$LLMEvaluator is the default LLMConfiguration used by functions such as LLMSynthesize." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LLMEvaluator)))
(def $Language "$Language is a settable global variable that specifies the default language used by the Wolfram System." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Language)))
(def $LibraryPath "$LibraryPath gives the default list of directories to search in attempting to find a library." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LibraryPath)))
(def $LicenseExpirationDate "$LicenseExpirationDate gives the expiration date for the license under which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LicenseExpirationDate)))
(def $LicenseID "$LicenseID is a string that gives the license ID under which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LicenseID)))
(def $LicenseServer "$LicenseServer is a string that gives the name of the license server that is currently authorizing the Wolfram System to be run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LicenseServer)))
(def $Line "$Line is a global variable that specifies the number of the current input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Line)))
(def $Linked "$Linked is True if the Wolfram Language kernel is being run through WSTP." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Linked)))
(def $LocalBase "$LocalBase gives the base directory to use for local object storage." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LocalBase)))
(def $LocalSymbolBase "$LocalSymbolBase gives the base directory for storing values of LocalSymbol objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $LocalSymbolBase)))
(def $MachineAddresses "$MachineAddresses gives a list of strings specifying the current IP addresses associated with the computer on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineAddresses)))
(def $MachineDomains "$MachineDomains is a list of strings giving the names of the current network domains associated with the computer on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineDomains)))
(def $MachineEpsilon "$MachineEpsilon gives the difference between 1.0 and the next-nearest number representable as a machine-precision number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineEpsilon)))
(def $MachineID "$MachineID is a string that gives, if possible, a unique identification code for the computer on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineID)))
(def $MachineName "$MachineName is a string that gives the assigned name of the computer on which the Wolfram System is being run, if such a name is defined." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineName)))
(def $MachinePrecision "$MachinePrecision gives the number of decimal digits of precision used for machine‐precision numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachinePrecision)))
(def $MachineType "$MachineType is a string giving the general type of computer on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MachineType)))
(def $MaxDisplayedChildren "$MaxDisplayedChildren is a global variable whose value specifies the maximum number of children that should be displayed in Tree objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxDisplayedChildren)))
(def $MaxExtraPrecision "$MaxExtraPrecision gives the maximum number of extra digits of precision to be used in functions such as N." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxExtraPrecision)))
(def $MaxMachineNumber "$MaxMachineNumber is the largest machine‐precision number that can be used on a particular computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxMachineNumber)))
(def $MaxNumber "$MaxNumber gives the maximum arbitrary‐precision number that can be represented on a particular computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxNumber)))
(def $MaxPiecewiseCases "$MaxPiecewiseCases gives the maximum number of cases to allow in explicit Piecewise objects generated by expanding any single piecewise function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxPiecewiseCases)))
(def $MaxPrecision "$MaxPrecision gives the maximum number of digits of precision to be allowed in arbitrary‐precision numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxPrecision)))
(def $MaxRootDegree "$MaxRootDegree specifies the maximum degree of polynomial to allow in Root objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MaxRootDegree)))
(def $MessageGroups "$MessageGroups is the list of rules that gives named message groups used in functions like On and Quiet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MessageGroups)))
(def $MessageList "$MessageList is a global variable that gives a list of the names of messages generated during the evaluation of the current input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MessageList)))
(def $MessagePrePrint "$MessagePrePrint is a global variable whose value, if set, is applied to expressions before they are included in the text of messages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MessagePrePrint)))
(def $Messages "$Messages gives the list of files and pipes to which message output is sent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Messages)))
(def $MinMachineNumber "$MinMachineNumber is the smallest positive machine‐precision number that can be represented in normalized form on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MinMachineNumber)))
(def $MinNumber "$MinNumber gives the minimum positive arbitrary‐precision number that can be represented on a particular computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MinNumber)))
(def $MinPrecision "$MinPrecision gives the minimum number of digits of precision to be allowed in arbitrary‐precision numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MinPrecision)))
(def $MobilePhone "$MobilePhone gives the verified mobile phone number associated with the current user account." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $MobilePhone)))
(def $ModuleNumber "$ModuleNumber gives the current serial number to be used for local variables that are created." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ModuleNumber)))
(def $NetworkConnected "$NetworkConnected gives True if your computer has a network interface that is active and capable of sending and receiving IP traffic, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NetworkConnected)))
(def $NetworkInterfaces "$NetworkInterfaces gives the list of network interfaces available on your machine." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NetworkInterfaces)))
(def $NewMessage "$NewMessage is a global variable that, if set, is applied to the symbol name and tag of messages that are requested but have not yet been defined." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NewMessage)))
(def $NewSymbol "$NewSymbol is a global variable which, if set, is applied to the name and context of each new symbol that the Wolfram Language creates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NewSymbol)))
(def $NoValue "$NoValue is a special value that can be assigned to an InitializationValue[…] object to indicate that the symbol referenced by the initialization value should be initialized with no value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NoValue)))
(def $NotebookInlineStorageLimit "$NotebookInlineStorageLimit specifies the maximum size in bytes of expressions that will be stored in displayed summary boxes, datasets and other compact outputs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NotebookInlineStorageLimit)))
(def $Notebooks "$Notebooks is True if the Wolfram System is being used with a notebook‐based front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Notebooks)))
(def $NumberMarks "$NumberMarks gives the default value for the option NumberMarks, which specifies whether ` marks should be included in the input form representations of approximate numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $NumberMarks)))
(def $OperatingSystem "$OperatingSystem is a string giving the type of operating system under which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $OperatingSystem)))
(def $Output "$Output gives the list of files and pipes to which standard output from the Wolfram Language is sent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Output)))
(def $OutputSizeLimit "$OutputSizeLimit specifies the maximum size in bytes of expressions that will automatically be output in their entirety in a Wolfram System notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $OutputSizeLimit)))
(def $OutputStreamMethods "$OutputStreamMethods gives the list of output stream methods that can be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $OutputStreamMethods)))
(def $Packages "$Packages gives a list of the contexts corresponding to all packages that have been loaded in your current Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Packages)))
(def $ParentLink "$ParentLink is the WSTP LinkObject currently used for input and output by the Wolfram Language kernel in a particular session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ParentLink)))
(def $ParentProcessID "$ParentProcessID gives the ID assigned to the process which invokes the Wolfram Language kernel by the operating system under which it is run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ParentProcessID)))
(def $PasswordFile "$PasswordFile is a string giving the password file used when the kernel was started." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PasswordFile)))
(def $Path "$Path gives the default list of directories to search in attempting to find an external file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Path)))
(def $PathnameSeparator "$PathnameSeparator is a string used as a separator when full file and directory names are constructed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PathnameSeparator)))
(def $PerformanceGoal "$PerformanceGoal gives the default setting for the option PerformanceGoal for graphics and other algorithmic functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PerformanceGoal)))
(def $Permissions "$Permissions is the default setting used for the Permissions option when cloud objects are created." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Permissions)))
(def $PersistenceBase "$PersistenceBase gives the default persistence location at which to store new values assigned to PersistentSymbol objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PersistenceBase)))
(def $PersistencePath "$PersistencePath gives the default list of persistence locations at which to look for values assigned to PersistentSymbol objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PersistencePath)))
(def $PlotTheme "$PlotTheme gives the default setting for the option PlotTheme for graphics functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PlotTheme)))
(def $Post "$Post is a global variable whose value, if set, is applied to every output expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Post)))
(def $Pre "$Pre is a global variable whose value, if set, is applied to every input expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Pre)))
(def $PreInitialization "$PreInitialization is a symbol whose value, if any, is evaluated with ReleaseHold[$PreInitialization] before any other initializations in a Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PreInitialization)))
(def $PrePrint "$PrePrint is a global variable whose value, if set, is applied to every expression before it is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PrePrint)))
(def $PreRead "$PreRead is a global variable whose value, if set, is applied to the text or box form of every input expression before it is fed to the Wolfram Language." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PreRead)))
(def $Printout3DPreviewer "$Printout3DPreviewer gives the default setting for the option Printout3DPreviewer in 3D printing functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Printout3DPreviewer)))
(def $ProcessID "$ProcessID gives the ID assigned to the Wolfram Language kernel process by the operating system under which it is run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ProcessID)))
(def $ProcessorCount "$ProcessorCount gives the number of processor cores available on the computer system on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ProcessorCount)))
(def $ProcessorType "$ProcessorType is a string giving the architecture of the processor on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ProcessorType)))
(def $ProgressReporting "$ProgressReporting is a settable global variable that specifies the default progress reporting method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ProgressReporting)))
(def $PublisherID "$PublisherID gives the default ID used to submit resources for publication in the resource system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $PublisherID)))
(def $RandomGeneratorState "$RandomGeneratorState gives a representation of the internal state of the default pseudorandom generator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RandomGeneratorState)))
(def $RecursionLimit "$RecursionLimit gives the current limit on the number of levels of recursion that the Wolfram Language can use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RecursionLimit)))
(def $ReleaseNumber "$ReleaseNumber is an integer which gives the current Wolfram Language kernel release number, and increases in successive releases." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ReleaseNumber)))
(def $RequesterAddress "$RequesterAddress gives the IP address originating an HTTP request that initiated the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RequesterAddress)))
(def $RequesterCloudUserID "$RequesterCloudUserID gives the cloud user ID of the authenticated user requesting the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RequesterCloudUserID)))
(def $RequesterCloudUserUUID "$RequesterCloudUserUUID gives the cloud user UUID of an authenticated user requesting the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RequesterCloudUserUUID)))
(def $RequesterWolframID "$RequesterWolframID gives the Wolfram ID of an authenticated user requesting the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RequesterWolframID)))
(def $RequesterWolframUUID "$RequesterWolframUUID gives the Wolfram UUID of an authenticated user requesting the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RequesterWolframUUID)))
(def $ResourceSystemBase "$ResourceSystemBase gives the base URI for the resource system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ResourceSystemBase)))
(def $ResourceSystemPath "$ResourceSystemPath gives the default list of locations at which to look for resource objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ResourceSystemPath)))
(def $RootDirectory "$RootDirectory gives the root directory of your file system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $RootDirectory)))
(def $SSHAuthentication "$SSHAuthentication specifies the default authentication options to use for SSH-related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SSHAuthentication)))
(def $ScriptCommandLine "$ScriptCommandLine is a list of strings giving the elements of the command line with which the standalone Wolfram System script was invoked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ScriptCommandLine)))
(def $ScriptInputString "$ScriptInputString represents input given on the standard input channel to the original operating system command with which the current instantiation of the Wolfram Language was invoked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ScriptInputString)))
(def $ServiceCreditsAvailable "$ServiceCreditsAvailable gives the available Service Credits in the user's account." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $ServiceCreditsAvailable)))
(def $Services "$Services gives a list of external services available through ServiceConnect." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Services)))
(def $SessionID "$SessionID is a number set up to be unique to a particular Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SessionID)))
(def $SharedFunctions "$SharedFunctions is the list of functions currently being shared among parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SharedFunctions)))
(def $SharedVariables "$SharedVariables is the list of variables currently being shared among parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SharedVariables)))
(def $SoundDisplayFunction "$SoundDisplayFunction gives the default setting for the option DisplayFunction in sound functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SoundDisplayFunction)))
(def $SourceLink "$SourceLink specifies the default source to be used for deployed cloud objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SourceLink)))
(def $StandardErrorStream "$StandardErrorStream gives the output stream object to which standard error from the Wolfram Language is sent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $StandardErrorStream)))
(def $StandardOutputStream "$StandardOutputStream gives the output stream object to which standard output from the Wolfram Language is sent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $StandardOutputStream)))
(def $SubtitleDecoders "$SubtitleDecoders gives the list of subtitle decoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SubtitleDecoders)))
(def $SubtitleEncoders "$SubtitleEncoders gives the list of subtitle encoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SubtitleEncoders)))
(def $SynchronousEvaluation "$SynchronousEvaluation is a symbol whose value is True if it is evaluated as part of a synchronous evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SynchronousEvaluation)))
(def $SyntaxHandler "$SyntaxHandler is a global variable that, if set, is applied to any input string that is found to contain a syntax error." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SyntaxHandler)))
(def $System "$System is a string describing the type of computer system on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $System)))
(def $SystemCharacterEncoding "$SystemCharacterEncoding gives the default raw character encoding for the computer system on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemCharacterEncoding)))
(def $SystemCredentialStore "$SystemCredentialStore gives the current credential store." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemCredentialStore)))
(def $SystemID "$SystemID is a short string that identifies the type of computer system on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemID)))
(def $SystemShell "$SystemShell is a symbol that specifies the system shell for the OS that is currently being used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemShell)))
(def $SystemTimeZone "$SystemTimeZone gives the current time zone for the computer system on which the Wolfram System is being run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemTimeZone)))
(def $SystemWordLength "$SystemWordLength gives the effective number of bits in raw machine words on the computer system where the Wolfram System is running." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $SystemWordLength)))
(def $TargetSystems "$TargetSystems gives the list of possible machine architectures for code generation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TargetSystems)))
(def $TemplatePath "$TemplatePath gives the default list of directories to search in attempting to find a template file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TemplatePath)))
(def $TemporaryDirectory "$TemporaryDirectory gives the main system directory for temporary files on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TemporaryDirectory)))
(def $TestFileName "$TestFileName gives the absolute file name of the currently executing test file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TestFileName)))
(def $TimeUnit "$TimeUnit gives the minimum time interval in seconds recorded on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TimeUnit)))
(def $TimeZone "$TimeZone gives the current time zone to assume for dates and times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TimeZone)))
(def $TimeZoneEntity "$TimeZoneEntity gives the time zone Entity corresponding to the locale setting for your computer operating system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TimeZoneEntity)))
(def $TimedOut "$TimedOut is a special symbol returned by certain functions when an operation times out." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $TimedOut)))
(def $UnitSystem "$UnitSystem gives the unit system to assume for returned quantities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UnitSystem)))
(def $Urgent "$Urgent gives the list of files and pipes to which urgent output from the Wolfram Language is sent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Urgent)))
(def $UserAgent "$UserAgent gives the user agent information from an HTTP request that initiated the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserAgent)))
(def $UserAgentString "$UserAgentString gives the user agent string from an HTTP request that initiated the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserAgentString)))
(def $UserBaseDirectory "$UserBaseDirectory gives the base directory in which user‐specific files to be loaded by the Wolfram System are conventionally placed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserBaseDirectory)))
(def $UserBasePacletsDirectory "$UserBasePacletsDirectory gives the base directory that the Wolfram System uses to store user-specific installed paclets and paclet configuration data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserBasePacletsDirectory)))
(def $UserDocumentsDirectory "$UserDocumentsDirectory gives your default \"documents\" directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserDocumentsDirectory)))
(def $UserURLBase "$UserURLBase gives the user identification element to be inserted in the URLs of cloud objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $UserURLBase)))
(def $Username "$Username gives the login name of the user who invoked the Wolfram Language kernel, as recorded by the operating system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Username)))
(def $Version "$Version is a string that gives the version of the Wolfram Language kernel you are running." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $Version)))
(def $VersionNumber "$VersionNumber is a real number which gives the current Wolfram Language kernel version number, and increases in successive versions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $VersionNumber)))
(def $VideoDecoders "$VideoDecoders gives the list of video decoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $VideoDecoders)))
(def $VideoEncoders "$VideoEncoders gives the list of available video encoders available for each video container." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $VideoEncoders)))
(def $VoiceStyles "$VoiceStyles gives the list of available voices for speech synthesis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $VoiceStyles)))
(def $WolframDocumentsDirectory "$WolframDocumentsDirectory gives the Wolfram subdirectory of the user's \"documents\" directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $WolframDocumentsDirectory)))
(def $WolframID "$WolframID gives the Wolfram ID of a currently logged-in user, or the user who owns a cloud object containing the code used for the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $WolframID)))
(def $WolframUUID "$WolframUUID gives the Wolfram UUID of a currently logged-in user, or the user who owns a cloud object containing the code used for the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote $WolframUUID)))
(def AASTriangle "AASTriangle[α, β, a] returns a filled triangle with angles α and β and side length a, where a is adjacent to one angle only." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AASTriangle)))
(def APIFunction "APIFunction[{name1type1, name2type2, …}, fun] represents an API with parameters namei that evaluates the function fun whenever it is called. The function fun is applied to name1val1, name2val2, …, where the vali are the settings for the parameters, interpreted as being of types typei.\nAPIFunction[{name1type1default1, …}, fun] takes the value of the parameter namei to be defaulti if it is not specified when the API is called.\nAPIFunction[params, fun, fmt] specifies that the result from applying fun should be returned in format fmt.\nAPIFunction[params, fun, {fmt, rform}] specifies that the result should be returned as a response of the form rform.\nAPIFunction[params, fun, {fmt, rform, failfmt}] specifies that in the event of failure, the result should be returned in format failfmt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote APIFunction)))
(def ARCHProcess "ARCHProcess[κ, {α1, …, αq}] represents an autoregressive conditionally heteroscedastic process of order q, driven by a standard white noise.\nARCHProcess[κ, {α1, …, αq}, init] represents an ARCH process with initial data init." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ARCHProcess)))
(def ARIMAProcess "ARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, v] represents an autoregressive integrated moving-average process y(t) such that its d ^th difference is a weakly stationary ARMAProcess[{a1, …, ap}, {b1, …, bq}, v].\nARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, Σ] represents a vector ARIMA process (y1(t), … , yn(t)) such that its (d, …, d)^th difference is a vector weakly stationary ARMAProcess.\nARIMAProcess[{a1, …, ap}, {d1, …, dn}, {b1, …, bq}, Σ] represents a vector ARIMA process (y1(t), … , yn(t)) such that its (d1, …, dn)^th difference is a vector weakly stationary ARMAProcess.\nARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, v, init] represents an ARIMA process with initial data init. \nARIMAProcess[c, …] represents an ARIMA process with a constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ARIMAProcess)))
(def ARMAProcess "ARMAProcess[{a1, …, ap}, {b1, …, bq}, v] represents a weakly stationary autoregressive moving-average process with AR coefficients ai, MA coefficients bj, and normal white noise variance v.\nARMAProcess[{a1, …, ap}, {b1, …, bq}, Σ] represents a weakly stationary vector ARMA process with coefficient matrices ai and bj and covariance matrix Σ. \nARMAProcess[{a1, …, ap}, {b1, …, bq}, v, init] represents an ARMA process with initial data init. \nARMAProcess[c, …] represents an ARMA process with a constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ARMAProcess)))
(def ARProcess "ARProcess[{a1, …, ap}, v] represents a weakly stationary autoregressive process of order p with normal white noise variance v.\nARProcess[{a1, …, ap}, Σ] represents a weakly stationary vector AR process with multinormal white noise covariance matrix Σ.\nARProcess[{a1, …, ap}, v, init] represents an AR process with initial data init. \nARProcess[c, …] represents an AR process with a constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ARProcess)))
(def ARPublish "ARPublish[expr] publish expr to an AR device.\nARPublish[{expr1, expr2, …}] display expri in a browsable gallery layout." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ARPublish)))
(def ASATriangle "ASATriangle[α, c, β] returns a filled triangle with angles α and β and side length c, and c is adjacent to both angles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ASATriangle)))
(def AbelianGroup "AbelianGroup[{n1, n2, …}] represents the direct product of the cyclic groups of degrees n1, n2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbelianGroup)))
(def Abort "Abort[] generates an interrupt to abort a computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Abort)))
(def AbortKernels "AbortKernels[] aborts evaluations running in all parallel subkernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbortKernels)))
(def AbortProtect "AbortProtect[expr] evaluates expr, saving any aborts until the evaluation is complete." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbortProtect)))
(def Above "Above is a symbol that represents the region above an object for purposes of placement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Above)))
(def Abs "Abs[z] gives the absolute value of the real or complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Abs)))
(def AbsArg "AbsArg[z] gives the list {Abs[z], Arg[z]} of the number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsArg)))
(def AbsArgPlot "AbsArgPlot[f, {x, xmin, xmax}] generates a plot of Abs[f] colored by Arg[f] as a function of x∈ from xmin to xmax.\nAbsArgPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions.\nAbsArgPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nAbsArgPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsArgPlot)))
(def AbsoluteCorrelation "AbsoluteCorrelation[v, w] gives the absolute correlation between the vectors v and w.\nAbsoluteCorrelation[a, b] gives the absolute cross-correlation matrix for the matrices a and b.\nAbsoluteCorrelation[a] gives the absolute correlation matrix for the matrix a.\nAbsoluteCorrelation[dist] gives the absolute correlation matrix for the multivariate symbolic distribution dist.\nAbsoluteCorrelation[dist, i, j] gives the (i, j)^th absolute correlation for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteCorrelation)))
(def AbsoluteCorrelationFunction "AbsoluteCorrelationFunction[data, hspec] estimates the absolute correlation function at lags hspec from data.\nAbsoluteCorrelationFunction[proc, hspec] represents the absolute correlation function at lags hspec for the random process proc. \nAbsoluteCorrelationFunction[proc, s, t] represents the absolute correlation function at times s and t for the random process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteCorrelationFunction)))
(def AbsoluteCurrentValue "AbsoluteCurrentValue[item] gives the absolute current value of item at a location in the Wolfram System and interface. \nAbsoluteCurrentValue[{item, spec}] gives the absolute current value for the feature of item specified by spec.\nAbsoluteCurrentValue[obj, item] gives the absolute current value of item associated with the object obj. \nAbsoluteCurrentValue[{obj1, obj2, …}, item] gives a list of the absolute current values associated with each of the obji." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteCurrentValue)))
(def AbsoluteDashing "AbsoluteDashing[{d1, d2, …}] is a graphics directive which specifies that lines which follow are to be drawn dashed, with successive segments having absolute lengths d1, d2, … (repeated cyclically). \nAbsoluteDashing[d] is equivalent to AbsoluteDashing[{d, d}]. \nAbsoluteDashing[{d1, d2, …}, offset] offsets the dashes by offset.\nAbsoluteDashing[{d1, d2, …}, offset, capform] sets the CapForm for individual dashes to capform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteDashing)))
(def AbsoluteFileName "AbsoluteFileName[\"name\"] gives the full absolute version of the name for a file in your filesystem." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteFileName)))
(def AbsoluteOptions "AbsoluteOptions[obj] gives the absolute settings of options used by the given object.\nAbsoluteOptions[obj, name] gives the absolute setting for the option name. \nAbsoluteOptions[obj, {name1, name2, …}] gives a list of the absolute settings for the options namei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteOptions)))
(def AbsolutePointSize "AbsolutePointSize[d] is a graphics directive which specifies that points which follow are to be shown if possible as circular regions with absolute diameter d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsolutePointSize)))
(def AbsoluteThickness "AbsoluteThickness[d] is a graphics directive which specifies that lines which follow are to be drawn with absolute thickness d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteThickness)))
(def AbsoluteTime "AbsoluteTime[] gives the total number of seconds since the beginning of January 1, 1900, in your time zone.\nAbsoluteTime[date] gives the absolute time specification corresponding to the given date specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteTime)))
(def AbsoluteTiming "AbsoluteTiming[expr] evaluates expr, returning a list of the absolute number of seconds in real time that have elapsed, together with the result obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AbsoluteTiming)))
(def AcceptanceThreshold "AcceptanceThreshold is an option that specifies the minimum threshold at which a result is considered acceptable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcceptanceThreshold)))
(def AccountingForm "AccountingForm[expr] prints with all numbers in expr given in standard accounting notation. \nAccountingForm[expr, n] prints with numbers given to n‐digit precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AccountingForm)))
(def Accumulate "Accumulate[list] gives a list of the successive accumulated totals of elements in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Accumulate)))
(def Accuracy "Accuracy[x] gives the effective number of digits to the right of the decimal point in the number x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Accuracy)))
(def AccuracyGoal "AccuracyGoal is an option for various numerical operations which specifies how many effective digits of accuracy should be sought in the final result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AccuracyGoal)))
(def AcousticAbsorbingValue "AcousticAbsorbingValue[pred, vars, pars] represents a time or frequency domain absorbing boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticAbsorbingValue[pred, vars, pars, lkeys] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticAbsorbingValue)))
(def AcousticImpedanceValue "AcousticImpedanceValue[pred, vars, pars] represents a time or frequency domain impedance boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticImpedanceValue[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticImpedanceValue)))
(def AcousticNormalVelocityValue "AcousticNormalVelocityValue[pred, vars, pars] represents a time or frequency domain normal velocity boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticNormalVelocityValue[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticNormalVelocityValue)))
(def AcousticPDEComponent "AcousticPDEComponent[vars, pars] yields an acoustic PDE term component with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticPDEComponent)))
(def AcousticPressureCondition "AcousticPressureCondition[pred, vars, pars] represents a time or frequency domain pressure boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticPressureCondition[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticPressureCondition)))
(def AcousticRadiationValue "AcousticRadiationValue[pred, vars, pars] represents a time or frequency radiation boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticRadiationValue[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticRadiationValue)))
(def AcousticSoundHardValue "AcousticSoundHardValue[pred, vars, pars] represents a time or frequency domain sound hard boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticSoundHardValue[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticSoundHardValue)))
(def AcousticSoundSoftCondition "AcousticSoundSoftCondition[pred, vars, pars] represents a time or frequency domain sound soft boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nAcousticSoundSoftCondition[pred, vars, pars, lkey] represents a time or frequency domain boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcousticSoundSoftCondition)))
(def ActionMenu "ActionMenu[name, {lbl1:>act1, lbl2:>act2, …}] represents an action menu with label name and with items labeled lbli that evaluates the expression acti if the corresponding item is chosen.\nActionMenu[name, {…, lbli{sublbl1:>subact1, sublbl2:>subact2, …}, …}] represents an action menu containing a submenu with label lbli containing items sublbli with actions subacti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActionMenu)))
(def Activate "Activate[expr] replaces all instances of Inactive[f] in expr with f.\nActivate[expr, patt] replaces only instances of Inactive[f] for which f matches the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Activate)))
(def ActivateResult "ActivateResult is an option for TruncateSum and other functions that specifies whether Inactive sums or other expressions should be activated before returning the final result of the computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActivateResult)))
(def ActiveClassification "ActiveClassification[f, {conf1, conf2, …}] gives an object representing the result of active classification obtained by using the function f to determine classes for the example configurations confi. \nActiveClassification[f, reg] generates configurations within the region specified by reg.\nActiveClassification[f, sampler] generates configurations by applying the function sampler.\nActiveClassification[f, {conf1, conf2, …}nsampler] applies the function nsampler to successively generate configurations starting from one of the confi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActiveClassification)))
(def ActiveClassificationObject "ActiveClassificationObject[…] represents the result of an ActiveClassification process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActiveClassificationObject)))
(def ActivePrediction "ActivePrediction[f, {conf1, conf2, …}] gives an object representing the result of active prediction obtained by using the function f to determine values for the example configurations confi.\nActivePrediction[f, reg] generates configurations within the region specified by reg.\nActivePrediction[f, sampler] generates configurations by applying the function sampler.\nActivePrediction[f, {conf1, conf2, …}nsampler] applies the function nsampler to successively generate configurations starting from one of the confi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActivePrediction)))
(def ActivePredictionObject "ActivePredictionObject[…] represents the result of an ActivePrediction process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActivePredictionObject)))
(def ActiveStyle "ActiveStyle is an option for Hyperlink and related constructs that specifies styles to add when the constructs are active, typically as a result of the mouse being over them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ActiveStyle)))
(def AcyclicGraphQ "AcyclicGraphQ[g] yields True if the graph g is an acyclic graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AcyclicGraphQ)))
(def AddSides "AddSides[rel, x] adds x to each side of the equation or inequality rel.\nAddSides[rel1, rel2] adds the corresponding sides of two equations or inequalities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AddSides)))
(def AddTo "x+=dx adds dx to x and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AddTo)))
(def AddToSearchIndex "AddToSearchIndex[obj, content] adds the specified content to the existing search index object obj. \nAddToSearchIndex[obj, {content1, …}] adds all the contenti to obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AddToSearchIndex)))
(def AddToVectorDatabase "AddToVectorDatabase[db, {vec1, …}] adds a list of vectors veci to the VectorDatabaseObject[…] db.\nAddToVectorDatabase[db, {vec1, …}{val1, …}] adds new vector veci and associated value vali to the database db." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AddToVectorDatabase)))
(def AddUsers "AddUsers[group, {user1, …}] adds the users useri to the permissions group group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AddUsers)))
(def AdjacencyGraph "AdjacencyGraph[amat] gives the graph with adjacency matrix amat.\nAdjacencyGraph[{v1, v2, …}, amat] gives the graph with vertices vi and adjacency matrix amat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjacencyGraph)))
(def AdjacencyList "AdjacencyList[g, v] gives a list of vertices adjacent to vertex v.\nAdjacencyList[g, patt] gives a list of vertices adjacent to vertices that match the pattern patt.\nAdjacencyList[g, patt, d] gives a list of vertices that are at distance at most d.\nAdjacencyList[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjacencyList)))
(def AdjacencyMatrix "AdjacencyMatrix[g] gives the vertex–vertex adjacency matrix of the graph g.\nAdjacencyMatrix[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjacencyMatrix)))
(def AdjacentMeshCells "AdjacentMeshCells[mr, cellspec, d] gives cells of dimension d adjacent to the cell specified by cellspec in the mesh mr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjacentMeshCells)))
(def Adjugate "Adjugate[m] gives the adjugate of a square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Adjugate)))
(def AdjustTimeSeriesForecast "AdjustTimeSeriesForecast[tproc, forecast, newdata] adjusts forecast using new observations newdata according to the time series model tproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjustTimeSeriesForecast)))
(def AdjustmentBox "AdjustmentBox[box, opts] is a low-level box construct which displays with the placement of box adjusted using the options given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjustmentBox)))
(def AdjustmentBoxOptions "AdjustmentBoxOptions is an option that specifies settings for AdjustmentBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdjustmentBoxOptions)))
(def AdministrativeDivisionData "AdministrativeDivisionData[entity, property] gives the value of the specified property for the administrative division entity.\nAdministrativeDivisionData[{entity1, entity2, …}, property] gives a list of property values for the specified administrative division names.\nAdministrativeDivisionData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AdministrativeDivisionData)))
(def AffineHalfSpace "AffineHalfSpace[{p1, …, p k+1}, w] represents AffineSpace[{p1, …, p k+1}] extended in the direction w.\nAffineHalfSpace[p, {v1, …, vk}, w] represents AffineSpace[p, {v1, …, vk}] extended in the direction w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AffineHalfSpace)))
(def AffineSpace "AffineSpace[{p1, …, p k+1}] represents the affine space passing through the points pi.\nAffineSpace[p, {v1, …, vk}] represents the affine space passing through p in the directions vi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AffineSpace)))
(def AffineStateSpaceModel "AffineStateSpaceModel[{a, b, c, d}, x] represents the affine state-space model x'(t)a(x(t))+b (x(t)).u(t), y(t)=c(x(t))+d (x(t)).u(t).\nAffineStateSpaceModel[sys] gives an affine state-space model corresponding to the system model sys.\nAffineStateSpaceModel[eqns, {{x1, x10}, …}, {{u1, u10}, …}, {g1, …}, t] gives the affine state-space model obtained by Taylor input linearization about the dependent variable xi at x i0 and input uj at uj 0 of the differential equations eqns with outputs gi and independent variable t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AffineStateSpaceModel)))
(def AffineTransform "AffineTransform[m] gives a TransformationFunction that represents an affine transform that maps r to m.r. \nAffineTransform[{m, v}] gives an affine transform that maps r to m.r+v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AffineTransform)))
(def After "After is a symbol that represents the region after an object for purposes of placement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote After)))
(def AggregateRows "AggregateRows[tab, {key1f1, …}] computes different aggregation functions fi[tab] and assigns them to different keys keyi.\nAggregateRows[tab, fspec, gspec] forms groups by the distinct values given by gspec and then aggregates them using fspec.\nAggregateRows[fspec] represents an operator form for the two-argument version of AggregateRows.\nAggregateRows[fspec, gspec] represents an operator form for the three-argument version of AggregateRows." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AggregateRows)))
(def AggregatedEntityClass "AggregatedEntityClass[class, \"prop\"->f] represents an entity class containing a single entity with the property prop whose value is the result of applying the function f to the whole specified entity class.\nAggregatedEntityClass[class, {prop1f1, prop2f2, …}] constructs multiple properties propi obtained by applying fi to class.\nAggregatedEntityClass[class, propspec, gprop] forms groups of elements of class according to their values of the property gprop, then generates an entity class with an entity for each of these groups. \nAggregatedEntityClass[class, propspec, \"pname\"->f] forms groups according to the values obtained by applying the entity function f, with the resulting property named pname.\nAggregatedEntityClass[class, propspec, {gspec1, gspec2, …}] forms groups for which the set of values defined by the gspeci is distinct." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AggregatedEntityClass)))
(def AggregationLayer "AggregationLayer[f] represents a layer that aggregates an array of arbitrary rank into a vector, using the function f.\nAggregationLayer[f, n] aggregates an array at level n.\nAggregationLayer[f, n1;;n2] aggregates an array at levels n1 through n2.\nAggregationLayer[f, {n1, n2, …}] aggregates an array at levels n1, n2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AggregationLayer)))
(def AirPressureData "AirPressureData[] gives the most recent measurement for air pressure near the current location.\nAirPressureData[datespec] gives the air pressure value for the specified time near the current location.\nAirPressureData[locationspec] gives the most recent measurement for air pressure near the specified locations.\nAirPressureData[locationspec, datespec] gives the value or values for the specified date and location.\nAirPressureData[{{location1, date1}, {location2, date2}, …}] gives values for all specified locations on the specified dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AirPressureData)))
(def AirSoundAttenuation "AirSoundAttenuation[spec, frequency] returns the sound attenuation coefficient in moist air for the specified parameters spec for frequency.\nAirSoundAttenuation[spec, frequency, distance] returns the sound attenuation factor for the specified parameters at distance.\nAirSoundAttenuation[spec, frequency, distance, sl] returns the sound level at distance given the source sound level sl.\nAirSoundAttenuation[spec, audio, distance] transforms audio based on the distance from the source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AirSoundAttenuation)))
(def AirTemperatureData "AirTemperatureData[] gives the most recent measurement for air temperature near the current location.\nAirTemperatureData[datespec] gives the air temperature value for the specified time near the current location.\nAirTemperatureData[locationspec] gives the most recent measurement for air temperature near the specified location.\nAirTemperatureData[locationspec, datespec] gives the value or values for the specified date and location.\nAirTemperatureData[{{location1, date1}, {location2, date2}, …}] gives values for all specified locations on the specified dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AirTemperatureData)))
(def AircraftData "AircraftData[entity, property] gives the value of the specified property for the aircraft entity.\nAircraftData[{entity1, entity2, …}, property] gives a list of property values for the specified aircraft entities.\nAircraftData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AircraftData)))
(def AirportData "AirportData[entity, property] gives the value of the specified property for the airport entity.\nAirportData[{entity1, entity2, …}, property] gives a list of property values for the specified airport entities.\nAirportData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AirportData)))
(def AiryAi "AiryAi[z] gives the Airy function Ai (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryAi)))
(def AiryAiPrime "AiryAiPrime[z] gives the derivative of the Airy function Ai^′ (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryAiPrime)))
(def AiryAiZero "AiryAiZero[k] represents the k ^th zero of the Airy function Ai (x).\nAiryAiZero[k, x0] represents the k ^th zero less than x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryAiZero)))
(def AiryBi "AiryBi[z] gives the Airy function Bi (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryBi)))
(def AiryBiPrime "AiryBiPrime[z] gives the derivative of the Airy function Bi^′ (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryBiPrime)))
(def AiryBiZero "AiryBiZero[k] represents the k ^th zero of the Airy function Bi (x).\nAiryBiZero[k, x0] represents the k ^th zero less than x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AiryBiZero)))
(def AlgebraicIntegerQ "AlgebraicIntegerQ[a] yields True if a is an algebraic integer, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicIntegerQ)))
(def AlgebraicNumber "AlgebraicNumber[θ, {c0, c1, …, cn}] represents the algebraic number in the field [θ] given by c0+c1 θ +…+cn θ^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicNumber)))
(def AlgebraicNumberDenominator "AlgebraicNumberDenominator[a] gives the smallest positive integer n such that n a is an algebraic integer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicNumberDenominator)))
(def AlgebraicNumberNorm "AlgebraicNumberNorm[a] gives the norm of the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicNumberNorm)))
(def AlgebraicNumberPolynomial "AlgebraicNumberPolynomial[a, x] gives the polynomial in x corresponding to the AlgebraicNumber object a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicNumberPolynomial)))
(def AlgebraicNumberTrace "AlgebraicNumberTrace[a] gives the trace of the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicNumberTrace)))
(def AlgebraicUnitQ "AlgebraicUnitQ[a] yields True if a is an algebraic unit, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlgebraicUnitQ)))
(def Algebraics "Algebraics represents the domain of algebraic numbers, as in x∈Algebraics." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Algebraics)))
(def Alignment "Alignment is an option which specifies how the contents of a displayed object should be aligned within the available area in the object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Alignment)))
(def AlignmentPoint "AlignmentPoint is an option which specifies how objects should by default be aligned when they appear in Inset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlignmentPoint)))
(def All "All is a setting used for certain options. In Part and related functions, All specifies all parts at a particular level." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote All)))
(def AllMatch "AllMatch[{e1, e2, …}, form] yields True if ei matches the pattern form for all of the ei.\nAllMatch[expr, form, level] tests parts of expr at level level.\nAllMatch[form] represents an operator form of AllMatch that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllMatch)))
(def AllSameBy "AllSameBy[{e1, e2, …}, f] tests whether all the f[ei] are the same.\nAllSameBy[f] represents an operator form of AllSameBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllSameBy)))
(def AllTrue "AllTrue[{e1, e2, …}, test] yields True if test[ei] is True for all of the ei.\nAllTrue[expr, test, level] tests parts of expr at level level.\nAllTrue[test] represents an operator form of AllTrue that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllTrue)))
(def AllowGroupClose "AllowGroupClose is an option for Cell that specifies whether a cell group can be closed normally." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowGroupClose)))
(def AllowInlineCells "AllowInlineCells is an option for SelectedCells, Cell, and related constructs that specifies whether inline cells are permitted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowInlineCells)))
(def AllowLooseGrammar "AllowLooseGrammar is an option for GrammarRules and related functions that specifies whether grammatical \"fluff\" should automatically be ignored in applying grammar rules." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowLooseGrammar)))
(def AllowReverseGroupClose "AllowReverseGroupClose is an option for Cell that specifies whether a cell group can be reverse closed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowReverseGroupClose)))
(def AllowVersionUpdate "AllowVersionUpdate is an option for PacletInstall and PacletInstallSubmit that specifies whether a newer paclet version should be installed if an older version is already installed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowVersionUpdate)))
(def AllowedCloudExtraParameters "AllowedCloudExtraParameters is an option for APIFunction and related functions that specifies whether parameters that affect overall cloud execution should be accepted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowedCloudExtraParameters)))
(def AllowedCloudParameterExtensions "AllowedCloudParameterExtensions is an option for APIFunction and related functions that specifies what extensions to allow for API or other input parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowedCloudParameterExtensions)))
(def AllowedDimensions "AllowedDimensions is an option for Grid and related functions that specifies the allowed minimum and maximum dimensions of the Grid under interactive editing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowedDimensions)))
(def AllowedFrequencyRange "AllowedFrequencyRange is an option for audio and signal processing functions that specifies the range of frequencies of interest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowedFrequencyRange)))
(def AllowedHeads "AllowedHeads is an option that specifies the heads of subexpressions into which a function may descend." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AllowedHeads)))
(def AlphaChannel "AlphaChannel[color] returns the opacity of color.\nAlphaChannel[image] returns the alpha channel of image.\nAlphaChannel[video] returns a video containing the alpha channel of the frames in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlphaChannel)))
(def Alphabet "Alphabet[] gives a list of the lowercase letters a through z in the English alphabet.\nAlphabet[type] gives the alphabet for the language or class type.\nAlphabet[type, prop] gives the alphabet defined by prop for the language or class type ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Alphabet)))
(def AlphabeticOrder "AlphabeticOrder[\"string1\", \"string2\"] gives 1 if \"string1\" appears before \"string2\" in alphabetical order, -1 if it is after, and 0 if it is identical. \nAlphabeticOrder[\"string1\", \"string2\", lang] uses an ordering suitable for the language lang.\nAlphabeticOrder[lang] represents an operator form that compares strings when applied to \"string1\", \"string2\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlphabeticOrder)))
(def AlphabeticSort "AlphabeticSort[list] sorts the elements of list into alphabetical order.\nAlphabeticSort[list, lang] sorts using an ordering suitable for the language lang." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlphabeticSort)))
(def AlternatingFactorial "AlternatingFactorial[n] gives the alternating factorial af (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlternatingFactorial)))
(def AlternatingGroup "AlternatingGroup[n] represents the alternating group of degree n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlternatingGroup)))
(def AlternativeHypothesis "AlternativeHypothesis is an option for hypothesis testing functions like LocationTest that specifies the alternative hypothesis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AlternativeHypothesis)))
(def Alternatives "p1|p2|… is a pattern object that represents any of the patterns pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Alternatives)))
(def AltitudeMethod "AltitudeMethod is an option for SunPosition, MoonPosition, and related functions that determines whether to take atmospheric refraction into account when computing altitude." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AltitudeMethod)))
(def AmbientLight "AmbientLight[col] is a three-dimensional graphics directive that specifies the uniform ambient light of color col to use in coloring 3D surfaces." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AmbientLight)))
(def AmbiguityFunction "AmbiguityFunction is an option for SemanticInterpretation, Interpreter, and related functions that specifies how to resolve ambiguities generated during semantic interpretation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AmbiguityFunction)))
(def AmbiguityList "AmbiguityList[{expr1, expr2, …}] represents possible results derived from an ambiguous semantic interpretation.\nAmbiguityList[{expr1, expr2, …}, \"string\"] represents possible results from semantic interpretation of an input string.\nAmbiguityList[{expr1, expr2, …}, \"string\", {assoc1, assoc2, …}] includes a sequence of associations giving details of the interpretations used to obtain the expri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AmbiguityList)))
(def AnatomyData "AnatomyData[entity, property] gives the value of the specified property for the anatomical structure entity.\nAnatomyData[{entity1, entity2, …}, property] gives a list of property values for the specified anatomical structure entities.\nAnatomyData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnatomyData)))
(def AnatomyPlot3D "AnatomyPlot3D[primitives, options] represents a three-dimensional graphical image that works with anatomical entities as well as standard 3D graphics primitives and directives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnatomyPlot3D)))
(def AnatomySkinStyle "AnatomySkinStyle is an option of AnatomyPlot3D that specifies what style to use for automatically included skin subparts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnatomySkinStyle)))
(def AnatomyStyling "AnatomyStyling[g] is a graphics directive used in AnatomyPlot3D that specifies how anatomy entity‐based graphics objects are to be drawn using the graphics directive or association of directives g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnatomyStyling)))
(def AnchoredSearch "AnchoredSearch is an option for Find and FindList that specifies whether the text searched for must be at the beginning of a record." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnchoredSearch)))
(def And "e1&&e2&&… is the logical AND function. It evaluates its arguments in order, giving False immediately if any of them are False, and True if they are all True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote And)))
(def AndersonDarlingTest "AndersonDarlingTest[data] tests whether data is normally distributed using the Anderson–Darling test.\nAndersonDarlingTest[data, dist] tests whether data is distributed according to dist using the Anderson–Darling test.\nAndersonDarlingTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AndersonDarlingTest)))
(def AngerJ "AngerJ[ν, z] gives the Anger function Jν (z).\nAngerJ[ν, μ, z] gives the associated Anger function J_ν^μ(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AngerJ)))
(def AngleBisector "AngleBisector[{q1, p, q2}] gives the bisector of the interior angle at p formed by the triangle with vertex points p, q1 and q2.\nAngleBisector[{q1, p, q2}, \"type\"] gives the angle bisector of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AngleBisector)))
(def AngleBracket "AngleBracket[x, y, …] displays as 〈x, y, …〉." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AngleBracket)))
(def AnglePath "AnglePath[{θ1, θ2, θ3, …}] gives the list of 2D coordinates corresponding to a path that starts at {0, 0}, then takes a series of steps of unit length at successive relative angles θi. \nAnglePath[{{r1, θ1}, {r2, θ2}, {r3, θ3}, …}] takes successive steps of lengths ri. \nAnglePath[θ0, {step1, step2, …}] starts at angle θ0 with respect to the x axis.\nAnglePath[{x, y}, {step1, step2, …}] starts at the point {x, y} with initial angle 0 with respect to the x axis.\nAnglePath[{{x, y}, θ0}, {step1, step2, …}] starts at {x, y} with initial angle θ0 with respect to the x axis.\nAnglePath[{{x, y}, {dx, dy}}, {step1, step2, …}] takes the first step to go from {x, y} to {x+dx, y+dy}.\nAnglePath[init, steps, form] returns at each step the data of the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnglePath)))
(def AnglePath3D "AnglePath3D[{{α1, β1, γ1}, {α2, β2, γ2}, …}] gives the list of 3D coordinates of a path of an object that starts at {0, 0, 0}, then takes a series of steps of unit length, each in the direction of the x axis obtained after successive rotation of the object by the Euler angles αi, βi, γi.\nAnglePath3D[{{α1, β1}, {α2, β2}, …}] assumes the Euler angles γi to be 0.\nAnglePath3D[{mat1, mat2, …}] takes the successive rotations to be specified by the 3D rotation matrices mati. \nAnglePath3D[{{r1, rot1}, {r2, rot2}, …}] takes successive steps of length ri with Euler angles or rotation matrices specified by roti.\nAnglePath3D[{x0, y0, z0}, steps] starts at the point {x0, y0, z0}.\nAnglePath3D[{rot0}, steps] starts in the x axis direction specified by rotating the object according to Euler angles or rotation matrix rot0.\nAnglePath3D[{{x0, y0, z0}, rot0}, steps] starts at point {x0, y0, z0} with the x axis direction specified by rot0.\nAnglePath3D[init, steps, form] returns at each step the data of the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnglePath3D)))
(def AngleVector "AngleVector[θ] gives the list representing the 2D unit vector at angle θ relative to the x axis.\nAngleVector[{r, θ}] gives the list representing the 2D vector of length r at angle θ.\nAngleVector[{x, y}, θ] gives the result of starting from the point {x, y}, then going a unit distance at angle θ.\nAngleVector[{x, y}, {r, θ}] gives the result of starting from the point {x, y}, then going distance r at angle θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AngleVector)))
(def AngularGauge "AngularGauge[value] draws a gauge showing value in the range 0 to 1.\nAngularGauge[value, {min, max}] draws a gauge showing value in a range of min to max.\nAngularGauge[Dynamic[value], …] allows value to be set interactively using the gauge.\nAngularGauge[{value1, value2, …}, …] draws a gauge showing multiple values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AngularGauge)))
(def Animate "Animate[expr, {u, umin, umax}] generates an animation of expr in which u varies continuously from umin to umax. \nAnimate[expr, {u, umin, umax, du}] takes u to vary in steps du. \nAnimate[expr, {u, {u1, u2, …}}] makes u take on discrete values u1, u2, …. \nAnimate[expr, {u, …}, {v, …}, …] varies all the variables u, v, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Animate)))
(def AnimatedImage "AnimatedImage[{image1, image2, …}] generates an animation whose frames are the successive imagei. \nAnimatedImage[file] represents an animated image from file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimatedImage)))
(def AnimationDirection "AnimationDirection is an option which specifies the direction to run an animation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationDirection)))
(def AnimationRate "AnimationRate is an option for Animate and Animator that specifies at what rate an animation should run, in units per second." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationRate)))
(def AnimationRepetitions "AnimationRepetitions is an option to Animate and related functions that specifies how many times the animation they create runs before stopping." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationRepetitions)))
(def AnimationRunTime "AnimationRunTime is an option to Animator and related functions that indicates how long the animation has been continuously running." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationRunTime)))
(def AnimationRunning "AnimationRunning is an option to Animate and related functions that specifies whether the animation they create is running." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationRunning)))
(def AnimationTimeIndex "AnimationTimeIndex is an option to Animator and related functions that specifies the current time index for the animator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationTimeIndex)))
(def AnimationVideo "AnimationVideo[fexpr, {u, umin, umax}] generates a video of fexpr in which u varies from umin to umax. \nAnimationVideo[fexpr, {u, umin, umax, du}] takes u to vary in steps du. \nAnimationVideo[fexpr, {u, {u1, u2, …}}] makes u take on values u1, u2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnimationVideo)))
(def Animator "Animator[u] represents an object that displays with the value of u being continually increased from 0 to 1 with time. \nAnimator[u, {umin, umax}] makes u vary from umin to umax. \nAnimator[u, {umin, umax, du}] makes u vary in steps du. \nAnimator[u, {umin, umax}, ups] makes the value of u increase at a rate of ups units per second." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Animator)))
(def Annotate "Annotate[obj, keyvalue] sets the annotation keyvalue for the object obj.\nAnnotate[{obj, itemspec}, keyvalue] sets the annotation for the items in obj specified by itemspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Annotate)))
(def Annotation "Annotation[expr, data] represents an expression expr, with annotation data.\nAnnotation[expr, data, \"type\"] specifies the type of annotation being given.\nAnnotation[items, keyvalue] associates keyvalue pairs with items in objects such as Graph, MeshRegion etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Annotation)))
(def AnnotationDelete "AnnotationDelete[obj] deletes all annotations of the object obj.\nAnnotationDelete[{obj, itemspec}] deletes all annotations of the items of obj specified by itemspec.\nAnnotationDelete[spec, key] deletes the annotation key specified by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnnotationDelete)))
(def AnnotationKeys "AnnotationKeys[obj] lists all annotation keys available for the object obj.\nAnnotationKeys[{obj, itemspec}] lists all annotation keys available for the items specified by itemspec in obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnnotationKeys)))
(def AnnotationRules "AnnotationRules is an option that allows specification of annotations to objects and items in objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnnotationRules)))
(def AnnotationValue "AnnotationValue[obj, key] gives the annotation value associated with key for the object obj.\nAnnotationValue[{obj, itemspec}, key] gives the annotation value associated with key for items specified by itemspec in obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnnotationValue)))
(def Annuity "Annuity[p, t] represents an annuity of fixed payments p made over t periods.\nAnnuity[p, t, q] represents a series of payments occurring at time intervals q.\nAnnuity[{p, {pinitial, pfinal}}, t, q] represents an annuity with the specified initial and final payments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Annuity)))
(def AnnuityDue "AnnuityDue[p, t] represents an annuity due of fixed payments p made over t periods.\nAnnuityDue[p, t, q] represents a series of payments occurring at time intervals q.\nAnnuityDue[{p, {pinitial, pfinal}}, t, q] represents an annuity due with the specified initial and final payments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnnuityDue)))
(def Annulus "Annulus[{x, y}, {rinner, router}] represents an annulus centered at {x, y} with inner radius rinner and outer radius router.\nAnnulus[{x, y}, {rinner, router}, {θ1, θ2}] represents an annulus from angle θ1 to θ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Annulus)))
(def AnomalyDetection "AnomalyDetection[{example1, example2, …}] generates an AnomalyDetectorFunction[…] based on the examples given.\nAnomalyDetection[LearnedDistribution[…]] generates an anomaly detector based on the given distribution.\nAnomalyDetection[True{example11, example12, …}, False{example21, …}] can be used to indicate which examples should be considered anomalous." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnomalyDetection)))
(def AnomalyDetector "AnomalyDetector is an option for functions such as Classify that specifies an anomaly detector for them to include." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnomalyDetector)))
(def AnomalyDetectorFunction "AnomalyDetectorFunction[…] represents a function generated by AnomalyDetection for detecting whether data is anomalous or not." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnomalyDetectorFunction)))
(def Anonymous "Anonymous represents an option or other value that indicates the absence of a name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Anonymous)))
(def Antialiasing "Antialiasing is an option that specifies whether antialiasing should be done." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Antialiasing)))
(def Antihermitian "Antihermitian[{1, 2}] represents the symmetry of an antihermitian matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Antihermitian)))
(def AntihermitianMatrixQ "AntihermitianMatrixQ[m] gives True if m is explicitly antihermitian, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AntihermitianMatrixQ)))
(def Antisymmetric "Antisymmetric[{s1, …, sn}] represents the symmetry of a tensor that is antisymmetric in the slots si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Antisymmetric)))
(def AntisymmetricMatrixQ "AntisymmetricMatrixQ[m] gives True if m is explicitly antisymmetric, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AntisymmetricMatrixQ)))
(def Antonyms "Antonyms[\"word\"] returns the antonyms associated with the specified word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Antonyms)))
(def AnyMatch "AnyMatch[{e1, e2, …}, form] yields True if ei matches the pattern form for any of the ei.\nAnyMatch[expr, form, level] tests parts of expr at level level.\nAnyMatch[form] represents an operator form of AnyMatch that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnyMatch)))
(def AnyOrder "AnyOrder[p1, p2, …] is a grammar rules pattern object that represents a sequence of elements matching p1, p2, … in any order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnyOrder)))
(def AnySubset "AnySubset[{c1, c2, …}] represents an element in an interpreter or form that accepts any subset of the choices ci. \nAnySubset[{lab1c1, lab2c2, …}] accepts any subset of the labi, yielding the corresponding ci as results.\nAnySubset[EntityClass[\"type\", \"class\"]] accepts any subset of the entities in the specified entity class.\nAnySubset[choices, max] allows at most max choices to be selected.\nAnySubset[choices, {min, max}] allows at least min and at most max choices to be selected." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnySubset)))
(def AnyTrue "AnyTrue[{e1, e2, …}, test] yields True if test[ei] is True for any of the ei.\nAnyTrue[expr, test, level] tests parts of expr at level level.\nAnyTrue[test] represents an operator form of AnyTrue that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AnyTrue)))
(def Apart "Apart[expr] rewrites a rational expression as a sum of terms with minimal denominators. \nApart[expr, var] treats all variables other than var as constants." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Apart)))
(def ApartSquareFree "ApartSquareFree[expr] rewrites a rational expression as a sum of terms whose denominators are powers of square-free polynomials. \nApartSquareFree[expr, var] treats all variables other than var as constants." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ApartSquareFree)))
(def Appearance "Appearance is an option for displayed objects such as Button and Slider that specifies the general type of appearance they should have." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Appearance)))
(def AppearanceElements "AppearanceElements is an option for functions like Manipulate that specifies what elements should be included in the displayed form of the object generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppearanceElements)))
(def AppearanceRules "AppearanceRules is an option for form and page generation functions that specifies the overall appearance of the generated object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppearanceRules)))
(def AppellF1 "AppellF1[a, b1, b2, c, x, y] is the Appell hypergeometric function of two variables F1 (a;b1, b2;c;x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppellF1)))
(def AppellF2 "AppellF2[a, b1, b2, c1, c2, x, y] is the Appell hypergeometric function of two variables F2 (a;b1, b2;c1, c2;x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppellF2)))
(def AppellF3 "AppellF3[a1, a2, b1, b2, c, x, y] is the Appell hypergeometric function of two variables F3 (a;b1, b2;c1, c2;x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppellF3)))
(def AppellF4 "AppellF4[a, b, c1, c2, x, y] is the Appell hypergeometric function of two variables F4 (a;b;c1, c2;x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppellF4)))
(def Append "Append[expr, elem] gives expr with elem appended. \nAppend[elem] represents an operator form of Append that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Append)))
(def AppendLayer "AppendLayer[] represents a net layer that takes an input array and appends another array to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppendLayer)))
(def AppendTo "AppendTo[x, elem] appends elem to the value of x, and resets x to the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AppendTo)))
(def Application "f∖[Application]g or Application[f, g] represents the formal application of f to g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Application)))
(def Apply "f@@expr or Apply[f, expr] replaces the head of expr by f. \nf@@@expr or Apply[f, expr, {1}] replaces heads at level 1 of expr by f.\nApply[f, expr, levelspec] replaces heads in parts of expr specified by levelspec. \nApply[f] represents an operator form of Apply that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Apply)))
(def ApplyReaction "ApplyReaction[rxn, mols] applies the pattern reaction rxn to the list of molecules mols, returning a single list of products.\nApplyReaction[rxn, mols, n] returns up to n lists of products.\nApplyReaction[rxn, mols, {map1, …}] returns a single set of products, using mapi to map the atoms in the i ^th molecule to the i ^th reactant.\nApplyReaction[rxn] represents an operator form of ApplyReaction that can be applied to a list of molecules." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ApplyReaction)))
(def ApplySides "ApplySides[f, rel] applies f to each side of the equation or inequality rel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ApplySides)))
(def ApplyTo "ApplyTo[x, f] or x//=f computes f[x] and resets x to the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ApplyTo)))
(def ArcCos "ArcCos[z] gives the arc cosine cos^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCos)))
(def ArcCosDegrees "ArcCosDegrees[z] gives the arc cosine in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCosDegrees)))
(def ArcCosh "ArcCosh[z] gives the inverse hyperbolic cosine cosh^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCosh)))
(def ArcCot "ArcCot[z] gives the arc cotangent cot^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCot)))
(def ArcCotDegrees "ArcCotDegrees[z] gives the arc cotangent in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCotDegrees)))
(def ArcCoth "ArcCoth[z] gives the inverse hyperbolic cotangent coth^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCoth)))
(def ArcCsc "ArcCsc[z] gives the arc cosecant csc^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCsc)))
(def ArcCscDegrees "ArcCscDegrees[z] gives the arc cosecant in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCscDegrees)))
(def ArcCsch "ArcCsch[z] gives the inverse hyperbolic cosecant csch^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCsch)))
(def ArcCurvature "ArcCurvature[{x1, …, xn}, t] gives the curvature of the parametrized curve whose Cartesian coordinates xi are functions of t.\nArcCurvature[{x1, …, xn}, t, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcCurvature)))
(def ArcLength "ArcLength[reg] gives the length of the one-dimensional region reg.\nArcLength[{x1, …, xn}, {t, tmin, tmax}] gives the length of the parametrized curve whose Cartesian coordinates xi are functions of t.\nArcLength[{x1, …, xn}, {t, tmin, tmax}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcLength)))
(def ArcSec "ArcSec[z] gives the arc secant sec^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSec)))
(def ArcSecDegrees "ArcSecDegrees[z] gives the arc secant in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSecDegrees)))
(def ArcSech "ArcSech[z] gives the inverse hyperbolic secant sech^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSech)))
(def ArcSin "ArcSin[z] gives the arc sine sin^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSin)))
(def ArcSinDegrees "ArcSinDegrees[z] gives the arc sine in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSinDegrees)))
(def ArcSinDistribution "ArcSinDistribution[{xmin, xmax}] represents the arc sine distribution supported between xmin and xmax.\nArcSinDistribution[] represents the arc sine distribution supported between zero and one." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSinDistribution)))
(def ArcSinh "ArcSinh[z] gives the inverse hyperbolic sine sinh^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcSinh)))
(def ArcTan "ArcTan[z] gives the arc tangent tan^-1 (z) of the complex number z. \nArcTan[x, y] gives the arc tangent of y/x, taking into account which quadrant the point (x, y) is in." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcTan)))
(def ArcTanDegrees "ArcTanDegrees[z] gives the arc tangent in degrees of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcTanDegrees)))
(def ArcTanh "ArcTanh[z] gives the inverse hyperbolic tangent tanh^-1 (z) of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArcTanh)))
(def Area "Area[reg] gives the area of the two-dimensional region reg.\nArea[{x1, …, xn}, {s, smin, smax}, {t, tmin, tmax}] gives the area of the parametrized surface whose Cartesian coordinates xi are functions of s and t.\nArea[{x1, …, xn}, {s, smin, smax}, {t, tmin, tmax}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Area)))
(def Arg "Arg[z] gives the argument of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Arg)))
(def ArgMax "ArgMax[f, x] gives a position xmax at which f is maximized.\nArgMax[f, {x, y, …}] gives a position {xmax, ymax, …} at which f is maximized.\nArgMax[{f, cons}, {x, y, …}] gives a position at which f is maximized subject to the constraints cons. \nArgMax[…, x∈rdom] constrains x to be in the region or domain rdom.\nArgMax[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArgMax)))
(def ArgMin "ArgMin[f, x] gives a position xmin at which f is minimized.\nArgMin[f, {x, y, …}] gives a position {xmin, ymin, …} at which f is minimized.\nArgMin[{f, cons}, {x, y, …}] gives a position at which f is minimized subject to the constraints cons. \nArgMin[…, x∈rdom] constrains x to be in the region or domain rdom.\nArgMin[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArgMin)))
(def ArgumentsOptions "ArgumentsOptions[f[args], n] tries to separate args into a list of n positional arguments followed by a list of valid options for f.\nArgumentsOptions[f[args], {min, max}] requires the number of positional arguments to be between min and max.\nArgumentsOptions[f[args], spec, assoc] modifies the behavior based on the information in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArgumentsOptions)))
(def ArithmeticGeometricMean "ArithmeticGeometricMean[a, b] gives the arithmetic‐geometric mean of a and b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArithmeticGeometricMean)))
(def Around "Around[x, δ] represents an approximate number or quantity with a value around x and an uncertainty δ.\nAround[x, {δ-, δ+}] represents a number or quantity with a value around x and asymmetric uncertainties δ-, δ+.\nAround[dist] gives an approximate number or quantity around the mean of the distribution dist, with an uncertainty corresponding to the standard deviation of the distribution.\nAround[list] gives an approximate object around the mean of the elements of list and with an uncertainty corresponding to their standard deviation.\nAround[s] gives an approximate object derived from the number, interval or string specification s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Around)))
(def AroundReplace "AroundReplace[expr, {s1Around[x1, δ1], s2Around[x2, δ2], …}] propagates uncertainty in expr by replacing all occurrences of si by Around[xi, δi].\nAroundReplace[expr, rules, n] propagates uncertainty in expr using a series expansion to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AroundReplace)))
(def Array "Array[f, n] generates a list of length n, with elements f[i]. \nArray[f, n, r] generates a list using the index origin r.\nArray[f, n, {a, b}] generates a list using n values from a to b.\nArray[f, {n1, n2, …}] generates an n1×n2×… array of nested lists, with elements f[i1, i2, …]. \nArray[f, {n1, n2, …}, {r1, r2, …}] generates a list using the index origins ri (default 1). \nArray[f, {n1, n2, …}, {{a1, b1}, {a2, b2}, …}] generates a list using ni values from ai to bi.\nArray[f, dims, origin, h] uses head h, rather than List, for each level of the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Array)))
(def ArrayComponents "ArrayComponents[array] gives an array in which all identical elements of array are replaced by an integer index representing the component in which the element lies.\nArrayComponents[array, level] finds the identical elements at the specified level in array\nArrayComponents[array, level, rules] uses a rule or a list of rules for specifying the labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayComponents)))
(def ArrayDepth "ArrayDepth[expr] gives the depth to which expr is a full array, with all the parts at a particular level having the same length." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayDepth)))
(def ArrayDot "ArrayDot[a, b, k] computes the product of arrays a and b obtained by summing up products of terms over the last k dimensions of a and the first k dimensions of b.\nArrayDot[a, b, {{s1, t1}, {s2, t2}, …}] computes the product of arrays a and b obtained by summing up products of terms over the pairs {si, ti} of dimensions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayDot)))
(def ArrayExpand "ArrayExpand[expr] expands out symbolic array operations in expr.\nArrayExpand[expr, assum] expands using assumptions assum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayExpand)))
(def ArrayFilter "ArrayFilter[f, array, r] applies f to all range-r blocks in the specified array.\nArrayFilter[f, array, {r1, r2, …}] applies f to blocks with ranges r1, r2, … in successive dimensions.\nArrayFilter[f, array, template] applies f over blocks specified by the position of 1s in the array template." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayFilter)))
(def ArrayFlatten "ArrayFlatten[{{m11, m12, …}, {m21, m22, …}, …}] creates a single flattened matrix from a matrix of matrices m ij. \nArrayFlatten[a, r] flattens out r pairs of levels in the array a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayFlatten)))
(def ArrayMesh "ArrayMesh[array] generates a mesh region from an array of rank d in which each cell has a geometric dimension d and represents a nonzero value of the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayMesh)))
(def ArrayPad "ArrayPad[array, m] gives an array with m zeros of padding on every side. \nArrayPad[array, m, padding] uses the specified padding.\nArrayPad[array, {m, n}, …] pads with m elements at the beginning and n elements at the end. \nArrayPad[array, {{m1, n1}, {m2, n2}, …}, …] pads with mi, ni elements at level i in array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayPad)))
(def ArrayPlot "ArrayPlot[array] generates a plot in which the values in an array are shown in a discrete array of squares." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayPlot)))
(def ArrayPlot3D "ArrayPlot3D[array] generates a plot in which the values in an array are shown in a discrete array of cubes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayPlot3D)))
(def ArrayQ "ArrayQ[expr] gives True if expr is a full array or a SparseArray object, and gives False otherwise. \nArrayQ[expr, patt] requires expr to be a full array with a depth that matches the pattern patt. \nArrayQ[expr, patt, test] requires also that test yield True when applied to each of the array elements in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayQ)))
(def ArrayReduce "ArrayReduce[f, array, n] reduces dimension n of array by applying f.\nArrayReduce[f, array, n1;;n2] reduces dimensions n1 through n2.\nArrayReduce[f, array, {n1, n2, …}] reduces dimensions n1, n2, etc.\nArrayReduce[f, array, {{n11, n12, …}, {n21, n22, …}, …}] applies f to arrays formed by combining all dimensions nij to make each dimension i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayReduce)))
(def ArrayResample "ArrayResample[array, {n1, n2, …}] resamples array to have dimensions {n1, n2, …}.\nArrayResample[array, dspec] resamples array according to the dimension specification dspec.\nArrayResample[array, dspec, scheme] specifies resampling scheme, either point or bin based. \nArrayResample[array, dspec, scheme, {{xmin, xmax}, …}] resamples only the data in the specified subrange {{xmin, xmax}, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayResample)))
(def ArrayReshape "ArrayReshape[list, dims] arranges the elements of list into a rectangular array with dimensions dims.\nArrayReshape[list, dims, padding] uses the specified padding if list does not contain enough elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayReshape)))
(def ArrayRules "ArrayRules[SparseArray[…]] gives the rules {pos1val1, pos2val2, …} specifying elements in a sparse array. \nArrayRules[list] gives rules for SparseArray[list]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArrayRules)))
(def ArraySimplify "ArraySimplify[expr] performs a sequence of array transformations on expr and returns the simplest form it finds. \nArraySimplify[expr, assum] simplifies using assumptions assum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArraySimplify)))
(def ArraySymbol "ArraySymbol[a] represents an array with name a.\nArraySymbol[a, {n1, n2, …}] represents an n1×n2×… array.\nArraySymbol[a, {n1, n2, …}, dom] represents an array with elements in the domain dom.\nArraySymbol[a, {n1, n2, …}, dom, sym] represents an array with the symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ArraySymbol)))
(def Arrays "Arrays[{d1, …, dr}] represents the domain of arrays of rank r and dimensions di.\nArrays[{d1, …, dr}, dom] represents the domain of arrays of dimensions di, with components in the domain dom.\nArrays[{d1, …, dr}, dom, sym] represents the subdomain of arrays with dimensions di and symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Arrays)))
(def Arrow "Arrow[{pt1, pt2}] is a graphics primitive that represents an arrow from pt1 to pt2.\nArrow[{pt1, pt2}, s] represents an arrow with its ends set back from pt1 and pt2 by a distance s. \nArrow[{pt1, pt2}, {s1, s2}] sets back by s1 from pt1 and s2 from pt2. \nArrow[curve, …] represents an arrow following the specified curve." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Arrow)))
(def Arrowheads "Arrowheads[spec] is a graphics directive specifying that arrows that follow should have arrowheads with sizes, positions, and forms specified by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Arrowheads)))
(def Ask "Ask[\"key\"] is a construct for use inside AskFunction that gives the value associated with key, or interactively asks for it if it is not already known. \nAsk[\"key\"->formspec] uses formspec to define how input should be requested and interpreted.\nAsk[{key1, key2, …}] gives the values associated with all the keyi, interactively asking for any that are needed.\nAsk[{key1->formspec1, key2->formspec2, …}] uses the formspeci to define how input for the keyi should be requested and interpreted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ask)))
(def AskAppend "AskAppend[\"key\"] is a construct for use inside AskFunction that asks for a new value, appends it to the current value associated with \"key\", and returns the resulting list.\nAskAppend[\"key\"->formspec] uses formspec to define how input should be requested and interpreted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskAppend)))
(def AskConfirm "AskConfirm[\"key\"] is a construct for use inside AskFunction that asks for confirmation of the current value associated with \"key\" and allows this to be either confirmed or changed.\nAskConfirm[\"key\", fun] applies the function fun to determine how to ask for confirmation. \nAskConfirm[\"key\", \"str\"] applies the string \"str\" as a string template to ask for confirmation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskConfirm)))
(def AskDisplay "AskDisplay[expr] is a construct for use inside AskFunction that displays the result of evaluating expr in the context of the AskFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskDisplay)))
(def AskFunction "AskFunction[body] evaluates body, interactively asking for values specified by Ask[…] and related constructs. \nAskFunction[{key1spec1, key2spec2, …}, body] specifies how values associated with the keyi should be asked for." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskFunction)))
(def AskState "AskState[] is a construct for use inside AskFunction that returns an association of all values in the current state of the AskFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskState)))
(def AskTemplateDisplay "AskTemplateDisplay[fun] is a construct for use inside AskFunction that displays the result of applying fun to the association of the values of all keys encountered so far in the evaluation of the AskFunction.\nAskTemplateDisplay[\"str\"] applies \"str\" as a string template to the association of values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskTemplateDisplay)))
(def AskedQ "AskedQ[\"key\"] is a construct for use inside AskFunction that gives True if a value is currently associated with key, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskedQ)))
(def AskedValue "AskedValue[\"key\"] is a construct for use inside AskFunction that gives the value associated with key, or Missing[…] if none has been provided." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AskedValue)))
(def AspectRatio "AspectRatio is an option for Graphics and related functions that specifies the ratio of height to width for a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AspectRatio)))
(def Assert "Assert[test] represents the assertion that test is True. If assertions have been enabled, test is evaluated when the assertion is encountered. If test is not True, then an assertion failure is generated.\nAssert[test, tag] specifies a tag that will be used to identify the assertion if it fails." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Assert)))
(def AssessmentFunction "AssessmentFunction[key] represents a tool for assessing whether answers are correct according to the key.\nAssessmentFunction[key, method] uses the specified answer comparison method.\nAssessmentFunction[key, f] uses the function f to compare answers with the key.\nAssessmentFunction[key, comp] performs assessment using the custom assessment defined in the Association comp.\nAssessmentFunction[obj] represents an assessment function that performs assessment using the CloudObject obj. \nAssessmentFunction[{obj, id}] assesses the specified question within the CloudObject obj.\nAssessmentFunction[…][answer] gives an AssessmentResultObject representing the correctness of answer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssessmentFunction)))
(def AssessmentResultObject "AssessmentResultObject[assoc] represents the results of an assessment.\nAssessmentResultObject[{aro1, aro2, …}] represents a collection of many assessments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssessmentResultObject)))
(def AssociateTo "AssociateTo[a, keyval] changes the association a by adding the key-value pair keyval.\nAssociateTo[a, {key1val1, key2val2, …}] adds all key-value pairs keyivali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociateTo)))
(def Association "Association[key1val1, key2val2, …] or key1val1, key2val2, … represents an association between keys and values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Association)))
(def AssociationComap "AssociationComap[{key1, key2, …}, x] creates the association key1key1[x], key2key2[x], …|>.\nAssociationComap[keys] represents an operator form of AssociationComap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociationComap)))
(def AssociationFormat "AssociationFormat is an option to TextString and related functions that determines how associations are formatted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociationFormat)))
(def AssociationMap "AssociationMap[f, {key1, key2, …}] creates the association key1f[key1], key2f[key2], ….\nAssociationMap[f, key1val1, key2val2, …] creates the association f[key1val1], f[key2val2], ….\nAssociationMap[f] represents an operator form of AssociationMap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociationMap)))
(def AssociationQ "AssociationQ[expr] gives True if expr is a valid Association object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociationQ)))
(def AssociationThread "AssociationThread[{key1, key2, …}{val1, val2, …}] gives the association key1val1, key2val2, ….\nAssociationThread[{key1, key2, …}, {val1, val2, …}] also gives the association key1val1, key2val2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssociationThread)))
(def AssumeDeterministic "AssumeDeterministic is an option for functions such as BayesianMinimization that specifies whether or not the function being considered should be assumed to be deterministic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AssumeDeterministic)))
(def Assuming "Assuming[assum, expr] evaluates expr with assum appended to $Assumptions, so that assum is included in the default assumptions used by functions such as Refine, Simplify, and Integrate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Assuming)))
(def Assumptions "Assumptions is an option for functions such as Simplify, Refine, and Integrate that specifies default assumptions to be made about symbolic quantities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Assumptions)))
(def AstroAngularSeparation "AstroAngularSeparation[astro1, astro2] gives the angular distance on the celestial sphere between the astronomical objects astro1 and astro2, as observed from your current geo location.\nAstroAngularSeparation[astro1, astro2, observer] gives the angular distance between astro1 and astro2 as perceived by the given observer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroAngularSeparation)))
(def AstroBackground "AstroBackground is an option that specifies the background style of an AstroGraphics map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroBackground)))
(def AstroCenter "AstroCenter is an option for AstroGraphics that specifies the point of the celestial sphere that should appear at the center of the map of the sky." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroCenter)))
(def AstroDistance "AstroDistance[astro] returns the physical distance to the astronomical object astro as currently observed from your geo location.\nAstroDistance[astro, astro0] returns the physical distance to the astronomical object astro as currently observed from astro0.\nAstroDistance[astro, Dated[astro0, date]] returns the physical distance to astro as observed from astro0 on the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroDistance)))
(def AstroGraphics "AstroGraphics[primitives, options] represents a two-dimensional view of space and the celestial sphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroGraphics)))
(def AstroGridLines "AstroGridLines is an option for AstroGraphics that specifies the coordinate grid lines to show on the celestial sphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroGridLines)))
(def AstroGridLinesStyle "AstroGridLinesStyle is an option for AstroGraphics that specifies how coordinate grid lines should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroGridLinesStyle)))
(def AstroPosition "AstroPosition[{az, alt}] defines a location on the celestial sphere with azimuth az and altitude alt in the current horizontal frame at your geo position.\nAstroPosition[{az, alt, r}] defines a location in celestial space with horizon coordinates az, alt and at distance r from your geo position.\nAstroPosition[coords, frame] uses the given frame, such as \"Equatorial\", \"Horizon\", \"Galactic\", etc. to define the orientation and meaning of the spherical coordinates coords.\nAstroPosition[coords, frame, csys] represents a location in celestial space given by a list of numeric coords referenced to the given frame and using the coordinate system csys, such as \"Cartesian\", \"Cylindrical\", etc.\nAstroPosition[{coords1, coords2, …}, frame, csys] represents an array of celestial locations.\nAstroPosition[entity, frame, csys] returns the position of entity with respect to the given frame and coordinate system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroPosition)))
(def AstroProjection "AstroProjection is an option of AstroGraphics that specifies the cartographic projection to use for the map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroProjection)))
(def AstroRange "AstroRange is an option of AstroGraphics that specifies the included range of coordinates on the celestial sphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroRange)))
(def AstroRangePadding "AstroRangePadding is an option of AstroGraphics that specifies the padding to use when extending beyond the original ranges of coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroRangePadding)))
(def AstroReferenceFrame "AstroReferenceFrame is an option of AstroGraphics that specifies the reference frame and setup of the observation corresponding to the sky map returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroReferenceFrame)))
(def AstroRiseSet "AstroRiseSet[astro] returns the dates of the next rising and next setting of the astronomical body astro.\nAstroRiseSet[astro, etype] returns the date of the next event of type etype, such as \"Rise\" or \"UpperCulmination\", for the given body astro, as observed from the current geo location.\nAstroRiseSet[astro, etype, loc] returns the date of the next event of type etype for the given body astro, as observed from location loc.\nAstroRiseSet[astro, etype, loc, date] returns the date of the next event of type etype after the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroRiseSet)))
(def AstroStyling "AstroStyling[\"skystyle\"] specifies the style to render the sky in an AstroGraphics map.\nAstroStyling[{\"skystyle\", param1->val1, param2->val2, …}] modifies the default parameter values of \"skystyle\" as given by the paramivali pairs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroStyling)))
(def AstroSubpoint "AstroSubpoint[astro] returns the geo location on Earth that currently has the given astro at its zenith.\nAstroSubpoint[astro, date] returns the geo location on Earth that has astro on its zenith on the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroSubpoint)))
(def AstroZoomLevel "AstroZoomLevel is an option of AstroGraphics and AstroStyling that specifies the level of resolution at which to render images." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AstroZoomLevel)))
(def Asymptotic "Asymptotic[expr, xx0] gives an asymptotic approximation for expr near x0.\nAsymptotic[expr, {x, x0, n}] gives an asymptotic approximation for expr near x0 to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Asymptotic)))
(def AsymptoticDSolveValue "AsymptoticDSolveValue[eqn, f, xx0] computes an asymptotic approximation to the differential equation eqn for f[x] centered at x0.\nAsymptoticDSolveValue[{eqn1, eqn2, …}, {f1, f2, …}, xx0] computes an asymptotic approximation to a system of differential equations.\nAsymptoticDSolveValue[eqn, f, x, ϵϵ0] computes an asymptotic approximation of f[x, ϵ] for the parameter ϵ centered at ϵ0.\nAsymptoticDSolveValue[eqn, f, …, {ξ, ξ0, n}] computes the asymptotic approximation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticDSolveValue)))
(def AsymptoticEqual "AsymptoticEqual[f, g, xx^*] gives conditions for f(x)≍g(x) or f(x)∈Θ(g(x)) as xx^*.\nAsymptoticEqual[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f(x1, …, xn)≍g(x1, …, xn) or f(x1, …, xn)∈Θ(g(x1, …, xn)) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticEqual)))
(def AsymptoticEquivalent "AsymptoticEquivalent[f, g, xx^*] gives conditions for f(x)∼g(x) as xx^*.\nAsymptoticEquivalent[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f (x1, …, xn) ~g(x1, …, xn) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticEquivalent)))
(def AsymptoticExpectation "AsymptoticExpectation[expr, xdist, aa0] computes an asymptotic approximation for the expectation of expr centered at a0, under the assumption that x follows the probability distribution dist.\nAsymptoticExpectation[expr, {x1, x2, …}dist, aa0] computes an asymptotic approximation for the expectation of expr centered at a0, under the assumption that {x1, x2, …} follows the multivariate distribution dist.\nAsymptoticExpectation[expr, vars, {a, a0, n}] computes the asymptotic expectation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticExpectation)))
(def AsymptoticGreater "AsymptoticGreater[f, g, xx^*] gives conditions for f(x)≻g(x) or f(x)∈ω(g(x)) as xx^*.\nAsymptoticGreater[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f(x1, …, xn)≻g(x1, …, xn) or f(x1, …, xn)∈ω(g(x1, …, xn)) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticGreater)))
(def AsymptoticGreaterEqual "AsymptoticGreaterEqual[f, g, xx^*] gives conditions for f(x)⪰g(x) or f(x)∈Ω(g(x)) as xx^*.\nAsymptoticGreaterEqual[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f(x1, …, xn)⪰g(x1, …, xn) or f(x1, …, xn)∈Ω(g(x1, …, xn)) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticGreaterEqual)))
(def AsymptoticIntegrate "AsymptoticIntegrate[f, x, xx0] computes an asymptotic approximation of the indefinite integral ∫f(x)x for x centered at x0.\nAsymptoticIntegrate[f, {x, a, b}, αα0] computes an asymptotic approximation of the definite integral ∫_a(α)^b(α)f(x, α)x for α centered at α0.\nAsymptoticIntegrate[f, …, {ξ, ξ0, n}] computes the asymptotic approximation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticIntegrate)))
(def AsymptoticLess "AsymptoticLess[f, g, xx^*] gives conditions for f(x)≺g(x) or f(x)∈o(g(x)) as xx^*.\nAsymptoticLess[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f(x1, …, xn)≺g(x1, …, xn) or f(x1, …, xn)∈o(g(x1, …, xn)) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticLess)))
(def AsymptoticLessEqual "AsymptoticLessEqual[f, g, xx^*] gives conditions for f(x)⪯g(x) or f(x)∈O(g(x)) as xx^*.\nAsymptoticLessEqual[f, g, {x1, …, xn}{x_1^*, …, x_n^*}] gives conditions for f(x1, …, xn)⪯g(x1, …, xn) or f(x1, …, xn)∈O(g(x1, …, xn)) as {x1, …, xn}{x_1^*, …, x_n^*}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticLessEqual)))
(def AsymptoticOutputTracker "AsymptoticOutputTracker[sys, {f1, …}, {p1, …}] gives the state feedback control law that causes the outputs of the affine system sys to track the reference signals fi with decay rates pj.\nAsymptoticOutputTracker[{sys, {out1, …}, {in1, …}}, …] specifies outputs outi and control inputs inj to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticOutputTracker)))
(def AsymptoticProbability "AsymptoticProbability[pred, xdist, aa0] computes an asymptotic approximation for the probability of pred centered at a0, under the assumption that x follows the probability distribution dist.\nAsymptoticProbability[pred, {x1, x2, …}dist, aa0] computes an asymptotic approximation for the probability of pred centered at a0, under the assumption that {x1, x2, …} follows the multivariate distribution dist.\nAsymptoticProbability[pred, vars, {a, a0, n}] computes the asymptotic probability to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticProbability)))
(def AsymptoticProduct "AsymptoticProduct[f, x, xx0] computes an asymptotic approximation of the indefinite product ∏_xf(x) for x near x0.\nAsymptoticProduct[f, {x, a, b}, αα0] computes an asymptotic approximation of the definite product ∏_a(α)^b(α)f(x, α) for α near α0.\nAsymptoticProduct[f, …, {ξ, ξ0, n}] computes the asymptotic approximation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticProduct)))
(def AsymptoticRSolveValue "AsymptoticRSolveValue[eqn, f, x∞] computes an asymptotic approximation to the difference equation eqn for f[x] near ∞. \nAsymptoticRSolveValue[{eqn1, eqn2, …}, {f1, f2, …}, x ∞] computes an asymptotic approximation to a system of difference equations.\nAsymptoticRSolveValue[eqn, f, x, ϵϵ0] computes an asymptotic approximation of f[x, ϵ] for the parameter ϵ centered at ϵ0.\nAsymptoticRSolveValue[eqn, f, …, {ξ, ξ0, n}] computes the asymptotic approximation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticRSolveValue)))
(def AsymptoticSolve "AsymptoticSolve[eqn, yb, x->a] computes asymptotic approximations of solutions y[x] of the equation eqn passing through {a, b}.\nAsymptoticSolve[eqn, {y}, x->a] computes asymptotic approximations of solutions y[x] of the equation eqn for x near a.\nAsymptoticSolve[eqns, {y1, y2, …}{b1, b2, …}, {x1, x2, …}{a1, a2, …}] computes asymptotic approximations of solutions {y1[x1, x2, …], y2[x1, x2, …], …} of the system of equations eqns.\nAsymptoticSolve[eqns, …, {{x1, x2, …}, {a1, a2, …}, n}] computes the asymptotic approximation to order n. \nAsymptoticSolve[…, Reals] computes only solutions that are real valued for real argument values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticSolve)))
(def AsymptoticSum "AsymptoticSum[f, x, xx0] computes an asymptotic approximation of the indefinite sum ∑f(x) for x centered at x0.\nAsymptoticSum[f, {x, a, b}, αα0] computes an asymptotic approximation of the definite sum ∑_a(α)^b(α)f(x, α) for α centered at α0.\nAsymptoticSum[f, …, {ξ, ξ0, n}] computes the asymptotic approximation to order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AsymptoticSum)))
(def Asynchronous "Asynchronous is an option for WolframAlpha that determines whether to use the asynchronous features of the Wolfram|Alpha API." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Asynchronous)))
(def Atom "Atom[\"sym\"] represents an atom with atomic symbol \"sym\".\nAtom[\"sym\", name->value, …] represents an atom with atomic symbol \"sym\" and specified properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Atom)))
(def AtomCoordinates "AtomCoordinates is an option for Molecule and related functions that specifies the three-dimensional coordinates of the atoms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomCoordinates)))
(def AtomCount "AtomCount[mol] gives the number of atoms in the molecule represented by mol.\nAtomCount[mol, patt] gives the number of atoms in the molecule mol matching the atom pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomCount)))
(def AtomDiagramCoordinates "AtomDiagramCoordinates is an option for Molecule and related functions that specifies the two-dimensional coordinates of the atoms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomDiagramCoordinates)))
(def AtomLabelStyle "AtomLabelStyle is an option for MoleculePlot and MoleculePlot3D that specifies the style to use for atom labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomLabelStyle)))
(def AtomLabels "AtomLabels is an option for MoleculePlot and MoleculePlot3D that specifies what labels and label positions should be used for atoms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomLabels)))
(def AtomList "AtomList[mol] gives the list of atoms in the molecule represented by mol.\nAtomList[mol, patt] gives the list of atoms in the molecule mol matching the atom pattern patt.\nAtomList[mol, patt, \"prop\"] gives the value for the specified property of the atoms matching patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomList)))
(def AtomQ "AtomQ[expr] yields True if expr is an expression which cannot be divided into subexpressions, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AtomQ)))
(def AttachCell "AttachCell[expr] makes expr a cell attached to the current cell being evaluated.\nAttachCell[obj, expr] makes expr a cell attached to the notebook, cell or box object obj.\nAttachCell[obj, expr, pos] specifies that the attached cell should be at position pos relative to obj.\nAttachCell[obj, expr, pos, dist] specifies that the attached cell should be at a distance dist from pos.\nAttachCell[obj, expr, pos, dist, opos] aligns the attached cell so that position opos in expr lies at distance dist from location pos.\nAttachCell[cellobj, expr, \"Inline\"] specifies that the attached cell should be positioned between the bottom of cellobj and its bottom margin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AttachCell)))
(def AttachedCell "AttachedCell is an option for Cells that indicates whether to find cells that created with AttachCell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AttachedCell)))
(def AttentionLayer "AttentionLayer[] represents a trainable net layer that learns to pay attention to certain portions of its input. \nAttentionLayer[net] specifies a particular net to give scores for portions of the input. \nAttentionLayer[net, opts] includes options for weight normalization, masking and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AttentionLayer)))
(def Attributes "Attributes[symbol] gives the list of attributes for a symbol. \nAttributes[\"symbol\"] gives the attributes for the symbol named \"symbol\" if it exists.\nAttributes[{s1, s2, …}] gives a list of the attributes for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Attributes)))
(def Audio "Audio[file] represents audio stored in the given file.\nAudio[url] represents audio stored in the given URL.\nAudio[data] represents audio with samples given by the array data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Audio)))
(def AudioAmplify "AudioAmplify[audio, s] multiplies all samples of audio by a factor s. \nAudioAmplify[video, s] amplifies the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioAmplify)))
(def AudioAnnotate "AudioAnnotate[audio, prop] computes the property prop and adds it as an annotation to audio.\nAudioAnnotate[audio, namespec] adds an annotation with the specified name and values spec to audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioAnnotate)))
(def AudioAnnotationLookup "AudioAnnotationLookup[audio] gives all annotations associated to audio.\nAudioAnnotationLookup[audio, tags] gives the annotations specified by tags.\nAudioAnnotationLookup[audio, tagsselector] gives a selection of annotations using selector.\nAudioAnnotationLookup[audio, tagsselector, format] formats each annotation element according to format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioAnnotationLookup)))
(def AudioBlockMap "AudioBlockMap[f, audio, dur] applies f to non-overlapping partitions of length dur in audio. \nAudioBlockMap[f, audio, {dur, offset}] applies f to partitions with offset offset in audio. \nAudioBlockMap[f, audio, {dur, offset, wfun}] applies f after applying wfun to partitions in audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioBlockMap)))
(def AudioCapture "AudioCapture[] creates a temporary interactive interface for capturing an audio signal.\nAudioCapture[file] captures an audio signal into file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioCapture)))
(def AudioChannelAssignment "AudioChannelAssignment is an option for Audio and related functions that specifies a mapping from audio channels to available speakers of the output audio device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioChannelAssignment)))
(def AudioChannelCombine "AudioChannelCombine[{audio1, audio2, …}] creates a multichannel audio object by combining the sequence of channels in audioi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioChannelCombine)))
(def AudioChannelMix "AudioChannelMix[audio] mixes channels of audio by averaging and returns a center-panned stereo audio object.\nAudioChannelMix[audio, desttype] mixes audio channels into the specified desttype.\nAudioChannelMix[video, …] mixes audio channels of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioChannelMix)))
(def AudioChannelSeparate "AudioChannelSeparate[audio] gives a list of Audio objects, each of which represents one channel of audio.\nAudioChannelSeparate[audio, channel] returns the specified channel from audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioChannelSeparate)))
(def AudioChannels "AudioChannels[audio] returns the number of channels in the Audio object audio.\nAudioChannels[video] returns the number of channels of the first audio track of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioChannels)))
(def AudioData "AudioData[audio] gives an array of audio samples.\nAudioData[audio, \"type\"] gives an array of audio samples converted to the specified \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioData)))
(def AudioDelay "AudioDelay[audio, delay] creates audio by adding repeated decaying echos to audio spaced by the specified delay.\nAudioDelay[audio, delay, feedback] uses the specified feedback as the amount of signal to preserve during each repetition.\nAudioDelay[audio, delay, feedback, mix] uses mix to control the ratio between original and delayed audio.\nAudioDelay[video, …] add delay to the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioDelay)))
(def AudioDelete "AudioDelete[audio, t] deletes the first t seconds of audio.\nAudioDelete[audio, -t] deletes the last t seconds of audio.\nAudioDelete[audio, {t1, t2}] deletes from time t1 to time t2, returning the remaining audio as a single Audio object.\nAudioDelete[audio, {{t11, t12}, …}] deletes multiple time intervals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioDelete)))
(def AudioDistance "AudioDistance[audio1, audio2] returns a distance measure between audio1 and audio2.\nAudioDistance[video1, video2] returns a distance measure between the audio tracks of video1 and video2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioDistance)))
(def AudioEncoding "AudioEncoding is an option for Export and other functions that specifies the audio encoding to use when creating an audio or a video file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioEncoding)))
(def AudioFade "AudioFade[audio] returns audio in which the beginning and end of audio are faded.\nAudioFade[audio, t] fades the first and last t seconds of audio.\nAudioFade[audio, {t1, t2}] fades t1 seconds at the beginning and t2 seconds at the end.\nAudioFade[video, …] fades the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioFade)))
(def AudioFrequencyShift "AudioFrequencyShift[audio, freq] gives audio by shifting the spectrum of audio by freq.\nAudioFrequencyShift[audio, freq, mix] uses mix to control the ratio between the original and shifted audio.\nAudioFrequencyShift[video, …] shifts the spectrum of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioFrequencyShift)))
(def AudioGenerator "AudioGenerator[model] generates one second of audio of a given model.\nAudioGenerator[model, t] generates t seconds of audio.\nAudioGenerator[model, t, \"type\"] generates audio samples of the specified \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioGenerator)))
(def AudioIdentify "AudioIdentify[audio] yields the result of attempting to identify what audio is a recording of.\nAudioIdentify[audio, category] restricts the identification to the specified category.\nAudioIdentify[audio, category, n] gives a list of up to n possible identifications.\nAudioIdentify[audio, category, n, \"prop\"] gives the specified property for each identification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioIdentify)))
(def AudioInputDevice "AudioInputDevice is an option for AudioCapture that specifies the device to use for audio recording." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioInputDevice)))
(def AudioInsert "AudioInsert[audio, tnew] inserts the audio signal new at time t.\nAudioInsert[audio, {t1, t2, …}new] inserts the same audio at multiple positions.\nAudioInsert[audio, {t1new1, …}] inserts multiple audio signals at different positions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioInsert)))
(def AudioInstanceQ "AudioInstanceQ[audio, obj] gives True if audio sounds to be an instance of the object obj, and gives False otherwise.\nAudioInstanceQ[audio, obj, cat] assumes that audio is the sound of something in the category cat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioInstanceQ)))
(def AudioIntervals "AudioIntervals[audio] returns audible intervals of audio.\nAudioIntervals[audio, crit] returns intervals of audio for which the criterion crit is satisfied.\nAudioIntervals[audio, crit, mindur] returns only intervals larger than the given duration mindur.\nAudioIntervals[video, …] returns only intervals from the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioIntervals)))
(def AudioJoin "AudioJoin[audio1, audio2, …] or AudioJoin[{audio1, audio2, …}] concatenates all audioi and returns an audio object.\nAudioJoin[{audio1, t1}, {audio2, t2}, …] inserts ti seconds of silence after each audioi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioJoin)))
(def AudioLabel "AudioLabel is an option for an Audio object that specifies the label to show on the object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioLabel)))
(def AudioLength "AudioLength[audio] returns the number of samples in the Audio object audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioLength)))
(def AudioLocalMeasurements "AudioLocalMeasurements[audio, \"prop\"] computes the property \"prop\" locally for partitions of audio.\nAudioLocalMeasurements[audio, {prop1, prop2, …}] computes several properties \"propi\".\nAudioLocalMeasurements[audio, \"prop\", format] returns the measurements in the specified output format.\nAudioLocalMeasurements[video, …] computes the measurements from the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioLocalMeasurements)))
(def AudioLoudness "AudioLoudness[audio] computes the loudness of audio according to the EBU momentary definition.\nAudioLoudness[audio, def] computes the loudness according to the definition def.\nAudioLoudness[video, …] computes the loudness of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioLoudness)))
(def AudioMeasurements "AudioMeasurements[audio, \"prop\"] computes the property \"prop\" for the entire audio.\nAudioMeasurements[audio, {prop1, prop2, …}] computes several properties \"propi\".\nAudioMeasurements[audio, \"prop\", format] returns the values in the specified output format.\nAudioMeasurements[{audio1, audio2, …}, …] returns measurements for all audioi.\nAudioMeasurements[video, …] returns measurements for the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioMeasurements)))
(def AudioNormalize "AudioNormalize[audio] normalizes audio so that the maximum absolute value of its samples is 1.\nAudioNormalize[audio, model] normalizes the audio signal based on the specified model.\nAudioNormalize[video] normalizes the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioNormalize)))
(def AudioOutputDevice "AudioOutputDevice is an option for Audio and related functions that specifies the device to use for playback." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioOutputDevice)))
(def AudioOverlay "AudioOverlay[{audio1, audio2, …}] returns an audio object by overlaying all audioi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioOverlay)))
(def AudioPad "AudioPad[audio, t] adds t seconds of silence to the end of audio.\nAudioPad[audio, {t1, t2}] adds t1 seconds of silence to the beginning and t2 seconds to the end of audio.\nAudioPad[audio, tspec, padding] pads using the value or method specified by padding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPad)))
(def AudioPan "AudioPan[audio] returns a center-panned stereo audio object from a mono audio. \nAudioPan[audio, pan] returns a stereo audio object after panning left and right channels using the specified pan.\nAudioPan[video, …] pans the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPan)))
(def AudioPartition "AudioPartition[audio, dur] partitions an audio object into non-overlapping segments of duration dur.\nAudioPartition[audio, dur, offset] generates segments with specified offset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPartition)))
(def AudioPause "AudioPause[] pauses the playback of all AudioStream objects.\nAudioPause[astream] pauses the playback of the AudioStream object astream.\nAudioPause[audio] pauses the playback for all streams originated by audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPause)))
(def AudioPitchShift "AudioPitchShift[audio, r] applies pitch shifting to audio by the ratio r, shifting every frequency f to r f.\nAudioPitchShift[video, r] applies pitch shifting to the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPitchShift)))
(def AudioPlay "AudioPlay[audio] returns a new AudioStream object from audio and starts the playback.\nAudioPlay[astream] starts playing an AudioStream object astream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPlay)))
(def AudioPlot "AudioPlot[audio] plots the waveform of audio.\nAudioPlot[{audio1, audio2, …}] plots waveforms of all audioi.\nAudioPlot[video] plots the waveform of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioPlot)))
(def AudioQ "AudioQ[audio] yields True if audio has the form of a valid Audio object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioQ)))
(def AudioRecord "AudioRecord[] returns a new AudioStream object and starts to record from the default input audio device.\nAudioRecord[inputdev] records from the input audio device inputdev.\nAudioRecord[astream] starts recording an AudioStream object astream that is connected to an input device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioRecord)))
(def AudioReplace "AudioReplace[audio, {t1, t2}new] replaces the audio signal between t1 and t2 with the new signal new.\nAudioReplace[audio, {{t11, t12}, …}new] replaces multiple intervals with the same audio new.\nAudioReplace[audio, {{t11, t12}new1, …}] replaces multiple intervals.\nAudioReplace[audio, {t1, t2}new, fitting] uses the specified fitting method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioReplace)))
(def AudioResample "AudioResample[audio, sr] resamples audio to have the sample rate of sr.\nAudioResample[video, sr] resamples the first audio track in video to have the sample rate of sr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioResample)))
(def AudioReverb "AudioReverb[audio] adds reverberation to audio.\nAudioReverb[audio, model] adds reverberation following the room model.\nAudioReverb[audio, model, mix] controls the mix ratio between original and reverberated audio.\nAudioReverb[video, …] adds reverberation to the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioReverb)))
(def AudioReverse "AudioReverse[audio] reverses audio so that the signal is played backward.\nAudioReverse[video] reverses the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioReverse)))
(def AudioSampleRate "AudioSampleRate[audio] returns the sample rate of the Audio object audio.\nAudioSampleRate[video] returns the sample rate of the first audio track of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioSampleRate)))
(def AudioSpectralMap "AudioSpectralMap[f, audio] transforms audio by applying the function f to its short-time Fourier transform.\nAudioSpectralMap[f, {audio1, …}] applies the function f to the list of short-time Fourier transforms of all audioi.\nAudioSpectralMap[f, video] transforms the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioSpectralMap)))
(def AudioSpectralTransformation "AudioSpectralTransformation[f, audio] returns a modified version of audio by applying a time-frequency transformation f to its short-time Fourier transform.\nAudioSpectralTransformation[f, video] transforms the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioSpectralTransformation)))
(def AudioSplit "AudioSplit[audio, t] splits audio at time t.\nAudioSplit[audio, {t1, t2, …}] splits audio at times ti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioSplit)))
(def AudioStop "AudioStop[] stops the playback of all AudioStream objects.\nAudioStop[astream] stops the playback of the AudioStream object astream.\nAudioStop[audio] stops the playback for all streams originated by audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioStop)))
(def AudioStream "AudioStream[source] creates a new AudioStream object from source.\nAudioStream[id] is an object that represents a unique audio stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioStream)))
(def AudioStreams "AudioStreams[] returns all existing streams.\nAudioStreams[audio] returns all existing streams that originated from audio.\nAudioStreams[audio, \"prop\"] returns \"prop\" for all streams that originated from audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioStreams)))
(def AudioTimeStretch "AudioTimeStretch[audio, r] applies time stretching to audio by the specified factor r.\nAudioTimeStretch[video, r] applies time stretching to the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioTimeStretch)))
(def AudioTrackApply "AudioTrackApply[f, video] applies the function f to the first audio track of the Video object video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioTrackApply)))
(def AudioTrackSelection "AudioTrackSelection is an option that specifies the audio tracks of interest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioTrackSelection)))
(def AudioTrim "AudioTrim[audio] trims silence from the beginning and end of audio.\nAudioTrim[audio, t] returns the first t seconds of audio.\nAudioTrim[audio, -t] returns the last t seconds of audio.\nAudioTrim[audio, {t1, t2}] returns audio starting at time t1 and ending at time t2 of audio.\nAudioTrim[audio, {{t11, t12}, …}] returns a list of audio for all given intervals {ti1, ti2}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioTrim)))
(def AudioType "AudioType[audio] returns the data type used to represent samples in the Audio object audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AudioType)))
(def AugmentedPolyhedron "AugmentedPolyhedron[poly] gives the augmented polyhedron poly by replacing each face by a pyramid. \nAugmentedPolyhedron[poly, h] gives the augmented polyhedron with a pyramid of height h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AugmentedPolyhedron)))
(def AugmentedSymmetricPolynomial "AugmentedSymmetricPolynomial[{r1, r2, …}] represents a formal augmented symmetric polynomial with exponents r1, r2, ….\nAugmentedSymmetricPolynomial[{{r11, …, r 1n}, {r21, …, r 2n}, …}] represents a multivariate formal augmented symmetric polynomial with exponent vectors {r11, …, r 1n}, {r21, …, r 2n}, ….\nAugmentedSymmetricPolynomial[rspec, data] gives the augmented symmetric polynomial in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AugmentedSymmetricPolynomial)))
(def Authentication "Authentication is an option for cloud, web and SSH access functions that allows authentication parameters to be given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Authentication)))
(def AuthenticationDialog "AuthenticationDialog[] initiates a standard dialog for entering username/password authentication information.\nAuthenticationDialog[\"type\"] initiates an authentication dialog of the specified standard type.\nAuthenticationDialog[{key1, key2, …}] initiates an authentication dialog that requests values for the specified keys.\nAuthenticationDialog[arg, func] applies the function func to the dialog's return value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AuthenticationDialog)))
(def AutoAction "AutoAction is an option for objects such as Slider, Locator, and Button that specifies whether they should automatically take action whenever the mouse pointer is over them, even if they are not clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoAction)))
(def AutoCopy "AutoCopy is an option for notebooks and cloud objects that specifies whether to automatically make a copy when the object is opened." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoCopy)))
(def AutoDelete "AutoDelete is an option for boxes that specifies whether a box is automatically deleted when its contents are edited." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoDelete)))
(def AutoIndent "AutoIndent is an option for Style and Cell that specifies what automatic indentation should be done at the beginning of a new line after an explicit return character has been entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoIndent)))
(def AutoItalicWords "AutoItalicWords is an option for Cell that gives a list of words that should automatically be put in italics when they are entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoItalicWords)))
(def AutoMultiplicationSymbol "AutoMultiplicationSymbol is an option for objects such as Cell and Notebook that specifies when to automatically display a multiplication symbol between elements separated by whitespace that implies multiplication." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoMultiplicationSymbol)))
(def AutoOperatorRenderings "AutoOperatorRenderings is an option for cells and notebooks that specifies automatic renderings to be used for strings representing operators." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoOperatorRenderings)))
(def AutoRefreshed "AutoRefreshed[expr] represents an expression to be reevaluated every hour and made available in the cloud.\nAutoRefreshed[expr, dt] reevaluates at time interval dt. \nAutoRefreshed[expr, timespec] reevaluates on the schedule specified by timespec.\nAutoRefreshed[expr, timespec, fmt] specifies that the result from evaluating expr should be given in format fmt.\nAutoRefreshed[expr, timespec, {fmt, rform}] specifies that the result should be given as a response of the form rform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoRefreshed)))
(def AutoRemove "AutoRemove is an option specifying whether tasks, generators, cloud objects and related constructs should be removed after they are executed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoRemove)))
(def AutoScroll "AutoScroll is an option to SelectionMove and related functions that specifies whether a notebook should automatically be scrolled to display the current selection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoScroll)))
(def AutoSpacing "AutoSpacing is an option for Style and Cell that specifies whether spaces between successive characters should be adjusted automatically." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoSpacing)))
(def AutoSubmitting "AutoSubmitting[spec] represents an element of a form that automatically submits the whole form if it is entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutoSubmitting)))
(def Autocomplete "Autocomplete[{string1, string2, …}, \"string\"] gives a list of the stringi that can complete string.\nAutocomplete[s1w1, s2w2, …, \"string\"] puts the completions in order of decreasing weights wi.\nAutocomplete[{assoc1, assoc2, …}, \"string\"] uses completions specified by the associations associ.\nAutocomplete[comps, \"string\", n] gives the first at most n completions.\nAutocomplete[comps] gives an AutocompletionFunction[…] that can be applied to a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Autocomplete)))
(def AutocompletionFunction "AutocompletionFunction[…] represents a function to be applied to a string to generate possible completions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutocompletionFunction)))
(def AutocorrelationTest "AutocorrelationTest[data] tests whether the data is autocorrelated.\nAutocorrelationTest[data, k] tests whether the data is autocorrelated up to lag k.\nAutocorrelationTest[data, k, \"property\"] returns the value of \"property\" for a given model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutocorrelationTest)))
(def Automatic "Automatic represents an option or other value that is to be chosen automatically by a built‐in function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Automatic)))
(def AutorunSequencing "AutorunSequencing is an option for Manipulate that specifies how autorun should use the controls provided." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AutorunSequencing)))
(def Axes "Axes is an option for graphics functions that specifies whether axes should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Axes)))
(def AxesEdge "AxesEdge is an option for three-dimensional graphics functions that specifies on which edges of the bounding box axes should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxesEdge)))
(def AxesLabel "AxesLabel is an option for graphics functions that specifies labels for axes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxesLabel)))
(def AxesOrigin "AxesOrigin is an option for graphics functions that specifies where any axes drawn should cross." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxesOrigin)))
(def AxesStyle "AxesStyle is an option for graphics functions that specifies how axes should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxesStyle)))
(def AxiomaticTheory "AxiomaticTheory[\"theory\"] gives an axiomatic representation of the specified axiomatic theory.\nAxiomaticTheory[{\"theory\", <|op1->s1, op2->s2, …|>}] uses si to represent the operator opi in the theory.\nAxiomaticTheory[theory, \"property\"] gives the specified property of an axiomatic theory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxiomaticTheory)))
(def Axis "Axis is a symbol that represents the axis for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Axis)))
(def AxisLabel "AxisLabel is an option for AxisObject that specifies a label for the axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxisLabel)))
(def AxisObject "AxisObject[path] is a Graphics primitive that represents an axis with a quantitative scale along the path path.\nAxisObject[path, scale] uses the scale specified by scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxisObject)))
(def AxisStyle "AxisStyle is an option for AxisObject that specifies how to style the path of an axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote AxisStyle)))
(def BSplineBasis "BSplineBasis[d, x] gives the zeroth uniform B-spline basis function of degree d at x.\nBSplineBasis[d, n, x] gives the n ^th uniform B-spline basis function of degree d.\nBSplineBasis[{d, {u1, u2, …}}, n, x]  gives the n ^th non-uniform B-spline basis function of degree d with knots at positions ui." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BSplineBasis)))
(def BSplineCurve "BSplineCurve[{pt1, pt2, …}] is a graphics primitive that represents a nonuniform rational B-spline curve with control points pti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BSplineCurve)))
(def BSplineFunction "BSplineFunction[{pt1, pt2, …}] represents a B-spline function for a curve defined by the control points pti.\nBSplineFunction[array] represents a B-spline function for a surface or high-dimensional manifold." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BSplineFunction)))
(def BSplineSurface "BSplineSurface[array] is a graphics primitive that represents a nonuniform rational B-spline surface defined by an array of x, y, z control points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BSplineSurface)))
(def BabyMonsterGroupB "BabyMonsterGroupB[] represents the sporadic simple baby monster group B." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BabyMonsterGroupB)))
(def Back "Back is a symbol that represents the back of a graphic for purposes of placement and alignment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Back)))
(def Background "Background is an option that specifies what background color to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Background)))
(def Backslash "Backslash[x, y, …] displays as x∖y∖…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Backslash)))
(def Backward "Backward is a symbol that represents the backward direction for purposes of motion and animation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Backward)))
(def Ball "Ball[p] represents the unit ball centered at the point p.\nBall[p, r] represents the ball of radius r centered at the point p.\nBall[{p1, p2, …}, r] represents a collection of balls of radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ball)))
(def Band "Band[{i, j}] represents the sequence of positions on the diagonal band that starts with {i, j} in a sparse array.\nBand[{imin, jmin, …}, {imax, jmax, …}] represents the positions between {imin, jmin, …} and {imax, jmax, …}.\nBand[{imin, jmin, …}, {imax, jmax, …}, {di, dj, …}] represents positions starting with {imin, jmin, …} and then moving with step {di, dj, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Band)))
(def BandpassFilter "BandpassFilter[data, {ω1, ω2}] applies a bandpass filter with cutoff frequencies ω1 and ω2 to an array of data.\nBandpassFilter[data, {{ω, q}}] uses center frequency ω and quality factor q.\nBandpassFilter[data, spec, n] uses a filter kernel of length n.\nBandpassFilter[data, spec, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BandpassFilter)))
(def BandstopFilter "BandstopFilter[data, {ω1, ω2}] applies a bandstop filter with cutoff frequencies ω1 and ω2 to an array of data.\nBandstopFilter[data, {{ω, q}}] uses center frequency ω and quality factor q. \nBandstopFilter[data, spec, n] uses a filter kernel of length n.\nBandstopFilter[data, spec, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BandstopFilter)))
(def BarChart "BarChart[{y1, y2, …, yn}] makes a bar chart with bar lengths y1,  y2, ….\nBarChart[{…, wi[yi, …], …, wj[yj, …], …}] makes a bar chart with bar features defined by the symbolic wrappers wk.\nBarChart[{data1, data2, …}] makes a bar chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarChart)))
(def BarChart3D "BarChart3D[{y1, y2, …}] makes a 3D bar chart with bar lengths y1, y2, … .\nBarChart3D[{…, wi[yi, …], …, wj[yj, …], …}] makes a 3D bar chart with bar features defined by the symbolic wrappers wk.\nBarChart3D[{data1, data2, …}] makes a 3D bar chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarChart3D)))
(def BarLegend "BarLegend[cf] generates a legend that identifies colors from the color function cf with an automatic range of values.\nBarLegend[{cf, {min, max}}] generates a legend that identifies colors from the color function cf with the range of values between min and max.\nBarLegend[cf, contours] generates a legend that identifies color ranges from the color function cf based on the set of contours contours." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarLegend)))
(def BarOrigin "BarOrigin is an option to BarChart and related functions that specifies the origin placement for bars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarOrigin)))
(def BarSpacing "BarSpacing is an option to BarChart and related functions that controls the spacing between bars and groups of bars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarSpacing)))
(def BarabasiAlbertGraphDistribution "BarabasiAlbertGraphDistribution[n, k] represents a Barabasi–Albert graph distribution for n-vertex graphs where a new vertex with k edges is added at each step." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarabasiAlbertGraphDistribution)))
(def BarcodeImage "BarcodeImage[\"string\"] generates a barcode image of \"string\" in the \"QR\" format.\nBarcodeImage[\"string\", format] generates a barcode image of \"string\" in the specified format.\nBarcodeImage[\"string\", format, size] attempts to generate a barcode image of the specified size." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarcodeImage)))
(def BarcodeRecognize "BarcodeRecognize[image] recognizes a barcode in image and returns it as a string.\nBarcodeRecognize[image, \"prop\"] returns the specified property of the barcode.\nBarcodeRecognize[image, \"prop\", format] recognizes barcodes of the specified format only.\nBarcodeRecognize[video, …] recognizes barcodes in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarcodeRecognize)))
(def BaringhausHenzeTest "BaringhausHenzeTest[data] tests whether data follows a MultinormalDistribution using the Baringhaus–Henze test.\nBaringhausHenzeTest[data, MultinormalDistribution[μ, Σ]] tests whether data follows the distribution with mean vector μ and covariance matrix Σ.\nBaringhausHenzeTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaringhausHenzeTest)))
(def BarlowProschanImportance "BarlowProschanImportance[rdist] gives the Barlow–Proschan importances for all components in the ReliabilityDistribution rdist. \nBarlowProschanImportance[fdist] gives the Barlow–Proschan importances for all components in the FailureDistribution fdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarlowProschanImportance)))
(def BarnesG "BarnesG[z] gives the Barnes G-function G (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BarnesG)))
(def BartlettHannWindow "BartlettHannWindow[x] represents a Bartlett–Hann window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BartlettHannWindow)))
(def BartlettWindow "BartlettWindow[x] represents a Bartlett window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BartlettWindow)))
(def BaseDecode "BaseDecode[\"string\"] decodes the Base64 data contained in a string and returns the result as a byte array.\nBaseDecode[\"string\", \"encoding\"] decodes using the string using the specified encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaseDecode)))
(def BaseEncode "BaseEncode[ba] encodes the byte array ba as a Base64 string.\nBaseEncode[ba, \"encoding\"] encodes using the specified encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaseEncode)))
(def BaseForm "BaseForm[expr, n] prints with the numbers in expr given in base n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaseForm)))
(def BaseStyle "BaseStyle is an option for formatting and related constructs that specifies the base style to use for them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaseStyle)))
(def Baseline "Baseline is a symbol that represents the baseline for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Baseline)))
(def BaselinePosition "BaselinePosition is an option that specifies where the baseline of an object is considered to be for purposes of alignment with surrounding text or other expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BaselinePosition)))
(def BasicRecurrentLayer "BasicRecurrentLayer[n] represents a trainable recurrent layer that takes a sequence of vectors and produces a sequence of vectors each of size n.\nBasicRecurrentLayer[n, opts] includes options for initial weights and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BasicRecurrentLayer)))
(def BatchNormalizationLayer "BatchNormalizationLayer[] represents a trainable net layer that normalizes its input data by learning the data mean and variance." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BatchNormalizationLayer)))
(def BatchSize "BatchSize is an option for NetTrain and related functions that specifies the size of a batch of examples to process together." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BatchSize)))
(def BatesDistribution "BatesDistribution[n] represents the distribution of a mean of n random variables uniformly distributed from 0 to 1.\nBatesDistribution[n, {min, max}] represents the distribution of a mean of n random variables uniformly distributed from min to max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BatesDistribution)))
(def BattleLemarieWavelet "BattleLemarieWavelet[] represents the Battle–Lemarié wavelet of order 3.\nBattleLemarieWavelet[n] represents the Battle–Lemarié wavelet of order n evaluated on equally spaced interval {-10, 10}.\nBattleLemarieWavelet[n, lim] represents the Battle–Lemarié wavelet of order n evaluated on equally spaced interval {-lim, lim}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BattleLemarieWavelet)))
(def BayesianMaximization "BayesianMaximization[f, {conf1, conf2, …}] gives an object representing the result of Bayesian maximization over the function f over the configurations confi.\nBayesianMaximization[f, reg] maximizes over the region represented by the region specification reg.\nBayesianMaximization[f, sampler] maximizes over configurations obtained by applying the function sampler.\nBayesianMaximization[f, {conf1, conf2, …}nsampler] applies the function nsampler to successively generate configurations starting from the confi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BayesianMaximization)))
(def BayesianMaximizationObject "BayesianMaximizationObject[…] represents the result of a Bayesian maximization process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BayesianMaximizationObject)))
(def BayesianMinimization "BayesianMinimization[f, {conf1, conf2, …}] gives an object representing the result of Bayesian minimization of the function f over the configurations confi. \nBayesianMinimization[f, reg] minimizes over the region represented by the region specification reg.\nBayesianMinimization[f, sampler] minimizes over configurations obtained by applying the function sampler. \nBayesianMinimization[f, {conf1, conf2, …}nsampler] applies the function nsampler to successively generate configurations starting from the confi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BayesianMinimization)))
(def BayesianMinimizationObject "BayesianMinimizationObject[…] represents the result of a Bayesian minimization process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BayesianMinimizationObject)))
(def Because "Because[x, y] displays as x∵y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Because)))
(def BeckmannDistribution "BeckmannDistribution[μ1, μ2, σ1, σ2] represents the Beckmann distribution with means μ1 and μ2 and standard deviations σ1 and σ2.\nBeckmannDistribution[μ1, μ2, σ1, σ2, ρ] represents the Beckmann distribution with means μ1 and μ2, standard deviations σ1 and σ2, and correlation ρ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BeckmannDistribution)))
(def Beep "Beep[] generates an audible beep when evaluated. \nBeep[\"message\"] beeps and populates the Why the Beep dialog with message." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Beep)))
(def Before "Before is a symbol that represents the region before an object for purposes of placement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Before)))
(def Begin "Begin[\"context`\"] resets the current context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Begin)))
(def BeginDialogPacket "BeginDialogPacket[integer] is a WSTP packet that indicates the start of the Dialog subsession referenced by integer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BeginDialogPacket)))
(def BeginPackage "BeginPackage[\"context`\"] makes context` and System` the only active contexts. \nBeginPackage[\"context`\", {\"need1 `\", \"need2 `\", …}] calls Needs on the needi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BeginPackage)))
(def BellB "BellB[n] gives the Bell number Bn. \nBellB[n, x] gives the Bell polynomial Bn (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BellB)))
(def BellY "BellY[n, k, {x1, …, x n-k+1}] gives the partial Bell polynomial Y n, k(x1, …, x n-k+1).\nBellY[n, k, m] gives the generalized partial Bell polynomial of a matrix m.\nBellY[m] gives the generalized Bell polynomial of a matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BellY)))
(def Below "Below is a symbol that represents the region below an object for purposes of placement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Below)))
(def BenfordDistribution "BenfordDistribution[b] represents a Benford distribution with base parameter b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BenfordDistribution)))
(def BeniniDistribution "BeniniDistribution[α, β, σ] represents a Benini distribution with shape parameters α and β and scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BeniniDistribution)))
(def BenktanderGibratDistribution "BenktanderGibratDistribution[a, b] represents a Benktander distribution of type I with parameters a and b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BenktanderGibratDistribution)))
(def BenktanderWeibullDistribution "BenktanderWeibullDistribution[a, b] represents a Benktander distribution of type II with parameters a and b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BenktanderWeibullDistribution)))
(def BernoulliB "BernoulliB[n] gives the Bernoulli number Bn. \nBernoulliB[n, x] gives the Bernoulli polynomial Bn (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BernoulliB)))
(def BernoulliDistribution "BernoulliDistribution[p] represents a Bernoulli distribution with probability parameter p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BernoulliDistribution)))
(def BernoulliGraphDistribution "BernoulliGraphDistribution[n, p] represents a Bernoulli graph distribution for n-vertex graphs with edge probability p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BernoulliGraphDistribution)))
(def BernoulliProcess "BernoulliProcess[p] represents a Bernoulli process with event probability p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BernoulliProcess)))
(def BernsteinBasis "BernsteinBasis[d, n, x] represents the n ^th Bernstein basis function of degree d at x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BernsteinBasis)))
(def BesagL "BesagL[pdata, r] estimates Besag's L function L(r) for point data pdata at radius r.\nBesagL[pproc, r] computes L(r) for the point process pproc.\nBesagL[bdata, r] computes L(r) for binned data bdata. \nBesagL[pspec] generates the function L that can be applied repeatedly to different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesagL)))
(def BesselFilterModel "BesselFilterModel[n] designs a lowpass Bessel filter of order n and cutoff frequency 1.\nBesselFilterModel[{n, ωc}] uses the cutoff frequency ωc.\nBesselFilterModel[{n, ωc}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselFilterModel)))
(def BesselI "BesselI[n, z] gives the modified Bessel function of the first kind In (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselI)))
(def BesselJ "BesselJ[n, z] gives the Bessel function of the first kind Jn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselJ)))
(def BesselJZero "BesselJZero[n, k] represents the k ^th zero of the Bessel function Jn (x).\nBesselJZero[n, k, x0] represents the k ^th zero greater than x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselJZero)))
(def BesselK "BesselK[n, z] gives the modified Bessel function of the second kind Kn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselK)))
(def BesselY "BesselY[n, z] gives the Bessel function of the second kind Yn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselY)))
(def BesselYZero "BesselYZero[n, k] represents the k ^th zero of the Bessel function of the second kind Yn (x).\nBesselYZero[n, k, x0] represents the k ^th zero greater than x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BesselYZero)))
(def Beta "Beta[a, b] gives the Euler beta function Β (a, b). \nBeta[z, a, b] gives the incomplete beta function Βz (a, b)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Beta)))
(def BetaBinomialDistribution "BetaBinomialDistribution[α, β, n] represents a beta binomial mixture distribution with beta distribution parameters α and β, and n binomial trials." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetaBinomialDistribution)))
(def BetaDistribution "BetaDistribution[α, β] represents a continuous beta distribution with shape parameters α and β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetaDistribution)))
(def BetaNegativeBinomialDistribution "BetaNegativeBinomialDistribution[α, β, n] represents a beta negative binomial mixture distribution with beta distribution parameters α and β and n successful trials." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetaNegativeBinomialDistribution)))
(def BetaPrimeDistribution "BetaPrimeDistribution[p, q] represents a beta prime distribution with shape parameters p and q. \nBetaPrimeDistribution[p, q, β] represents a generalized beta prime distribution with scale parameter β.\nBetaPrimeDistribution[p, q, α, β] represents a generalized beta distribution of the second kind with shape parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetaPrimeDistribution)))
(def BetaRegularized "BetaRegularized[z, a, b] gives the regularized incomplete beta function Iz (a, b)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetaRegularized)))
(def Between "Between[x, {min, max}] is equivalent to min≤x≤max.\nBetween[x, {{min1, max1}, {min2, max2}, …}] is equivalent to min1≤x≤max1||min2≤x≤max2||….\nBetween[range] is an operator form that yields Between[x, range] when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Between)))
(def BetweennessCentrality "BetweennessCentrality[g] gives a list of betweenness centralities for the vertices in the graph g.\nBetweennessCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BetweennessCentrality)))
(def BeveledPolyhedron "BeveledPolyhedron[poly] gives the beveled polyhedron of poly, by beveling each edge. \nBeveledPolyhedron[poly, l] bevels the polyhedron poly by a length ratio l at its edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BeveledPolyhedron)))
(def BezierCurve "BezierCurve[{pt1, pt2, …}] is a graphics primitive that represents a Bézier curve with control points pti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BezierCurve)))
(def BezierFunction "BezierFunction[{pt1, pt2, …}] represents a Bézier function for a curve defined by the control points pti.\nBezierFunction[array] represents a Bézier function for a surface or high-dimensional manifold." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BezierFunction)))
(def BilateralFilter "BilateralFilter[data, σ, μ] applies a bilateral filter of spatial spread σ and pixel value spread μ to data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BilateralFilter)))
(def BilateralHypergeometricPFQ "BilateralHypergeometricPFQ[{a1, …, ap}, {b1, …, bq}, z] is the bilateral hypergeometric function pHq (a;b;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BilateralHypergeometricPFQ)))
(def BilateralLaplaceTransform "BilateralLaplaceTransform[expr, t, s] gives the bilateral Laplace transform of expr. \nBilateralLaplaceTransform[expr, {t1, t2, …, tn}, {s1, s2, …, sn}] gives the multidimensional bilateral Laplace transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BilateralLaplaceTransform)))
(def BilateralZTransform "BilateralZTransform[expr, n, z] gives the bilateral Z transform of expr.\nBilateralZTransform[expr, {n1, …, nk}, {z1, …, zk}] gives the multidimensional bilateral Z transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BilateralZTransform)))
(def BinCounts "BinCounts[data] counts the number of elements of data whose values lie in successive integer bins.\nBinCounts[data, binspec] counts the number of elements of data whose values lie in successive bins specified by binspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinCounts)))
(def BinLists "BinLists[data] gives lists of the elements of data whose values lie in successive integer bins.\nBinLists[data, binspec] gives lists of the elements of data whose values lie in successive bins specified by binspec.\nBinLists[datainds, …] gives the lists of the labels inds specified by the binning of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinLists)))
(def Binarize "Binarize[image] creates a binary image from image by replacing all values above a globally determined threshold with 1 and others with 0.\nBinarize[image, t] creates a binary image by replacing all values above t with 1 and others with 0.\nBinarize[image, {t1, t2}] creates a binary image by replacing all values in the range t1 through t2 with 1 and others with 0.\nBinarize[image, f] creates a binary image by replacing all channel value lists for which f[v] yields True with 1 and others with 0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Binarize)))
(def BinaryDeserialize "BinaryDeserialize[ByteArray[…]] recovers an expression from a binary representation generated by BinarySerialize.\nBinaryDeserialize[ByteArray[…], h] wraps h around the expression produced before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryDeserialize)))
(def BinaryDistance "BinaryDistance[u, v] gives the binary distance between vectors u and v, equal to 0 if they are identical and 1 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryDistance)))
(def BinaryFormat "BinaryFormat is an option for OpenRead and related functions that specifies that a stream should be opened in binary format, so that no textual interpretation of newlines or other data is done." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryFormat)))
(def BinaryImageQ "BinaryImageQ[image] yields True if image has the form of a binary Image or Image3D object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryImageQ)))
(def BinaryRead "BinaryRead[stream] reads one byte of raw binary data from an input stream, and returns an integer from 0 to 255. \nBinaryRead[stream, type] reads an object of the specified type. \nBinaryRead[stream, {type1, type2, …}] reads a sequence of objects of the specified types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryRead)))
(def BinaryReadList "BinaryReadList[\"file\"] reads all remaining bytes from a file, and returns them as a list of integers from 0 to 255. \nBinaryReadList[\"file\", type] reads objects of the specified type from a file, until the end of the file is reached. The list of objects read is returned. \nBinaryReadList[\"file\", {type1, type2, …}] reads objects with a sequence of types, until the end of the file is reached. \nBinaryReadList[\"file\", types, n] reads only the first n objects of the specified types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryReadList)))
(def BinarySerialize "BinarySerialize[expr] gives a binary representation of any expression expr as a ByteArray object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinarySerialize)))
(def BinaryWrite "BinaryWrite[channel, b] writes a byte of data, specified as an integer from 0 to 255. \nBinaryWrite[channel, {b1, b2, …}] writes a sequence of bytes. \nBinaryWrite[channel, \"string\"] writes the raw sequence of characters in a string. \nBinaryWrite[channel, ByteArray[…]] writes the contents of a ByteArray object.\nBinaryWrite[channel, x, type] writes an object of the specified type. \nBinaryWrite[channel, {x1, x2, …}, type] writes a sequence of objects of the specified type. \nBinaryWrite[channel, {x1, x2, …}, {type1, type2, …}] writes a sequence of objects with a sequence of types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinaryWrite)))
(def BinnedVariogramList "BinnedVariogramList[{loc1val1, loc2val2, …}] computes a variogram using binned values. \nBinnedVariogramList[{loc1, loc2, …}{val1, val2, …}] generates the same result.\nBinnedVariogramList[…, spec] allows binning spec to be specified as given in HistogramList." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinnedVariogramList)))
(def Binomial "Binomial[n, m] gives the binomial coefficient (n\nm\n\n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Binomial)))
(def BinomialDistribution "BinomialDistribution[n, p] represents a binomial distribution with n trials and success probability p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinomialDistribution)))
(def BinomialPointProcess "BinomialPointProcess[n, reg] represents a binomial point process with n points in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinomialPointProcess)))
(def BinomialProcess "BinomialProcess[p] represents a binomial process with event probability p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinomialProcess)))
(def BinormalDistribution "BinormalDistribution[{μ1, μ2}, {σ1, σ2}, ρ] represents a bivariate normal distribution with mean {μ1, μ2} and covariance matrix {{σ1^2, ρ σ1 σ2}, {ρ σ1 σ2, σ2^2}}.\nBinormalDistribution[{σ1, σ2}, ρ] represents a bivariate normal distribution with zero mean.\nBinormalDistribution[ρ] represents a bivariate normal distribution with zero mean and covariance matrix {{1, ρ }, {ρ, 1}}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BinormalDistribution)))
(def BioMolecule "BioMolecule[id] returns the biomolecule associated with the input identifier id.\nBioMolecule[BioSequence[\"Peptide\", seq]] attempts to return a biomolecule representing a folded version of the input sequence seq.\nBioMolecule[biomolpart] returns a new biomolecule consisting of the part part of biomol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioMolecule)))
(def BioMoleculeFoldingMethod "BioMoleculeFoldingMethod is an option for BioMolecule to determine how to fold an input peptide sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioMoleculeFoldingMethod)))
(def BioMoleculePlot3D "BioMoleculePlot3D[biomol] creates a three-dimensional graphic of the biomolecule biomol.\nBioMoleculePlot3D[biomolpart] shows only the part part of biomol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioMoleculePlot3D)))
(def BioMoleculeValue "BioMoleculeValue[biomol, prop] returns the value of the property prop for the BioMolecule biomol.\nBioMoleculeValue[biomolpart, prop] returns the property value association with part of biomol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioMoleculeValue)))
(def BioSequence "BioSequence[type, \"seq\"] represents the biomolecular sequence of the given type corresponding to a string \"seq\".\nBioSequence[\"seq\"] infers the type (DNA, protein, etc.) from the sequence.\nBioSequence[ent] gives the biomolecular sequence associated with the gene or protein entity ent.\nBioSequence[type, {chem1, chem2, …}] gives the biomolecular sequence with type corresponding to the given list of chemicals.\nBioSequence[type, n] gives a biomolecular sequence of the given type and length n with arbitrary letters.\nBioSequence[type, \"seq\", {bond1, bond2, …}] represents a biomolecular sequence with the given list of bonds.\nBioSequence[\"HybridStrand\", {bioseq1, bioseq2, …}, {bond1, bond2, …}] represents a sequence composed of multiple motif sequences with shared primary linkage.\nBioSequence[{bioseq1, bioseq2, …}, {bond1, bond2, …}] represents a number of sequences linked only by additional bonds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequence)))
(def BioSequenceBackTranslateList "BioSequenceBackTranslateList[bioseq] gives the generalized back translations of a peptide sequence bioseq.\nBioSequenceBackTranslateList[bioseq, gtt] uses the genetic translation table gtt.\nBioSequenceBackTranslateList[bioseq, gtt, startspec] treats the starting amino acid in bioseq according to the specification startspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceBackTranslateList)))
(def BioSequenceComplement "BioSequenceComplement[bioseq] gives the biological complement of the sequence bioseq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceComplement)))
(def BioSequenceInstances "BioSequenceInstances[bioseq] expands the possibly degenerate sequence bioseq into all fully specified corresponding sequences.\nBioSequenceInstances[bioseq, n] expands the sequence bioseq into at most n fully specified corresponding sequences." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceInstances)))
(def BioSequenceModify "BioSequenceModify[seq, \"mod\"] gives the result of applying the modification \"mod\" to the sequence seq.\nBioSequenceModify[seq, {\"mod\", params}] specifies the parameters params for \"mod\".\nBioSequenceModify[modspec] represents an operator form of BioSequenceModify that can be applied to a biomolecular sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceModify)))
(def BioSequencePlot "BioSequencePlot[bioseq] creates a two-dimensional schematic diagram of the biomolecular sequence bioseq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequencePlot)))
(def BioSequenceQ "BioSequenceQ[bioseq] returns True if bioseq is a valid BioSequence expression, and False otherwise.\nBioSequenceQ[bioseq, spec] returns True if bioseq is a valid BioSequence expression matching a specification spec, and False otherwise.\nBioSequenceQ[bioseq, spec1|spec2|...] returns True if bioseq is a valid BioSequence expression matching any of the speci, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceQ)))
(def BioSequenceReverseComplement "BioSequenceReverseComplement[bioseq] biologically complements and reverses the sequence bioseq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceReverseComplement)))
(def BioSequenceTranscribe "BioSequenceTranscribe[bioseq] transcribes DNA into RNA or inverts the transcription of RNA back to DNA for the sequence bioseq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceTranscribe)))
(def BioSequenceTranslate "BioSequenceTranslate[bioseq] translates a DNA or RNA sequence bioseq to a peptide sequence.\nBioSequenceTranslate[bioseq, gtt] uses the genetic translation table gtt.\nBioSequenceTranslate[bioseq, gtt, startspec] treats start codons in bioseq according to the specification startspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BioSequenceTranslate)))
(def BiorthogonalSplineWavelet "BiorthogonalSplineWavelet[] represents a biorthogonal spline wavelet of order 4 and dual order 2.\nBiorthogonalSplineWavelet[n, m] represents a biorthogonal spline wavelet of order n and dual order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BiorthogonalSplineWavelet)))
(def BipartiteGraphQ "BipartiteGraphQ[g] yields True if the graph g is a bipartite graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BipartiteGraphQ)))
(def BiquadraticFilterModel "BiquadraticFilterModel[{ω, q}] creates a lowpass biquadratic filter using the characteristic frequency ω and the quality factor q.\nBiquadraticFilterModel[{\"type\", spec}] creates a filter of a given {\"type\", spec}.\nBiquadraticFilterModel[{\"type\", spec}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BiquadraticFilterModel)))
(def BirnbaumImportance "BirnbaumImportance[rdist, t] gives the Birnbaum importances for all components in the ReliabilityDistribution rdist at time t.\nBirnbaumImportance[fdist, t] gives the Birnbaum importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BirnbaumImportance)))
(def BirnbaumSaundersDistribution "BirnbaumSaundersDistribution[α, λ] represents the Birnbaum–Saunders distribution with shape parameter α and scale parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BirnbaumSaundersDistribution)))
(def BitAnd "BitAnd[n1, n2, …] gives the bitwise AND of the integers ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitAnd)))
(def BitClear "BitClear[n, k] sets to 0 the bit corresponding to the coefficient of 2^k in the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitClear)))
(def BitFlip "BitFlip[n, k] flips the bit corresponding to the coefficient of 2^k in the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitFlip)))
(def BitGet "BitGet[n, k] gets the bit corresponding to the coefficient of 2^k in the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitGet)))
(def BitLength "BitLength[n] gives the number of binary bits necessary to represent the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitLength)))
(def BitNot "BitNot[n] gives the bitwise NOT of the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitNot)))
(def BitOr "BitOr[n1, n2, …] gives the bitwise OR of the integers ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitOr)))
(def BitRate "BitRate is an option that specifies an approximate number of bits per second when creating video and audio files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitRate)))
(def BitSet "BitSet[n, k] sets to 1 the bit corresponding to the coefficient of 2^k in the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitSet)))
(def BitShiftLeft "BitShiftLeft[n, k] shifts the binary bits in the integer n to the left by k places, padding with zeros on the right.\nBitShiftLeft[n] shifts one bit to the left." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitShiftLeft)))
(def BitShiftRight "BitShiftRight[n, k] shifts the binary bits in the integer n to the right by k places, dropping bits that are shifted past the unit's position on the right. \nBitShiftRight[n] shifts one bit to the right." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitShiftRight)))
(def BitXor "BitXor[n1, n2, …] gives the bitwise XOR of the integers ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BitXor)))
(def BiweightLocation "BiweightLocation[list] gives the value of the biweight location estimator of the elements in list.\nBiweightLocation[list, c] gives the value of the biweight location estimator with scaling parameter c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BiweightLocation)))
(def BiweightMidvariance "BiweightMidvariance[list] gives the value of the biweight midvariance of the elements in list.\nBiweightMidvariance[list, c] gives the value of the biweight midvariance with scaling parameter c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BiweightMidvariance)))
(def Black "Black represents the color black in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Black)))
(def BlackmanHarrisWindow "BlackmanHarrisWindow[x] represents a Blackman–Harris window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlackmanHarrisWindow)))
(def BlackmanNuttallWindow "BlackmanNuttallWindow[x] represents a Blackman–Nuttall window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlackmanNuttallWindow)))
(def BlackmanWindow "BlackmanWindow[x] represents a Blackman window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlackmanWindow)))
(def Blank "_or Blank[] is a pattern object that can stand for any Wolfram Language expression. \n_h or Blank[h] can stand for any expression with head h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Blank)))
(def BlankNullSequence "___(three _characters) or BlankNullSequence[] is a pattern object that can stand for any sequence of zero or more Wolfram Language expressions. \n___h or BlankNullSequence[h] can stand for any sequence of expressions, all of which have head h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlankNullSequence)))
(def BlankSequence "__(two _characters) or BlankSequence[] is a pattern object that can stand for any sequence of one or more Wolfram Language expressions. \n__h or BlankSequence[h] can stand for any sequence of one or more expressions, all of which have head h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlankSequence)))
(def Blend "Blend[{col1, col2}, x] gives a color obtained by blending a fraction 1-x of color col1 and x of color col2.\nBlend[{col1, col2, col3, …}, x] linearly interpolates between colors coli as x varies from 0 to 1.\nBlend[{{x1, col1}, {x2, col2}, …}, x] interpolates to give coli when x=xi.\nBlend[{col1, col2, …}, {u1, u2, …}] blends all the coli, using fraction ui of color coli. \nBlend[{image1, image2, …}, …] blends pixel values of 2D or 3D images imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Blend)))
(def Block "Block[{x, y, …}, expr] specifies that expr is to be evaluated with local values for the symbols x, y, …. \nBlock[{x=x0, …}, expr] defines initial local values for x, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Block)))
(def BlockDiagonalMatrix "BlockDiagonalMatrix[{d1, d2, …}] represents the block diagonal matrix with diagonal blocks di as a structured array.\nBlockDiagonalMatrix[mat] converts the block diagonal matrix mat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockDiagonalMatrix)))
(def BlockLowerTriangularMatrix "BlockLowerTriangularMatrix[lmat] represents the block lower triangular matrix lmat as a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockLowerTriangularMatrix)))
(def BlockMap "BlockMap[f, list, n] applies f to non-overlapping sublists of length n in list. \nBlockMap[f, list, n, d] applies f to sublists with offset d in list. \nBlockMap[f, list, {n1, n2, …}, …] applies f to blocks of size n1×n2×…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockMap)))
(def BlockRandom "BlockRandom[expr] evaluates expr with all pseudorandom generators localized, so that uses of SeedRandom, RandomInteger, and related functions within the evaluation of expr do not affect subsequent pseudorandom sequences." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockRandom)))
(def BlockUpperTriangularMatrix "BlockUpperTriangularMatrix[umat] represents the block upper triangular matrix umat as a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockUpperTriangularMatrix)))
(def BlockchainAddressData "BlockchainAddressData[\"address\"] gives available information connected with the specified address on the default blockchain.\nBlockchainAddressData[assoc] gives available information connected with properties matching the specification in assoc.\nBlockchainAddressData[addressSpec, prop] gives the specified property of the blockchain address." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainAddressData)))
(def BlockchainBase "BlockchainBase is an option for various blockchain functions that specifies which blockchain to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainBase)))
(def BlockchainBlockData "BlockchainBlockData[\"hash\"] gives information about the block with the specified hash on the blockchain specified by $BlockchainBase.\nBlockchainBlockData[n] gives information about block n on the blockchain.\nBlockchainBlockData[-n] gives information about the block n elements from the end of the blockchain.\nBlockchainBlockData[bspec, prop] gives the specified property of the block." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainBlockData)))
(def BlockchainContractValue "BlockchainContractValue[caddr] gets the result obtained from a Wolfram expression contract at blockchain address caddr.\nBlockchainContractValue[caddr, prop] gets the property prop of the result obtained from a Wolfram expression contract with address caddr.\nBlockchainContractValue[caddr, func] calls the function func of a contract with address caddr. \nBlockchainContractValue[caddr, assoc] calls a contract with address caddr with the properties defined in Association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainContractValue)))
(def BlockchainData "BlockchainData[] gives information about the blockchain specified by $BlockchainBase.\nBlockchainData[property] gives the value of the specified property of the blockchain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainData)))
(def BlockchainGet "BlockchainGet[id] retrieves data from the Wolfram blockchain for the transaction with the specified ID." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainGet)))
(def BlockchainKeyEncode "BlockchainKeyEncode[key, form] encodes a private or public key in the specified blockchain format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainKeyEncode)))
(def BlockchainPut "BlockchainPut[expr] adds expr to the Wolfram blockchain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainPut)))
(def BlockchainTokenData "BlockchainTokenData[\"name\"] gives information about the use of tokens with the specified name on a blockchain.\nBlockchainTokenData[\"sym\"] gives information about tokens with symbol sym.\nBlockchainTokenData[\"address\"] gives information about tokens associated with the specified address.\nBlockchainTokenData[assoc] gives information about tokens with properties matching the specification in assoc.\nBlockchainTokenData[tokenspec, prop] gives the specified property of token usage." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainTokenData)))
(def BlockchainTransaction "BlockchainTransaction[assoc] represents a blockchain transaction built from the components in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainTransaction)))
(def BlockchainTransactionData "BlockchainTransactionData[txid] gives information about the blockchain transaction with ID txid on the blockchain specified by $BlockchainBase.\nBlockchainTransactionData[txid, prop] gives the specified property of the transaction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainTransactionData)))
(def BlockchainTransactionSign "BlockchainTransactionSign[obj, key] digitally signs a blockchain transaction using the specified private key.\nBlockchainTransactionSign[obj, {key1, key2, …}] digitally signs a transaction using all the keys keyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainTransactionSign)))
(def BlockchainTransactionSubmit "BlockchainTransactionSubmit[obj] submits the transaction specified in the BlockchainTransaction object obj to a blockchain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlockchainTransactionSubmit)))
(def BlomqvistBeta "BlomqvistBeta[v1, v2] gives Blomqvist's medial correlation coefficient β for the vectors v1 and v2.\nBlomqvistBeta[m] gives Blomqvist's medial correlation coefficient β for the matrix m.\nBlomqvistBeta[m1, m2] gives Blomqvist's medial correlation coefficient β for the matrices m1 and m2.\nBlomqvistBeta[dist] gives the medial correlation coefficient matrix for the multivariate symbolic distribution dist.\nBlomqvistBeta[dist, i, j] gives the (i, j)^th medial correlation coefficient for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlomqvistBeta)))
(def BlomqvistBetaTest "BlomqvistBetaTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nBlomqvistBetaTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nBlomqvistBetaTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BlomqvistBetaTest)))
(def Blue "Blue represents the color blue in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Blue)))
(def Blur "Blur[image] gives a blurred version of image.\nBlur[image, r] gives a version of image blurred over pixel radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Blur)))
(def Blurring "Blurring[r] is a two‐dimensional directive specifying that graphics objects are to be drawn with a blur effect of radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Blurring)))
(def BodePlot "BodePlot[lsys] generates a Bode plot of a linear time-invariant system lsys.\nBodePlot[lsys, {ωmin, ωmax}] plots for the frequency range ωmin to ωmax.\nBodePlot[expr, {ω, ωmin, ωmax}] plots expr using the variable ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BodePlot)))
(def BohmanWindow "BohmanWindow[x] represents a Bohman window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BohmanWindow)))
(def Bold "Bold represents a bold font weight." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Bold)))
(def Bond "Bond[{idi, idj}, type] represents a chemical bond between atoms with indices idi and idj of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Bond)))
(def BondCount "BondCount[mol] gives the number of bonds in the molecule mol.\nBondCount[mol, patt] gives the number of bonds in the molecule mol matching the bond pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BondCount)))
(def BondLabelStyle "BondLabelStyle is an option for MoleculePlot and MoleculePlot3D that specifies the style to use for bond labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BondLabelStyle)))
(def BondLabels "BondLabels is an option for MoleculePlot and MoleculePlot3D that specifies what labels and label positions should be used for bonds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BondLabels)))
(def BondList "BondList[mol] gives the list of bonds in the molecule mol.\nBondList[mol, patt] gives the list of bonds in the molecule mol matching the atom pattern patt.\nBondList[mol, patt, \"prop\"] gives the value for the specified property of the bonds matching patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BondList)))
(def BondQ "BondQ[m, bond] gives True if bond is a bond in the molecule m, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BondQ)))
(def Bookmarks "Bookmarks is an option for Manipulate and related functions that gives a list of bookmark settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Bookmarks)))
(def Boole "Boole[expr] yields 1 if expr is True and 0 if it is False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Boole)))
(def BooleanConsecutiveFunction "BooleanConsecutiveFunction[k, n] represents a Boolean function of n variables that gives True if k consecutive variables are True.\nBooleanConsecutiveFunction[{k, True}, n] treats the variable list as cyclic.\nBooleanConsecutiveFunction[{k1, k2, …, kd}, {n1, n2, …, nd}] represents a Boolean function of n1 n2 ⋯ nd variables that gives True if all variables in a k1k2…kd block of the n1n2…nd variable array are True.\nBooleanConsecutiveFunction[{{k1, k2, …, kd}, {c1, c2, …, cd}}, {n1, n2, …, nd}] treats the i ^th level of the variable array as cyclic if ci is True. \nBooleanConsecutiveFunction[spec, {a1, a2, …}] gives the Boolean expression in variables ai corresponding to the Boolean consecutive function specified by spec.\nBooleanConsecutiveFunction[spec, {a1, a2, …}, form] gives the Boolean expression in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanConsecutiveFunction)))
(def BooleanConvert "BooleanConvert[expr] converts the Boolean expression expr to disjunctive normal form.\nBooleanConvert[expr, form] converts the Boolean expression expr to the specified form.\nBooleanConvert[expr, form, cond] finds an expression in the specified form that is equivalent to expr when cond is true." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanConvert)))
(def BooleanCountingFunction "BooleanCountingFunction[kmax, n] represents a Boolean function of n variables that gives True if at most kmax variables are True.\nBooleanCountingFunction[{k}, n] represents a function of n variables that gives True if exactly k variables are True.\nBooleanCountingFunction[{kmin, kmax}, n] represents a function that gives True if between kmin and kmax variables are True.\nBooleanCountingFunction[{{k1, k2, …}}, n] represents a function that gives True if exactly ki variables are True.\nBooleanCountingFunction[spec, {a1, a2, …}] gives the Boolean expression in variables ai corresponding to the Boolean counting function specified by spec.\nBooleanCountingFunction[spec, {a1, a2, …}, form] gives the Boolean expression in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanCountingFunction)))
(def BooleanFunction "BooleanFunction[k, n] represents the k ^th Boolean function in n variables.\nBooleanFunction[values] represents the Boolean function corresponding to the specified vector of truth values.\nBooleanFunction[{{i11, i12, …}o1, …}] represents the Boolean function defined by the specified mapping from inputs to outputs.\nBooleanFunction[spec, {a1, a2, …}] gives the Boolean expression in variables ai corresponding to the Boolean function specified by spec.\nBooleanFunction[spec, {a1, a2, …}, form] gives the Boolean expression in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanFunction)))
(def BooleanGraph "BooleanGraph[bfunc, g1, …, gn] gives the Boolean graph defined by the Boolean function bfunc on the graphs g1, …, gn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanGraph)))
(def BooleanMaxterms "BooleanMaxterms[k, n] represents the k ^th maxterm in n variables.\nBooleanMaxterms[{k1, k2, …}, n] represents the conjunction of the maxterms ki.\nBooleanMaxterms[{{u1, …, un}, {v1, …}, …}] represents the conjunction of maxterms given by the exponent vectors ui, vi, ….\nBooleanMaxterms[spec, {a1, a2, …}] gives the Boolean expression in variables ai corresponding to the maxterms function specified by spec.\nBooleanMaxterms[spec, {a, a2, …}, form] gives the Boolean expression in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanMaxterms)))
(def BooleanMinimize "BooleanMinimize[expr] finds a minimal-length disjunctive normal form representation of expr.\nBooleanMinimize[expr, form] finds a minimal-length representation for expr in the specified form.\nBooleanMinimize[expr, form, cond] finds a minimal-length expression in the specified form that is equivalent to expr when cond is true." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanMinimize)))
(def BooleanMinterms "BooleanMinterms[k, n] represents the k ^th minterm in n variables.\nBooleanMinterms[{k1, k2, …}, n] represents the disjunction of the minterms ki.\nBooleanMinterms[{{u1, …, un}, {v1, …}, …}] represents the disjunction of minterms given by the exponent vectors ui, vi, ….\nBooleanMinterms[spec, {a1, a2, …}] gives the Boolean expression in variables ai corresponding to the minterms function specified by spec.\nBooleanMinterms[spec, {a, a2, …}, form] gives the Boolean expression in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanMinterms)))
(def BooleanQ "BooleanQ[expr] returns True if expr is either True or False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanQ)))
(def BooleanRegion "BooleanRegion[bfunc, {reg1, reg2, …}] represents the Boolean combination bfunc of regions reg1, reg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanRegion)))
(def BooleanStrings "BooleanStrings is an option to TextString and related functions that determines what strings correspond to the Wolfram Language symbols True and False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanStrings)))
(def BooleanTable "BooleanTable[bf] gives a list of truth values for all possible combinations of variable values supplied to the Boolean function bf.\nBooleanTable[expr, {a1, a2, …}] gives a list of the truth values of the Boolean expression expr for all possible combinations of values of the ai.\nBooleanTable[expr, {a1, a2, …}, {b1, …}, …] gives a nested table of truth values of expr with the outermost level giving possible combinations of the ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanTable)))
(def BooleanVariables "BooleanVariables[expr] gives a list of the Boolean variables in the Boolean expression expr.\nBooleanVariables[bf] gives the number of Boolean variables in the BooleanFunction object bf." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BooleanVariables)))
(def Booleans "Booleans represents the domain of Booleans, as in x∈Booleans." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Booleans)))
(def BorderDimensions "BorderDimensions[image] gives the pixel width of uniform borders of image in the form {{left, right}, {bottom, top}}.\nBorderDimensions[image, t] finds borders whose pixels vary by an amount less than t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BorderDimensions)))
(def BorelTannerDistribution "BorelTannerDistribution[α, n] represents a Borel–Tanner distribution with shape parameters α and n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BorelTannerDistribution)))
(def Bottom "Bottom is a symbol that represents the bottom for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Bottom)))
(def BottomHatTransform "BottomHatTransform[image, ker] gives the morphological bottom-hat transform of image with respect to structuring element ker.\nBottomHatTransform[image, r] gives the bottom-hat transform with respect to a range-r square.\nBottomHatTransform[data, …] applies a bottom-hat transform to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BottomHatTransform)))
(def BoundaryDiscretizeGraphics "BoundaryDiscretizeGraphics[g] discretizes a 2D or 3D graphic g into a BoundaryMeshRegion.\nBoundaryDiscretizeGraphics[g, patt] discretizes only the elements in g that match the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryDiscretizeGraphics)))
(def BoundaryDiscretizeRegion "BoundaryDiscretizeRegion[reg] discretizes the region reg into a BoundaryMeshRegion.\nBoundaryDiscretizeRegion[reg, {{xmin, xmax}, …}] restricts to the bounds [xmin, xmax]×⋯." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryDiscretizeRegion)))
(def BoundaryMesh "BoundaryMesh[mreg] gives a BoundaryMeshRegion from a MeshRegion mreg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryMesh)))
(def BoundaryMeshRegion "BoundaryMeshRegion[{p1, p2, …}, {bcell1[{i1, …}], bcell2[{j1, …}], …}] yields a mesh with boundary cells bcellj, where coordinates given as integer i are taken to be pi, where the cells together represent a closed curve, surface, etc.\nBoundaryMeshRegion[…, {…, wi[bcelli[…]], …}] yields a mesh with cell properties defined by the symbolic wrapper wi.\nBoundaryMeshRegion[…, boundary1, boundary2, …] yields a mesh from multiple boundaries boundaryi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryMeshRegion)))
(def BoundaryMeshRegionQ "BoundaryMeshRegionQ[reg] yields True if the region reg is a valid BoundaryMeshRegion object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryMeshRegionQ)))
(def BoundaryStyle "BoundaryStyle is an option for plotting functions that specifies the style in which boundaries of regions should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundaryStyle)))
(def BoundedRegionQ "BoundedRegionQ[reg] gives True if reg is a bounded region and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundedRegionQ)))
(def BoundingRegion "BoundingRegion[{pt1, pt2, …}] gives the minimal axis-aligned bounding box for the points pt1, pt2, ….\nBoundingRegion[{pt1, pt2, …}, form] gives a bounding region of type form. \nBoundingRegion[reg, form] gives a bounding region for the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoundingRegion)))
(def BoxData "BoxData[boxes] is a low-level representation of the contents of a typesetting cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxData)))
(def BoxMatrix "BoxMatrix[r] gives a (2 r+1)×(2r+1) matrix of 1s.\nBoxMatrix[r, w] gives a (2 r+1)×(2r+1) block of 1s centered in a w×w matrix of 0s.\nBoxMatrix[{r1, r2, …}, …] gives a (2 r1+1)× (2 r2+1) ×… array of 1s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxMatrix)))
(def BoxObject "BoxObject[id] is an object that represents a box structure in an open notebook in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxObject)))
(def BoxRatios "BoxRatios is an option for Graphics3D that gives the ratios of side lengths for the bounding box of the three‐dimensional picture." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxRatios)))
(def BoxStyle "BoxStyle is an option for three-dimensional graphics functions that specifies how the bounding box should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxStyle)))
(def BoxWhiskerChart "BoxWhiskerChart[{x1, x2, …}] makes a box‐and‐whisker chart for the values xi.\nBoxWhiskerChart[{x1, x2, …}, bwspec] makes a chart with box‐and‐whisker symbol specification bwspec.\nBoxWhiskerChart[{data1, data2, …}, …] makes a chart with box‐and‐whisker symbol for each datai.\nBoxWhiskerChart[{{data1, data2, …}, …}, …] makes a box‐and‐whisker chart from multiple groups of datasets {data1, data2, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BoxWhiskerChart)))
(def Boxed "Boxed is an option for Graphics3D that specifies whether to draw the edges of the bounding box in a three‐dimensional picture." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Boxed)))
(def Boxes "Boxes is a symbol that represents typeset boxes in InputField and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Boxes)))
(def Bra "Bra[{b1, b2, …}] displays as 〈b1, b2, …|." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Bra)))
(def BraKet "BraKet[{b1, b2, …}, {k1, k2, …}] displays as 〈b1, b2, …k1, k2, …〉." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BraKet)))
(def BracketingBar "BracketingBar[x, y, …] displays as x, y, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BracketingBar)))
(def BrayCurtisDistance "BrayCurtisDistance[u, v] gives the Bray–Curtis distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BrayCurtisDistance)))
(def BreadthFirstScan "BreadthFirstScan[g, s, {event1f1, event2f2, …}] performs a breadth-first scan (bfs) of the graph g starting at the vertex s and evaluates fi whenever \"eventi\" occurs.\nBreadthFirstScan[g, {event1->f1, event2->f2, …}] performs a breadth-first scan of the whole graph g.\nBreadthFirstScan[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BreadthFirstScan)))
(def Break "Break[] exits the nearest enclosing Do, For, Until or While." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Break)))
(def BridgeData "BridgeData[entity, property] gives the value of the specified property for the bridge entity.\nBridgeData[{entity1, entity2, …}, property] gives a list of property values for the specified bridge entities.\nBridgeData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BridgeData)))
(def BrightnessEqualize "BrightnessEqualize[image] adjusts the brightness across image, correcting uneven illumination.\nBrightnessEqualize[image, flatfield] uses the correction model given by flatfield, which models the variation in brightness across image.\nBrightnessEqualize[image, flatfield, darkfield] uses the dark environment model given by darkfield." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BrightnessEqualize)))
(def BroadcastStationData "BroadcastStationData[entity, property] gives the value of the specified property for the broadcast station entity.\nBroadcastStationData[{entity1, entity2, …}, property] gives a list of property values for the specified broadcast station entities.\nBroadcastStationData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BroadcastStationData)))
(def Brown "Brown represents the color brown in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Brown)))
(def BrownForsytheTest "BrownForsytheTest[data] tests whether the variance of data is 1. \nBrownForsytheTest[{data1, data2, …}] tests whether the variances of data1, data2, … are equal.\nBrownForsytheTest[dspec, σ_0^2] tests a dispersion measure against σ_0^2.\nBrownForsytheTest[dspec, σ_0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BrownForsytheTest)))
(def BrownianBridgeProcess "BrownianBridgeProcess[σ, {t1, a}, {t2, b}] represents the Brownian bridge process from value a at time t1 to value b at time t2 with volatility σ.\nBrownianBridgeProcess[{t1, a}, {t2, b}]  represents the standard Brownian bridge process from value a at time t1 to value b at time t2.\nBrownianBridgeProcess[t1, t2]  represents the standard Brownian bridge process pinned at 0 at times t1 and t2.\nBrownianBridgeProcess[] represents the standard Brownian bridge process pinned at 0 at time 0 and at time 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BrownianBridgeProcess)))
(def BubbleChart "BubbleChart[{{x1, y1, z1}, {x2, y2, z2}, …}] makes a bubble chart with bubbles at positions {xi, yi} with sizes zi.\nBubbleChart[{…, wi[{xi, yi, zi}, …], …, wj[{xj, yj, zj}, …], …}] makes a bubble chart with bubble features defined by the symbolic wrappers wk.\nBubbleChart[{data1, data2, …}] makes a bubble chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BubbleChart)))
(def BubbleChart3D "BubbleChart3D[{{x1, y1, z1, u1}, {x2, y2, z2, u2}, …}] makes a 3D bubble chart with bubbles at positions {xi, yi, zi} with sizes ui.\nBubbleChart3D[{…, wi[{xi, yi, zi, ui}, …], …, wj[{xj, yj, zj, uj}, …], …}] makes a 3D bubble chart with bubble features defined by the symbolic wrappers wk.\nBubbleChart3D[{data1, data2, …}] makes a 3D bubble chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BubbleChart3D)))
(def BubbleScale "BubbleScale is an option to BubbleChart and related functions that specifies how the scale of each bubble should be determined from the value of each data element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BubbleScale)))
(def BubbleSizes "BubbleSizes is an option to BubbleChart and related functions that specifies the range of sizes used for bubbles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BubbleSizes)))
(def BuckyballGraph "BuckyballGraph[] gives the buckyball graph.\nBuckyballGraph[n] gives the order‐n buckyball graph.\nBuckyballGraph[n, \"class\"] gives the order‐n buckyball graph of class \"class\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BuckyballGraph)))
(def BuildCompiledComponent "BuildCompiledComponent[comp] builds the compiled component comp.\nBuildCompiledComponent[comp, dest] builds the compiled component comp, placing the result in dest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BuildCompiledComponent)))
(def BuildingData "BuildingData[entity, property] gives the value of the specified property for the building entity.\nBuildingData[{entity1, entity2, …}, property] gives a list of property values for the specified building entities.\nBuildingData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BuildingData)))
(def BulletGauge "BulletGauge[value, reference, {min, max}] draws a bullet gauge showing value and reference in a range of min to max.\nBulletGauge[value, reference, {min, m1, m2, …, max}] draws a bullet gauge with performance regions split at the mi.\nBulletGauge[{v1, v2, …}, …] draws a bullet gauge with multiple values v1, v2, ….\nBulletGauge[values, {r1, r2, …}, …] draws a bullet gauge with multiple references r1, r2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BulletGauge)))
(def BusinessDayQ "BusinessDayQ[date] returns True if the date is a business day and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote BusinessDayQ)))
(def ButterflyGraph "ButterflyGraph[n] gives the order-n butterfly graph. \nButterflyGraph[n, b] gives the base-b order-n butterfly graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButterflyGraph)))
(def ButterworthFilterModel "ButterworthFilterModel[n] creates a lowpass Butterworth filter of order n and cutoff frequency of 1.\nButterworthFilterModel[{n, ωc}] uses the cutoff frequency ωc.\nButterworthFilterModel[{\"type\", spec}] creates a filter of a given \"type\" using the specified parameters spec. \nButterworthFilterModel[{\"type\", spec}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButterworthFilterModel)))
(def Button "Button[label, action] represents a button that is labeled with label, and evaluates action whenever it is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Button)))
(def ButtonBar "ButtonBar[{lbl1:>act1, lbl2:>act2, …}] represents a bar of buttons with labels lbli that perform actions acti when pressed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonBar)))
(def ButtonBox "ButtonBox[boxes] is a low-level box construct that represents a button in a notebook expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonBox)))
(def ButtonBoxOptions "ButtonBoxOptions is an option that specifies settings for ButtonBox." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonBoxOptions)))
(def ButtonData "ButtonData is an option for the low-level function ButtonBox that specifies the second argument to give to the ButtonFunction for the button when the button is active and is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonData)))
(def ButtonFunction "ButtonFunction is an option for the low-level function ButtonBox that specifies the function to execute when the button is active and is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonFunction)))
(def ButtonMinHeight "ButtonMinHeight is an option for the low-level function ButtonBox that specifies the minimum total height in units of font size that should be allowed for the button." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonMinHeight)))
(def ButtonNotebook "ButtonNotebook[] gives the notebook, if any, that contains the button which initiated the current evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonNotebook)))
(def ButtonSource "ButtonSource is an option for the low-level function ButtonBox that specifies the first argument to give to the ButtonFunction for the button when the button is active and is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ButtonSource)))
(def Byte "Byte represents a single byte of data in Read." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Byte)))
(def ByteArray "ByteArray[{b1, b2, …}] constructs a ByteArray object containing the byte values bi.\nByteArray[\"string\"] constructs a ByteArray object by extracting byte values from a Base64-encoded string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteArray)))
(def ByteArrayFormat "ByteArrayFormat[ba] attempts to determine what ImportByteArray format could be used to import the ByteArray object ba." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteArrayFormat)))
(def ByteArrayFormatQ "ByteArrayFormatQ[ba, \"fmt\"] gives True if the ByteArray object ba might be imported as format \"fmt\" and gives False otherwise.\nByteArrayFormatQ[ba, {fmt1, fmt2, …}] gives True if ba might be imported as one of \"fmti\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteArrayFormatQ)))
(def ByteArrayQ "ByteArrayQ[expr] gives True if expr is a valid ByteArray object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteArrayQ)))
(def ByteArrayToString "ByteArrayToString[ba] returns a string by decoding the data in the byte array ba, assuming UTF-8 encoding.\nByteArrayToString[ba, \"encoding\"] interprets the data in the specified character encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteArrayToString)))
(def ByteCount "ByteCount[expr] gives the number of bytes used internally by the Wolfram System to store expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteCount)))
(def ByteOrdering "ByteOrdering is an option for BinaryRead, BinaryWrite, and related functions that specifies what ordering of bytes should be assumed for your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ByteOrdering)))
(def C "C[i] is the default form for the i ^th parameter or constant generated in representing the results of various symbolic computations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote C)))
(def CDF "CDF[dist, x] gives the cumulative distribution function for the distribution dist evaluated at x.\nCDF[dist, {x1, x2, …}] gives the multivariate cumulative distribution function for the distribution dist evaluated at {x1, x2, …}.\nCDF[dist] gives the CDF as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CDF)))
(def CDFDeploy "CDFDeploy[\"file.cdf\", expr] deploys expr in a form that can be played by Wolfram Player.\nCDFDeploy[\"file.cdf\", notebook] deploys a notebook.\nCDFDeploy[\"file.cdf\", NotebookSelection[notebook]] deploys the current selection in notebook.\nCDFDeploy[\"outfile.cdf\", \"infile.nb\"] deploys the notebook \"infile.nb\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CDFDeploy)))
(def CDFWavelet "CDFWavelet[] represents a Cohen–Daubechies–Feauveau wavelet of type \"9/7\". \nCDFWavelet[\"type\"] represents a Cohen–Daubechies–Feauveau wavelet of type \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CDFWavelet)))
(def CForm "CForm[expr] prints as a C language version of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CForm)))
(def CMYKColor "CMYKColor[c, m, y, k] represents a color in the CMYK color space with cyan, magenta, yellow and black components.\nCMYKColor[c, m, y, k, a] specifies opacity a. \nCMYKColor[\"string\"] returns a color from an HTML color name etc.\nCMYKColor[color] returns the CMYK representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CMYKColor)))
(def CSGRegion "CSGRegion[{reg1, reg2, …}] represents the solid region corresponding to the union of solid regions reg1, reg2, ….\nCSGRegion[\"op\", {reg1, reg2, …}] represents the solid region corresponding to the Boolean combination \"op\" of regions reg1, reg2, ….\nCSGRegion[\"op\", {…, wi[regi], …}] represents the solid region defined by regions regi transformed by a geometric transformation wi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CSGRegion)))
(def CSGRegionQ "CSGRegionQ[reg] yields True if the region reg is a valid CSGRegion object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CSGRegionQ)))
(def CSGRegionTree "CSGRegionTree[reg] gives the tree expression representing the CSG region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CSGRegionTree)))
(def CTCLossLayer "CTCLossLayer[] represents a net layer that computes the connectionist temporal classification loss by comparing a sequence of class probability vectors with a sequence of indices representing the target classes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CTCLossLayer)))
(def CachePersistence "CachePersistence is an option for CloudObject and related cloud functions that specifies the time duration for which a response is cached by a client or on the server." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CachePersistence)))
(def CalendarConvert "CalendarConvert[date, calendar] converts the date object date to the specified calendar type calendar.\nCalendarConvert[date] converts to the default calendar type.\nCalendarConvert[{date1, …, daten}, calendar] converts date1 through daten to the specified calendar." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalendarConvert)))
(def CalendarData "CalendarData[cal] gives the default parameters associated with the date calendar cal.\nCalendarData[country] gives available holiday calendars for the stock exchanges in the country entity.\nCalendarData[cal, param] gives the value of the specified parameter param for calendar cal." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalendarData)))
(def CalendarType "CalendarType is an option that determines the calendar system in which all dates are to be interpreted and output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalendarType)))
(def CalibratedSystemModel "CalibratedSystemModel[…] represents the symbolic calibrated system model obtained from SystemModelCalibrate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalibratedSystemModel)))
(def CallPacket "CallPacket[integer, list] is a WSTP packet encapsulating a request to invoke the external function numbered integer with the arguments contained in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CallPacket)))
(def Callout "Callout[data, expr] displays expr in a plot as a callout pointing to data.\nCallout[data, expr, pos] displays a callout with expr at a position specified by pos.\nCallout[data, expr, pos, apos] displays a callout anchored at a position specified by apos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Callout)))
(def CalloutMarker "CalloutMarker is an option for Callout that specifies what marker to draw at the end of the leader in a callout." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalloutMarker)))
(def CalloutStyle "CalloutStyle is an option for Callout that specifies what style to use for callouts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CalloutStyle)))
(def CanberraDistance "CanberraDistance[u, v] gives the Canberra distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanberraDistance)))
(def Cancel "Cancel[expr] cancels out common factors in the numerator and denominator of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cancel)))
(def CancelButton "CancelButton[] represents a Cancel button in a dialog that closes the dialog window when clicked.\nCancelButton[action] represents a button labeled Cancel that evaluates action when clicked.\nCancelButton[label, action] uses label as the label for the button." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CancelButton)))
(def CandlestickChart "CandlestickChart[{{date1, {open1, high1, low1, close1}}, …}] makes a chart with candles representing open, high, low, and close prices for each date. \nCandlestickChart[{\"name\", daterange}] makes a candlestick chart for the financial entity \"name\" over the date range daterange." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CandlestickChart)))
(def CanonicalGraph "CanonicalGraph[g] gives a canonical form of the graph g.\nCanonicalGraph[{vw, …}] uses rules vw to specify the graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalGraph)))
(def CanonicalName "CanonicalName[entity] gives the canonical name for the entity specified by entity.\nCanonicalName[{entity1, …, entityn}] gives the canonical name for entity1 through entityn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalName)))
(def CanonicalWarpingCorrespondence "CanonicalWarpingCorrespondence[s1, s2] gives the canonical time warping (CTW) correspondence between sequences s1 and s2.\nCanonicalWarpingCorrespondence[s1, s2, warp] uses warp as initial warping correspondence.\nCanonicalWarpingCorrespondence[s1, s2, warp, win] uses a window win for local search." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalWarpingCorrespondence)))
(def CanonicalWarpingDistance "CanonicalWarpingDistance[s1, s2] gives the canonical time warping (CTW) distance between sequences s1 and s2.\nCanonicalWarpingDistance[s1, s2, init] uses init as the initial correspondence between the two sequences.\nCanonicalWarpingDistance[s1, s2, init, win] uses a window win for local search." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalWarpingDistance)))
(def CanonicalizePolygon "CanonicalizePolygon[poly] gives a canonical representation of the polygon poly with shared coordinates and with inner and outer boundaries.\nCanonicalizePolygon[poly, \"filter\"] gives a canonical representation of poly with the specified filter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalizePolygon)))
(def CanonicalizePolyhedron "CanonicalizePolyhedron[poly] gives a canonical representation of the polyhedron poly with shared coordinates and with inner and outer boundaries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalizePolyhedron)))
(def CanonicalizeRegion "CanonicalizeRegion[reg] gives a canonical representation of the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CanonicalizeRegion)))
(def CantorMesh "CantorMesh[n] gives a mesh region representing the n ^th-step Cantor set. \nCantorMesh[n, d] gives the n ^th-step Cantor set in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CantorMesh)))
(def CantorStaircase "CantorStaircase[x] gives the Cantor staircase function FC (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CantorStaircase)))
(def Canvas "Canvas[] represents an empty canvas in the current notebook in which you can do free-form drawing.\nCanvas[graphic] represents a canvas that initially contains the specified 2D graphic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Canvas)))
(def Cap "Cap[x, y, …] displays as x⌢y⌢…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cap)))
(def CapForm "CapForm[type] is a graphics primitive that specifies what type of caps should be used at the ends of lines, tubes, and related primitives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CapForm)))
(def CapitalDifferentialD "CapitalDifferentialD[x] displays as x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CapitalDifferentialD)))
(def Capitalize "Capitalize[string] yields a string in which the first character has been made uppercase.\nCapitalize[string, scheme] gives a string capitalized using the specified capitalization scheme." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Capitalize)))
(def CapsuleShape "CapsuleShape[{{x1, y1, z1}, {x2, y2, z2}}, r] represents the filled capsule between points {xi, yi, zi} and radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CapsuleShape)))
(def CaptureRunning "CaptureRunning is an option for signal acquisition functions that specifies whether to immediately start the capture." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CaptureRunning)))
(def CaputoD "CaputoD[f, {x, α}] gives the Caputo fractional differintegral (^C)0D_x^αf(x) of the function f (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CaputoD)))
(def CarlemanLinearize "CarlemanLinearize[sys, spec] Carleman linearizes the nonlinear state-space model sys according to spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlemanLinearize)))
(def CarlsonRC "CarlsonRC[x, y] gives the Carlson's elliptic integral RC (x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRC)))
(def CarlsonRD "CarlsonRD[x, y, z] gives the Carlson's elliptic integral RD (x, y, z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRD)))
(def CarlsonRE "CarlsonRE[x, y] gives the Carlson's elliptic integral RE (x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRE)))
(def CarlsonRF "CarlsonRF[x, y, z] gives the Carlson's elliptic integral RF (x, y, z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRF)))
(def CarlsonRG "CarlsonRG[x, y, z] gives the Carlson's elliptic integral RG (x, y, z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRG)))
(def CarlsonRJ "CarlsonRJ[x, y, z, ρ] gives Carlson's elliptic integral RJ (x, y, z, ρ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRJ)))
(def CarlsonRK "CarlsonRK[x, y] gives the Carlson's elliptic integral RK (x, y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRK)))
(def CarlsonRM "CarlsonRM[x, y, ρ] gives Carlson's elliptic integral RM (x, y, ρ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarlsonRM)))
(def CarmichaelLambda "CarmichaelLambda[n] gives the Carmichael function λ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CarmichaelLambda)))
(def CaseOrdering "CaseOrdering is an option for AlphabeticSort and related functions that specifies how upper versus lower case should be sorted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CaseOrdering)))
(def CaseSensitive "CaseSensitive[patt] represents a string pattern that requires matching typographical case, even with the overall option setting IgnoreCase->True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CaseSensitive)))
(def Cases "Cases[{e1, e2, …}, pattern] gives a list of the ei that match the pattern. \nCases[{e1, …}, patternrhs] gives a list of the values of rhs corresponding to the ei that match the pattern. \nCases[expr, pattern, levelspec] gives a list of all parts of expr on levels specified by levelspec that match the pattern. \nCases[expr, patternrhs, levelspec] gives the values of rhs that match the pattern. \nCases[expr, pattern, levelspec, n] gives the first n parts in expr that match the pattern. \nCases[pattern] represents an operator form of Cases that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cases)))
(def Cashflow "Cashflow[{c0, c1, …, cn}] represents a series of cash flows occurring at unit time intervals.\nCashflow[{c0, c1, …, cn}, q] represents cash flows occurring at time intervals q.\nCashflow[{{time1, c1}, {time2, c2}, …}] represents cash flows occurring at the specified times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cashflow)))
(def Casoratian "Casoratian[{y1, y2, …}, n] gives the Casoratian determinant for the sequences y1, y2, … depending on n.\nCasoratian[eqn, y, n] gives the Casoratian determinant for the basis of the solutions of the linear difference equation eqn involving y[n+m]. \nCasoratian[eqns, {y1, y2, …}, n] gives the Casoratian determinant for the system of linear difference equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Casoratian)))
(def Cast "Cast[val, type] converts val to the type type, for use in compiled code.\nCast[val, type, method] uses the specified casting method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cast)))
(def CastColumns "CastColumns[tab, {col1type1, …}] changes the type of coli to typei in the Tabular object tab." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CastColumns)))
(def Catalan "Catalan is Catalan's constant, with numerical value ≃0.915966." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Catalan)))
(def CatalanNumber "CatalanNumber[n] gives the n ^th Catalan number Cn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CatalanNumber)))
(def Catch "Catch[expr] returns the argument of the first Throw generated in the evaluation of expr. \nCatch[expr, form] returns value from the first Throw[value, tag] for which form matches tag. \nCatch[expr, form, f] returns f[value, tag]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Catch)))
(def CategoricalDistribution "CategoricalDistribution[{c1, c2, …}] represents a uniform categorical distribution over classes c1, c2, etc.\nCategoricalDistribution[{c1, c2, …}, {w1, w2, …}] represents a categorical distribution over classes ci with weights wi.\nCategoricalDistribution[{{a1, a2, …}, {b1, b2, …}, …}] represents a uniform multivariate categorical distribution over domain {a1, a2, …}×{b1, b2, …}×….\nCategoricalDistribution[domain, weights] uses the array weights to define probabilities over each element of the domain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CategoricalDistribution)))
(def Catenate "Catenate[{list1, list2, …}] yields a single list with all elements from the listi in order. \nCatenate[{assoc1, assoc2, …}] yields a list of all values in order appearing in the associations associ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Catenate)))
(def CatenateLayer "CatenateLayer[] represents a net layer that takes a list of input arrays and catenates them.\nCatenateLayer[n] represents a net layer that takes a list of input arrays and catenates them at level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CatenateLayer)))
(def CauchyDistribution "CauchyDistribution[a, b] represents a Cauchy distribution with location parameter a and scale parameter b.\nCauchyDistribution[] represents a Cauchy distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CauchyDistribution)))
(def CauchyMatrix "CauchyMatrix[x, y] represents the Cauchy matrix given by the generating vectors x and y as a structured array.\nCauchyMatrix[x] is equivalent to CauchyMatrix[x, x].\nCauchyMatrix[cmat] converts a Cauchy matrix cmat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CauchyMatrix)))
(def CauchyPointProcess "CauchyPointProcess[μ, λ, b, d] represents a Cauchy cluster point process with density μ, cluster mean λ and scale parameter b in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CauchyPointProcess)))
(def CauchyWindow "CauchyWindow[x] represents a Cauchy window function of x.\nCauchyWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CauchyWindow)))
(def CayleyGraph "CayleyGraph[group] returns a Cayley graph representation of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CayleyGraph)))
(def Ceiling "Ceiling[x] gives the smallest integer greater than or equal to x. \nCeiling[x, a] gives the smallest multiple of a greater than or equal to x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ceiling)))
(def CelestialSystem "CelestialSystem is an option for SunPosition, MoonPosition, and related functions that specifies the coordinate system to use for the results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CelestialSystem)))
(def Cell "Cell[contents] is the low-level representation of a cell inside a Wolfram System notebook. \nCell[contents, \"style\"] represents a cell in the specified style.\nCell[contents, style1, style2, …] represents a cell with multiple styles applied to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cell)))
(def CellAutoOverwrite "CellAutoOverwrite is an option for Cell which specifies whether an output cell should be overwritten by new output when the preceding input cell is evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellAutoOverwrite)))
(def CellBaseline "CellBaseline is an option for Cell which specifies where the baseline of the cell should be assumed to be when it appears inside another cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellBaseline)))
(def CellBracketOptions "CellBracketOptions is an option for cells that specifies settings for cell brackets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellBracketOptions)))
(def CellChangeTimes "CellChangeTimes is an option to Cell that specifies when changes were made to the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellChangeTimes)))
(def CellContext "CellContext is an option for Cell which specifies the context to use for the evaluation of the contents of the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellContext)))
(def CellDingbat "CellDingbat is an option for Cell which specifies what dingbat to use to emphasize a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellDingbat)))
(def CellDingbatMargin "CellDingbatMargin is an option for Cell that specifies the absolute margin in printer's points between the dingbat and the left cell frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellDingbatMargin)))
(def CellDynamicExpression "CellDynamicExpression is an option for cells that specifies an expression to be dynamically updated whenever the cell is visible on screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellDynamicExpression)))
(def CellEditDuplicate "CellEditDuplicate is an option for Cell which specifies whether the front end should make a copy of the cell before actually applying any changes in its contents that you request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellEditDuplicate)))
(def CellEpilog "CellEpilog is an option for Cell which gives an expression to evaluate after each ordinary evaluation of the contents of the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellEpilog)))
(def CellEvaluationDuplicate "CellEvaluationDuplicate is an option for Cell which specifies whether the front end should make a copy of the cell before performing any evaluation of its contents that you request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellEvaluationDuplicate)))
(def CellEvaluationFunction "CellEvaluationFunction is an option for Cell that gives a function to be applied to every expression from the cell that is sent to the kernel for ordinary evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellEvaluationFunction)))
(def CellEventActions "CellEventActions is an option for Cell that gives a list of actions to perform when specified events occur in connection with a cell in a notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellEventActions)))
(def CellFrame "CellFrame is an option for Cell that specifies whether a frame should be drawn around a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellFrame)))
(def CellFrameColor "CellFrameColor is an option that specifies the color of the frame around a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellFrameColor)))
(def CellFrameLabelMargins "CellFrameLabelMargins is an option for cells that specifies the absolute margins in printer's points between a cell's frame and the labels around the frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellFrameLabelMargins)))
(def CellFrameLabels "CellFrameLabels is an option that specifies the labels associated with the frame around a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellFrameLabels)))
(def CellFrameMargins "CellFrameMargins is an option for Cell that specifies the absolute margins in printer’s points to leave inside a frame that is drawn around a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellFrameMargins)))
(def CellGroup "CellGroup[{cell1, cell2, …}] gives an open group of cells that can appear in a Wolfram System notebook.\nCellGroup[{cell1, cell2, …}, 1] gives a cell group in which only the first cell is open.\nCellGroup[{cell1, cell2, …}, -1] gives a cell group in which only the last cell is open.\nCellGroup[{cell1, cell2, …}, {i1, i2, …}] gives a cell group in which cells i1, i2, … are open." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellGroup)))
(def CellGroupData "CellGroupData[{cell1, cell2, …}] is a low-level construct that represents an open group of cells in a notebook. \nCellGroupData[{cell1, cell2, …}, status] represents a cell group that is open or closed according to the value of status.\nCellGroupData[{cell1, cell2, …}, {i1, i2, …}] represents a cell group with cells at positions i1, i2, … open." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellGroupData)))
(def CellGrouping "CellGrouping is a notebook option that specifies how cells in the notebook should be assembled into groups." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellGrouping)))
(def CellID "CellID is an option for Cell that specifies a unique ID number for a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellID)))
(def CellLabel "CellLabel is an option for Cell which gives the label to use for a particular cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellLabel)))
(def CellLabelAutoDelete "CellLabelAutoDelete is an option for Cell which specifies whether a label for the cell should be automatically deleted if the contents of the cell are modified or the notebook containing the cell is saved in a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellLabelAutoDelete)))
(def CellLabelStyle "CellLabelStyle is an option for Cell that specifies the style to use in displaying cell labels marking inputs and outputs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellLabelStyle)))
(def CellLabelTemplate "CellLabelTemplate is an option for Cell that specifies string templates to use for formatting the default labels used for marking inputs and outputs" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellLabelTemplate)))
(def CellMargins "CellMargins is an option for Cell that specifies the absolute margins in printer's points to leave around a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellMargins)))
(def CellObject "CellObject[id] is an object that represents a cell in an open notebook in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellObject)))
(def CellOpen "CellOpen is an option for Cell that specifies whether the contents of a cell should be explicitly displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellOpen)))
(def CellPrint "CellPrint[expr] inserts expr as a complete cell in the current notebook just below the cell being evaluated. \nCellPrint[{expr1, expr2, …}] inserts a sequence of cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellPrint)))
(def CellProlog "CellProlog is an option to Cell that gives an expression to evaluate before each ordinary evaluation of the contents of the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellProlog)))
(def CellStyle "CellStyle is a setting for functions such as NotebookFind and Cells that specifies the name of a cell style to search for in a notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellStyle)))
(def CellStyleImportRules "CellStyleImportRules is an option for NotebookImport specifying how to import cells with given cell style names." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellStyleImportRules)))
(def CellTags "CellTags is an option for Cell that gives a list of tags to associate with a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellTags)))
(def Cells "Cells[] returns a list of CellObject expressions corresponding to cells in the current notebook.\nCells[obj] returns the list of CellObject expressions in obj.\nCells[NotebookSelection[notebook]] returns the list of CellObject expressions for currently selected cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cells)))
(def CellularAutomaton "CellularAutomaton[rule, init, t] generates a list representing the evolution of the cellular automaton with the specified rule from initial condition init for t steps. \nCellularAutomaton[rule, init] gives the result of evolving init for one step. \nCellularAutomaton[rule, init, {tspec, xspec, …}] gives only those parts of the evolution specified by tspec, xspec, etc. \nCellularAutomaton[rule, init, {t, All, …}] includes at each step all cells that could be affected over the course of t steps. \nCellularAutomaton[rule] is an operator form of CellularAutomaton that represents one step of evolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CellularAutomaton)))
(def CensoredDistribution "CensoredDistribution[{xmin, xmax}, dist] represents the distribution of values that come from dist and are censored to be between xmin and xmax.\nCensoredDistribution[{{xmin, xmax}, {ymin, ymax}, …}, dist] represents the distribution of values that come from the multivariate distribution dist and are censored to be between xmin and xmax, ymin and ymax, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CensoredDistribution)))
(def Censoring "Censoring[t, c] represents a censored event time t with censoring c.\nCensoring[{t1, t2, …}, c] represents a vector of censored event times ti with censoring c.\nCensoring[{t1, t2, …}, {c1, c2, …}] represents a vector of event times ti with corresponding censoring ci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Censoring)))
(def Center "Center is a symbol that represents the center for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Center)))
(def CenterArray "CenterArray[a, n] creates a list of length n with the elements of a at the center and zeros elsewhere.\nCenterArray[a, {n1, n2, …}] creates an n1×n2×… array with the array a at the center and zeros elsewhere.\nCenterArray[a, nspec, pad] uses pad instead of zero for the background.\nCenterArray[nspec] creates an array with a single 1 at the center and zeros elsewhere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CenterArray)))
(def CenterDot "CenterDot[x, y, …] displays as x·y·…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CenterDot)))
(def CenteredInterval "CenteredInterval[x, dx] for real numbers x and dx gives a centered interval that contains the real interval {a∈|x-dx≤a≤x+dx}.\nCenteredInterval[x+ y, dx+ dy] gives a centered interval that contains the complex rectangle {a+ b∈|x-dx≤a≤x+dx∧y-dy≤b≤y+dy}.\nCenteredInterval[c] for an approximate number c gives a centered interval that contains all values within the error bounds of c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CenteredInterval)))
(def CentralFeature "CentralFeature[{x1, x2, …}] gives the central feature of the elements xi.\nCentralFeature[{x1v1, x2v2, …}] gives the vi corresponding to the central feature xi.\nCentralFeature[data] gives the central feature for several different forms of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CentralFeature)))
(def CentralMoment "CentralMoment[data, r] gives the order r  central moment Overscript[μ, ~]r of data.\nCentralMoment[data, {r1, …, rm}] gives the order {r1, …, rm} multivariate central moment Overscript[μ, ~]r1, …, rm of data.\nCentralMoment[dist, …] gives the central moment of the distribution dist.\nCentralMoment[r] represents the order r  formal central moment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CentralMoment)))
(def CentralMomentGeneratingFunction "CentralMomentGeneratingFunction[dist, t] gives the central moment-generating function for the distribution dist as a function of the variable t. \nCentralMomentGeneratingFunction[dist, {t1, t2, …}] gives the central moment-generating function for the multivariate distribution dist as a function of the variables t1, t2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CentralMomentGeneratingFunction)))
(def Cepstrogram "Cepstrogram[data] plots the array of power cepstra computed on each partition of data.\nCepstrogram[data, n] uses partitions of length n.\nCepstrogram[data, n, d] uses partitions with offset d.\nCepstrogram[data, n, d, wfun] applies a smoothing window wfun to each partition.\nCepstrogram[data, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cepstrogram)))
(def CepstrogramArray "CepstrogramArray[data] computes an array of cepstra on data.\nCepstrogramArray[data, n] uses partitions of length n.\nCepstrogramArray[data, n, d] uses partitions with offset d.\nCepstrogramArray[data, n, d, wfun] applies a smoothing window wfun to each partition.\nCepstrogramArray[data, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CepstrogramArray)))
(def CepstrumArray "CepstrumArray[data] computes the power cepstrum of data.\nCepstrumArray[data, type] computes the specified type of cepstrum of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CepstrumArray)))
(def ChampernowneNumber "ChampernowneNumber[b] gives the base-b Champernowne number Cb.\nChampernowneNumber[] gives the base-10 Champernowne number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChampernowneNumber)))
(def ChanVeseBinarize "ChanVeseBinarize[image] finds a two-level segmentation of image by computing optimal contours around regions of consistent intensity in image.\nChanVeseBinarize[image, marker] uses marker to create an initial contour.\nChanVeseBinarize[image, marker, {μ, ν, λ1, λ2}] specify the Chan–Vese weights μ, ν, λ1, and λ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChanVeseBinarize)))
(def ChannelBase "ChannelBase is an option specifying the base URL of the server to use for brokering channel communications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelBase)))
(def ChannelBrokerAction "ChannelBrokerAction is an option specifying the action to execute on the channel broker server in addition to routing a message." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelBrokerAction)))
(def ChannelHistoryLength "ChannelHistoryLength is an option to ChannelListen that specifies the maximum number of messages to cache in the channel listener object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelHistoryLength)))
(def ChannelListen "ChannelListen[channel] starts listening on the specified channel.\nChannelListen[channel, func] applies func to the association corresponding to each message received on the channel.\nChannelListen[channel, None] stores each message received on the channel, without applying any function.\nChannelListen[url] listens on the specified URL, storing messages received, without requiring an explicit channel to exist on the channel broker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelListen)))
(def ChannelListener "ChannelListener[…] represents a channel listener created by ChannelListen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelListener)))
(def ChannelListeners "ChannelListeners[] gives a list of currently active channel listeners." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelListeners)))
(def ChannelObject "ChannelObject[] gives a new anonymous channel specification.\nRowBox[{\"ChannelObject\", \"[\", \"\"mqtts://… \"\",\"]\"}] represents a channel specified by a given URL.\nChannelObject[\"relpath\"] represents a channel for the currently authenticated user at a relative path.\nChannelObject[\"id:path\"] represents a channel for the user with the specified Wolfram ID at the given path.\nChannelObject[\"/abspath\"] represents a channel at an absolute path on the channel broker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelObject)))
(def ChannelReceiverFunction "ChannelReceiverFunction[fun] represents a channel receiver function that applies fun to any channel message it receives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelReceiverFunction)))
(def ChannelSend "ChannelSend[channel, msg] sends the specified message msg to the specified channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelSend)))
(def ChannelSubscribers "ChannelSubscribers[channel] gives a list of users currently subscribed to the specified channel.\nChannelSubscribers[{channel1, channel2, …}] gives a list of subscribed users for each of the channels channeli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChannelSubscribers)))
(def Character "Character represents a single character in Read." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Character)))
(def CharacterCounts "CharacterCounts[\"string\"] gives an association whose keys are the distinct characters in string, and whose values give the number of times those characters appear in string.\nCharacterCounts[\"string\", n] gives counts of the distinct n-grams consisting of runs of n characters in string.\nCharacterCounts[{string1, string2, …}, …] gives the counts for each of the stringi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacterCounts)))
(def CharacterEncoding "CharacterEncoding is an option for input and output functions which specifies what raw character encoding should be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacterEncoding)))
(def CharacterName "CharacterName[\"c\"] gives the name of the character c.\nCharacterName[n] gives the name of the character with character code n.\nCharacterName[c, \"type\"] gives a name of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacterName)))
(def CharacterNormalize "CharacterNormalize[\"text\", form] converts the characters in text to the specified normalization form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacterNormalize)))
(def CharacterRange "CharacterRange[c1, c2] yields a list of the characters in the range from \"c1\" to \"c2\". \nCharacterRange[n1, n2] yields a list of the characters with character codes in the range n1 to n2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacterRange)))
(def CharacteristicFunction "CharacteristicFunction[dist, t] gives the characteristic function for the distribution dist as a function of the variable t.\nCharacteristicFunction[dist, {t1, t2, …}] gives the characteristic function for the multivariate distribution dist as a function of the variables t1, t2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacteristicFunction)))
(def CharacteristicPolynomial "CharacteristicPolynomial[m, x] gives the characteristic polynomial for the matrix m. \nCharacteristicPolynomial[{m, a}, x] gives the generalized characteristic polynomial with respect to a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CharacteristicPolynomial)))
(def Characters "Characters[\"string\"] gives a list of the characters in a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Characters)))
(def ChartBaseStyle "ChartBaseStyle is an option for charting functions that specifies the base style for all chart elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartBaseStyle)))
(def ChartElementFunction "ChartElementFunction is an option for charting functions such as BarChart that gives a function to use to generate the primitives for rendering each chart element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartElementFunction)))
(def ChartElements "ChartElements is an option to charting functions such as BarChart that specifies the graphics to use as the basis for bars or other chart elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartElements)))
(def ChartLabels "ChartLabels is an option for charting functions that specifies what labels should be used for chart elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartLabels)))
(def ChartLayout "ChartLayout is an option to charting functions that specifies the overall layout to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartLayout)))
(def ChartLegends "ChartLegends is an option for charting functions that specifies what legends should be used for chart elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartLegends)))
(def ChartStyle "ChartStyle is an option for charting functions that specifies styles in which chart elements should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChartStyle)))
(def ChatEvaluate "ChatEvaluate[chat, prompt] appends prompt and its follow-up to the ChatObject chat.\nChatEvaluate[prompt] represents an operator form of ChatEvaluate that can be applied to a ChatObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChatEvaluate)))
(def ChatObject "ChatObject[] represents an ongoing conversation with a remote service.\nChatObject[init] creates a new chat using the initialization init.\nChatObject[…][prop] extracts the property prop from the object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChatObject)))
(def ChatSubmit "ChatSubmit[chat, prompt] submits prompt to be appended with its follow-ups to the ChatObject chat asynchronously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChatSubmit)))
(def Chebyshev1FilterModel "Chebyshev1FilterModel[n] creates a lowpass Chebyshev type 1 filter of order n.\nChebyshev1FilterModel[{n, ωc}] uses the cutoff frequency ωc.\nChebyshev1FilterModel[{\"type\", spec}] creates a filter of a given \"type\" using the specified parameters spec. \nChebyshev1FilterModel[{\"type\", spec}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Chebyshev1FilterModel)))
(def Chebyshev2FilterModel "Chebyshev2FilterModel[n] creates a lowpass Chebyshev type 2 filter of order n.\nChebyshev2FilterModel[{n, ωc}] uses the cutoff frequency ωc.\nChebyshev2FilterModel[{\"type\", spec}] uses the full filter specification {\"type\", spec}.\nChebyshev2FilterModel[{\"type\", spec}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Chebyshev2FilterModel)))
(def ChebyshevT "ChebyshevT[n, x] gives the Chebyshev polynomial of the first kind Tn (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChebyshevT)))
(def ChebyshevU "ChebyshevU[n, x] gives the Chebyshev polynomial of the second kind Un (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChebyshevU)))
(def Check "Check[expr, failexpr] evaluates expr, and returns the result, unless messages were generated, in which case it evaluates and returns failexpr. \nCheck[expr, failexpr, {s1::t1, s2::t2, …}] checks only for the specified messages. \nCheck[expr, failexpr, \"name\"] checks only for messages in the named message group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Check)))
(def CheckAbort "CheckAbort[expr, failexpr] evaluates expr, returning failexpr if an abort occurs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CheckAbort)))
(def CheckArguments "CheckArguments[f[args], n] gives True if args consists of exactly n positional arguments followed by valid options for f, and False otherwise.\nCheckArguments[f[args], {min, max}] requires the number of positional arguments to be between min and max.\nCheckArguments[f[args], spec, assoc] modifies the behavior based on the information in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CheckArguments)))
(def Checkbox "Checkbox[x] represents a checkbox with setting x, displayed as  when x is True and  when x is False. \nCheckbox[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the checkbox is clicked. \nCheckbox[x, {val1, val2}] represents a checkbox that toggles between values val1 and val2 and displays as  and , respectively. \nCheckbox[x, {val1, val2, val3, …}] represents a checkbox that cycles through values vali and displays as  for all vali with i>2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Checkbox)))
(def CheckboxBar "CheckboxBar[x, {val1, val2, …}] represents a checkbox bar with setting x and with checkboxes for values vali to include in the list x.\nCheckboxBar[Dynamic[x], {val1, val2, …}] takes the setting to be the dynamically updated current value of x, with the values in the list x being reset every time a checkbox is clicked.\nCheckboxBar[x, {val1lbl1, val2lbl2, …}] represents a checkbox bar in which the checkbox associated with value vali has label lbli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CheckboxBar)))
(def ChemicalConvert "ChemicalConvert[cheminst, targetunit] converts the quantity in the specified instance cheminst to targetunit.\nChemicalConvert[cheminst] converts to SI base units." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChemicalConvert)))
(def ChemicalData "ChemicalData[\"name\", \"property\"] gives the value of the specified property for the chemical \"name\".\nChemicalData[\"name\"] gives a structure diagram for the chemical with the specified name.\nChemicalData[\"class\"] gives a list of available chemicals in the specified class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChemicalData)))
(def ChemicalFormula "ChemicalFormula[elem1n1, elem2n2, …|>] represents a chemical species with ni atoms of the element elemi.\nChemicalFormula[chem] returns the chemical formula corresponding to the given input.\nChemicalFormula[…, qual1val1, qual2val2 …|>] represents a species whose qualifiers quali have values vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChemicalFormula)))
(def ChemicalInstance "ChemicalInstance[chemical, <|qual1val1, qual2val2, |>] represents a chemical whose qualifiers quali have values of vali.\nChemicalInstance[chemical, quantity] represents a chemical quantified by quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChemicalInstance)))
(def ChemicalReaction "ChemicalReaction[reactantsproducts] represents a chemical reaction between the given reactants and products." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChemicalReaction)))
(def ChessboardDistance "ChessboardDistance[u, v] gives the chessboard, Chebyshev, or sup norm distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChessboardDistance)))
(def ChiDistribution "ChiDistribution[ν] represents a χ distribution with ν degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChiDistribution)))
(def ChiSquareDistribution "ChiSquareDistribution[ν] represents a χ^2 distribution with ν degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChiSquareDistribution)))
(def ChineseRemainder "ChineseRemainder[{r1, r2, …}, {m1, m2, …}] gives the smallest x with x≥0 that satisfies all the integer congruences x mod miri mod mi.\nChineseRemainder[{r1, r2, …}, {m1, m2, …}, d] gives the smallest x with x≥d that satisfies all the integer congruences x mod miri mod mi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChineseRemainder)))
(def ChoiceButtons "ChoiceButtons[] represents a pair of OK and Cancel buttons that close a dialog.\nChoiceButtons[{actok, actcancel}] represents OK and Cancel buttons that evaluate the corresponding acti when clicked.\nChoiceButtons[{lblok, lblcancel}, {actok, actcancel}] uses the lbli to label the buttons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChoiceButtons)))
(def ChoiceDialog "ChoiceDialog[expr] puts up a standard choice dialog that displays expr together with OK and Cancel buttons, and returns True if OK is clicked and False if Cancel is clicked.\nChoiceDialog[expr, {lbl1val1, lbl2val2, …}] includes buttons with labels lbli, and returns the corresponding vali for the button clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChoiceDialog)))
(def CholeskyDecomposition "CholeskyDecomposition[m] gives the Cholesky decomposition of a matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CholeskyDecomposition)))
(def Chop "Chop[expr] replaces approximate real numbers in expr that are close to zero by the exact integer 0. \nChop[expr, delta] replaces numbers smaller in absolute magnitude than delta by 0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Chop)))
(def ChromaticPolynomial "ChromaticPolynomial[g, k] gives the chromatic polynomial of the graph g.\nChromaticPolynomial[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChromaticPolynomial)))
(def ChromaticityPlot "ChromaticityPlot[colspace] plots a 2D slice of the color space colspace. \nChromaticityPlot[color] plots the specific color.\nChromaticityPlot[{col1, col2, …}] plots multiple colors and color spaces.\nChromaticityPlot[image] plots the pixels of image as individual colors.\nChromaticityPlot[…, refcolspace] uses the reference color space refcolspace." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChromaticityPlot)))
(def ChromaticityPlot3D "ChromaticityPlot3D[colspace] returns a 3D gamut of the color space colspace.\nChromaticityPlot3D[color] plots the specific color.\nChromaticityPlot3D[image] plots the pixels of image as individual colors.\nChromaticityPlot3D[{input1, input2, …}] plots multiple colors, color spaces and images.\nChromaticityPlot3D[…, refcolspace] uses the reference color space refcolspace." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ChromaticityPlot3D)))
(def Circle "Circle[{x, y}, r] represents a circle of radius r centered at {x, y}.\nCircle[{x, y}] gives a circle of radius 1. \nCircle[{x, y}, {rx, ry}] gives an axis-aligned ellipse with semiaxes lengths rx and ry.\nCircle[{x, y}, …, {θ1, θ2}] gives a circular or ellipse arc from angle θ1 to θ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Circle)))
(def CircleDot "CircleDot[x, y, …] displays as x⊙y⊙…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircleDot)))
(def CircleMinus "CircleMinus[x, y] displays as x⊖y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircleMinus)))
(def CirclePlus "CirclePlus[x, y, …] displays as x⊕y⊕…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CirclePlus)))
(def CirclePoints "CirclePoints[n] gives the positions of n points equally spaced around the unit circle.\nCirclePoints[r, n] gives the positions of n points equally spaced around a circle of radius r.\nCirclePoints[{r, θ1}, n] starts at angle θ1 with respect to the x axis.\nCirclePoints[{x, y}, rspec, n] centers the circle at {x, y}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CirclePoints)))
(def CircleThrough "CircleThrough[{p1, p2, …}] represents a circle passing through the points pi.\nCircleThrough[{p1, p2, …}, q] represents a circle with center q.\nCircleThrough[{p1, p2, …}, q, r] represents a circle with radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircleThrough)))
(def CircleTimes "CircleTimes[x] displays as ⊗x.\nCircleTimes[x, y, …] displays as x⊗y⊗…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircleTimes)))
(def CirculantGraph "CirculantGraph[n, j] gives the circulant graph Cn(j) with n vertices and jump j.\nCirculantGraph[n, {j1, j2, …}] gives the circulant graph Cn(j1, j2, …) with n vertices and jumps j1, j2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CirculantGraph)))
(def CircularArcThrough "CircularArcThrough[{p1, p2, …}] represents a circular arc passing through the points pi.\nCircularArcThrough[{p1, p2, …}, q] represents a circular arc with center q.\nCircularArcThrough[{p1, p2, …}, q, r] represents a circular arc with radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularArcThrough)))
(def CircularOrthogonalMatrixDistribution "CircularOrthogonalMatrixDistribution[n] represents a circular orthogonal matrix distribution with matrix dimensions {n, n}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularOrthogonalMatrixDistribution)))
(def CircularQuaternionMatrixDistribution "CircularQuaternionMatrixDistribution[n] represents a circular quaternion matrix distribution with matrix dimensions {2 n, 2 n} over the field of complex numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularQuaternionMatrixDistribution)))
(def CircularRealMatrixDistribution "CircularRealMatrixDistribution[n] represents a circular real matrix distribution with matrix dimensions {n, n}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularRealMatrixDistribution)))
(def CircularSymplecticMatrixDistribution "CircularSymplecticMatrixDistribution[n] represents a circular symplectic matrix distribution with matrix dimensions {2 n, 2 n} over the field of complex numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularSymplecticMatrixDistribution)))
(def CircularUnitaryMatrixDistribution "CircularUnitaryMatrixDistribution[n] represents a circular unitary matrix distribution with matrix dimensions {n, n}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircularUnitaryMatrixDistribution)))
(def CircumscribedBall "CircumscribedBall[{p1, p2, …}] gives a ball with minimal radius that encloses the points p1, p2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CircumscribedBall)))
(def Circumsphere "Circumsphere[{p1, …, p n+1}] gives the sphere that circumscribes the points pi in ^n.\nCircumsphere[poly] gives the circumsphere of a polyhedron or polygon poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Circumsphere)))
(def CityData "CityData[name, \"property\"] gives the value of the specified property for the city with the specified name.\nCityData[name] gives a list of the full specifications of cities whose names are consistent with name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CityData)))
(def ClassPriors "ClassPriors is an option for Classify and related functions that specifies explicit prior probabilities to assume for output classes, independent of anything deduced from the training set." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClassPriors)))
(def ClassifierFunction "ClassifierFunction[…] represents a function generated by Classify that classifies data into classes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClassifierFunction)))
(def ClassifierMeasurements "ClassifierMeasurements[classifier, testset, prop] gives measurements associated with property prop when classifier is evaluated on testset.\nClassifierMeasurements[classifier, testset] yields a measurement report that can be applied to any property.\nClassifierMeasurements[data, …] uses classifications data instead of a classifier.\nClassifierMeasurements[…, {prop1, prop2, …}] gives properties prop1, prop2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClassifierMeasurements)))
(def ClassifierMeasurementsObject "ClassifierMeasurementsObject[…] represents an object generated by ClassifierMeasurements that can be applied to properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClassifierMeasurementsObject)))
(def Classify "Classify[{in1class1, in2class2, …}] generates a ClassifierFunction that attempts to predict classi from the example ini.\nClassify[data, input] attempts to predict the output associated with input from the training examples given.\nClassify[data, input, prop] computes the specified property prop relative to the prediction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Classify)))
(def Clear "Clear[s1, s2, …] clears values and definitions for the symbols si. \nClear[patt1, patt2, …] clears values and definitions for all symbols whose names textually match any of the arbitrary string patterns patti.\nClear[{spec1, spec2, …}] clears values and definitions for any symbols that are equal to or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Clear)))
(def ClearAll "ClearAll[s1, s2, …] clears all values, definitions, attributes, defaults, options and messages for the symbols si.\nClearAll[patt1, patt2, …] clears all symbols whose names textually match any of the arbitrary string patterns patti.\nClearAll[{spec1, spec, …}] clears any symbols that are equal to or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearAll)))
(def ClearAttributes "ClearAttributes[symbol, attr] removes attr from the list of attributes of the symbol symbol. \nClearAttributes[\"symbol\", attr] removes attr from the attributes of the symbol named \"symbol\" if it exists.\nClearAttributes[s, {attr1, attr2, …}] removes several attributes at a time.\nClearAttributes[{s1, s2, …}, attrs] removes attributes from several symbols at a time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearAttributes)))
(def ClearCookies "ClearCookies[domain] clears all persistent and session cookies associated with the specified domain.\nClearCookies[assoc] clears all cookies whose attributes match the specification in the association assoc.\nClearCookies[All] clears all persistent and session cookies for all domains." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearCookies)))
(def ClearDistributedDefinitions "ClearDistributedDefinitions[s1, s2, …] clears all previously distributed definitions of symbols si on all parallel kernels.\nClearDistributedDefinitions[] clears all previously distributed definitions of all symbols." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearDistributedDefinitions)))
(def ClearPermissions "ClearPermissions[obj, class] clears permissions for the specified class of users for the cloud object obj. \nClearPermissions[class] clears permissions for the cloud object corresponding to the current document." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearPermissions)))
(def ClearSystemCache "ClearSystemCache[] clears internal system caches of stored results.\nClearSystemCache[type] clears only caches of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClearSystemCache)))
(def ClebschGordan "ClebschGordan[{j1, m1}, {j2, m2}, {j, m}] gives the Clebsch–Gordan coefficient for the decomposition of j, m〉 in terms of j1, m1〉j2, m2〉." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClebschGordan)))
(def ClickPane "ClickPane[image, func] represents a clickable pane that displays as image and applies func to the x, y coordinates of each click within the pane.\nClickPane[image, {{xmin, ymin}, {xmax, ymax}}, func] specifies the range of coordinates to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClickPane)))
(def ClickToCopy "ClickToCopy[expr] represents a button that copies expr whenever it is clicked.\nClickToCopy[label, expr] displays with label on the button." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClickToCopy)))
(def ClickToCopyEnabled "ClickToCopyEnabled is an option for Cell that specifies whether to show a click-to-copy overlay when hovering over a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClickToCopyEnabled)))
(def Clip "Clip[x] gives x clipped to be between -1 and +1. \nClip[x, {min, max}] gives x for min≤x≤max, min for x<min and max for x>max. \nClip[x, {min, max}, {vmin, vmax}] gives vmin for x<min and vmax for x>max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Clip)))
(def ClipPlanes "ClipPlanes is an option to Graphics3D that specifies a list of clipping planes that can cut away portions of a 3D scene from the resulting view." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClipPlanes)))
(def ClipPlanesStyle "ClipPlanesStyle is an option to Graphics3D that specifies how clipping planes defined with the ClipPlanes option should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClipPlanesStyle)))
(def ClipRange "ClipRange is an option to Raster3D that specifies a rectangular region that is cut away from the resulting view." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClipRange)))
(def ClippingStyle "ClippingStyle is an option for plotting functions that specifies the style of what should be drawn when curves or surfaces would extend beyond the plot range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClippingStyle)))
(def Clock "Clock[] represents a clock variable whose value cycles continuously from 0 to 1 once per second when it appears inside a dynamically updated object such as a Dynamic. \nClock[t] cycles from 0 to t every t seconds.\nClock[vmax, t] cycles from 0 to vmax every t seconds.\nClock[{vmin, vmax}, t] cycles through the range vmin to vmax every t seconds.\nClock[{vmin, vmax}] cycles through the range vmin to vmax over the course of vmax-vmin seconds.\nClock[{vmin, vmax, dv}] cycles from vmin to vmax in steps of dv, spending dv seconds at each value.\nClock[{vmin, vmax, dv}, t] cycles from vmin to vmax in steps dv every t seconds.\nClock[vals, t, n] goes through the cycle only n times, then always yields only the maximum value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Clock)))
(def ClockGauge "ClockGauge[] draws an analog clock face showing the local time with hours, minutes, and seconds.\nClockGauge[time] draws an analog clock face showing the time corresponding to an AbsoluteTime, DateObject, or TimeObject specification.\nClockGauge[{h, m, s}] draws an analog clock face showing hour h, minute m, and seconds s.\nClockGauge[{y, m, d, h, m, s}] draws an analog clock face showing the time corresponding to the date list in a DateList specification.\nClockGauge[\"string\"] draws an analog clock face showing the time DateList[\"string\"]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClockGauge)))
(def Close "Close[obj] closes a stream or socket." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Close)))
(def CloseKernels "CloseKernels[] terminates all parallel kernels from the list ParallelKernels[].\nCloseKernels[k] terminates the kernel k.\nCloseKernels[{k1, k2, …}] terminates the kernels k1, k2, ….\nCloseKernels[\"prop\"] terminates kernels that satisfy the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloseKernels)))
(def ClosenessCentrality "ClosenessCentrality[g] gives a list of closeness centralities for the vertices in the graph g.\nClosenessCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClosenessCentrality)))
(def Closing "Closing[image, ker] gives the morphological closing of image with respect to the structuring element ker.\nClosing[image, r] gives the closing with respect to a range-r square.\nClosing[data, …] applies closing to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Closing)))
(def CloudAccountData "CloudAccountData[] gives data associated with the cloud account currently being used.\nCloudAccountData[\"prop\"] gives the property prop associated with the cloud account being used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudAccountData)))
(def CloudBase "CloudBase is an option specifying the base URI of the server to use for cloud operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudBase)))
(def CloudConnect "CloudConnect[userid, password] authenticates to the Wolfram Cloud using the specified cloud user ID and password.\nCloudConnect[userid] shows a dialog to input the password.\nCloudConnect[] shows a dialog to input both the cloud user ID and the password." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudConnect)))
(def CloudDeploy "CloudDeploy[expr] deploys expr to a new anonymous cloud object.\nCloudDeploy[expr, location] deploys expr to a cloud object at the specified location relative to the user's current cloud directory. \nCloudDeploy[expr, CloudObject[…]] deploys expr to the specified cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudDeploy)))
(def CloudDirectory "CloudDirectory[] gives a CloudObject representing the current working directory used for cloud objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudDirectory)))
(def CloudDisconnect "CloudDisconnect[] disconnects a non-cloud instance of the Wolfram Language from the Wolfram Cloud." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudDisconnect)))
(def CloudEvaluate "CloudEvaluate[expr] evaluates expr in the cloud and returns the result.\nCloudEvaluate[expr, h] wraps the head h around the result before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudEvaluate)))
(def CloudExport "CloudExport[expr, \"format\"] exports expr to a new anonymous cloud object in the specified format.\nCloudExport[expr, \"format\", \"uri\"] exports to a cloud object at a given URI.\nCloudExport[expr, \"format\", CloudObject[\"uri\"]] exports to a given cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudExport)))
(def CloudExpression "CloudExpression[\"name\"] represents an expression whose value is persistently stored in the cloud.\nCloudExpression[\"http://…\"], CloudExpression[\"https://…\"] represents a cloud expression with a given URI.\nCloudExpression[base, part1, part2, …] represents the part of a cloud expression specified by the parti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudExpression)))
(def CloudExpressions "CloudExpressions[] gives a list of named cloud expressions owned by you. \nCloudExpressions[None] gives a list of anonymous cloud expressions owned by you.\nCloudExpressions[All] gives a list of all cloud expressions owned by you." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudExpressions)))
(def CloudFunction "CloudFunction[fun] represents a pure function that evaluates fun[args] in the cloud.\nCloudFunction[CloudObject[…]] represents a function that applies the contents of the specified cloud object.\nCloudFunction[f, h] wraps the head h around the result of the function before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudFunction)))
(def CloudGet "CloudGet[\"uri\"] reads in a cloud object at a given URI, evaluating each expression in it and returning the last one.\nCloudGet[CloudObject[\"uri\"]] reads in a given cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudGet)))
(def CloudImport "CloudImport[\"uri\"] imports from a cloud object at a given URI.\nCloudImport[\"uri\", elements] imports the specified elements of a cloud object.\nCloudImport[CloudObject[\"uri\"]] imports from a given cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudImport)))
(def CloudLoggingData "CloudLoggingData[] gives summary logging data for all your cloud objects.\nCloudLoggingData[category] gives summary logging data for all your cloud objects of a particular category.\nCloudLoggingData[obj] gives summary logging data for the cloud object obj.\nCloudLoggingData[{obj1, …}] gives aggregated summary logging data for all the objects obji.\nCloudLoggingData[objs, period] gives summary logging data for the specified period.\nCloudLoggingData[objs, period, elems] gives logging data elements specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudLoggingData)))
(def CloudObject "CloudObject[] represents a new anonymous cloud object.\nCloudObject[\"http://…\"], CloudObject[\"https://…\"] represents a cloud object with a given URI.\nCloudObject[\"user:user/path\"] represents a cloud object of a given user with a given path.\nCloudObject[\"uuid:uuid\"] represents a cloud object identified by a given UUID.\nCloudObject[\"/abspath\"] represents a cloud object of the currently authenticated user at an absolute path.\nCloudObject[\"relpath\"] represents a cloud object of the currently authenticated user at a relative path.\nCloudObject[\"relpath\", base] represents a cloud object with a path relative to the base path base." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudObject)))
(def CloudObjectNameFormat "CloudObjectNameFormat is an option for CloudObject and related objects that determines how the name portion of the URL for the object should be formatted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudObjectNameFormat)))
(def CloudObjectURLType "CloudObjectURLType is an option for CloudObject and related objects that specifies the base type of URL to generate for the object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudObjectURLType)))
(def CloudObjects "CloudObjects[] gives a list of cloud objects in your current cloud directory.\nCloudObjects[dir] gives a list of cloud objects in the cloud directory dir.\nCloudObjects[None] gives a list of all unnamed cloud objects owned by you.\nCloudObjects[dir, type] gives a list of cloud objects of the specified type in the cloud directory dir.\nCloudObjects[assoc] gives a list of cloud objects matching the filters defined by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudObjects)))
(def CloudPublish "CloudPublish[] makes a public copy in the cloud of the current document.\nCloudPublish[obj] makes a public copy of the cloud object obj.\nCloudPublish[expr] deploys an expression to the cloud and makes it public.\nCloudPublish[content, location] publishes to the specified location relative to the user's current cloud directory. \nCloudPublish[content, CloudObject[…]] publishes to the specified cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudPublish)))
(def CloudPut "CloudPut[expr] writes expr to a new anonymous cloud object.\nCloudPut[expr, \"uri\"] writes expr to a cloud object at a given URI.\nCloudPut[expr, CloudObject[\"uri\"]] writes expr to a given cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudPut)))
(def CloudRenderingMethod "CloudRenderingMethod is an option for Cell and Notebook that specifies how to render cells in the cloud." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudRenderingMethod)))
(def CloudSave "CloudSave[symbol] saves definitions associated with the specified symbol to a new anonymous cloud object.\nCloudSave[\"form\"] saves definitions associated with all symbols whose names match the string pattern \"form\". \nCloudSave[\"context\"] saves definitions associated with all symbols in the specified context. \nCloudSave[{object1, object2, …}] saves definitions associated with several objects. \nCloudSave[symspec, \"uri\"] appends definitions associated with symspec to the cloud object at the given URI.\nCloudSave[symspec, CloudObject[\"uri\"]] appends definitions to the given cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudSave)))
(def CloudShare "CloudShare[user] shares the current cloud document with the specified user.\nCloudShare[{user1, user2, …}] shares the current document with all the users useri.\nCloudShare[obj, users] shares the cloud object obj with the specified users." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudShare)))
(def CloudSubmit "CloudSubmit[expr] submits expr for immediate asynchronous cloud evaluation. \nCloudSubmit[ScheduledTask[expr, spec]] submits a task to evaluate expr in the cloud on the schedule defined by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudSubmit)))
(def CloudSymbol "CloudSymbol[\"name\"] represents a symbol whose value is persistently stored in the cloud.\nCloudSymbol[obj] represents a persistent symbol corresponding to the cloud object obj.\nCloudSymbol[\"uri\"] represents a cloud symbol located at a given URI." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudSymbol)))
(def CloudUnshare "CloudUnshare[obj] cancels sharing of the cloud object obj with everyone.\nCloudUnshare[obj, users] cancels sharing with the specified list of users." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CloudUnshare)))
(def ClusterClassify "ClusterClassify[data] generates a ClassifierFunction[…] by partitioning data into clusters of similar elements.\nClusterClassify[data, n] generates a ClassifierFunction[…] with n clusters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClusterClassify)))
(def ClusterDissimilarityFunction "ClusterDissimilarityFunction is an option for ClusteringTree and Dendrogram that specifies the intercluster dissimilarity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClusterDissimilarityFunction)))
(def ClusteringComponents "ClusteringComponents[array] gives an array in which each element at the lowest level of array is replaced by an integer index representing the cluster in which the element lies.\nClusteringComponents[array, n] finds n clusters.\nClusteringComponents[array, n, level] finds clusters at the specified level in array.\nClusteringComponents[image] finds clusters of pixels with similar values in image.\nClusteringComponents[image, n] finds n clusters in image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClusteringComponents)))
(def ClusteringMeasurements "ClusteringMeasurements[{{e1, e2, …}, …}, meas] returns the measurement meas for the clustered examples ei.\nClusteringMeasurements[clusters, gt, meas] assumes the ground truth clustering gt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClusteringMeasurements)))
(def ClusteringTree "ClusteringTree[{e1, e2, …}] constructs a weighted tree from the hierarchical clustering of the elements e1, e2, ….\nClusteringTree[{e1v1, e2v2, …}] represents ei with vi in the constructed graph.\nClusteringTree[{e1, e2, …}{v1, v2, …}] represents ei with vi in the constructed graph.\nClusteringTree[label1e1, label2e 2…] represents ei using labels labeli in the constructed graph.\nClusteringTree[data, h] constructs a weighted tree from the hierarchical clustering of data by joining subclusters at distance less than h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ClusteringTree)))
(def CodeAssistOptions "CodeAssistOptions is an option for cells that specifies settings for controlling code input assistance features, including autocompletion, function template insertion, and mouseover behaviors for code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CodeAssistOptions)))
(def Coefficient "Coefficient[expr, form] gives the coefficient of form in the polynomial expr. \nCoefficient[expr, form, n] gives the coefficient of form^n in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Coefficient)))
(def CoefficientArrays "CoefficientArrays[polys, vars] gives the arrays of coefficients of the variables vars in the polynomials polys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoefficientArrays)))
(def CoefficientList "CoefficientList[poly, var] gives a list of coefficients of powers of var in poly, starting with power 0. \nCoefficientList[poly, {var1, var2, …}] gives an array of coefficients of the vari. \nCoefficientList[poly, {var1, var2, …}, {dim1, dim2, …}] gives an array of dimensions {dim1, dim2, …}, truncating or padding with zeros as needed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoefficientList)))
(def CoefficientRules "CoefficientRules[poly, {x1, x2, …}] gives the list {{e11, e12, …}c1, {e21, …}c2, …} of exponent vectors and coefficients for the monomials in poly with respect to the xi.\nCoefficientRules[poly, {x1, x2, …}, order] gives the result with the monomial ordering specified by order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoefficientRules)))
(def CoifletWavelet "CoifletWavelet[] represents a Coiflet wavelet of order 2.\nCoifletWavelet[n] represents a Coiflet wavelet of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoifletWavelet)))
(def Collect "Collect[expr, x] collects together terms involving the same powers of objects matching x. \nCollect[expr, {x1, x2, …}] successively collects together terms that involve the same powers of objects matching x1, then x2, …. \nCollect[expr, var, h] applies h to the expression that forms the coefficient of each term obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Collect)))
(def CollinearPoints "CollinearPoints[{p1, p2, p3, …, pn}] tests whether the points p1, p2, p3, …, pn are collinear." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CollinearPoints)))
(def Colon "Colon[x, y, …] displays as x∶y∶…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Colon)))
(def ColorBalance "ColorBalance[image] adjusts the colors in image to achieve a balance that simulates the effect of neutral lighting.\nColorBalance[image, ref] adjusts colors in image so that the reference color specified by ref is mapped to white. \nColorBalance[image, reftarget] maps the reference color ref to target." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorBalance)))
(def ColorCombine "ColorCombine[{image1, image2, …}] creates a multichannel image by combining the sequence of channels in the imagei. \nColorCombine[{image1, image2, …}, colorspace] combines images that represent the color components specified by colorspace." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorCombine)))
(def ColorConvert "ColorConvert[color, colspace] converts the color space of a color to the specified color space colspace.\nColorConvert[image, colspace] converts the color space of image.\nColorConvert[{expr1, …}, colspace] converts the color space of a list of colors and images." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorConvert)))
(def ColorCoverage "ColorCoverage is an option for DominantColors that specifies the minimum image coverage that each color cluster should have." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorCoverage)))
(def ColorData "ColorData[\"scheme\"] gives a function that generates colors in the named color scheme when applied to parameter values. \nColorData[\"scheme\", \"property\"] gives the specified property of a color scheme.\nColorData[\"collection\"] gives a list of color schemes in a named collection.\nColorData[] gives a list of named collections of color schemes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorData)))
(def ColorDataFunction "ColorDataFunction[range, …] is a function that represents a color scheme." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorDataFunction)))
(def ColorDetect "ColorDetect[image, cspec] returns a mask image representing regions in image with colors within the specified color region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorDetect)))
(def ColorDistance "ColorDistance[c1, c2] gives the approximate perceptual distance between color directives c1 and c2.\nColorDistance[list, c] gives color distances between elements of list and c.\nColorDistance[list1, list2] gives color distances between corresponding elements of list1 and list2.\nColorDistance[image, c] gives an image whose pixel values are color distance between pixels in image and the color c.\nColorDistance[image1, image2] yields an image giving the pixelwise color distance between image1 and image2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorDistance)))
(def ColorFunction "ColorFunction is an option for graphics functions that specifies a function to apply to determine colors of elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorFunction)))
(def ColorFunctionBinning "ColorFunctionBinning is an option for plotting functions that divides values into a limited set of bins for styling." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorFunctionBinning)))
(def ColorFunctionScaling "ColorFunctionScaling is an option for graphics functions that specifies whether arguments supplied to a color function should be scaled to lie between 0 and 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorFunctionScaling)))
(def ColorNegate "ColorNegate[color] gives the negative of a color.\nColorNegate[image] gives the negative of image, in which all colors have been negated.\nColorNegate[video] negates every frame of a video.\nColorNegate[{expr1, …}] gives a list of negative images or colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorNegate)))
(def ColorProfileData "ColorProfileData[<>, \"Description\"\"desc\", \"DeviceColorSpace\"\"device\", \"IndependentColorSpace\"\"ics\"] represents an ICC color profile that can convert between the independent color space \"ics\" and the device-dependent color space \"device\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorProfileData)))
(def ColorQ "ColorQ[color] yields True if color is a valid color directive and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorQ)))
(def ColorQuantize "ColorQuantize[image] gives an approximation to image by quantizing to distinct colors.\nColorQuantize[image, n] uses at most n distinct colors.\nColorQuantize[image, {col1, …, coln}] represents an image using only the n specified colors coli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorQuantize)))
(def ColorReplace "ColorReplace[image, color] finds regions in image whose pixel values are similar to color and replaces them with transparent pixels.\nColorReplace[image, colorreplacement] replaces all pixels with the specified replacement color.\nColorReplace[image, colorreplacement, d] replaces all pixels whose values are within a distance d from color.\nColorReplace[image, {color1replacement1, …}, {d1, …}] does multiple color replacements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorReplace)))
(def ColorRules "ColorRules is an option that specifies how colors of cells should be determined from values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorRules)))
(def ColorSeparate "ColorSeparate[image] gives a list of single-channel images corresponding to each of the color channels in image.\nColorSeparate[image, colorspace] gives a list of images corresponding to the components of colorspace.\nColorSeparate[image, channel] returns a single-channel image containing the specified channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorSeparate)))
(def ColorSetter "ColorSetter[color] represents a color setter which displays as a swatch of the specified color and when clicked brings up a system color picker dialog.\nColorSetter[Dynamic[color]] uses the dynamically updated current value of color, with the value of color being reset if the color is modified.\nColorSetter[] gives a color setter with initial color gray." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorSetter)))
(def ColorSlider "ColorSlider[color] represents a color slider currently set to the color corresponding to color.\nColorSlider[Dynamic[color]] uses the dynamically updated current value of color, with the value of color being reset if the color is modified.\nColorSlider[] represents a color slider with an initial gray color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorSlider)))
(def ColorSpace "ColorSpace is an option for Image and related functions that specifies the color space to which color values refer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorSpace)))
(def ColorToneMapping "ColorToneMapping[image] applies a tone mapping to color values in image so as to make variations of luminance visible even in small intervals of the dynamic range. \nColorToneMapping[image, c] maps colors by compressing the overall range of luminance values by a factor c.\nColorToneMapping[image, range] applies a mapping only to colors whose initial luminance lies in the specified range.\nColorToneMapping[image, {range, c}] takes the specified range of colors and compresses their overall luminance values by a factor c.\nColorToneMapping[image, {{range1, c1}, {range2, c2}, …}] uses different compression factors ci for different ranges rangei. \nColorToneMapping[image, spec, s] uses the color compensation factor s to correct for saturation distortion introduced during tone mapping." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorToneMapping)))
(def Colorize "Colorize[m] generates an image from an integer matrix m, using colors for positive integers and black for non-positive integers.\nColorize[image] replaces intensity values in image with pseudocolor values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Colorize)))
(def ColorsNear "ColorsNear[color] represents a region around color.\nColorsNear[color, d] represents a region with maximum distance d around color.\nColorsNear[color, d, dfun] uses the specified color distance function dfun." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColorsNear)))
(def Column "Column[{expr1, expr2, …}] is an object that formats with the expri arranged in a column, with expr1 above expr2, etc. \nColumn[list, alignment] aligns each element horizontally in the specified way. \nColumn[list, alignment, spacing] leaves the specified number of x-heights of spacing between successive elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Column)))
(def ColumnAlignments "ColumnAlignments is an option for the low-level function GridBox that specifies how entries in each column should be aligned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnAlignments)))
(def ColumnKeyExistsQ "ColumnKeyExistsQ[data, key] returns True if the specified key exists in the tabular data, and False otherwise.\nColumnKeyExistsQ[key] represents an operator form of ColumnKeyExistsQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnKeyExistsQ)))
(def ColumnKeys "ColumnKeys[tab] gives a list of the column keys in the Tabular object tab.\nColumnKeys[tab, spatt] gives the column keys of tab that match the string pattern spatt.\nColumnKeys[tab, crit] gives the column keys keyi of tab for which crit[keyi] is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnKeys)))
(def ColumnLines "ColumnLines is an option for the low-level function GridBox which specifies whether lines should be drawn between adjacent columns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnLines)))
(def ColumnSpacings "ColumnSpacings is an option for the low-level function GridBox which specifies the spaces in ems that should be inserted between adjacent columns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnSpacings)))
(def ColumnTypes "ColumnTypes[tab] gives the element types of the columns of the Tabular object tab.\nColumnTypes[tab, tsel] gives the element types of the columns selected by tsel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnTypes)))
(def ColumnWidths "ColumnWidths is an option for the low-level function GridBox which specifies the widths to use for columns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnWidths)))
(def ColumnsEqual "ColumnsEqual is an option for the low-level function GridBox which specifies whether all columns in the grid should be assigned equal width." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnsEqual)))
(def ColumnwiseThread "ColumnwiseThread[cbody] denotes that cbody, a part of the body of a function, will be evaluated in columnwise form when using that function in TransformColumns or ConstructColumns operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnwiseThread)))
(def ColumnwiseValue "ColumnwiseValue[cbody] denotes that cbody, a part of the body of a function, will be evaluated once in columnwise form before using that function to transform rows in TransformColumns or ConstructColumns operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ColumnwiseValue)))
(def Comap "Comap[{f1, f2, …}, x] gives {f1[x], f2[x], …}.\nComap[fs, x, levelspec] applies parts of fs specified by levelspec to x.\nComap[fs] represents an operator form of Comap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Comap)))
(def ComapApply "ComapApply[{f1, f2, …}, expr] gives {Apply[f1, expr], Apply[f2, expr], …}.\nComapApply[fs] represents an operator form of ComapApply that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComapApply)))
(def CombinatorB "CombinatorB represents the B combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorB)))
(def CombinatorC "CombinatorC represents the C combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorC)))
(def CombinatorI "CombinatorI represents the I combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorI)))
(def CombinatorK "CombinatorK represents the K combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorK)))
(def CombinatorS "CombinatorS represents the S combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorS)))
(def CombinatorW "CombinatorW represents the W combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorW)))
(def CombinatorY "CombinatorY represents the Y combinator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinatorY)))
(def CombinedEntityClass "CombinedEntityClass[class1, class2, prop] represents a class of entities obtained by combining the properties of those pairs of entities from class1 and class2 for which the value of the property prop is the same for the two entities in the pair.\nCombinedEntityClass[class1, class2, prop1prop2] combines pairs of entities from class1 and class2 for which the value of prop1 of the entity from class1 is the same as the value of prop2 for the entity from class2. \nCombinedEntityClass[class1, class2, {pspeca, pspecb, …}] combines pairs of entities for which all the property specifications pspeck agree.\nCombinedEntityClass[class1, class2, f] combines pairs of entities for which the application of the entity function f yields True. \nCombinedEntityClass[class1, class2, spec, \"jspec\"] uses \"jspec\" to determine when to allow entities with missing properties to be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinedEntityClass)))
(def CombinerFunction "CombinerFunction is an option for template functions that specifies how fragments should be assembled to give the result of applying a template." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CombinerFunction)))
(def CometData "CometData[entity, property] gives the value of the specified property for the comet entity.\nCometData[{entity1, entity2, …}, property] gives a list of property values for the specified comet entities.\nCometData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CometData)))
(def CommonName "CommonName[entity] gives the common name for the entity specified by entity.\nCommonName[{entity1, …, entityn}] gives the common name for entity1 through entityn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommonName)))
(def CommonUnits "CommonUnits[{quantity1, quantity2, …, quantityn}] converts quantity1 through quantityn to common units across compatible dimensions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommonUnits)))
(def Commonest "Commonest[list] gives a list of the elements that are the most common in list.\nCommonest[list, n] gives a list of the n most common elements in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Commonest)))
(def CommonestFilter "CommonestFilter[data, r] filters data by replacing every value with the most common value in its range-r neighborhood.\nCommonestFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommonestFilter)))
(def CommunityBoundaryStyle "CommunityBoundaryStyle is an option to CommunityGraphPlot that specifies how to style community boundaries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommunityBoundaryStyle)))
(def CommunityGraphPlot "CommunityGraphPlot[g] generates a plot showing the community structure of the graph g.\nCommunityGraphPlot[g, {{v i1, v i2, …}, …}] generates a plot for the graph g with communities {v i1, v i2, …}, ….\nCommunityGraphPlot[g, {…, wj[{v i1, …}], …}] generates a plot with highlighting features defined by the symbol wrappers wj.\nCommunityGraphPlot[{v i1v j1, v i2v j2, …}, …] generates a plot for a graph in which vertex vik is connected to vertex vjk.\nCommunityGraphPlot[m, …] generates a plot for a graph represented by the adjacency matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommunityGraphPlot)))
(def CommunityLabels "CommunityLabels is an option to CommunityGraphPlot that controls what labels and placement to use for communities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommunityLabels)))
(def CommunityRegionStyle "CommunityRegionStyle is an option to CommunityGraphPlot that specifies how to style community regions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CommunityRegionStyle)))
(def CompanyData "CompanyData[entity, property] gives the value of the specified property for the company entity.\nCompanyData[{entity1, entity2, …}, property] gives a list of property values for the specified company entities.\nCompanyData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompanyData)))
(def CompatibleUnitQ "CompatibleUnitQ[quantity1, quantity2] returns True if quantity1 and quantity2 have compatible units, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompatibleUnitQ)))
(def CompilationOptions "CompilationOptions is an option for Compile that specifies settings for the compilation process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilationOptions)))
(def CompilationTarget "CompilationTarget is an option for Compile that specifies the target runtime for the compiled function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilationTarget)))
(def Compile "Compile[{x1, x2, …}, expr] creates a compiled function that evaluates expr assuming numerical values of the xi. \nCompile[{{x1, t1}, …}, expr] assumes that xi is of a type that matches ti. \nCompile[{{x1, t1, n1}, …}, expr] assumes that xi is a rank ni array of objects, each of a type that matches ti. \nCompile[vars, expr, {{p1, pt1}, …}] assumes that subexpressions in expr that match pi are of types that match pti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Compile)))
(def Compiled "Compiled is an option for various numerical and plotting functions which specifies whether the expressions they work with should automatically be compiled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Compiled)))
(def CompiledCodeFunction "CompiledCodeFunction[…] is a function created by FunctionCompile that contains compiled code that is run when the CompiledCodeFunction is applied to suitable arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledCodeFunction)))
(def CompiledComponent "CompiledComponent[name] represents a compiled component." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledComponent)))
(def CompiledComponentRawInterface "CompiledComponentRawInterface[comp] represents the raw interface of a compiled component." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledComponentRawInterface)))
(def CompiledExpressionDeclaration "CompiledExpressionDeclaration[h, n] represents a type for expressions of the form h[x1, x2, …, xn], suitable for use in compiled code.\nCompiledExpressionDeclaration[h, {t1, t2, …}] represents a type for expressions of the form h[x1, x2, …, xn], with xi having the type ti.\nCompiledExpressionDeclaration[h\"name\", …] names the declared type \"name\".\nCompiledExpressionDeclaration[h->\"name\"::[v1, v2, …], {t1, t2, …}] represents a parameterized type with parameters labeled by v1, v2, ….\nCompiledExpressionDeclaration[h\"name\"::[v1, v2, …], cond, {t1, t2, …}] asserts the condition cond on the type parameters.\nCompiledExpressionDeclaration[…, test] represents a type for any expression expr on which the compilable function test returns True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledExpressionDeclaration)))
(def CompiledFunction "CompiledFunction[args…] represents compiled code for evaluating a compiled function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledFunction)))
(def CompiledLayer "CompiledLayer[func] represents a net layer whose computation is defined by the compilable function func.\nCompiledLayer[func, gradientfunc] specifies a gradient propagating function allowing the layer to be used in NetTrain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompiledLayer)))
(def CompilerCallback "CompilerCallback[\"name\"] is a function that, if defined in a compiler environment, is automatically called by the Wolfram Compiler." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerCallback)))
(def CompilerEnvironment "CompilerEnvironment is an option for FunctionCompile and related functions that allows definitions to be included in the compilation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerEnvironment)))
(def CompilerEnvironmentAppendTo "CompilerEnvironmentAppendTo[{def1, def2, …}] appends declarations to $CompilerEnvironment.\nCompilerEnvironmentAppendTo[env, {def1, def2, …}] appends declarations to CompilerEnvironmentObject env." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerEnvironmentAppendTo)))
(def CompilerEnvironmentObject "CompilerEnvironmentObject represents a collection of definitions that can be included in compilations by FunctionCompile and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerEnvironmentObject)))
(def CompilerInformation "CompilerInformation[fun] gives compiler-specific information about the function fun.\nCompilerInformation[ty] gives compiler-specific information about the type ty.\nCompilerInformation[] returns all functions and types known to the compiler." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerInformation)))
(def CompilerOptions "CompilerOptions is an option for FunctionCompile and related functions that allows options for the compilation pipeline to be specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerOptions)))
(def CompilerRuntimeErrorAction "CompilerRuntimeErrorAction is an option for FunctionCompile that determines what should happen when an unrecoverable error takes place while computing with low-level code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompilerRuntimeErrorAction)))
(def Complement "Complement[eall, e1, e2, …] gives the elements in eall that are not in any of the ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Complement)))
(def ComplementedEntityClass "ComplementedEntityClass[classall, class1, …] represents an entity class containing all the entities in classall that are not in any of the classi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplementedEntityClass)))
(def CompleteGraph "CompleteGraph[n] gives the complete graph with n vertices Kn.\nCompleteGraph[{n1, n2, …, nk}] gives the complete k-partite graph with n1+n2+⋯+nk vertices K n1, n2, …, nk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompleteGraph)))
(def CompleteGraphQ "CompleteGraphQ[g] yields True if the graph g is a complete graph, and False otherwise.\nCompleteGraphQ[g, vlist] yields True if the subgraph induced by vlist is a complete graph, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompleteGraphQ)))
(def CompleteIntegral "CompleteIntegral[pde, u, {x1, …, xn}] gives a complete integral u for the first-order partial differential equation pde, with independent variables {x1, …, xn}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompleteIntegral)))
(def CompleteKaryTree "CompleteKaryTree[n] gives the complete binary tree with n levels.\nCompleteKaryTree[n, k] gives the complete k-ary tree with n levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompleteKaryTree)))
(def Complex "Complex is the head used for complex numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Complex)))
(def ComplexArrayPlot "ComplexArrayPlot[array] generates a plot in which complex values zij in an array array are shown in a discrete array of squares with Arg[zij] indicated by color and Abs[zij] by shading." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexArrayPlot)))
(def ComplexContourPlot "ComplexContourPlot[f, {z, zmin, zmax}] generates a filled contour plot of f as a function of z. \nComplexContourPlot[{f1, f2, …}, {z, zmin, zmax}] generates contour lines for f1, f2, …. \nComplexContourPlot[f==g, {z, zmin, zmax}] plots contour lines for which f=g.\nComplexContourPlot[{f1==g1, f2==g2, …}, {z, zmin, zmax}] plots contour lines for each of f1g1, f2=g2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexContourPlot)))
(def ComplexExpand "ComplexExpand[expr] expands expr assuming that all variables are real. \nComplexExpand[expr, {x1, x2, …}] expands expr assuming that variables matching any of the xi are complex." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexExpand)))
(def ComplexInfinity "ComplexInfinity represents a quantity with infinite magnitude, but undetermined complex phase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexInfinity)))
(def ComplexListPlot "ComplexListPlot[{z1, z2, …}] plots complex numbers z1, z2, … as points in the complex plane.\nComplexListPlot[{data1, data2, …}] plots data from all datai.\nComplexListPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexListPlot)))
(def ComplexPlot "ComplexPlot[f, {z, zmin, zmax}] generates a plot of Arg[f] over the complex rectangle with corners zmin and zmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexPlot)))
(def ComplexPlot3D "ComplexPlot3D[f, {z, zmin, zmax}] generates a 3D plot of Abs[f] colored by Arg[f] over the complex rectangle with corners zmin and zmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexPlot3D)))
(def ComplexRegionPlot "ComplexRegionPlot[pred, {z, zmin, zmax}] makes a plot showing the region in the complex plane for which pred is True.\nComplexRegionPlot[{pred1, pred2, …}, {z, zmin, zmax}] plots regions given by the multiple predicates predi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexRegionPlot)))
(def ComplexStreamPlot "ComplexStreamPlot[f, {z, zmin, zmax}] generates a streamline plot of the vector field {Re[f], Im[f]} over the complex rectangle with corners zmin and zmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexStreamPlot)))
(def ComplexVectorPlot "ComplexVectorPlot[f, {z, zmin, zmax}] generates a vector plot of the vector field {Re[f], Im[f]} over the complex rectangle with corners zmin and zmax.\nComplexVectorPlot[{f1, f2, …}, {z, zmin, zmax}] plots several vector fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexVectorPlot)))
(def Complexes "Complexes represents the domain of complex numbers, as in x∈Complexes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Complexes)))
(def ComplexityFunction "ComplexityFunction is an option for Simplify and other functions which gives a function to rank the complexity of different forms of an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComplexityFunction)))
(def ComponentExpand "ComponentExpand[expr] expands out array variables in expr in terms of indexed components.\nComponentExpand[expr, assum] specifies dimensionality of variables using assumptions assum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComponentExpand)))
(def ComponentMeasurements "ComponentMeasurements[{image, lmat}, \"prop\"] computes the property \"prop\" for components of image indicated by the label matrix lmat.\nComponentMeasurements[image, \"prop\"] computes the property \"prop\" for connected components of image. \nComponentMeasurements[…, \"prop\", crit] only returns measurements for components that satisfy the criterion crit.\nComponentMeasurements[…, \"prop\", crit, format] formats the result according to the output specification format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComponentMeasurements)))
(def ComposeList "ComposeList[{f1, f2, …}, x] generates a list of the form {x, f1[x], f2[f1[x]], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComposeList)))
(def ComposeSeries "ComposeSeries[series1, series2, …] composes several power series." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComposeSeries)))
(def CompositeQ "CompositeQ[n] yields True if n is a composite number, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompositeQ)))
(def Composition "Composition[f1, f2, f3, …] represents a composition of the functions f1, f2, f3, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Composition)))
(def CompoundElement "CompoundElement[{spec1, spec2, …}] represents a form or interpreter specification for a list of fields or inputs that gives a list of results.\nCompoundElement[key1spec1, key2spec2, …] represents a form or interpreter specification that gives an association of results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompoundElement)))
(def CompoundExpression "expr1;expr2;… evaluates the expri in turn, giving the last one as the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompoundExpression)))
(def CompoundPoissonDistribution "CompoundPoissonDistribution[λ, dist] represents a compound Poisson distribution with rate parameter λ and jump size distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompoundPoissonDistribution)))
(def CompoundPoissonProcess "CompoundPoissonProcess[λ, jdist] represents a compound Poisson process with rate parameter λ and jump size distribution jdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompoundPoissonProcess)))
(def CompoundRenewalProcess "CompoundRenewalProcess[rdist, jdist] represents a compound renewal process with renewal-time distribution rdist and jump size distribution jdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompoundRenewalProcess)))
(def Compress "Compress[expr] gives a compressed representation of expr as a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Compress)))
(def CompressionLevel "CompressionLevel is an option for Export and CreateArchive that specifies the amount of compression to use when compressing data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CompressionLevel)))
(def ComputeUncertainty "ComputeUncertainty is an option for ClassifierMeasurements, LearnedDistribution and other functions to specify if numeric results should be returned along with their uncertainty." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ComputeUncertainty)))
(def ConcaveHullMesh "ConcaveHullMesh[{p1, p2, …}] gives the concave hull mesh from the points p1, p2, ….\nConcaveHullMesh[{p1, p2, …}, α] gives the concave hull mesh of the specified parameter α.\nConcaveHullMesh[{p1, p2, …}, α, d] gives the concave hull mesh of cells of dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConcaveHullMesh)))
(def Condition "patt/;test is a pattern which matches only if the evaluation of test yields True. \nlhs:>rhs/;test represents a rule which applies only if the evaluation of test yields True. \nlhs:=rhs/;test is a definition to be used only if test yields True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Condition)))
(def ConditionalExpression "ConditionalExpression[expr, cond] is a symbolic construct that represents the expression expr when the condition cond is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConditionalExpression)))
(def Conditioned "Conditioned[expr, cond] or exprcond represents expr conditioned by the predicate cond." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Conditioned)))
(def Cone "Cone[{{x1, y1, z1}, {x2, y2, z2}}, r] represents a cone with a base of radius r centered at (x1, y1, z1) and a tip at (x2, y2, z2). \nCone[{{x1, y1, z1}, {x2, y2, z2}}] represents a cone with a base of radius 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cone)))
(def ConfidenceLevel "ConfidenceLevel is an option for LinearModelFit and other fitting functions that specifies the level to use in various confidence and prediction intervals and bands." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfidenceLevel)))
(def ConfidenceRange "ConfidenceRange is an option for SurvivalModelFit and other functions that specifies the range over which simultaneous confidence intervals and bands are computed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfidenceRange)))
(def ConfidenceTransform "ConfidenceTransform is an option for functions such as SurvivalModelFit that specifies the transformation used for confidence intervals and bands." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfidenceTransform)))
(def Confirm "Confirm[expr] confirms that expr is not considered a failure, otherwise throwing an error to the nearest surrounding Enclose. \nConfirm[expr, info] evaluates info and includes its value in the thrown error if expr is not confirmed.\nConfirm[expr, info, tag] uses the specified tag for any thrown errors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Confirm)))
(def ConfirmAssert "ConfirmAssert[test] confirms that test is True, otherwise throwing an error to the nearest surrounding Enclose.\nConfirmAssert[test, info] evaluates info and includes its value in the thrown error if test is not True.\nConfirmAssert[test, info, tag] uses the specified tag for any thrown errors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfirmAssert)))
(def ConfirmBy "ConfirmBy[expr, f] confirms that f[expr] returns True, otherwise throwing an error to the nearest surrounding Enclose.\nConfirmBy[expr, f, info] evaluates info and includes its value in the thrown error if expr is not confirmed.\nConfirmBy[expr, f, info, tag] uses the specified tag for any thrown errors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfirmBy)))
(def ConfirmMatch "ConfirmMatch[expr, form] confirms that expr matches the pattern form, otherwise throwing an error to the nearest surrounding Enclose.\nConfirmMatch[expr, form, info] evaluates info and includes its value in the thrown error if expr is not confirmed.\nConfirmMatch[expr, form, info, tag] uses the specified tag for any thrown errors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfirmMatch)))
(def ConfirmQuiet "ConfirmQuiet[expr] confirms that no messages are generated during the evaluation of expr, otherwise quieting them and throwing an error to the nearest surrounding Enclose.\nConfirmQuiet[expr, s::t] tests only for the specified message.\nConfirmQuiet[expr, {s1::t1, s2::t2, …}] tests only for the specified list of messages.\nConfirmQuiet[expr, \"group\"] tests only for messages in the named message group.\nConfirmQuiet[expr, mspec, info] evaluates info and includes its value in the thrown error if expr is not confirmed.\nConfirmQuiet[expr, mspec, info, tag] uses the specified tag for any thrown errors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConfirmQuiet)))
(def ConformAudio "ConformAudio[{audio1, audio2, …}] returns a list of audio objects where all audioi are made to have conforming properties, including duration, data type, and number of channels.\nConformAudio[{audio1, audio2, …}, spec] returns all audio objects of the specified spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConformAudio)))
(def ConformDates "ConformDates[dates] returns a list of dates where all dates are made to have conforming properties, including calendar, time zone and granularity.\nConformDates[dates, rdate] returns all dates in a form consistent with the reference date rdate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConformDates)))
(def ConformImages "ConformImages[{image1, image2, …}] returns a list of images where all imagei are made to have conforming properties, including dimensions, data type, color space, and interleaving.\nConformImages[{image1, image2, …}, spec] returns all images of the specified spec.\nConformImages[{image1, image2, …}, spec, fitting] resizes images using the specified fitting method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConformImages)))
(def ConformationMethod "ConformationMethod is an option for VideoJoin and others that specifies how to conform frames of different videos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConformationMethod)))
(def Congruent "Congruent[x, y, …] displays as x≡y≡…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Congruent)))
(def ConicGradientFilling "ConicGradientFilling[{col1, col2, …, coln}] is a two-dimensional graphics directive specifying that faces of polygons and other filled graphics objects are to be drawn using a progressive transition between colors coli along a circle.\nConicGradientFilling[{θ1, θ2, …, θn}{col1, col2, …, coln}] uses the colors coli at angles θi.\nConicGradientFilling[{θ1, θ2, …, θn}{col1, col2, …, coln}, {x, y}] rotates from the center point {x, y}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConicGradientFilling)))
(def ConicHullRegion "ConicHullRegion[{p1, …, p m+1}] represents the m-dimensional affine hull region passing through points pi. \nConicHullRegion[p, {v1, …, vm}] represents the m-dimensional affine hull region passing through the point p and parallel to vi. \nConicHullRegion[{p1, …, p m+1}, {w1, …, wn}] represents the m-dimensional affine hull plus the conic hull generated by the vectors wj.\nConicHullRegion[p, {v1, …, vm}, {w1, …, wn}] represents the m-dimensional affine hull plus the conic hull generated by the vectors wj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConicHullRegion)))
(def ConicOptimization "ConicOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective f subject to conic constraints cons.\nConicOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConicOptimization)))
(def Conjugate "Conjugate[z] or z gives the complex conjugate of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Conjugate)))
(def ConjugateTranspose "ConjugateTranspose[m] or m^ gives the conjugate transpose of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConjugateTranspose)))
(def Conjunction "Conjunction[expr, {a1, a2, …}] gives the conjunction of expr over all choices of the Boolean variables ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Conjunction)))
(def ConnectLibraryCallbackFunction "ConnectLibraryCallbackFunction[mname, cf] connects a CompiledFunction cf with the library callback manager with name mname." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectLibraryCallbackFunction)))
(def ConnectSystemModelComponents "ConnectSystemModelComponents[{\"c1 \"∈comp1, …}, {\"c1.a\"->\"c2.b\", …}] creates a system model by connecting connector \"a\" of component \"c1\" with connector \"b\" of component \"c2\" etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectSystemModelComponents)))
(def ConnectSystemModelController "ConnectSystemModelController[model, controller] connects the system model model with a controller according to the controller data controller." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectSystemModelController)))
(def ConnectedComponents "ConnectedComponents[g] gives the connected components of the graph g.\nConnectedComponents[g, {v1, v2, …}] gives the connected components that include at least one of the vertices v1, v2, … .\nConnectedComponents[g, patt] gives the connected components that include a vertex that matches the pattern patt.\nConnectedComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedComponents)))
(def ConnectedGraphComponents "ConnectedGraphComponents[g] gives the connected components of the graph g.\nConnectedGraphComponents[g, {v1, v2, …}] gives the connected components that include at least one of the vertices v1, v2, … .\nConnectedGraphComponents[g, patt] gives the connected components that include a vertex that matches the pattern patt.\nConnectedGraphComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedGraphComponents)))
(def ConnectedGraphQ "ConnectedGraphQ[g] yields True if the graph g is connected, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedGraphQ)))
(def ConnectedMeshComponents "ConnectedMeshComponents[mr] gives a list {c1, c2, …} of disjoint path connected meshed regions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedMeshComponents)))
(def ConnectedMoleculeComponents "ConnectedMoleculeComponents[mol] gives the connected components of the molecule mol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedMoleculeComponents)))
(def ConnectedMoleculeQ "ConnectedMoleculeQ[mol] returns True if the atoms in mol form are connected by bonds, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectedMoleculeQ)))
(def ConnectionSettings "ConnectionSettings is an option for URLRead and related functions to specify advanced connection settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnectionSettings)))
(def ConnesWindow "ConnesWindow[x] represents a Connes window function of x.\nConnesWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConnesWindow)))
(def ConoverTest "ConoverTest[{data1, data2, …}] tests whether the variances of data1, data2, … are equal.\nConoverTest[dspec, σ_0^2] tests a dispersion measure against σ_0^2.\nConoverTest[dspec, σ_0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConoverTest)))
(def ConservativeConvectionPDETerm "ConservativeConvectionPDETerm[vars, α] represents a conservative convection term ∇{x1, …, xn}·(-α u) with conservative convection coefficient α and model variables vars.\nConservativeConvectionPDETerm[vars, α, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConservativeConvectionPDETerm)))
(def Constant "Constant is an attribute that indicates zero derivative of a symbol with respect to all parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Constant)))
(def ConstantArray "ConstantArray[c, n] generates a list of n copies of the element c.\nConstantArray[c, {n1, n2, …}] generates an n1n2… array of nested lists containing copies of the element c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstantArray)))
(def ConstantImage "ConstantImage[val, size] gives an image of the specified size with constant pixel values of val.\nConstantImage[val, size, \"type\"] gives an image converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstantImage)))
(def ConstantRegionQ "ConstantRegionQ[reg] gives True if the reg is a constant region and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstantRegionQ)))
(def ConstantVideo "ConstantVideo[image] generates a one-second video with a constant frame image.\nConstantVideo[image, dur] generates a video for the duration dur." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstantVideo)))
(def Constants "Constants is an option for Dt which gives a list of objects to be taken as constants." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Constants)))
(def ConstellationData "ConstellationData[entity, property] gives the value of the specified property for the constellation entity.\nConstellationData[{entity1, entity2, …}, property] gives a list of property values for the specified constellation entities.\nConstellationData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstellationData)))
(def Construct "Construct[f, x] gives f[x].\nConstruct[f, x1, …, xn] gives f[x1, …, xn]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Construct)))
(def ConstructColumns "ConstructColumns[tab, {col1, col2, …}] constructs new tabular data formed by extracting columns coli from the tabular data tab.\nConstructColumns[tab, {ncol1f1, ncol2f2, …}] returns new tabular data with columns ncoli constructed by applying the functions fi to each row of tab. \nConstructColumns[cspec] represents an operator form of ConstructColumns that can be applied to tabular data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConstructColumns)))
(def Containing "Containing[\"outer\", \"inner\"] represents an object of type outer containing objects of type inner." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Containing)))
(def ContainsAll "ContainsAll[list1, list2] yields True if list1 contains all of the elements of list2.\nContainsAll[list2] is an operator form that yields True when the object to which it is applied contains all of the elements of list2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContainsAll)))
(def ContainsAny "ContainsAny[list1, list2] yields True if list1 contains any of the elements of list2.\nContainsAny[list2] is an operator form that yields True when the object to which it is applied contains any of the elements in list2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContainsAny)))
(def ContainsExactly "ContainsExactly[list1, list2] yields True if list1 contains exactly the same elements as list2.\nContainsExactly[list2] is an operator form that yields True when the object to which it is applied contains exactly the same elements as list2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContainsExactly)))
(def ContainsNone "ContainsNone[list1, list2] yields True if list1 contains none of the elements in list2.\nContainsNone[list2] is an operator form that yields True when the object to which it is applied contains none of the elements of list2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContainsNone)))
(def ContainsOnly "ContainsOnly[list1, list2] yields True if list1 contains only elements that appear in list2.\nContainsOnly[list2] is an operator form that yields True when the object to which it is applied contains only elements that appear in list2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContainsOnly)))
(def ContentDetectorFunction "ContentDetectorFunction[…] represents a function generated by TrainImageContentDetector or TrainTextContentDetector that localizes and classifies contents in a piece of text or an image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentDetectorFunction)))
(def ContentFieldOptions "ContentFieldOptions is an option for CreateSearchIndex and related functions that allows options to be specified for handling different fields in content that is being indexed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentFieldOptions)))
(def ContentLocationFunction "ContentLocationFunction is an option to CreateSearchIndex and related functions that specifies how to determine locations to be used for hyperlinks and related constructs in the resulting index." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentLocationFunction)))
(def ContentObject "ContentObject[\"string\"] gives a content object whose content is string.\nContentObject[File[…]] gives a content object whose content is stored in the specified file.\nContentObject[name1val1, name2val2, …] gives a content object with a sequence of fields with names namei and values vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentObject)))
(def ContentPadding "ContentPadding is an option for objects that can be displayed with frames that specifies whether the vertical margins should shrink wrap tightly around the contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentPadding)))
(def ContentSelectable "ContentSelectable is an option to constructs such as Inset, Graphics, and GraphicsGroup that specifies whether and how content within them should be selectable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentSelectable)))
(def ContentSize "ContentSize is an option for Manipulate and other functions that specifies the size of the content area to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContentSize)))
(def Context "Context[] gives the current context. \nContext[symbol] gives the context in which a symbol appears. \nContext[\"symbol\"] gives the context in which the symbol named \"symbol\" appears if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Context)))
(def ContextToFileName "ContextToFileName[\"context\"] gives the string specifying the file name that is by convention associated with a particular context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContextToFileName)))
(def Contexts "Contexts[] gives a list of all contexts. \nContexts[\"string\"] gives a list of the contexts that match the string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Contexts)))
(def Continue "Continue[] goes to the next iteration of the nearest enclosing Do, For, Until or While in a procedural program." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Continue)))
(def ContinuedFraction "ContinuedFraction[x, n] generates a list of the first n terms in the continued fraction representation of x. \nContinuedFraction[x] generates a list of all terms that can be obtained given the precision of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuedFraction)))
(def ContinuedFractionK "ContinuedFractionK[f, g, {i, imin, imax}] represents the continued fraction Κ _i=imin^imaxf/g.\nContinuedFractionK[g, {i, imin, imax}] represents the continued fraction Κ _i=imin^imax1/g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuedFractionK)))
(def ContinuousAction "ContinuousAction is an option for Manipulate, Slider, and related functions that specifies whether action should be taken continuously while controls are being moved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousAction)))
(def ContinuousMarkovProcess "ContinuousMarkovProcess[i0, q] represents a continuous-time finite-state Markov process with transition rate matrix q and initial state i0.\nContinuousMarkovProcess[p0, q] represents a Markov process with initial state probability vector p0.\nContinuousMarkovProcess[…, m, μ] represents a Markov process with transition matrix m and transition rates μ.\nContinuousMarkovProcess[…, g] represents a Markov process transition rate matrix from the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousMarkovProcess)))
(def ContinuousTask "ContinuousTask[expr] represents a task in which expr is continuously reevaluated.\nContinuousTask[expr, end] represents a task in which expr is continuously reevaluated until the time specified by end.\nContinuousTask[expr, tspan] represents a task in which expr is continuously reevaluated over the time span tspan." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousTask)))
(def ContinuousTimeModelQ "ContinuousTimeModelQ[lsys] gives True if lsys is a continuous-time systems model, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousTimeModelQ)))
(def ContinuousWaveletData "ContinuousWaveletData[{{oct1, voc1}->coef1, …}, wave] yields a continuous wavelet data object with wavelet coefficients coefi corresponding to octave and voice {octi, voci} and wavelet wave." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousWaveletData)))
(def ContinuousWaveletTransform "ContinuousWaveletTransform[{x1, x2, …}] gives the continuous wavelet transform of a list of values xi.\nContinuousWaveletTransform[data, wave] gives the continuous wavelet transform using the wavelet wave.\nContinuousWaveletTransform[data, wave, {noct, nvoc}] gives the continuous wavelet transform using noct octaves with nvoc voices per octave.\nContinuousWaveletTransform[sound, …] gives the continuous wavelet transform of sampled sound." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContinuousWaveletTransform)))
(def ContourDetect "ContourDetect[image] gives a binary image in which white pixels correspond to the zeros and zero crossings in image.\nContourDetect[image, delta] treats values in image that are smaller in absolute value than delta as zero.\nContourDetect[array, …] gives a binary sparse array in which 1 corresponds to zeros and zero crossings in array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourDetect)))
(def ContourIntegrate "ContourIntegrate[f, z∈cont] gives the integral of f along the contour defined by cont in the complex plane." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourIntegrate)))
(def ContourLabels "ContourLabels is an option for contour plots that specifies how to label contours." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourLabels)))
(def ContourPlot "ContourPlot[f, {x, xmin, xmax}, {y, ymin, ymax}] generates a contour plot of f as a function of x and y. \nContourPlot[f==g, {x, xmin, xmax}, {y, ymin, ymax}] plots contour lines for which f=g. \nContourPlot[{f1==g1, f2==g2, …}, {x, xmin, xmax}, {y, ymin, ymax}] plots several contour lines. \nContourPlot[…, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourPlot)))
(def ContourPlot3D "ContourPlot3D[f, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] produces a three-dimensional contour plot of f as a function of x, y, and z. \nContourPlot3D[f==g, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] plots the contour surface for which f=g. \nContourPlot3D[…, {x, y, z}∈reg] takes the variables {x, y, z} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourPlot3D)))
(def ContourShading "ContourShading is an option for contour plots that specifies how the regions between contour lines should be shaded." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourShading)))
(def ContourStyle "ContourStyle is an option for contour plots that specifies the style in which contour lines or surfaces should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContourStyle)))
(def Contours "Contours is an option for contour plots that specifies the contours to draw." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Contours)))
(def ContraharmonicMean "ContraharmonicMean[list] gives the contraharmonic mean of the values in list.\nContraharmonicMean[list, p] gives the order p Lehmer contraharmonic mean." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContraharmonicMean)))
(def ContrastiveLossLayer "ContrastiveLossLayer[] represents a loss layer that computes a loss based on a distance metric and a target that specifies whether the distance should be minimized or maximized.\nContrastiveLossLayer[margin] specifies a distance above which the loss is zero for True targets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ContrastiveLossLayer)))
(def Control "Control[{u, dom}] represents an interactive control for the variable u in the domain dom, with the type of control chosen to be appropriate for the domain specified.\nControl[{{u, uinit}, dom}] represents a control with initial value uinit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Control)))
(def ControlActive "ControlActive[act, norm] evaluates to act if a control that affects act is actively being used, and to norm otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControlActive)))
(def ControlPlacement "ControlPlacement is an option for Manipulate, TabView, and other control objects that specifies where controls should be placed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControlPlacement)))
(def ControlType "ControlType is an option for Manipulate and related functions that specifies what type of controls should be displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControlType)))
(def ControllabilityGramian "ControllabilityGramian[ssm] gives the controllability Gramian of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllabilityGramian)))
(def ControllabilityMatrix "ControllabilityMatrix[ssm] gives the controllability matrix of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllabilityMatrix)))
(def ControllableDecomposition "ControllableDecomposition[sys] yields the controllable subsystem of the state-space model sys.\nControllableDecomposition[sys, {z1, …}] specifies the new state variables zi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllableDecomposition)))
(def ControllableModelQ "ControllableModelQ[sys] yields True if the state-space model sys is controllable, and False otherwise.\nControllableModelQ[{sys, sub}] yields True if the subsystem sub is controllable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllableModelQ)))
(def ControllerInformation "ControllerInformation[] gives dynamically updated information on currently connected controller devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerInformation)))
(def ControllerLinking "ControllerLinking is an option for Manipulate, Graphics3D, Plot3D, and related functions that specifies whether to allow interactive control by external controllers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerLinking)))
(def ControllerManipulate "ControllerManipulate[expr, {u, umin, umax}] generates a version of expr set up to allow interactive manipulation of the value of u using an external controller device.\nControllerManipulate[expr, {u, umin, umax, du}] allows the value of u to vary between umin and umax in steps du. \nControllerManipulate[expr, {{u, uinit}, umin, umax, …}] takes the initial value of u to be uinit. \nControllerManipulate[expr, {u, {u1, u2, …}}] allows u to take on discrete values u1, u2, …. \nControllerManipulate[expr, {u, …}, {v, …}, …] allows each of the u, v, … to be manipulated by the external controller device. \nControllerManipulate[expr, cu{u, …}, cv{v, …}, …] links the parameters to the specified controllers on the external controller device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerManipulate)))
(def ControllerMethod "ControllerMethod is an option for Manipulate, Graphics3D, Plot3D, and related functions that specifies the default way that controls on an external controller device should apply." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerMethod)))
(def ControllerPath "ControllerPath is an option that gives a list of external controllers or classes of controllers to try for functions such as ControllerState, Manipulate, and Graphics3D." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerPath)))
(def ControllerState "ControllerState[\"c\"] gives the state of the control c for the first connected controller device on which it is supported.\nControllerState[{\"c1\", \"c2\", …}] gives the states of several controls.\nControllerState[id, \"c\"] gives the state of control c for controller devices with the specified identifier.\nControllerState[id, {\"c1\", \"c2\", …}] gives the states of several controls for several controller devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControllerState)))
(def ControlsRendering "ControlsRendering is a Style option that specifies how controls should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ControlsRendering)))
(def ConvectionPDETerm "ConvectionPDETerm[vars, β] represents a convection term β·∇{x1, …, xn}u with convection coefficient β and model variables vars.\nConvectionPDETerm[vars, β, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvectionPDETerm)))
(def Convergents "Convergents[list] gives a list of the convergents corresponding to the continued fraction terms list.\nConvergents[x, n] gives the first n convergents for a number x.\nConvergents[x] gives if possible all convergents leading to the number x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Convergents)))
(def ConversionRules "ConversionRules is an option for Cell that can be set to a list of rules specifying how the contents of the cell are to be converted to external formats." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConversionRules)))
(def ConvexHullMesh "ConvexHullMesh[{p1, p2, …}] gives a BoundaryMeshRegion representing the convex hull from the points p1, p2, ….\nConvexHullMesh[mreg] gives the convex hull of the mesh region mreg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexHullMesh)))
(def ConvexHullRegion "ConvexHullRegion[{p1, p2, …}] gives the convex hull from the points p1, p2, ….\nConvexHullRegion[reg] gives the convex hull of the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexHullRegion)))
(def ConvexOptimization "ConvexOptimization[f, cons, vars] finds values of variables vars that minimize the convex objective function f subject to convex constraints cons.\nConvexOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexOptimization)))
(def ConvexPolygonQ "ConvexPolygonQ[poly] gives True if the polygon poly is convex, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexPolygonQ)))
(def ConvexPolyhedronQ "ConvexPolyhedronQ[poly] gives True if the polyhedron poly is convex, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexPolyhedronQ)))
(def ConvexRegionQ "ConvexRegionQ[reg] gives True if reg is a convex region and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvexRegionQ)))
(def ConvolutionLayer "ConvolutionLayer[n, s] represents a trainable convolutional net layer having n output channels and using kernels of size s to compute the convolution.\nConvolutionLayer[n, {s}] represents a layer performing one-dimensional convolutions with kernels of size s.\nConvolutionLayer[n, {h, w}] represents a layer performing two-dimensional convolutions with kernels of size h×w.\nConvolutionLayer[n, {h, w, d}] represents a three-dimensional convolutions with kernels of size h×w×d.\nConvolutionLayer[n, kernel, opts] includes options for padding and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConvolutionLayer)))
(def Convolve "Convolve[f, g, x, y] gives the convolution with respect to x of the expressions f and g.\nConvolve[f, g, {x1, x2, …}, {y1, y2, …}] gives the multidimensional convolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Convolve)))
(def ConwayGroupCo1 "ConwayGroupCo1[] represents the sporadic simple Conway group Co1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConwayGroupCo1)))
(def ConwayGroupCo2 "ConwayGroupCo2[] represents the sporadic simple Conway group Co2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConwayGroupCo2)))
(def ConwayGroupCo3 "ConwayGroupCo3[] represents the sporadic simple Conway group Co3." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ConwayGroupCo3)))
(def CookieFunction "CookieFunction is an option for URLRead, HTTPRequest, and related functions that gives a function to apply to each cookie received when an HTTP response is received." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CookieFunction)))
(def CoordinateBoundingBox "CoordinateBoundingBox[coords] gives the corners {{xmin, ymin, …}, {xmax, ymax, …}} of the bounding box of the region defined by coords.\nCoordinateBoundingBox[coords, δ] pads the region by δ in each direction.\nCoordinateBoundingBox[coords, Scaled[s]] pads by the scaled amount s in each direction.\nCoordinateBoundingBox[coords, {p1, p2, …}] pads by p1, p2, … in successive dimensions. \nCoordinateBoundingBox[coords, {{p 1min, p 1max}, {p 2min, p 2max}, …}] gives {{xmin-p 1min, ymin-p 2min, …}, {xmax+p 1max, ymax+p 2max, …}, …}" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateBoundingBox)))
(def CoordinateBoundingBoxArray "CoordinateBoundingBoxArray[{{xmin, ymin, …}, {xmax, ymax, …}}] generates an array of {x, y, …} coordinates with integer steps in each dimension.\nCoordinateBoundingBoxArray[{min, max}, d] uses step d in each dimension.\nCoordinateBoundingBoxArray[{min, max}, {dx, dy, …}] uses steps dx, dy, … in successive dimensions.\nCoordinateBoundingBoxArray[{min, max}, Into[n]] divides into n equal steps in each dimension.\nCoordinateBoundingBoxArray[{min, max}, steps, offsets] specifies offsets to use for each coordinate point.\nCoordinateBoundingBoxArray[{min, max}, steps, offsets, k] expands the array by k elements in every direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateBoundingBoxArray)))
(def CoordinateBounds "CoordinateBounds[coords] gives a list {{xmin, xmax}, {ymin, ymax}, …} of the bounds in each dimension of the region defined by coords. \nCoordinateBounds[coords, δ] pads the ranges of coordinates by ±δ in each dimension.\nCoordinateBounds[coords, Scaled[s]] pads by the scaled amount s in each dimension.\nCoordinateBounds[coords, {p1, p2, …}] pads by p1, p2, … in successive dimensions.\nCoordinateBounds[coords, {{p 1min, p 1max}, {p 2min, p 2max}, …}] gives {{xmin-p 1min, xmax+p 1max}, {ymin-p 2min, ymax+p 2max}, …}" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateBounds)))
(def CoordinateBoundsArray "CoordinateBoundsArray[{{xmin, xmax}, {ymin, ymax}, …}] generates an array of {x, y, …} coordinates with integer steps in each dimension.\nCoordinateBoundsArray[{xrange, yrange, …}, d] uses step d in each dimension.\nCoordinateBoundsArray[{xrange, yrange, …}, {dx, dy, …}] uses steps dx, dy, … in successive dimensions.\nCoordinateBoundsArray[{xrange, yrange, …}, Into[n]] divides into n equal steps in each dimension.\nCoordinateBoundsArray[{xrange, yrange, …}, steps, offsets] specifies offsets to use for each coordinate point.\nCoordinateBoundsArray[{xrange, yrange, …}, steps, offsets, k] expands the array by k elements in every direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateBoundsArray)))
(def CoordinateChartData "CoordinateChartData[chart, property] gives the value of the specified property for chart.\nCoordinateChartData[chart, property, {x1, x2, …, xn}] gives the value of the specified property for chart evaluated at the point {x1, x2, …, xn}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateChartData)))
(def CoordinateTransform "CoordinateTransform[t, pt] performs the coordinate transformation t on the point pt.\nCoordinateTransform[t, {pt1, pt2, …}] transforms several points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateTransform)))
(def CoordinateTransformData "CoordinateTransformData[t, property] gives the value of the specified property for the coordinate transformation t.\nCoordinateTransformData[t, property, {x1, x2, …, xn}] gives the value of the property evaluated at the point {x1, x2, …, xn}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinateTransformData)))
(def CoordinatesToolOptions "CoordinatesToolOptions is an option for Graphics that gives values of options associated with the Get Coordinates tool." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoordinatesToolOptions)))
(def CoplanarPoints "CoplanarPoints[{p1, p2, p3, p4, …, pn}] tests whether the points p1, p2, p3, p4, …, pn are coplanar." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoplanarPoints)))
(def CoprimeQ "CoprimeQ[n1, n2] yields True if n1 and n2 are relatively prime, and yields False otherwise. \nCoprimeQ[n1, n2, …] yields True if all pairs of the ni are relatively prime, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoprimeQ)))
(def Coproduct "Coproduct[x, y, …] displays as x∐y∐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Coproduct)))
(def CopulaDistribution "CopulaDistribution[ker, {dist1, dist2, …}] represents a copula distribution with kernel distribution ker and marginal distributions dist1, dist2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopulaDistribution)))
(def CopyDatabin "CopyDatabin[bin] creates a copy of a databin.\nCopyDatabin[bin, options] creates a copy with the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopyDatabin)))
(def CopyDirectory "CopyDirectory[dir1, dir2] copies the directory dir1 to dir2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopyDirectory)))
(def CopyFile "CopyFile[file1, file2] copies from the local, remote or cloud file file1 to the local, remote or cloud file file2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopyFile)))
(def CopyFunction "CopyFunction is an option for TemplateBox that specifies how the box is to be copied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopyFunction)))
(def CopyToClipboard "CopyToClipboard[expr] replaces the contents of the clipboard with expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CopyToClipboard)))
(def Copyable "Copyable is an option for Cell that specifies whether a cell can be copied interactively using the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Copyable)))
(def CoreNilpotentDecomposition "CoreNilpotentDecomposition[m] yields the core-nilpotent decomposition of a square matrix m.\nCoreNilpotentDecomposition[m, format] returns the core-nilpotent decomposition according to the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoreNilpotentDecomposition)))
(def CornerFilter "CornerFilter[image] computes a measure for the presence of a corner for each pixel in image and returns the result as an intensity image.\nCornerFilter[image, r] detects corners at a pixel range r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CornerFilter)))
(def CornerNeighbors "CornerNeighbors is an option for various array and image processing functions that specifies whether diagonally adjacent corners should be considered neighbors of particular elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CornerNeighbors)))
(def Correlation "Correlation[v, w] gives the correlation between the vectors v and w.\nCorrelation[a, b] gives the cross-correlation matrix for the matrices a and b.\nCorrelation[a] gives the auto-correlation matrix for observations in matrix a.\nCorrelation[dist] gives the correlation matrix for the multivariate symbolic distribution dist.\nCorrelation[dist, i, j] gives the (i, j)^th correlation for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Correlation)))
(def CorrelationDistance "CorrelationDistance[u, v] gives the correlation coefficient distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CorrelationDistance)))
(def CorrelationFunction "CorrelationFunction[data, hspec] estimates the correlation function at lags hspec from data.\nCorrelationFunction[proc, hspec] represents the correlation function at lags hspec for the random process proc. \nCorrelationFunction[proc, s, t] represents the correlation function at times s and t for the random process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CorrelationFunction)))
(def CorrelationTest "CorrelationTest[{{x1, y1}, {x2, y2}, …}] tests whether the correlation coefficient for a bivariate population is zero.\nCorrelationTest[{{x1, y1}, {x2, y2}, …}, ρ0] tests whether the correlation coefficient is ρ0.\nCorrelationTest[{{x1, y1}, {x2, y2}, …}, {{u1, v1}, {u2, v2}, …}] tests whether the correlation coefficients for two populations are equal.\nCorrelationTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CorrelationTest)))
(def Cos "Cos[z] gives the cosine of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cos)))
(def CosDegrees "CosDegrees[θ] gives the cosine of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CosDegrees)))
(def CosIntegral "CosIntegral[z] gives the cosine integral function Ci (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CosIntegral)))
(def Cosh "Cosh[z] gives the hyperbolic cosine of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cosh)))
(def CoshIntegral "CoshIntegral[z] gives the hyperbolic cosine integral Chi (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoshIntegral)))
(def CosineDistance "CosineDistance[u, v] gives the angular cosine distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CosineDistance)))
(def CosineWindow "CosineWindow[x] represents a cosine window function of x.\nCosineWindow[x, α] uses the exponent α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CosineWindow)))
(def Cot "Cot[z] gives the cotangent of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cot)))
(def CotDegrees "CotDegrees[θ] gives the cotangent of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CotDegrees)))
(def Coth "Coth[z] gives the hyperbolic cotangent of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Coth)))
(def CoulombF "CoulombF[l, η, r] gives the regular Coulomb wavefunction Fl (η, r)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoulombF)))
(def CoulombG "CoulombG[l, η, r] gives the irregular Coulomb wavefunction Gl (η, r)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoulombG)))
(def CoulombH1 "CoulombH1[l, η, r] gives the outgoing irregular Coulomb wavefunction H _l^(+)(η, r)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoulombH1)))
(def CoulombH2 "CoulombH2[l, η, r] gives the incoming irregular Coulomb wavefunction H _l^(-)(η, r)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoulombH2)))
(def Count "Count[list, pattern] gives the number of elements in list that match pattern. \nCount[expr, pattern, levelspec] gives the total number of subexpressions matching pattern that appear at the levels in expr specified by levelspec. \nCount[pattern] represents an operator form of Count that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Count)))
(def CountDistinct "CountDistinct[list] gives the number of distinct elements that appear in list.\nCountDistinct[list, test] applies test to pairs of elements to determine whether they should be considered equivalent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CountDistinct)))
(def CountDistinctBy "CountDistinctBy[{e1, e2, …}, f] gives the number of distinct values of f[ei] that occur.\nCountDistinctBy[f] represents an operator form of CountDistinctBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CountDistinctBy)))
(def CountRoots "CountRoots[f, x] gives the number of real roots of the univariate function f in x.\nCountRoots[f, {x, a, b}] gives the number of roots between a and b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CountRoots)))
(def CountryData "CountryData[\"tag\", property] gives the value of the specified property for the country, country-like entity, or group of countries specified by \"tag\".\nCountryData[\"tag\", {property, …, dates}] gives time series for certain economic and other properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CountryData)))
(def Counts "Counts[list] gives an association whose keys are the distinct elements of list, and whose values give the number of times those elements appear in list.\nCounts[list, elems] gives an association whose keys are the distinct elements in elems, and whose values give the number of times those elements appear in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Counts)))
(def CountsBy "CountsBy[{e1, e2, …}, f] gives an association whose keys are the distinct values of the f[ei], and whose values give the number of times these f[ei] values appear.\nCountsBy[f] represents an operator form of CountsBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CountsBy)))
(def Covariance "Covariance[v, w] gives the covariance between the vectors v and w.\nCovariance[a, b] gives the cross-covariance matrix for the matrices a and b.\nCovariance[a] gives the auto-covariance matrix for observations in matrix a.\nCovariance[dist] gives the auto-covariance matrix for the multivariate symbolic distribution dist.\nCovariance[dist, i, j] gives the (i, j)^th covariance for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Covariance)))
(def CovarianceEstimatorFunction "CovarianceEstimatorFunction is an option for generalized linear model fitting functions that specifies the estimator for the parameter covariance matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CovarianceEstimatorFunction)))
(def CovarianceFunction "CovarianceFunction[data, hspec] estimates the covariance function at lags hspec from data.\nCovarianceFunction[proc, hspec] represents the covariance function at lags hspec for the random process proc. \nCovarianceFunction[proc, s, t] represents the covariance function at times s and t for the random process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CovarianceFunction)))
(def CoxIngersollRossProcess "CoxIngersollRossProcess[μ, σ, θ, x0] represents a Cox–Ingersoll–Ross process with long‐term mean μ, volatility σ, speed of adjustment θ, and initial condition x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoxIngersollRossProcess)))
(def CoxModel "CoxModel[…] represents the symbolic proportional hazards model obtained from CoxModelFit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoxModel)))
(def CoxModelFit "CoxModelFit[{e1, …, en}] constructs a model of the baseline hazard h0(t) for events times ei.\nCoxModelFit[{{{ξ11, …, ξ 1p}, …, {ξ n 1, …, ξnp}}, {e1, …, en}}, {f1, …, fm}, {x1, …, xp}] constructs a Cox model of the form h0(t) exp(β1 f1+…+βm fm), where the fi depend on the xk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoxModelFit)))
(def CoxianDistribution "CoxianDistribution[{α1, …, α m-1}, {λ1, …, λm}] represent an m-phase Coxian distribution with phase probabilities αi and rates λi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CoxianDistribution)))
(def CramerVonMisesTest "CramerVonMisesTest[data] tests whether data is normally distributed using the Cramér–von Mises test.\nCramerVonMisesTest[data, dist] tests whether data is distributed according to dist using the Cramér–von Mises test.\nCramerVonMisesTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CramerVonMisesTest)))
(def CreateArchive "CreateArchive[source] creates a compressed archive in the current directory from source.\nCreateArchive[source, path] creates a compressed archive in the directory or file specified by path." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateArchive)))
(def CreateCellID "CreateCellID is an option for Notebook that specifies whether to assign a CellID to cells created in the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateCellID)))
(def CreateChannel "CreateChannel[] creates a new channel for channel communication, with a generated name.\nCreateChannel[\"path\"] creates a channel with the specified path relative to the home area of the currently authenticated user.\nCreateChannel[object] creates a channel based on the given ChannelObject specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateChannel)))
(def CreateCloudExpression "CreateCloudExpression[value] creates a new anonymous cloud expression that stores the specified initial value.\nCreateCloudExpression[value, \"name\"] creates a new cloud expression with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateCloudExpression)))
(def CreateCompilerEnvironment "CreateCompilerEnvironment[] creates a compiler environment that can be used in FunctionCompile and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateCompilerEnvironment)))
(def CreateDataStructure "CreateDataStructure[\"type\", arg1, arg2, …] creates a data structure with the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDataStructure)))
(def CreateDataSystemModel "CreateDataSystemModel[{v1, v2, …}] creates a SystemModel generating a signal of values vi. \nCreateDataSystemModel[{{t1, v1}, …}] creates a model for the time-value pairs {ti, vi}.\nCreateDataSystemModel[obj] creates a model for the TimeSeries or InterpolatingFunction obj. \nCreateDataSystemModel[fun, tmin, tmax] creates a model with samples from the function fun between tmin and tmax.\nCreateDataSystemModel[data, \"dspec\"] creates a model with data specification \"dspec\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDataSystemModel)))
(def CreateDatabin "CreateDatabin[] creates a databin in the Wolfram Data Drop and returns the corresponding Databin object.\nCreateDatabin[options] creates a databin with the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDatabin)))
(def CreateDialog "CreateDialog[expr] creates a dialog notebook containing expr and opens it in the front end.\nCreateDialog[expr, obj] replaces the notebook represented by the notebook object obj with the one obtained from expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDialog)))
(def CreateDirectory "CreateDirectory[\"dir\"] creates a directory with name dir. \nCreateDirectory[] creates a directory in the default area for temporary directories on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDirectory)))
(def CreateDocument "CreateDocument[] creates an empty document notebook and opens it in the front end.\nCreateDocument[expr] creates and opens a document notebook containing the expression expr.\nCreateDocument[{expr1, expr2, …}] creates and opens a document notebook consisting of a sequence of cells containing the expri.\nCreateDocument[expr, obj] replaces the notebook represented by the notebook object obj with the one obtained from expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateDocument)))
(def CreateFile "CreateFile[\"file\"] creates a file with name file. \nCreateFile[] creates a file in the default area for temporary files on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateFile)))
(def CreateForeignCallback "CreateForeignCallback[f, type] creates a foreign callback with the specified type that can be called from external libraries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateForeignCallback)))
(def CreateIntermediateDirectories "CreateIntermediateDirectories is an option for CreateDirectory and related functions that specifies whether to create intermediate directories in a directory path specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateIntermediateDirectories)))
(def CreateLicenseEntitlement "CreateLicenseEntitlement[settings] creates an on-demand license entitlement using settings.\nCreateLicenseEntitlement[] creates an on-demand license entitlement using the default settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateLicenseEntitlement)))
(def CreateManagedLibraryExpression "CreateManagedLibraryExpression[mname, f] creates a managed library expression by applying f to a positive integer ID associated with a registered manager with name mname." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateManagedLibraryExpression)))
(def CreateManagedObject "CreateManagedObject[expr, f] creates a managed object that evaluates f[expr] when it is no longer referenced." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateManagedObject)))
(def CreateNotebook "CreateNotebook[] creates a generic empty notebook and opens it in the front end.\nCreateNotebook[\"type\"] creates an empty notebook of the specified type and opens it in the front end.\nCreateNotebook[\"type\", obj] replaces the notebook represented by the notebook object obj by a version converted to be of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateNotebook)))
(def CreatePacletArchive "CreatePacletArchive[source] creates a paclet archive file from source.\nCreatePacletArchive[source, destdir] creates a paclet archive file from source and places it in destdir." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreatePacletArchive)))
(def CreatePalette "CreatePalette[expr] creates a palette notebook containing expr, and opens it in the front end.\nCreatePalette[{expr1, expr2, …}] creates and opens a palette notebook consisting of a sequence of cells containing the expri.\nCreatePalette[expr, obj] replaces the notebook represented by the notebook object obj with the one obtained from expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreatePalette)))
(def CreatePermissionsGroup "CreatePermissionsGroup[\"name\"] creates a permissions group with the specified name.\nCreatePermissionsGroup[\"name\", {user1, user2, …}] creates a permissions group consisting of the specified initial users." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreatePermissionsGroup)))
(def CreateSearchIndex "CreateSearchIndex[dir] creates a search index from all files in the directory dir and its subdirectories.\nCreateSearchIndex[{source1, source2, …}] creates a search index from all sources sourcei.\nCreateSearchIndex[sources, \"name\"] gives the search index the specified name.\nCreateSearchIndex[] creates an empty search index, which can be added to with AddToSearchIndex." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateSearchIndex)))
(def CreateSemanticSearchIndex "CreateSemanticSearchIndex[source] creates a search index from the data in source.\nCreateSemanticSearchIndex[{source1, …}] creates a search index with a collection of sources sourcei.\nCreateSemanticSearchIndex[{source1val1, …}] associates the source sourcei to the value vali.\nCreateSemanticSearchIndex[data, \"name\"] gives the search index the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateSemanticSearchIndex)))
(def CreateSystemModel "CreateSystemModel[sys] creates a Modelica SystemModel from the systems model sys. \nCreateSystemModel[eqns, t] creates a model for the system equations eqns with independent variable t.\nCreateSystemModel[…, tspec] creates a model with type specification tspec for variables and parameters.\nCreateSystemModel[…, spec] creates a model with spec for parameter values, initial values and model relations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateSystemModel)))
(def CreateTypeInstance "CreateTypeInstance[type, arg1, arg2, …] creates an instance of a type in compiled code.\nCreateTypeInstance[productType, field1x1, field2x2, …|>] creates an instance of a product type and initializes its fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateTypeInstance)))
(def CreateUUID "CreateUUID[] creates a random, universally unique UUID string.\nCreateUUID[\"base\"] appends a UUID string to the specified base string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateUUID)))
(def CreateVectorDatabase "CreateVectorDatabase[] creates a new empty vector database.\nCreateVectorDatabase[{vec1, …}] initializes the database with the collection of vectors veci.\nCreateVectorDatabase[{vec1, …}{val1, …}] associates the value vali to the vector veci.\nCreateVectorDatabase[data, name] gives the vector database the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateVectorDatabase)))
(def CreateWindow "CreateWindow[] creates an empty window in the front end.\nCreateWindow[expr] creates a window displaying the notebook expression expr, and opens it in the front end.\nCreateWindow[expr, obj] replaces the notebook represented by the notebook object obj with the one obtained from expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CreateWindow)))
(def CriterionFunction "CriterionFunction is an option in functions such as ClusterClassify that specifies the criterion to use to select a method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CriterionFunction)))
(def CriticalSection "CriticalSection[var, expr] acquires the lock var for parallel computation, evaluates expr, then releases the lock var.\nCriticalSection[{var1, var2, …}, expr] locks all variables vari simultaneously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CriticalSection)))
(def CriticalityFailureImportance "CriticalityFailureImportance[rdist, t] gives the criticality failure importances for all components in the ReliabilityDistribution rdist at time t.\nCriticalityFailureImportance[fdist, t] gives the criticality failure importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CriticalityFailureImportance)))
(def CriticalitySuccessImportance "CriticalitySuccessImportance[rdist, t] gives the criticality success importances for all components in the ReliabilityDistribution rdist at time t.\nCriticalitySuccessImportance[fdist, t] gives the criticality success importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CriticalitySuccessImportance)))
(def Cross "Cross[a, b] gives the vector cross product of a and b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cross)))
(def CrossEntropyLossLayer "CrossEntropyLossLayer[\"Index\"] represents a net layer that computes the cross-entropy loss by comparing input class probability vectors with indices representing the target class.\nCrossEntropyLossLayer[\"Probabilities\"] represents a net layer that computes the cross-entropy loss by comparing input class probability vectors with target class probability vectors.\nCrossEntropyLossLayer[\"Binary\"] represents a net layer that computes the binary cross-entropy loss by comparing input probability scalars with target probability scalars, where each probability represents a binary choice." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CrossEntropyLossLayer)))
(def CrossMatrix "CrossMatrix[r] gives a matrix whose elements are 1 in a centered cross-shaped region that extends r positions along each index direction, and are 0 otherwise.\nCrossMatrix[r, w] gives a w×w matrix containing a cross-shaped region of 1s.\nCrossMatrix[{r1, r2, …}, …] yields an array whose elements are 1 in a centered cross-shaped region that extends ri positions in the i ^th index direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CrossMatrix)))
(def CrossingCount "CrossingCount[contour, p] gives a count of the number of times a ray starting from the point p crosses the closed curve contour." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CrossingCount)))
(def CrossingDetect "CrossingDetect[image] gives a binary image in which white pixels correspond to the zero crossings in image.\nCrossingDetect[image, delta] treats values in image that are smaller in absolute value than delta as zero.\nCrossingDetect[array, …] gives a binary sparse array in which 1 corresponds to zero crossings in array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CrossingDetect)))
(def CrossingPolygon "CrossingPolygon[{p1, p2, …, pn}] gives a Polygon representing all points for which a ray from the point in any direction in the plane crosses the line segments {p1, p2}, …, {p n-1, pn}, {pn, p1} an odd number of times.\nCrossingPolygon[{{p11, p12, …}, {p21, p22, …}, …}] gives a Polygon from the line segments {p11, p12}, …, {p21, p22}, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CrossingPolygon)))
(def Csc "Csc[z] gives the cosecant of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Csc)))
(def CscDegrees "CscDegrees[θ] gives the cosecant of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CscDegrees)))
(def Csch "Csch[z] gives the hyperbolic cosecant of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Csch)))
(def Cube "Cube[] represents a regular cube centered at the origin with unit edge length.\nCube[l] represents a cube with edge length l.\nCube[{θ, ϕ}, …] represents a cube rotated by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nCube[{x, y, z}, …] represents a cube centered at {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cube)))
(def CubeRoot "CubeRoot[x] gives the real-valued cube root of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CubeRoot)))
(def Cubics "Cubics is an option for functions that involve solving algebraic equations, that specifies whether explicit forms for solutions to cubic equations should be given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cubics)))
(def Cuboid "Cuboid[pmin] represents a unit hypercube with its lower corner at pmin.\nCuboid[pmin, pmax] represents an axis-aligned filled cuboid with lower corner pmin and upper corner pmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cuboid)))
(def Cumulant "Cumulant[data, r] gives the r ^th cumulant κr of data.\nCumulant[data, {r1, …, rm} ] gives the multivariate cumulant of order {r1, …, rm} κ r1, …, rm of data.\nCumulant[dist, r] gives the r ^th cumulant of the distribution dist.\nCumulant[r] represents the r ^th formal cumulant." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cumulant)))
(def CumulantGeneratingFunction "CumulantGeneratingFunction[dist, t] gives the cumulant-generating function for the distribution dist as a function of the variable t. \nCumulantGeneratingFunction[dist, {t1, t2, …}] gives the cumulant-generating function for the multivariate distribution dist as a function of the variables t1, t2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CumulantGeneratingFunction)))
(def CumulativeFeatureImpactPlot "CumulativeFeatureImpactPlot[model, data] plots the cumulative impact of the value of each feature in data on the result of model.\nCumulativeFeatureImpactPlot[model] estimates the feature impacts using synthetic data.\nCumulativeFeatureImpactPlot[modelfname, …] plots only the impact of the specified feature fname.\nCumulativeFeatureImpactPlot[modelfnameclass, …] plots only the impact on the classification class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CumulativeFeatureImpactPlot)))
(def Cup "Cup[x, y, …] displays as x⌣y⌣…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cup)))
(def CupCap "CupCap[x, y, …] displays as x≍y≍…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CupCap)))
(def Curl "Curl[{f1, f2}, {x1, x2}] gives the curl ∂f2/∂x1-∂f1/∂x2.\nCurl[{f1, f2, f3}, {x1, x2, x3}] gives the curl (∂f3/∂x2-∂f2/∂x3, ∂f1/∂x3-∂f3/∂x1, ∂f2/∂x1-∂f1/∂x2).\nCurl[f, {x1, …, xn}] gives the curl of the n×n×…×n array f with respect to the n -dimensional vector {x1, …, xn}.\nCurl[f, x, chart] gives the curl in the coordinates chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Curl)))
(def CurrencyConvert "CurrencyConvert[quantity, target] attempts to convert the specified currency quantity to the specified target currency.\nCurrencyConvert[quantity, target, date] converts to the target currency for the historical date specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrencyConvert)))
(def CurrentDate "CurrentDate[gran] gives the current date of the specified granularity type gran.\nCurrentDate[date, gran] gives the date of the given granularity that includes the specified date.\nCurrentDate[] gives the instant corresponding to the current date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrentDate)))
(def CurrentImage "CurrentImage[] returns the current image captured from a connected camera.\nCurrentImage[n] returns n sequential image frames as a list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrentImage)))
(def CurrentNotebookImage "CurrentNotebookImage[nb] returns an image captured from the portion of the notebook nb that appears on your screen.\nCurrentNotebookImage[] returns an image captured from the notebook in which the function is evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrentNotebookImage)))
(def CurrentScreenImage "CurrentScreenImage[] returns an image captured from all current display screens on your computer. \nCurrentScreenImage[n] returns an image captured from display screen n.\nCurrentScreenImage[{{xmin, ymin}, {xmax, ymax}}] returns the specified rectangle from the image of all current display screens." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrentScreenImage)))
(def CurrentValue "CurrentValue[item] gives the current value of item at a location in the Wolfram System and interface. \nCurrentValue[{item, spec}] gives the current value for the feature of item specified by spec.\nCurrentValue[obj, item] gives the current value of item associated with the object obj. \nCurrentValue[{obj1, obj2, …}, item] gives a list of the current values associated with each of the obji." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurrentValue)))
(def CurryApplied "CurryApplied[f, n] represents an operator form of the function f of n arguments so that CurryApplied[f, n][x1]…[xn] is equivalent to f[x1, …, xn].\nCurryApplied[n] represents an operator form of CurryApplied that can be applied to a function to represent an operator form with n arguments.\nCurryApplied[f, {i1, …, in}] represents an operator form of the function f of n arguments so that CurryApplied[f, {i1, …, in}][x1]…[xn] is equivalent to f[x i1, …, x in].\nCurryApplied[f, k{i1, …, in}] represents an operator form that takes k arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurryApplied)))
(def CurvatureFlowFilter "CurvatureFlowFilter[image] applies a mean curvature flow filter to image.\nCurvatureFlowFilter[image, t] specifies the amount of curvature flow time t to be applied.\nCurvatureFlowFilter[image, t, k] applies the curvature flow with a modified conductance term parametrized by k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurvatureFlowFilter)))
(def CurveClosed "CurveClosed is an option for JoinedCurve that specifies whether individual curve components should be closed curves." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CurveClosed)))
(def Cyan "Cyan represents the color cyan in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cyan)))
(def CycleGraph "CycleGraph[n] gives the cycle graph with n vertices Cn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CycleGraph)))
(def CycleIndexPolynomial "CycleIndexPolynomial[perm, {x1, …, xn}] constructs the cycle index monomial of the permutation perm in the variables xi.\nCycleIndexPolynomial[group, {x1, …, xn}] constructs the cycle index polynomial of group in the variables xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CycleIndexPolynomial)))
(def Cycles "Cycles[{cyc1, cyc2, …}] represents a permutation with disjoint cycles cyci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cycles)))
(def CyclicGroup "CyclicGroup[n] represents the cyclic group of degree n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CyclicGroup)))
(def Cyclotomic "Cyclotomic[n, x] gives the n ^th cyclotomic polynomial in x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cyclotomic)))
(def Cylinder "Cylinder[{{x1, y1, z1}, {x2, y2, z2}}, r] represents a cylinder of radius r around the line from (x1, y1, z1) to (x2, y2, z2). \nCylinder[{{x1, y1, z1}, {x2, y2, z2}}] represents a cylinder of radius 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Cylinder)))
(def CylindricalDecomposition "CylindricalDecomposition[expr, {x1, x2, …}] finds a decomposition of the region represented by the statement expr into cylindrical parts whose directions correspond to the successive xi. \nCylindricalDecomposition[expr, {x1, x2, …}, op] finds a decomposition of the result of applying the topological operation op to the region represented by the statement expr.\nCylindricalDecomposition[expr, {x1, x2, …}, \"Function\"] represents the result as CylindricalDecompositionFunction[…][x1, x2, …] that can be efficiently used in further computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CylindricalDecomposition)))
(def CylindricalDecompositionFunction "CylindricalDecompositionFunction[data][x1, x2, …] represents a cylindrical algebraic formula in x1, x2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote CylindricalDecompositionFunction)))
(def D "D[f, x] gives the partial derivative ∂f/∂x. \nD[f, {x, n}] gives the multiple derivative ∂^nf/∂x^n.\nD[f, x, y, …] gives the partial derivative ⋯ (∂/∂y)(∂/∂x) f.\nD[f, {x, n}, {y, m}, …] gives the multiple partial derivative ⋯ (∂^m/∂y^m)(∂^n/∂x^n) f.\nD[f, {{x1, x2, …}}] for a scalar f gives the vector derivative (∂f/∂x1, ∂f/∂x2, …). \nD[f, {array}] gives an array derivative." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote D)))
(def DEigensystem "DEigensystem[ℒ[u[x, y, …]], u, {x, y, …}∈Ω, n] gives the n smallest magnitude eigenvalues and eigenfunctions for the linear differential operator ℒ over the region Ω.\nDEigensystem[eqns, u, t, {x, y, …}∈Ω, n] gives the eigenvalues and eigenfunctions for solutions u of the time-dependent differential equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DEigensystem)))
(def DEigenvalues "DEigenvalues[ℒ[u[x, y, …], u, {x, y, …}∈Ω, n] gives the n smallest magnitude eigenvalues for the linear differential operator ℒ over the region Ω.\nDEigenvalues[eqns, u, t, {x, y, …}∈Ω, n] gives the eigenvalues for solutions u of the time-dependent differential equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DEigenvalues)))
(def DFixedPoints "DFixedPoints[eqn, x[t], t] gives the fixed points for a differential equation.\nDFixedPoints[{eqn1, eqn2, …}, {x1[t], x2[t], …}, t] gives the fixed points for a system of differential equations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DFixedPoints)))
(def DGaussianWavelet "DGaussianWavelet[] represents a derivative of Gaussian wavelet of derivative order 2.\nDGaussianWavelet[n] represents a derivative of Gaussian wavelet of derivative order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DGaussianWavelet)))
(def DMSList "DMSList[θ] converts an angle θ given in decimal degrees to a DMS list {degree, minute, second}.\nDMSList[\"dms\"] converts a DMS string to a DMS list {degree, minute, second}.\nDMSList[\"latlon\"] converts a latitude-longitude string to a pair of DMS lists.\nDMSList[GeoPosition[…]] converts GeoPosition data to a pair or array of pairs of DMS lists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DMSList)))
(def DMSString "DMSString[θ] converts an angle θ given in decimal degrees to a degrees-minutes-seconds string.\nDMSString[{ϕ, λ}] converts latitude and longitude given in decimal degrees to a DMS latitude-longitude string.\nDMSString[{d, m, s}] converts a DMS list to a DMS string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DMSString)))
(def DSolve "DSolve[eqn] solves a differential equation eqn.\nDSolve[eqn, u, x] solves a differential equation for the function u, with independent variable x. \nDSolve[eqn, u, {x, xmin, xmax}] solves a differential equation for x between xmin and xmax.\nDSolve[{eqn1, eqn2, …}, {u1, u2, …}, …] solves a list of differential equations. \nDSolve[eqn, u, {x1, x2, …}] solves a partial differential equation. \nDSolve[eqn, u, {x1, x2, …}∈Ω] solves the partial differential equation eqn over the region Ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DSolve)))
(def DSolveChangeVariables "DSolveChangeVariables[dsolve, u, t, trans] changes the solution function in dsolve to u(t) using the transformation trans.\nDSolveChangeVariables[dsolve, {u1, u2, …}, t, trans] changes the solution functions in the system to {u1(t), …, un(t)}.\nDSolveChangeVariables[dsolve, u, {t1, …, tn}, trans] changes the solution function in the partial differential equation to u (t1, …, tn)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DSolveChangeVariables)))
(def DSolveValue "DSolveValue[eqn, expr, x] gives the value of expr determined by a symbolic solution to the ordinary differential equation eqn with independent variable x. \nDSolveValue[eqn, expr, {x, xmin, xmax}] uses a symbolic solution for x between xmin and xmax.\nDSolveValue[{eqn1, eqn2, …}, expr, …] uses a symbolic solution for a list of differential equations. \nDSolveValue[eqn, expr, {x1, x2, …}] uses a solution for the partial differential equation eqn. \nDSolveValue[eqn, expr, {x1, x2, …}∈Ω] uses a solution of the partial differential equation eqn over the region Ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DSolveValue)))
(def DStabilityConditions "DStabilityConditions[eqn, x[t], t] gives the fixed points and stability conditions for a differential equation.\nDStabilityConditions[{eqn1, eqn2, …}, {x1[t], x2[t], …}, t] gives the fixed points and stability conditions for a system of differential equations.\nDStabilityConditions[{eqn1, eqn2, …}, {x1[t], x2[t], …}, t, {pnt1, pnt2, …}] gives the stability conditions for the given fixed points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DStabilityConditions)))
(def DagumDistribution "DagumDistribution[p, a, b] represents a Dagum distribution with shape parameters p and a and scale parameter b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DagumDistribution)))
(def DamData "DamData[entity, property] gives the value of the specified property for the dam entity.\nDamData[{entity1, entity2, …}, property] gives a list of property values for the specified dam entities.\nDamData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DamData)))
(def DamerauLevenshteinDistance "DamerauLevenshteinDistance[u, v] gives the Damerau–Levenshtein distance between strings or vectors u and v.\nDamerauLevenshteinDistance[u, v] gives the Damerau–Levenshtein distance between strings, vectors or biomolecular sequences u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DamerauLevenshteinDistance)))
(def Darker "Darker[color] represents a darker version of the specified color. \nDarker[color, f] represents a version of the specified color darkened by a fraction f. \nDarker[image, …] gives a darker version of an image.\nDarker[video, …] gives a version of a video with darker frames." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Darker)))
(def Dashed "Dashed is a graphics directive specifying that lines that follow should be drawn dashed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dashed)))
(def Dashing "Dashing[{r1, r2, …}] is a two-dimensional graphics directive specifying that lines that follow are to be drawn dashed, with successive segments of lengths r1, r2, … (repeated cyclically). The ri are given as a fraction of the total width of the graph. \nDashing[r] is equivalent to Dashing[{r, r}].\nDashing[{r1, r2, …}, offset] offsets the dashes by offset.\nDashing[{r1, r2, …}, offset, capform] sets the CapForm for individual dashes to capform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dashing)))
(def DataConnectionObject "DataConnectionObject[assoc] represents data given by the details in assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataConnectionObject)))
(def DataDistribution "DataDistribution[ddist, …] represents a probability distribution of type ddist, estimated from a set of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataDistribution)))
(def DataRange "DataRange is an option for functions such as ListPlot and ListDensityPlot that specifies what range of actual coordinates the data should be assumed to occupy." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataRange)))
(def DataReversed "DataReversed is an option for ArrayPlot and related functions that specifies whether data should be plotted in reverse order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataReversed)))
(def DataStructure "DataStructure[\"type\", data] represents a data structure." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataStructure)))
(def DataStructureQ "DataStructureQ[ds] yields True if ds is a valid data structure and False otherwise.\nDataStructureQ[ds, type] yields True if ds is a valid data structure of the specified type and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DataStructureQ)))
(def DatabaseConnect "DatabaseConnect[db] activates a connection to the database db." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabaseConnect)))
(def DatabaseDisconnect "DatabaseDisconnect[db] deactivates a connection to the database db." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabaseDisconnect)))
(def DatabaseReference "DatabaseReference[File[\"filename\"]] represents a reference to a local file-based SQL database.\nDatabaseReference[URL[\"url\"]] represents a reference to a server-based SQL database.\nDatabaseReference[assoc] represents a fully specified reference to any SQL database." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabaseReference)))
(def Databin "Databin[\"id\"] represents a databin in the Wolfram Data Drop.\nDatabin[\"id\", n] represents the first n entries in a databin.\nDatabin[\"id\", -n] represents the most recent n entries in a databin.\nDatabin[\"id\", {m, n}] represents entries m through n in a databin, with negative numbers counting from the end.\nDatabin[\"id\", {m, n, s}] represents entries m through n with step s.\nDatabin[\"id\", time] represents entries going back for the quantity of time specified by time.\nDatabin[\"id\", date] represents the entries in a databin from the specified date to now.\nDatabin[\"id\", {date1, date2}] represents the entries in a databin from date1 to date2.\nDatabin[\"id\", range, {key1, key2, …}] represents only elements with keys keyi within each entry in a databin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Databin)))
(def DatabinAdd "DatabinAdd[bin, data] adds the specified data to a databin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabinAdd)))
(def DatabinSubmit "DatabinSubmit[bin, data] submits the specified data to be added to the databin bin asynchronously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabinSubmit)))
(def DatabinUpload "DatabinUpload[bin, {entry1, entry2, …}] bulk uploads all the entries entryi to a databin.\nDatabinUpload[bin, EventSeries[…]] bulk uploads all entries in an event series to a databin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatabinUpload)))
(def Databins "Databins[] gives a list of databins associated with the currently connected user." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Databins)))
(def Dataset "Dataset[data] represents a structured dataset based on a hierarchy of lists and associations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dataset)))
(def DatasetTheme "DatasetTheme is an option for Dataset that specifies an overall theme for a dataset and its elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatasetTheme)))
(def DateBounds "DateBounds[{date1, date2, …}] gives the earliest and latest of the datei.\nDateBounds[tseries] gives the first and last dates in the time series tseries.\nDateBounds[bin] gives the first and last time stamps in the databin bin.\nDateBounds[interval] gives the start and end dates of the date interval interval.\nDateBounds[interval, gran] gives the endpoints of interval in the specified granularity gran." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateBounds)))
(def DateDifference "DateDifference[date1, date2] gives the number of days from date1 to date2.\nDateDifference[date1, date2, \"unit\"] gives the difference between date1 and date2 in the specified unit.\nDateDifference[date1, date2, {\"unit1\", \"unit2\", …}] gives the difference as a list with elements corresponding to the successive \"uniti\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateDifference)))
(def DateDistribution "DateDistribution[dist, dunit, dorig] represents a distribution dist of dates with date scale unit dunit and date origin dorig." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateDistribution)))
(def DateFormat "DateFormat is an option that determines the date formatting of dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateFormat)))
(def DateFunction "DateFunction is an option for DateListPlot and TemporalData that specifies how dates given as input should be interpreted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateFunction)))
(def DateGranularity "DateGranularity is an option that determines the calendar granularity of generated dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateGranularity)))
(def DateHistogram "DateHistogram[{date1, date2, …}] plots a histogram of the dates datei.\nDateHistogram[{date1, date2, …}, bspec] plots a histogram with bin width specification bspec.\nDateHistogram[{date1, date2, …}, bspec, hspec] plots a histogram with bin heights computed according to the specification hspec.\nDateHistogram[{data1, data2, …}] plots histograms for multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateHistogram)))
(def DateInterval "DateInterval[{start, end}] represents the continuous interval of time between start and end.\nDateInterval[{start, end}, gran] represents an interval of dates with calendar granularity gran.\nDateInterval[{{start1, end1}, {start2, end2}, …}] represents the union of intervals start1 to end1, start2 to end2, ….\nDateInterval[gdate] gives the date interval from the initial to final instants of the granular date object gdate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateInterval)))
(def DateList "DateList[] gives the current local date and time in the form {year, month, day, hour, minute, second}. \nDateList[date] gives a date list corresponding to the given date specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateList)))
(def DateListLogPlot "DateListLogPlot[{{date1, y1}, {date2, y2}, …}] makes a log plot with values yi at a sequence of dates.\nDateListLogPlot[{y1, y2, …}, datespec] makes a log plot with dates at equal intervals specified by datespec.\nDateListLogPlot[tseries] plots the time series tseries.\nDateListLogPlot[{data1, data2, …}] plots data from all the datai.\nDateListLogPlot[{…, w[datai], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateListLogPlot)))
(def DateListPlot "DateListPlot[{{date1, y1}, {date2, y2}, …, {daten, yn}}] plots points with values yi at a sequence of dates.\nDateListPlot[{y1, y2, …, yn}, datespec] plots points with dates at equal intervals specified by datespec.\nDateListPlot[tseries] plots the time series tseries.\nDateListPlot[{data1, data2, …}] plots data from all the datai.\nDateListPlot[{…, w[datai], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateListPlot)))
(def DateListStepPlot "DateListStepPlot[{{date1, y1}, {date2, y2}, …}] plots the values yi in steps at a sequence of dates.\nDateListStepPlot[{y1, y2, …}, datespec] plots the values yi in steps with dates at equal intervals specified by datespec.\nDateListStepPlot[tseries] plots the time series tseries.\nDateListStepPlot[{data1, data2, …}] plots data from all the datai.\nDateListStepPlot[…, step] plots using steps specified by step.\nDateListStepPlot[{…, w[datai], …}] plots data datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateListStepPlot)))
(def DateObject "DateObject[] gives the current local date.\nDateObject[date] gives a date object corresponding to the given date specification.\nDateObject[rdate, gran] gives the date object of calendar granularity gran that includes the reference date rdate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateObject)))
(def DateObjectQ "DateObjectQ[expr] gives True if expr is a DateObject with valid arguments, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateObjectQ)))
(def DateOverlapsQ "DateOverlapsQ[date1, date2] returns True if the calendar dates date1 and date2 overlap, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateOverlapsQ)))
(def DatePattern "DatePattern[{\"e1\", \"e2\", …}] represents the characters of a date with elements of type \"ei\" in StringExpression.\nDatePattern[{\"e1\", \"e2\", …}, sep] allows separators that match the string expression sep." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatePattern)))
(def DatePlus "DatePlus[date, n] gives the date n days after date.\nDatePlus[date, {n, step}] gives the date n calendar steps after date.\nDatePlus[date, {{n1, step1}, {n2, step2}, …}] gives a date offset by ni steps of each specified size. \nDatePlus[n] gives the date n days after the current date.\nDatePlus[offset] gives the date with the specified offset from the current date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatePlus)))
(def DateRange "DateRange[date1, date2] gives all dates in the range from date1 to date2.\nDateRange[date1, date2, increment] gives the dates in the range from date1 to date2 that are increment apart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateRange)))
(def DateReduction "DateReduction is an option for DateHistogram that specifies the length for cyclic periods of time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateReduction)))
(def DateScale "DateScale[] represents the canonical mapping of continuous dates and times to a quantitative scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateScale)))
(def DateSelect "DateSelect[list, crit] picks out all dates datei of a list for which crit[datei] is True.\nDateSelect[int, crit] returns all dates within the DateInterval int for which crit[datei] is True.\nDateSelect[crit] represents an operator form of DateSelect that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateSelect)))
(def DateString "DateString[] gives a string representing the complete current local date and time. \nDateString[date] gives a string corresponding to the given date specification.\nDateString[{\"elem1\", \"elem2\", …}] concatenates the specified elements in the order given.\nDateString[date, fmt] gives elements specified by the date format fmt for the date or time specification date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateString)))
(def DateTicksFormat "DateTicksFormat is an option for DateListPlot which specifies how date tick labels should be formatted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateTicksFormat)))
(def DateValue "DateValue[\"elem\"] gives the specified element of the current date and time.\nDateValue[{elem1, elem2, …}] gives a list of the specified elements of the current date and time.\nDateValue[date, elem] gives the specified element of the specified date.\nDateValue[date, elem, form] gives the result in the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateValue)))
(def DateWithinQ "DateWithinQ[date1, date2] returns True if the calendar date date2 is entirely contained within date1, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DateWithinQ)))
(def Dated "Dated[obj, year] represents the object obj associated with a particular year.\nDated[obj, date] represents the object obj associated with a date.\nDated[obj, All] represents the object obj for all dates where information is available about it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dated)))
(def DatedUnit "DatedUnit[unit, date] represents the specified unit at a specific date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DatedUnit)))
(def DaubechiesWavelet "DaubechiesWavelet[] represents a Daubechies wavelet of order 2. \nDaubechiesWavelet[n] represents a Daubechies wavelet of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DaubechiesWavelet)))
(def DavisDistribution "DavisDistribution[b, n, μ] represents a Davis distribution with scale parameter b, shape parameter n, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DavisDistribution)))
(def DawsonF "DawsonF[z] gives the Dawson integral F (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DawsonF)))
(def DayCount "DayCount[date1, date2] gives the number of days from date1 to date2.\nDayCount[date1, date2, daytype] gives the number of days of the specified daytype from date1 to date2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayCount)))
(def DayCountConvention "DayCountConvention is an option that specifies the day count convention used by DateDifference." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayCountConvention)))
(def DayHemisphere "DayHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth that is currently in daylight. \nDayHemisphere[datespec] represents the daylight half of the Earth for the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayHemisphere)))
(def DayMatchQ "DayMatchQ[date, daytype] returns True if the date matches the daytype specification and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayMatchQ)))
(def DayName "DayName[] gives the current day of the week.\nDayName[date] gives the day of the week for the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayName)))
(def DayNightTerminator "DayNightTerminator[] is a one-dimensional GeoGraphics primitive that represents the separation line between the halves of the Earth currently in daytime and nighttime.\nDayNightTerminator[datespec] represents the separation line between day and night for the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayNightTerminator)))
(def DayPlus "DayPlus[date, n] gives the date n days away from date.\nDayPlus[date, n, daytype] gives the date that is n days of daytype away from date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayPlus)))
(def DayRange "DayRange[date1, date2] gives the dates in the range from date1 to date2.\nDayRange[date1, date2, daytype] gives the dates in the range from date1 to date2 that are of the specified daytype." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayRange)))
(def DayRound "DayRound[date, daytype] rounds date to the nearest day of daytype, using the next-day rounding convention.\nDayRound[date, daytype, rounding] rounds date to the nearest day of daytype, using rounding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DayRound)))
(def DaylightQ "DaylightQ[] gives True if it is currently daylight from the user's location.\nDaylightQ[datespec] gives True if it is daylight from the user's location on the specified datespec.\nDaylightQ[locationspec] gives True if it is currently daylight from the specified locationspec.\nDaylightQ[locationspec, datespec] gives True if it is daylight from the specified locationspec on the specified datespec.\nDaylightQ[{{location1, date1}, {location2, date2}, …}] gives True if it is daylight from the specified locations and dates.\nDaylightQ[locationspec, datespec, inclusionspec] gives True if it is daylight from the specified locationspec on the specified datespec taking inclusionspec into account." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DaylightQ)))
(def DeBruijnGraph "DeBruijnGraph[m, n] gives the n-dimensional De Bruijn graph with m symbols.\nDeBruijnGraph[m, n, type] gives the De Bruijn graph with connectivity given by type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeBruijnGraph)))
(def DeBruijnSequence "DeBruijnSequence[list, n] gives a de Bruijn sequence on the elements in list taken n at a time.\nDeBruijnSequence[k, n] gives a de Bruijn sequence on the elements 0, …, k-1.\nDeBruijnSequence[\"string\", n] gives a de Bruijn sequence on the characters in \"string\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeBruijnSequence)))
(def Decapitalize "Decapitalize[string] yields a string in which the first character has been made lowercase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Decapitalize)))
(def DecimalForm "DecimalForm[expr] prints with approximate real numbers in expr always given in decimal form, without scientific notation.\nDecimalForm[expr, n] prints with approximate real numbers given in decimal form to n-digit precision.\nDecimalForm[expr, {n, f}] prints with approximate real numbers having n digits, with f digits to the right of the decimal point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DecimalForm)))
(def DeclareCompiledComponent "DeclareCompiledComponent[\"name\", decls] adds declarations decls to compiled component \"name\".\nDeclareCompiledComponent[\"name\", field->spec] adds the specification spec to the specified field in the compiled component \"name\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeclareCompiledComponent)))
(def DeclarePackage "DeclarePackage[\"context`\", {\"name1\", \"name2\", …}] declares that Needs[\"context`\"] should automatically be executed if a symbol with any of the specified names is ever used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeclarePackage)))
(def Decompose "Decompose[poly, x] decomposes a polynomial, if possible, into a composition of simpler polynomials." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Decompose)))
(def DeconvolutionLayer "DeconvolutionLayer[n, sz] represents a trainable deconvolutional net layer having n output channels and using kernels of size sz to compute the deconvolution.\nDeconvolutionLayer[n, {s}] represents a layer performing one-dimensional deconvolutions with kernels of size s.\nDeconvolutionLayer[n, {h, w}] represents a layer performing two-dimensional deconvolutions with kernels of size h×w.\nDeconvolutionLayer[n, kernel, opts] includes options for initial kernels and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeconvolutionLayer)))
(def Decrement "x-- decreases the value of x by 1, returning the old value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Decrement)))
(def Decrypt "Decrypt[\"password\", enc] attempts to decrypt the encrypted object enc using the specified password.\nDecrypt[keyspec, enc] attempts to decrypt using the cryptographic key specification keyspec.\nDecrypt[obj] interactively requests a password with which to try to decrypt obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Decrypt)))
(def DecryptFile "DecryptFile[\"password\", file] generates a decrypted version of a file, using the specified password.\nDecryptFile[\"password\", source, target] generates a decrypted version of source, putting the result in target.\nDecryptFile[keyspec, source, …] decrypts using the cryptographic key specification keyspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DecryptFile)))
(def DedekindEta "DedekindEta[τ] gives the Dedekind eta modular elliptic function η (τ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DedekindEta)))
(def DeepSpaceProbeData "DeepSpaceProbeData[entity, property] gives the value of the specified property for the deep space probe entity.\nDeepSpaceProbeData[{entity1, entity2, …}, property] gives a list of property values for the specified deep space probe entities.\nDeepSpaceProbeData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeepSpaceProbeData)))
(def Default "Default[f] gives the default value for arguments of the function f obtained with a _. pattern object. \nDefault[f, i] gives the default value to use when _. appears as the i ^th argument of f. \nDefault[f, i, n] gives the default value for the i ^th argument out of a total of n arguments. \nDefault[f, …]=val defines default values for arguments of f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Default)))
(def DefaultAxesStyle "DefaultAxesStyle is a low-level option for graphics functions that specifies the default style to use in displaying axes and axes-like constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultAxesStyle)))
(def DefaultBaseStyle "DefaultBaseStyle is a low-level option for formatting and related constructs that specifies a default base style to use before BaseStyle." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultBaseStyle)))
(def DefaultBoxStyle "DefaultBoxStyle is a low-level option for three-dimensional graphics functions that specifies the default style to use in rendering the bounding box." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultBoxStyle)))
(def DefaultButton "DefaultButton[] represents an OK button that closes a dialog, and is the default when Enter is pressed in the dialog.\nDefaultButton[action] represents a button that is labeled OK, and whose action is to evaluate action.\nDefaultButton[label, action] uses label as the label for the button." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultButton)))
(def DefaultDiffStyle "DefaultDiffStyle is a low-level option for Diff and related functions that specifies the default styles to use when viewing changes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultDiffStyle)))
(def DefaultDuplicateCellStyle "DefaultDuplicateCellStyle is a notebook option that specifies the default style to use for cells created by automatic duplication of other cells in the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultDuplicateCellStyle)))
(def DefaultDuration "DefaultDuration is an option to Animate and related functions that specifies the default total duration of the animation in seconds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultDuration)))
(def DefaultElement "DefaultElement is an option for Grid and related constructs which specifies what to insert when a new element is interactively created." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultElement)))
(def DefaultFaceGridsStyle "DefaultFaceGridsStyle is a low-level option for 3D graphics functions that specifies the default style to use in rendering face grids." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultFaceGridsStyle)))
(def DefaultFieldHintStyle "DefaultFieldHintStyle is a low-level option for InputField that specifies the default style to use for displaying the field hint." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultFieldHintStyle)))
(def DefaultFontProperties "DefaultFontProperties is a global option that allows overriding properties of specified font families." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultFontProperties)))
(def DefaultFrameStyle "DefaultFrameStyle is a low-level option for graphics and related constructs that specifies the default style to use in displaying their frames." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultFrameStyle)))
(def DefaultFrameTicksStyle "DefaultFrameTicksStyle is a low-level option for 2D graphics functions that specifies the default style to use in rendering frame ticks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultFrameTicksStyle)))
(def DefaultGridLinesStyle "DefaultGridLinesStyle is a low-level option for 2D graphics functions that specifies the default style to use in rendering grid lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultGridLinesStyle)))
(def DefaultLabelStyle "DefaultLabelStyle is a low-level option for formatting and related constructs that specifies the default style to use in displaying their label-like elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultLabelStyle)))
(def DefaultMenuStyle "DefaultMenuStyle is a low-level option for menu-generating constructs that specifies the default style to use for displaying menu items." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultMenuStyle)))
(def DefaultNaturalLanguage "DefaultNaturalLanguage is an option for character selections that specifies the language used when checking the spelling of a word in a human natural language selection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultNaturalLanguage)))
(def DefaultNewCellStyle "DefaultNewCellStyle is a notebook option which specifies the default style to use for new cells created in the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultNewCellStyle)))
(def DefaultOptions "DefaultOptions is a style option that allows default options to be specified for particular formatting and related constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultOptions)))
(def DefaultPrintPrecision "DefaultPrintPrecision is an option for NumberForm, DecimalForm and related functions that specifies the default number of digits of precision with which to print machine numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultPrintPrecision)))
(def DefaultTicksStyle "DefaultTicksStyle is a low-level option for graphics functions that specifies the default style to use in rendering ticks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultTicksStyle)))
(def DefaultTooltipStyle "DefaultTooltipStyle is a low-level option for tooltips that specifies the default style to use in displaying their elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultTooltipStyle)))
(def DefaultValues "DefaultValues[f] gives a list of transformation rules corresponding to default values of f.\nDefaultValues[\"symbol\"] gives a list of transformation rules corresponding to all default values defined for the symbol named \"symbol\" if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefaultValues)))
(def Defer "Defer[expr] yields an object that displays as the unevaluated form of expr, but that is evaluated if it is explicitly given as Wolfram Language input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Defer)))
(def DefineInputStreamMethod "DefineInputStreamMethod[\"name\", {fname1->function1, fname2->function2, … }] defines a custom input stream method with the specified name, allowing the Wolfram Language to call the stream functions fnamei for opening and reading from an input stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefineInputStreamMethod)))
(def DefineOutputStreamMethod "DefineOutputStreamMethod[\"name\", {fname1->function1, fname2->function2, … }] defines a custom output stream method with the specified name, allowing the Wolfram Language to call the stream functions for opening and writing to an output stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefineOutputStreamMethod)))
(def DefineResourceFunction "DefineResourceFunction[f] defines a resource function that can be applied to arguments to give the same result as f[…].\nDefineResourceFunction[f, name] uses name as the name of the resource function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DefineResourceFunction)))
(def Definition "Definition[symbol] prints as the definitions given for a symbol.\nDefinition[\"symbol\"] prints as the definitions given for the symbol named \"symbol\" if it exists.\nDefinition[patt] prints as the definitions given for the symbols whose names textually match the arbitrary string pattern patt.\nDefinition[{spec1, spec2, …}] prints as the definitions given for the symbols that are equal to or or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Definition)))
(def Degree "Degree gives the number of radians in one degree. It has a numerical value of π/180." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Degree)))
(def DegreeCentrality "DegreeCentrality[g] gives a list of vertex degrees for the vertices in the underlying simple graph of g.\nDegreeCentrality[g, \"In\"] gives a list of vertex in-degrees.\nDegreeCentrality[g, \"Out\"] gives a list of vertex out-degrees.\nDegreeCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DegreeCentrality)))
(def DegreeGraphDistribution "DegreeGraphDistribution[dlist] represents a degree graph distribution with vertex degree dlist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DegreeGraphDistribution)))
(def Deinitialization "Deinitialization is an option for Dynamic, DynamicModule, Manipulate, and related constructs that specifies an expression to be evaluated when the construct can no longer be displayed or used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Deinitialization)))
(def Del "Del[x] displays as ∇x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Del)))
(def DelaunayMesh "DelaunayMesh[{p1, p2, …}] gives a MeshRegion representing the Delaunay mesh from the points p1, p2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DelaunayMesh)))
(def Delayed "Delayed[expr] represents an expression whose evaluation is delayed until its value is externally requested.\nDelayed[expr, fmt] specifies that the result from evaluating expr should be given in format fmt.\nDelayed[expr, {fmt, rform}] specifies that the result should be given as a response of the form rform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Delayed)))
(def Deletable "Deletable is an option for Cell that specifies whether the cell can be deleted interactively using the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Deletable)))
(def Delete "Delete[expr, n] deletes the element at position n in expr. If n is negative, the position is counted from the end. \nDelete[expr, {i, j, …}] deletes the part at position {i, j, …}. \nDelete[expr, {{i1, j1, …}, {i2, j2, …}, …}] deletes parts at several positions. \nDelete[pos] represents an operator form of Delete that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Delete)))
(def DeleteAdjacentDuplicates "DeleteAdjacentDuplicates[list] deletes all duplicates in runs of identical elements in list.\nDeleteAdjacentDuplicates[list, test] applies test to pairs of consecutive elements to determine whether they should be considered duplicates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteAdjacentDuplicates)))
(def DeleteAnomalies "DeleteAnomalies[{example1, example2, …}] gives a list in which examplei that are considered anomalous have been dropped.\nDeleteAnomalies[fun, data] drops anomalies in data using the given AnomalyDetectorFunction[…] or LearnedDistribution[…]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteAnomalies)))
(def DeleteBorderComponents "DeleteBorderComponents[image] replaces connected components adjacent to the border in a binary image image with background pixels.\nDeleteBorderComponents[m] replaces components adjacent to the border in a label matrix m with 0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteBorderComponents)))
(def DeleteCases "DeleteCases[expr, pattern] removes all elements of expr that match pattern. \nDeleteCases[expr, pattern, levelspec] removes all parts of expr on levels specified by levelspec that match pattern. \nDeleteCases[expr, pattern, levelspec, n] removes the first n parts of expr that match pattern. \nDeleteCases[pattern] represents an operator form of DeleteCases that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteCases)))
(def DeleteChannel "DeleteChannel[channel] deletes the specified channel from the channel broker server.\nDeleteChannel[{channel1, channel2, …}] deletes all the channeli.\nDeleteChannel[All] deletes all channels owned by the currently authenticated user." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteChannel)))
(def DeleteCloudExpression "DeleteCloudExpression[\"name\"] deletes the cloud expression identified by \"name\".\nDeleteCloudExpression[ce] deletes the cloud expression ce." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteCloudExpression)))
(def DeleteColumns "DeleteColumns[tab, cspec] deletes the columns specified by cspec from the tabular data tab.\nDeleteColumns[cspec] represents an operator form of DeleteColumns that can be applied to tabular data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteColumns)))
(def DeleteContents "DeleteContents is an option for DeleteDirectory that specifies whether the contents of directories should automatically be deleted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteContents)))
(def DeleteDirectory "DeleteDirectory[\"dir\"] deletes the specified directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteDirectory)))
(def DeleteDuplicates "DeleteDuplicates[data] deletes all duplicates from data.\nDeleteDuplicates[data, test] applies test to pairs of elements to determine whether they should be considered duplicates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteDuplicates)))
(def DeleteDuplicatesBy "DeleteDuplicatesBy[data, f] deletes those ei in data that yield duplicates in the list {f[e1], f[e2], …}.\nDeleteDuplicatesBy[f] represents an operator form of DeleteDuplicatesBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteDuplicatesBy)))
(def DeleteElements "DeleteElements[list, {e1, e2, …}] removes all instances of elements ei from list.\nDeleteElements[list, n{e1, e2, …}] removes up to n instances of each ei from list.\nDeleteElements[list, {n1, n2, …}{e1, e2, …}] removes up to ni instances of ei from list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteElements)))
(def DeleteFile "DeleteFile[\"file\"] deletes a file. \nDeleteFile[{\"file1\", \"file2\", …}] deletes a list of files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteFile)))
(def DeleteMissing "DeleteMissing[list] drops elements with head Missing from a list.\nDeleteMissing[assoc] drops elements whose values have head Missing from the association assoc.\nDeleteMissing[expr, n] applies DeleteMissing to any lists or associations that occur within the first n levels of expr.\nDeleteMissing[expr, n, d] considers an element at level n to be missing if Missing occurs within the first d levels of the element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteMissing)))
(def DeleteObject "DeleteObject[obj] deletes the object obj.\nDeleteObject[{obj1, obj2, …}] deletes all the obji." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteObject)))
(def DeletePermissionsKey "DeletePermissionsKey[key] deletes a permissions key, rendering it invalid.\nDeletePermissionsKey[{key1, key2, …}] deletes several permissions keys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeletePermissionsKey)))
(def DeleteSearchIndex "DeleteSearchIndex[obj] deletes the search index represented by the search index object obj.\nDeleteSearchIndex[\"name\"] deletes the search index with the specified name in the SearchIndices[] list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteSearchIndex)))
(def DeleteSmallComponents "DeleteSmallComponents[image] replaces small connected components in a binary image image with background pixels.\nDeleteSmallComponents[m] replaces positive integers in a label matrix m with 0 if their tally is small.\nDeleteSmallComponents[…, n] replaces components consisting of n or fewer elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteSmallComponents)))
(def DeleteStopwords "DeleteStopwords[list] deletes stopwords from a list of words.\nDeleteStopwords[\"string\"] deletes stopwords from a string.\nDeleteStopwords[{string1, string2, …}] deletes stopwords from a list of strings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeleteStopwords)))
(def DelimitedSequence "DelimitedSequence[form] represents a delimited sequence of elements of the specified form in Interpreter and related functions.\nDelimitedSequence[form, sep] assumes a separator that matches sep.\nDelimitedSequence[form, {left, sep, right}] assumes left and right delimiters matching left and right, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DelimitedSequence)))
(def Delimiter "Delimiter represents a delimiter to be displayed in objects such as PopupMenu, Manipulate, and FormObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Delimiter)))
(def DelimiterAutoMatching "DelimiterAutoMatching is an option for cells and notebooks that specifies whether matching delimiters are automatically inserted when typing Wolfram Language code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DelimiterAutoMatching)))
(def DelimiterFlashTime "DelimiterFlashTime is an option for cells and notebooks that specifies how long in seconds a delimiter should flash when its matching delimiter is entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DelimiterFlashTime)))
(def Delimiters "Delimiters is an option to various functions that specifies what delimiters to use or look for." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Delimiters)))
(def DeliveryFunction "DeliveryFunction is an option that specifies how material such as documents generated by DocumentGenerator should be delivered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeliveryFunction)))
(def Dendrogram "Dendrogram[{e1, e2, …}] constructs a dendrogram from the hierarchical clustering of the elements e1, e2, ….\nDendrogram[{e1v1, e2v2, …}] represents ei with vi in the constructed dendrogram.\nDendrogram[{e1, e2, …}{v1, v2, …}] represents ei with vi in the constructed dendrogram.\nDendrogram[label1e1, label2e2, …] represents ei using labels labeli in the constructed dendrogram.\nDendrogram[data, orientation] constructs an oriented dendrogram according to orientation.\nDendrogram[tree] constructs the dendrogram corresponding to weighted tree tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dendrogram)))
(def Denominator "Denominator[expr] gives the denominator of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Denominator)))
(def DensityHistogram "DensityHistogram[{{x1, y1}, {x2, y2}, …}] plots a density histogram of the values {xi, yi}.\nDensityHistogram[{{x1, y1}, {x2, y2}, …}, bspec] plots a density histogram with bins specified by bspec.\nDensityHistogram[{{x1, y1}, {x2, y2}, …}, bspec, hspec] plots a density histogram with bin densities computed according to the specification hspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DensityHistogram)))
(def DensityPlot "DensityPlot[f, {x, xmin, xmax}, {y, ymin, ymax}] makes a density plot of f as a function of x and y. \nDensityPlot[f, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DensityPlot)))
(def DensityPlot3D "DensityPlot3D[f, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] makes a density plot of f as a function of x, y, and z.\nDensityPlot3D[f, {x, y, z}∈reg] takes the variables to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DensityPlot3D)))
(def DependentVariables "DependentVariables is an option for NDSolve and other functions that specifies the list of all objects that should be considered as dependent variables in equations that have been supplied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DependentVariables)))
(def Deploy "Deploy[expr] yields a deployed version of expr in which elements such as Slider, InputField, Locator and Button are active, but general editing and selection is disabled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Deploy)))
(def Deployed "Deployed is an option for displayed objects, cells, and notebooks that specifies whether their contents should be considered deployed, so that elements such as Slider, InputField, Locator, and Button are active, but general editing and selection is disabled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Deployed)))
(def Depth "Depth[expr] gives the maximum number of indices needed to specify any part of expr, plus 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Depth)))
(def DepthFirstScan "DepthFirstScan[g, s, {event1f1, event2f2, …}] performs a depth-first scan of the graph g starting at the vertex s and evaluates fi whenever \"eventi\" occurs.\nDepthFirstScan[g, {event1->f1, event2->f2, …}] performs a depth-first scan of the whole graph g.\nDepthFirstScan[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DepthFirstScan)))
(def Derivative "f' represents the derivative of a function f of one argument. \nDerivative[n1, n2, …][f] is the general form, representing a function obtained from f by differentiating n1 times with respect to the first argument, n2 times with respect to the second argument, and so on." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Derivative)))
(def DerivativeFilter "DerivativeFilter[data, {n1, n2, …}] computes the ni ^th derivative of data at level i.\nDerivativeFilter[data, {n1, n2, …}, σ] computes the derivative at a Gaussian scale of standard deviation σ.\nDerivativeFilter[data, {der1, der2, …}, …] computes several derivatives der1, der2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DerivativeFilter)))
(def DerivativePDETerm "DerivativePDETerm[vars, γ] represents a load derivative term ∇{x1, …, xn}·(γ) with load derivative coefficient γ and model variables vars.\nDerivativePDETerm[vars, γ, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DerivativePDETerm)))
(def DerivedKey "DerivedKey[assoc] represents a derived key generated by GenerateDerivedKey." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DerivedKey)))
(def DescriptorStateSpace "DescriptorStateSpace is an option to StateSpaceModel and StateSpaceTransform that specifies whether to use descriptor or standard representation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DescriptorStateSpace)))
(def DesignMatrix "DesignMatrix[{{x11, x12, …, y1}, {x21, x22, …, y2}, …}, {f1, f2, …}, {x1, x2, …}] constructs the design matrix for the linear model β0+β1 f1+β2 f2+…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DesignMatrix)))
(def Det "Det[m] gives the determinant of the square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Det)))
(def DeviceClose "DeviceClose[device] closes the connection to a device and frees related resources." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceClose)))
(def DeviceConfigure "DeviceConfigure[device, config] configures the specified device according to config." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceConfigure)))
(def DeviceExecute "DeviceExecute[device, \"command\"] executes the specified command on a device.\nDeviceExecute[device, \"command\", params] executes the command with the parameters params." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceExecute)))
(def DeviceExecuteAsynchronous "DeviceExecuteAsynchronous[device, \"command\", fun] initiates asynchronous execution of the specified command on a device, calling the handler function fun when an event occurs.\nDeviceExecuteAsynchronous[device, \"command\", params, fun] executes the command with the parameters params." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceExecuteAsynchronous)))
(def DeviceObject "DeviceObject[…] represents a device that can be accessed in a Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceObject)))
(def DeviceOpen "DeviceOpen[\"devclass\"] opens a connection to the first available device in the class specified by \"devclass\".\nDeviceOpen[\"devclass\", spec] opens a connection to the particular device defined by spec.\nDeviceOpen[device] opens a connection to an existing device specified by a DeviceObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceOpen)))
(def DeviceRead "DeviceRead[devobj] reads a single default item from the open device corresponding to the specified DeviceObject.\nDeviceRead[\"devclass\"] reads from the default device in the class \"devclass\".\nDeviceRead[device, param] reads the parameter param from the specified device.\nDeviceRead[device, {param1, param2, …}] reads the list of parameters parami from the specified device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceRead)))
(def DeviceReadBuffer "DeviceReadBuffer[device] reads the complete contents of the buffer on a device.\nDeviceReadBuffer[device, n] reads n elements from the buffer.\nDeviceReadBuffer[device, crit] reads elements from the buffer until the device-specific criterion crit is met.\nDeviceReadBuffer[device, crit, param] reads elements associated with the parameter param. \nDeviceReadBuffer[device, crit, {param1, param2, …}] reads elements associated with the parami." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceReadBuffer)))
(def DeviceReadLatest "DeviceReadLatest[device] returns the most recently collected default item from a device.\nDeviceReadLatest[device, n] returns a list of the n most recently collected items.\nDeviceReadLatest[device, n, param] returns the n most recently collected values of param.\nDeviceReadLatest[device, n, {param1, param2, …}] returns a list of the most recently collected values of the parami." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceReadLatest)))
(def DeviceReadList "DeviceReadList[device, n] reads from the specified device n times, returning a list of the results.\nDeviceReadList[device, n, param] reads the parameter param.\nDeviceReadList[device, n, {param1, param2, …}] reads the list of parameters parami." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceReadList)))
(def DeviceReadTimeSeries "DeviceReadTimeSeries[device, {t, dt}] repeatedly reads default items from the specified device at interval dt for a total time t, returning a time series of the resulting values.\nDeviceReadTimeSeries[device, {t, dt}, param] repeatedly reads the parameter param and returns a time series of its values.\nDeviceReadTimeSeries[device, {t, dt}, {param1, param2, …}] repeatedly reads the parami and returns a time series of their values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceReadTimeSeries)))
(def DeviceStreams "DeviceStreams[device] gives a list of all open streams associated with a device.\nDeviceStreams[device, patt] gives a list of streams whose names match the string pattern patt.\nDeviceStreams[device, {patt1, patt2, …}] gives a list of streams whose names match any of the patti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceStreams)))
(def DeviceWrite "DeviceWrite[device, val] writes the value val to the specified device.\nDeviceWrite[device, {val1, val2, …}] writes the sequence of values vali to the specified device.\nDeviceWrite[device, paramval] writes val as the value of the parameter param.\nDeviceWrite[device, {param1val1, param2val2, …}] writes values of several parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceWrite)))
(def DeviceWriteBuffer "DeviceWriteBuffer[device, vals] fills the buffer on a device with the values vals.\nDeviceWriteBuffer[device, paramvals] fills the buffer associated with the parameter param with the values vals.\nDeviceWriteBuffer[device, {param1vals1, param2vals2, …}] fills the buffers associated with the parami with the corresponding values vals i ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DeviceWriteBuffer)))
(def Devices "Devices[] gives a list of registered devices on a particular system.\nDevices[form] gives a list of devices in classes whose names match the string pattern form.\nDevices[{form1, form2, …}] gives a list of devices in classes whose names match any of the formi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Devices)))
(def Diagonal "Diagonal[m] gives the list of elements on the leading diagonal of the matrix m.\nDiagonal[m, k] gives the elements on the k ^th diagonal of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Diagonal)))
(def DiagonalMatrix "DiagonalMatrix[list] gives a matrix with the elements of list on the leading diagonal, and zero elsewhere. \nDiagonalMatrix[list, k] gives a matrix with the elements of list on the k ^th diagonal.\nDiagonalMatrix[list, k, n] pads with zeros to create an n×n matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiagonalMatrix)))
(def DiagonalMatrixQ "DiagonalMatrixQ[m] gives True if m is diagonal, and False otherwise.\nDiagonalMatrixQ[m, k] gives True if m has nonzero elements only on the k ^th diagonal, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiagonalMatrixQ)))
(def DiagonalizableMatrixQ "DiagonalizableMatrixQ[m] gives True if m is diagonalizable, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiagonalizableMatrixQ)))
(def Dialog "Dialog[] initiates a dialog. \nDialog[expr] initiates a dialog with expr as the current value of %." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dialog)))
(def DialogInput "DialogInput[expr] interactively puts up expr as a dialog notebook, waits until a DialogReturn[e] is evaluated from within it, and then returns the result e. \nDialogInput[{x=x0, y=y0, …}, expr] sets up local variables x, y, … in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DialogInput)))
(def DialogNotebook "DialogNotebook[{cell1, cell2, …}] represents a dialog notebook that can be manipulated by the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DialogNotebook)))
(def DialogProlog "DialogProlog is an option for Dialog that can give an expression to evaluate before the dialog starts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DialogProlog)))
(def DialogReturn "DialogReturn[expr] closes a dialog window, returning the expression expr from the dialog.\nDialogReturn[] closes a dialog window, returning Null." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DialogReturn)))
(def DialogSymbols "DialogSymbols is an option for Dialog that gives a list of symbols whose values should be localized in the dialog." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DialogSymbols)))
(def Diamond "Diamond[x, y, …] displays as x⋄y⋄…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Diamond)))
(def DiamondMatrix "DiamondMatrix[r] gives a matrix whose elements are 1 in a diamond-shaped region that extends r index positions to each side, and are 0 otherwise.\nDiamondMatrix[r, w] gives a w×w matrix containing a diamond-shaped region of 1s.\nDiamondMatrix[{r1, r2, …}, …] yields an array whose elements are 1 in a diamond-shaped region that extends ri index positions in the i ^th direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiamondMatrix)))
(def DiceDissimilarity "DiceDissimilarity[x, y] gives the Dice dissimilarity between Boolean vectors x and y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiceDissimilarity)))
(def DictionaryLookup "DictionaryLookup[patt] finds all words in an English dictionary that match the string pattern patt.\nDictionaryLookup[patt, n] gives only the first n words found.\nDictionaryLookup[{\"lang\", patt}] finds words in the language specified by lang." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DictionaryLookup)))
(def DictionaryWordQ "DictionaryWordQ[\"word\"] tests whether \"word\" is a recognized dictionary word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DictionaryWordQ)))
(def Diff "Diff[first, second] returns a representation of the diffs between first and second.\nDiff[first, second, format] represents the diffs in the indicated format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Diff)))
(def Diff3 "Diff3[ancestor, first, second] returns a representation of the three-way diff between ancestor and two independently changed versions of ancestor.\nDiff3[ancestor, first, second, format] represents the diffs in the indicated format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Diff3)))
(def DiffAlignmentMethod "DiffAlignmentMethod is an option to Diff and related functions that specifies how to align cells when comparing notebooks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffAlignmentMethod)))
(def DiffApply "DiffApply[diffobj, expr] returns the result of applying the given DiffObject to the expression expr.\nDiffApply[diffobj, expr, File[\"file\"]] writes the result of changing expr to file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffApply)))
(def DiffGranularity "DiffGranularity is an option to Diff and related functions that indicates with what granularity to compare the given expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffGranularity)))
(def DiffIgnore "DiffIgnore is an option to Diff and related functions that specifies what elements to ignore when computing diffs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffIgnore)))
(def DiffIncludeMatches "DiffIncludeMatches is an option for Diff and related functions that specifies whether to include matching data in the resulting DiffObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffIncludeMatches)))
(def DiffInputFunction "DiffInputFunction is an option for Diff and related functions that specifies how the input expressions should be preprocessed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffInputFunction)))
(def DiffObject "DiffObject[v, type, data] represents a sequence of diffs for transforming objects of the indicated type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffObject)))
(def DiffStyle "DiffStyle is an option for Diff and related functions that specifies styles to use when viewing changes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffStyle)))
(def DifferenceDelta "DifferenceDelta[f, i] gives the discrete difference if=f(i+1)-f (i).\nDifferenceDelta[f, {i, n}] gives the multiple difference _i^nf.\nDifferenceDelta[f, {i, n, h}] gives the multiple difference with step h.\nDifferenceDelta[f, i, j, …] computes the partial difference with respect to i, j, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferenceDelta)))
(def DifferenceQuotient "DifferenceQuotient[f, {x, h}]  gives the difference quotient (f(x+h)-f(x))/h.\nDifferenceQuotient[f, {x, n, h}] gives a multiple difference quotient with step h.\nDifferenceQuotient[f, {x1, n1, h1}, {x2, n2, h2}, …] computes the partial difference quotient with respect to x1, x2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferenceQuotient)))
(def DifferenceRoot "DifferenceRoot[lde][k] gives the holonomic sequence h(k), specified by the linear difference equation lde[h, k].\nDifferenceRoot[lde] represents a pure holonomic sequence h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferenceRoot)))
(def DifferenceRootReduce "DifferenceRootReduce[expr, n] attempts to reduce expr to a single DifferenceRoot object as a function of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferenceRootReduce)))
(def Differences "Differences[list] gives the successive differences of elements in list. \nDifferences[list, n] gives the n ^th differences of list. \nDifferences[list, n, s] gives the differences of elements step s apart.\nDifferences[list, {n1, n2, …}] gives the successive nk ^th differences at level k in a nested list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Differences)))
(def DifferentialD "DifferentialD[x] displays as x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferentialD)))
(def DifferentialRoot "DifferentialRoot[lde][x] gives the holonomic function h(x), specified by the linear differential equation lde[h, x].\nDifferentialRoot[lde] represents a pure holonomic function h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferentialRoot)))
(def DifferentialRootReduce "DifferentialRootReduce[expr, x] attempts to reduce expr to a single DifferentialRoot object as a function of x.\nDifferentialRootReduce[expr, {x, x0}] takes the initial conditions to be specified at x=x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferentialRootReduce)))
(def DifferentiatorFilter "DifferentiatorFilter[data, ωc] applies a differentiator filter with a cutoff frequency ωc to an array of data.\nDifferentiatorFilter[data, ωc, n] uses a filter kernel of length n.\nDifferentiatorFilter[data, ωc, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DifferentiatorFilter)))
(def DiffusionPDETerm "DiffusionPDETerm[vars] represents a diffusion term ∇{x1, …, xn}·(-∇{x1, …, xn}u) with model variables vars.\nDiffusionPDETerm[vars, c] represents a diffusion term ∇{x1, …, xn}·(-c∇{x1, …, xn}u) with diffusion coefficient c.\nDiffusionPDETerm[vars, c, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiffusionPDETerm)))
(def DiggleGatesPointProcess "DiggleGatesPointProcess[μ, ρ, d] represents a Diggle–Gates point process with constant intensity μ and interaction radius ρ in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiggleGatesPointProcess)))
(def DiggleGrattonPointProcess "DiggleGrattonPointProcess[μ, κ, δ, ρ, d] represents a Diggle–Gratton point process with constant intensity μ, interaction parameter κ, hard-core interaction radius δ and interaction radius ρ in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiggleGrattonPointProcess)))
(def DigitBlock "DigitBlock is an option for NumberForm and related functions that specifies the maximum length of blocks of digits between breaks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitBlock)))
(def DigitCharacter "DigitCharacter represents a digit character 0–9 in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitCharacter)))
(def DigitCount "DigitCount[n, b, d] gives the number of d digits in the base-b representation of n. \nDigitCount[n, b, d, len] gives the number of d digits in the base-b representation of the last len digits of n. \nDigitCount[n, b] gives a list of the numbers of 1, 2, …, b-1, 0 digits in the base-b representation of n. \nDigitCount[n] gives a list of the numbers of 1, 2, …, 9, 0 digits in the base-10 representation of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitCount)))
(def DigitQ "DigitQ[string] yields True if all the characters in the string are digits in the range 0 through 9, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitQ)))
(def DigitSum "DigitSum[n] gives the sum of the decimal digits in the integer n.\nDigitSum[n, b] gives the sum of the base b digits in the integer n.\nDigitSum[n, b, k] gives the sum of the first k base b digits in the integer n.\nDigitSum[n, b, -k] gives the sum of the last k base b digits in the integer n.\nDigitSum[n, MixedRadix[blist]] uses the mixed radix with list of bases blist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitSum)))
(def DigitalSignature "DigitalSignature[assoc] represents a digital signature object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DigitalSignature)))
(def DihedralAngle "DihedralAngle[{p1, p2}, {v, w}] gives the angle between two half-planes bounded by the line through p1 and p2 and extended in the direction v and w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DihedralAngle)))
(def DihedralGroup "DihedralGroup[n] represents the dihedral group of order 2n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DihedralGroup)))
(def Dilation "Dilation[image, ker] gives the morphological dilation of image with respect to the structuring element ker.\nDilation[image, r] gives the dilation with respect to a range-r square.\nDilation[data, …] applies dilation to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dilation)))
(def DimensionReduce "DimensionReduce[{example1, example2, …}] projects the examples examplei to a lower-dimensional approximating manifold.\nDimensionReduce[examples, n] projects onto an approximating manifold in n-dimensional space." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DimensionReduce)))
(def DimensionReducerFunction "DimensionReducerFunction[…] represents a function generated by DimensionReduction that projects data onto a lower-dimensional approximating manifold." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DimensionReducerFunction)))
(def DimensionReduction "DimensionReduction[{example1, example2, …}] generates a DimensionReducerFunction[…] that projects from the space defined by the examplei to a lower-dimensional approximating manifold.\nDimensionReduction[examples, n] generates a DimensionReducerFunction[…] for an n-dimensional approximating manifold. \nDimensionReduction[examples, n, props] generates the specified properties of the dimensionality reduction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DimensionReduction)))
(def DimensionalCombinations "DimensionalCombinations[{pq1, pq2, …}] returns the possible combinations of the list of physical quantities pqi that are dimensionless.\nDimensionalCombinations[{pq1, pq2, …}, dim] returns the possible combinations of the list of physical quantities pqi that match the dimensions of physical quantity dim." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DimensionalCombinations)))
(def DimensionalMeshComponents "DimensionalMeshComponents[mr] gives a list {r0, r1, …} of regions such that rd has dimension d for a mesh region mr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DimensionalMeshComponents)))
(def Dimensions "Dimensions[expr] gives a list of the dimensions of expr. \nDimensions[expr, n] gives a list of the dimensions of expr down to level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dimensions)))
(def DiracComb "DiracComb[x] represents the Dirac comb function (x) giving a delta function at every integer point. \nDiracComb[x1, x2, …] represents the multidimensional Dirac comb function  (x1, x2, …)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiracComb)))
(def DiracDelta "DiracDelta[x] represents the Dirac delta function δ (x). \nDiracDelta[x1, x2, …] represents the multidimensional Dirac delta function δ (x1, x2, …)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiracDelta)))
(def DirectedEdge "DirectedEdge[u, v] or uv represents a directed edge from u to v.\nDirectedEdge[u, v, t] or uOverscript[, t]v represents a directed edge from u to v with tag t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectedEdge)))
(def DirectedEdges "DirectedEdges is an option for Graph, GraphPlot, and related functions that specifies whether edges should be taken to be directed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectedEdges)))
(def DirectedGraph "DirectedGraph[g] gives a directed graph from the undirected graph g.\nDirectedGraph[g, conv] gives a directed graph using the conversion conv.\nDirectedGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectedGraph)))
(def DirectedGraphQ "DirectedGraphQ[g] yields True if the graph g is a directed graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectedGraphQ)))
(def DirectedInfinity "DirectedInfinity[] represents an infinite numerical quantity whose direction in the complex plane is unknown. \nDirectedInfinity[z] represents an infinite numerical quantity that is a positive real multiple of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectedInfinity)))
(def Direction "Direction is an option for Limit and related functions that specifies the direction in which the limit is taken." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Direction)))
(def DirectionalLight "DirectionalLight[col, pt] is a three–dimensional graphics directive that specifies the directional light of color col from the point pt to the center of the bounding box to use in coloring 3D surfaces.\nDirectionalLight[col, {pt1, pt2}] uses a directional light along the vector from pt1 to pt2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectionalLight)))
(def Directive "Directive[g1, g2, …] represents a single graphics directive composed of the directives g1, g2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Directive)))
(def Directory "Directory[] gives the current working directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Directory)))
(def DirectoryName "DirectoryName[\"name\"] extracts the directory name from the specification for a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectoryName)))
(def DirectoryQ "DirectoryQ[\"name\"] gives True if the directory with the specified name exists, and gives False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectoryQ)))
(def DirectoryStack "DirectoryStack[] gives the directory stack that represents the sequence of current directories used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirectoryStack)))
(def DirichletBeta "DirichletBeta[s] gives the Dirichlet beta function β (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletBeta)))
(def DirichletCharacter "DirichletCharacter[k, j, n] gives the Dirichlet character χ k, j(n) with modulus k and index j." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletCharacter)))
(def DirichletCondition "DirichletCondition[beqn, pred] represents a Dirichlet boundary condition given by equation beqn, satisfied on the part of the boundary of the region given to NDSolve and related functions where pred is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletCondition)))
(def DirichletConvolve "DirichletConvolve[f, g, n, m] gives the Dirichlet convolution of the expressions f and g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletConvolve)))
(def DirichletDistribution "DirichletDistribution[{α1, …, α k+1}] represents a Dirichlet distribution of dimension k with shape parameters αi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletDistribution)))
(def DirichletEta "DirichletEta[s] gives the Dirichlet eta function η (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletEta)))
(def DirichletL "DirichletL[k, j, s] gives the Dirichlet L-function L(χ, s) for the Dirichlet character χ(n) with modulus k and index j." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletL)))
(def DirichletLambda "DirichletLambda[s] gives the Dirichlet lambda function λ (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletLambda)))
(def DirichletTransform "DirichletTransform[expr, n, s] gives the Dirichlet transform of expr with respect to n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletTransform)))
(def DirichletWindow "DirichletWindow[x] represents a Dirichlet window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DirichletWindow)))
(def DisableFormatting "DisableFormatting[expr] is a form that disables the formatting of expr when it appears inside held expressions, but gives expr as soon as evaluation occurs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisableFormatting)))
(def Discard "Discard[data, crit] removes all the elements ei of data for which crit[ei] is True.\nDiscard[data, critprop] returns the property prop of the remaining elements.\nDiscard[data, crit, n] removes the first n elements for which crit[ei] is True.\nDiscard[crit] represents an operator form of Discard that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Discard)))
(def DiscreteAsymptotic "DiscreteAsymptotic[expr, n∞] gives an asymptotic approximation for expr as n tends to infinity over the integers.\nDiscreteAsymptotic[expr, {n, ∞, m}] gives an asymptotic series approximation for expr to order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteAsymptotic)))
(def DiscreteChirpZTransform "DiscreteChirpZTransform[list] gives the chirp Z transform of list.\nDiscreteChirpZTransform[list, n] returns a length n chirp Z transform.\nDiscreteChirpZTransform[list, n, w] uses a spiral path on the complex z plane defined by w.\nDiscreteChirpZTransform[list, n, w, a] uses a as the complex starting point.\nDiscreteChirpZTransform[list, {n1, n2, …}, {w1, w2, …}, {a1, a2, …}] gives the multidimensional chirp Z transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteChirpZTransform)))
(def DiscreteConvolve "DiscreteConvolve[f, g, n, m] gives the convolution with respect to n of the expressions f and g. \nDiscreteConvolve[f, g, {n1, n2, …}, {m1, m2, …}] gives the multidimensional convolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteConvolve)))
(def DiscreteDelta "DiscreteDelta[n1, n2, …] gives the discrete delta function δ(n1, n2, …), equal to 1 if all the ni are zero, and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteDelta)))
(def DiscreteHadamardTransform "DiscreteHadamardTransform[list] gives the discrete Hadamard transform of list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteHadamardTransform)))
(def DiscreteIndicator "DiscreteIndicator[x, x1, {u1, u2, …}] yields the discrete indicator function, equal to 1 if x=x1 and, otherwise, to 0 if x=ui for some i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteIndicator)))
(def DiscreteInputOutputModel "DiscreteInputOutputModel[{g0, g1, …, g n-1}, u] represents a discrete-time model with input u and output y=gi(u) at sampling instant i.\nDiscreteInputOutputModel[{g0, g1, …, g n-1}, u, y] can be used to specify outputs gi(u, y) that also depend on the output variables y.\nDiscreteInputOutputModel[…, {{u1, {…, u10}}, …}, {{y1, {…, y10}}, …}] specifies input and output values for each signal for instants k<=0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteInputOutputModel)))
(def DiscreteLQEstimatorGains "DiscreteLQEstimatorGains[ssm, {w, v}, τ] gives the optimal discrete-time estimator gain matrix with sampling period τ for the continuous-time StateSpaceModel ssm, with process and measurement noise covariance matrices w and v.\nDiscreteLQEstimatorGains[{ssm, sensors}, {w, v}, τ] specifies sensors as the noisy measurements of ssm.\nDiscreteLQEstimatorGains[{ssm, sensors, dinputs}, {w, v}, τ] specifies dinputs as the deterministic inputs of ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteLQEstimatorGains)))
(def DiscreteLQRegulatorGains "DiscreteLQRegulatorGains[sspec, wts, τ] gives the discrete-time state feedback gains with sampling period τ for the continuous-time system specification sspec that minimizes a cost function with weights wts.\nDiscreteLQRegulatorGains[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteLQRegulatorGains)))
(def DiscreteLimit "DiscreteLimit[f, k∞] gives the limit k∞f(k) for the sequence f as k tends to infinity over the integers.\nDiscreteLimit[f, {k1k_1^*, …, knk_n^*}] gives the nested limit _k1k_1^*⋯ _knk_n^*f(k1, …, kn) over the integers.\nDiscreteLimit[f, {k1, …, kn}{k_1^*, …, k_n^*}] gives the multivariate limit _{k1, …, kn}{k_1^*, …, k_n^*}f(k1, …, kn) over the integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteLimit)))
(def DiscreteLyapunovSolve "DiscreteLyapunovSolve[a, c] finds the numeric solution x of the discrete matrix equation a.x.a-xc.\nDiscreteLyapunovSolve[a, b, c] solves a.x.b-xc.\nDiscreteLyapunovSolve[{a, d}, c] solves a.x.a-d.x.dc.\nDiscreteLyapunovSolve[{a, d}, {b, e}, c] solves a.x.b-d.x.ec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteLyapunovSolve)))
(def DiscreteMarkovProcess "DiscreteMarkovProcess[i0, m] represents a discrete-time, finite-state Markov process with transition matrix m and initial state i0.\nDiscreteMarkovProcess[p0, m] represents a Markov process with initial state probability vector p0.\nDiscreteMarkovProcess[…, g] represents a Markov process with transition matrix from the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteMarkovProcess)))
(def DiscreteMaxLimit "DiscreteMaxLimit[f, k∞] gives the max limit k∞f(k) of the sequence f as k tends to ∞ over the integers.\nDiscreteMaxLimit[f, {k1k_1^*, …, knk_n^*}] gives the nested max limit _k1k_1^*⋯ _knk_n^*f(k1, …, kn) over the integers.\nDiscreteMaxLimit[f, {k1, …, kn}{k_1^*, …, k_n^*}] gives the multivariate max limit _{k1, …, kn}{k_1^*, …, k_n^*}f(k1, …, kn) over the integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteMaxLimit)))
(def DiscreteMinLimit "DiscreteMinLimit[f, k∞] gives the min limit k∞f(k) of the sequence f as k tends to ∞ over the integers.\nDiscreteMinLimit[f, {k1k_1^*, …, knk_n^*}] gives the nested min limit _k1k_1^*⋯ _knk_n^*f(k1, …, kn) over the integers.\nDiscreteMinLimit[f, {k1, …, kn}{k_1^*, …, k_n^*}] gives the multivariate min limit _{k1, …, kn}{k_1^*, …, k_n^*}f(k1, …, kn) over the integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteMinLimit)))
(def DiscretePlot "DiscretePlot[f, {n, nmax}] generates a plot of f as a function of n when n=1, …, nmax.\nDiscretePlot[f, {n, nmin, nmax}] generates a plot when n runs from nmin to nmax.\nDiscretePlot[f, {n, nmin, nmax, dn}] uses steps dn. \nDiscretePlot[f, {n, {n1, …, nm}}] uses the successive values n1, …, nm.\nDiscretePlot[{f1, f2, …}, …] plots the values of all the fi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscretePlot)))
(def DiscretePlot3D "DiscretePlot3D[f, {i, imin, imax}, {j, jmin, jmax}] generates a plot of f when i runs from imin to imax and j runs from jmin to jmax.\nDiscretePlot3D[f, {i, imin, imax, di}, {j, jmin, jmax, dj}] uses steps di and dj.\nDiscretePlot3D[f, {i, {i1, …, im}}, {j, {j1, …, jn}}] uses successive i values i1, …, jm and j values j1, …, jn. \nDiscretePlot3D[{f1, f2, …}, …, …] plots the values of all the fk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscretePlot3D)))
(def DiscreteRatio "DiscreteRatio[f, i] gives the discrete ratio ((f(i+1))/(f(i))).\nDiscreteRatio[f, {i, n}] gives the multiple discrete ratio.\nDiscreteRatio[f, {i, n, h}] gives the multiple discrete ratio with step h. \nDiscreteRatio[f, i, j, …] computes the partial difference ratio with respect to i, j, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteRatio)))
(def DiscreteRiccatiSolve "DiscreteRiccatiSolve[{a, b}, {q, r}] gives the matrix x that is the stabilizing solution of the discrete algebraic Riccati equation a^†.x.a-x-a^†.x.b.(r+b^†.x.b)^-1.b^†.x.a+q0.\nDiscreteRiccatiSolve[{a, b}, {q, r, p}] solves a^†.x.a-x-(a^†.x.b+p).(r+b^†.x.b)^-1.(b^†.x.a+p^†)+q0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteRiccatiSolve)))
(def DiscreteShift "DiscreteShift[f, i] gives the discrete shift i(f(i))f (i+1). \nDiscreteShift[f, {i, n}] gives the multiple shift _i^n f.\nDiscreteShift[f, {i, n, h}] gives the multiple shift of step h.\nDiscreteShift[f, i, j, …] computes partial shifts with respect to i, j, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteShift)))
(def DiscreteTimeModelQ "DiscreteTimeModelQ[lsys] gives True if lsys is a discrete-time systems model, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteTimeModelQ)))
(def DiscreteUniformDistribution "DiscreteUniformDistribution[{imin, imax}] represents a discrete uniform distribution over the integers from imin to imax.\nDiscreteUniformDistribution[{{imin, imax}, {jmin, jmax}, …}] represents a multivariate discrete uniform distribution over integers within the box {{imin, imax}, {jmin, jmax}, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteUniformDistribution)))
(def DiscreteVariables "DiscreteVariables is an option for NDSolve and other functions that specifies variables that only change at discrete times in a temporal integration." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteVariables)))
(def DiscreteWaveletData "DiscreteWaveletData[{wind1coef1, …}, wave, wtrans] yields a discrete wavelet data object with wavelet coefficients coefi corresponding to wavelet index windi, wavelet wave, and wavelet transform wtrans.\nDiscreteWaveletData[{wind1coef1, …}, wave, wtrans, {d1, …}] yields a discrete wavelet data object assuming data dimensions {d1, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteWaveletData)))
(def DiscreteWaveletPacketTransform "DiscreteWaveletPacketTransform[data] gives the discrete wavelet packet transform (DWPT) of an array of data.\nDiscreteWaveletPacketTransform[data, wave] gives the discrete wavelet packet transform using the wavelet wave.\nDiscreteWaveletPacketTransform[data, wave, r] gives the discrete wavelet packet transform using r levels of refinement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteWaveletPacketTransform)))
(def DiscreteWaveletTransform "DiscreteWaveletTransform[data] gives the discrete wavelet transform (DWT) of an array of data.\nDiscreteWaveletTransform[data, wave] gives the discrete wavelet transform using the wavelet wave.\nDiscreteWaveletTransform[data, wave, r] gives the discrete wavelet transform using r levels of refinement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscreteWaveletTransform)))
(def DiscretizeGraphics "DiscretizeGraphics[g] discretizes a 2D or 3D graphic g into a MeshRegion.\nDiscretizeGraphics[g, patt] discretizes only the elements in g that match the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscretizeGraphics)))
(def DiscretizeRegion "DiscretizeRegion[reg] discretizes a region reg into a MeshRegion.\nDiscretizeRegion[reg, {{xmin, xmax}, …}] restricts to the bounds [xmin, xmax]×⋯." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiscretizeRegion)))
(def Discriminant "Discriminant[poly, var] computes the discriminant of the polynomial poly with respect to the variable var.\nDiscriminant[poly, var, Modulusp] computes the discriminant modulo p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Discriminant)))
(def DisjointQ "DisjointQ[list1, list2] yields True if list1 and list2 do not share any common elements, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisjointQ)))
(def Disjunction "Disjunction[expr, {a1, a2, …}] gives the disjunction of expr over all choices of the Boolean variables ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Disjunction)))
(def Disk "Disk[{x, y}, r] represents a disk of radius r centered at {x, y}.\nDisk[{x, y}] gives a disk of radius 1. \nDisk[{x, y}, {rx, ry}] gives an axis-aligned elliptical disk with semiaxes lengths rx and ry.\nDisk[{x, y}, …, {θ1, θ2}] gives a sector of a disk from angle θ1 to θ2.\nDisk[{{x1, y1}, {x2, y2}, …}, …] gives multiple identical disks centered at the given coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Disk)))
(def DiskMatrix "DiskMatrix[r] gives a matrix whose elements are 1 in a disk-shaped region of radius r, and are otherwise 0.\nDiskMatrix[r, w] gives a w×w matrix containing a disk of 1s with radius r.\nDiskMatrix[{r1, r2, …}, …] yields an array whose elements are 1 in an ellipsoidal region with semiaxis ri in the i ^th index direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiskMatrix)))
(def DiskSegment "DiskSegment[{x, y}, r, {θ1, θ2}] represents the disk segment from angle θ1 to θ2 in a disk centered at {x, y} of radius r.\nDiskSegment[{x, y}, {rx, ry}, {θ1, θ2}] represents the ellipse segment from angle θ1 to θ2 in an axis-aligned ellipse with semiaxes lengths rx and ry." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DiskSegment)))
(def Dispatch "Dispatch[{lhs1rhs1, lhs2rhs2, …}] generates an optimized dispatch table representation of a list of rules. The object produced by Dispatch can be used to give the rules in expr/.rules." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dispatch)))
(def DispersionEstimatorFunction "DispersionEstimatorFunction is an option for generalized linear model fitting functions that specifies the estimator for the dispersion parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DispersionEstimatorFunction)))
(def DisplayAllSteps "DisplayAllSteps is an option to Animate and related functions that specifies whether all frames should be displayed in an animation, even if to do so would slow the animation down." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisplayAllSteps)))
(def DisplayEndPacket "DisplayEndPacket[] is a WSTP packet that indicates the end of a series of expressions relating to a postscript graphic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisplayEndPacket)))
(def DisplayForm "DisplayForm[expr] prints with low-level boxes inside expr shown in explicit two-dimensional or other form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisplayForm)))
(def DisplayFunction "DisplayFunction is an option for graphics and sound functions that specifies a function to apply to graphics and sound objects before returning them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisplayFunction)))
(def DisplayPacket "DisplayPacket[] is a WSTP packet that indicates the beginning of a series of expressions related to a PostScript graphic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DisplayPacket)))
(def DistanceFunction "DistanceFunction is an option for functions such as Nearest that specifies the distance value to assume between any two specified points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistanceFunction)))
(def DistanceMatrix "DistanceMatrix[{u1, u2, …}] gives the matrix of distances between each pair of elements ui, uj. \nDistanceMatrix[{u1, u2, …}, {v1, v2, …}] gives the matrix of distances between each pair of elements ui, vj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistanceMatrix)))
(def DistanceTransform "DistanceTransform[image] gives the distance transform of image, in which the value of each pixel is replaced by its distance to the nearest background pixel.\nDistanceTransform[image, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistanceTransform)))
(def Distribute "Distribute[f[x1, x2, …]] distributes f over Plus appearing in any of the xi. \nDistribute[expr, g] distributes over g. \nDistribute[expr, g, f] performs the distribution only if the head of expr is f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Distribute)))
(def DistributeDefinitions "DistributeDefinitions[s1, s2, …] distributes all definitions for the symbols si to all parallel kernels.\nDistributeDefinitions[\"context`\"] distributes definitions for all symbols in the specified context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributeDefinitions)))
(def Distributed "Distributed[x, dist] or xdist asserts that the random variable x is distributed according to the probability distribution dist.\nDistributed[{x1, x2, …}, dist] or {x1, x2, …}dist asserts that the random vector {x1, x2, …} is distributed according to the multivariate probability distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Distributed)))
(def DistributedContexts "DistributedContexts is an option for various parallel computing functions that specifies which definitions for symbols appearing in an expression should be distributed to all parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributedContexts)))
(def DistributionChart "DistributionChart[{data1, data2, …}] makes a distribution chart with a distribution symbol for each datai.\nDistributionChart[{…, wi[datai, …], …, wj[dataj, …], …}] makes a distribution chart with symbol features defined by the symbolic wrappers wk.\nDistributionChart[{{data1, data2, …}, …}] makes a distribution chart from multiple groups of datasets {data1, data2, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributionChart)))
(def DistributionFitTest "DistributionFitTest[data] tests whether data is normally distributed. \nDistributionFitTest[data, dist] tests whether data is distributed according to dist. \nDistributionFitTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributionFitTest)))
(def DistributionParameterAssumptions "DistributionParameterAssumptions[dist] gives a logical expression for assumptions on parameters in the symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributionParameterAssumptions)))
(def DistributionParameterQ "DistributionParameterQ[dist] yields True if dist is a valid distribution, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DistributionParameterQ)))
(def Dithering "Dithering is an option for ColorQuantize that specifies whether or not to apply dithering while quantizing the pixel values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dithering)))
(def Div "Div[{f1, …, fn}, {x1, …, xn}] gives the divergence ∂f1/∂x1+…+∂fn/∂xn.\nDiv[{f1, …, fn}, {x1, …, xn}, chart] gives the divergence in the coordinates chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Div)))
(def Divide "x/y or Divide[x, y] is equivalent to x y^-1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Divide)))
(def DivideBy "x/=c divides x by c and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DivideBy)))
(def DivideSides "DivideSides[rel, x] divides each side of the equation or inequality rel by x.\nDivideSides[rel1, rel2] divides the corresponding sides of two equations or inequalities.\nDivideSides[rel] divides each side of rel by the right-hand side, producing a 1 right-hand side." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DivideSides)))
(def Dividers "Dividers is an option for Grid and related constructs that specifies where and how to draw divider lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dividers)))
(def Divisible "Divisible[n, m] yields True if n is divisible by m, and yields False if it is not." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Divisible)))
(def DivisorSigma "DivisorSigma[k, n] gives the divisor function σk (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DivisorSigma)))
(def DivisorSum "DivisorSum[n, form] represents the sum of form[i] for all i that divide n.\nDivisorSum[n, form, cond] includes only those divisors for which cond[i] gives True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DivisorSum)))
(def Divisors "Divisors[n] gives a list of the integers that divide n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Divisors)))
(def Do "Do[expr, n] evaluates expr n times. \nDo[expr, {i, imax}] evaluates expr with the variable i successively taking on the values 1 through imax (in steps of 1). \nDo[expr, {i, imin, imax}] starts with i=imin. \nDo[expr, {i, imin, imax, di}] uses steps di. \nDo[expr, {i, {i1, i2, …}}] uses the successive values i1, i2, ….\nDo[expr, {i, imin, imax}, {j, jmin, jmax}, …] evaluates expr looping over different values of j etc. for each i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Do)))
(def DockedCell "DockedCell is an option for Cells that indicates whether to find cells created by DockedCells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DockedCell)))
(def DockedCells "DockedCells is an option for notebooks that gives a list of cells that are to be displayed \"docked\" at the top of the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DockedCells)))
(def DocumentGenerator "DocumentGenerator[template, timespec] represents a document generator with template template to be evaluated on the schedule defined by timespec.\nDocumentGenerator[template, driver, timespec] takes parameters for filling the template from driver." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DocumentGenerator)))
(def DocumentGeneratorInformation "DocumentGeneratorInformation[cloudobj] returns the properties of the DocumentGenerator cloudobj.\nDocumentGeneratorInformation[cloudobj, property] returns the value of the property property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DocumentGeneratorInformation)))
(def DocumentGenerators "DocumentGenerators[] returns a list of CloudObject expressions that represent currently deployed document generators." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DocumentGenerators)))
(def DocumentNotebook "DocumentNotebook[{cell1, cell2, …}] represents a complete document notebook in the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DocumentNotebook)))
(def DocumentWeightingRules "DocumentWeightingRules is an option for TextSearch and related functions that allows the specification of weights for documents based on the values of fields in the search index." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DocumentWeightingRules)))
(def Dodecahedron "Dodecahedron[] represents a regular dodecahedron centered at the origin with unit edge length.\nDodecahedron[l] represents a dodecahedron with edge length l.\nDodecahedron[{θ, ϕ}, …] represents a dodecahedron rotated by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nDodecahedron[{x, y, z}, …] represents a dodecahedron centered at {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dodecahedron)))
(def DominantColors "DominantColors[image] returns dominant colors in image.\nDominantColors[image, n] returns at most n dominant colors in image.\nDominantColors[image, n, prop] returns the specified property prop for the regions that belong to the same dominant color.\nDominantColors[image, n, prop, format] returns the output in the specified format.\nDominantColors[{image1, image2, …}, …] returns dominant colors in each imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DominantColors)))
(def DominatorTreeGraph "DominatorTreeGraph[g, r] gives the dominator tree of the directed graph g from the root vertex r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DominatorTreeGraph)))
(def DominatorVertexList "DominatorVertexList[g, r] gives the list of dominators of the directed graph g from the root vertex r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DominatorVertexList)))
(def Dot "a.b.c or Dot[a, b, c] gives products of vectors, matrices, and tensors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dot)))
(def DotDashed "DotDashed is a graphics directive specifying that lines that follow should be drawn dot-dashed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DotDashed)))
(def DotEqual "DotEqual[x, y, …] displays as x≐y≐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DotEqual)))
(def DotLayer "DotLayer[] represents a net layer that takes the dot product of two or more arrays.\nDotLayer[{spec1, spec2, …}] uses given transpose specifications for the respective inputs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DotLayer)))
(def Dotted "Dotted is a graphics directive specifying that lines that follow should be drawn dotted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dotted)))
(def DoubleBracketingBar "DoubleBracketingBar[x, y, …] displays as x, y, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleBracketingBar)))
(def DoubleDownArrow "DoubleDownArrow[x, y, …] displays as x⇓y…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleDownArrow)))
(def DoubleLeftArrow "DoubleLeftArrow[x, y, …] displays as x⇐y⇐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLeftArrow)))
(def DoubleLeftRightArrow "DoubleLeftRightArrow[x, y, …] displays as x⇔y⇔…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLeftRightArrow)))
(def DoubleLeftTee "DoubleLeftTee[x, y] displays as x⫤y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLeftTee)))
(def DoubleLongLeftArrow "DoubleLongLeftArrow[x, y, …] displays as x⟸y⟸…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLongLeftArrow)))
(def DoubleLongLeftRightArrow "DoubleLongLeftRightArrow[x, y, …] displays as x⟺y⟺…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLongLeftRightArrow)))
(def DoubleLongRightArrow "DoubleLongRightArrow[x, y, …] displays as x⟹y⟹…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleLongRightArrow)))
(def DoubleRightArrow "DoubleRightArrow[x, y, …] displays as x⇒y⇒…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleRightArrow)))
(def DoubleRightTee "DoubleRightTee[x, y] displays as x⊨y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleRightTee)))
(def DoubleUpArrow "DoubleUpArrow[x, y, …] displays as x⇑y⇑…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleUpArrow)))
(def DoubleUpDownArrow "DoubleUpDownArrow[x, y, …] displays as x⇕y⇕…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleUpDownArrow)))
(def DoubleVerticalBar "DoubleVerticalBar[x, y, …] displays as x∥y∥…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DoubleVerticalBar)))
(def DownArrow "DownArrow[x, y, …] displays as x↓y↓…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownArrow)))
(def DownArrowBar "DownArrowBar[x, y, …] displays as x⤓y⤓…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownArrowBar)))
(def DownArrowUpArrow "DownArrowUpArrow[x, y, …] displays as x⇵y⇵…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownArrowUpArrow)))
(def DownLeftRightVector "DownLeftRightVector[x, y, …] displays as x⥐y⥐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownLeftRightVector)))
(def DownLeftTeeVector "DownLeftTeeVector[x, y, …] displays as x⥞y⥞…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownLeftTeeVector)))
(def DownLeftVector "DownLeftVector[x, y, …] displays as x↽y↽…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownLeftVector)))
(def DownLeftVectorBar "DownLeftVectorBar[x, y, …] displays as x⥖y⥖…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownLeftVectorBar)))
(def DownRightTeeVector "DownRightTeeVector[x, y, …] displays as x⥟y⥟…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownRightTeeVector)))
(def DownRightVector "DownRightVector[x, y, …] displays as x⇁y⇁…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownRightVector)))
(def DownRightVectorBar "DownRightVectorBar[x, y, …] displays as x⥗y⥗…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownRightVectorBar)))
(def DownTee "DownTee[x, y] displays as x⊤y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownTee)))
(def DownTeeArrow "DownTeeArrow[x, y, …] displays as x↧y↧…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownTeeArrow)))
(def DownValues "DownValues[f] gives a list of transformation rules corresponding to all downvalues (values for f[…]) defined for the symbol f. \nDownValues[\"symbol\"] gives a list of transformation rules corresponding to all downvalues defined for the symbol named \"symbol\" if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownValues)))
(def DownValuesFunction "DownValuesFunction[sym] represents a function that uses definitions attached to sym when compiling." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DownValuesFunction)))
(def Downsample "Downsample[array, n] returns a downsampled version of the array by sampling every n ^th element.\nDownsample[array, n, offset] starts sampling from the element at position offset.\nDownsample[image, …] downsamples an image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Downsample)))
(def DrazinInverse "DrazinInverse[m] finds the Drazin generalized inverse m^D of a square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DrazinInverse)))
(def Drop "Drop[list, n] gives list with its first n elements dropped. \nDrop[list, -n] gives list with its last n elements dropped. \nDrop[list, {n}] gives list with its n ^th element dropped. \nDrop[list, {m, n}] gives list with elements m through n dropped. \nDrop[list, {m, n, s}] gives list with elements m through n in steps of s dropped. \nDrop[list, seq1, seq2, …] gives a nested list in which elements specified by seqi have been dropped at level i in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Drop)))
(def DropShadowing "DropShadowing[] is a two‐dimensional directive specifying that graphics objects are to be drawn with an additional blurred offset image.\nDropShadowing[{dx, dy}] uses an absolute offset {dx, dy}.\nDropShadowing[{dx, dy}, r] applies a blur effect with radius r.\nDropShadowing[{dx, dy}, r, col] uses the specified color col for the blurred offset image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DropShadowing)))
(def DropoutLayer "DropoutLayer[] represents a net layer that sets its input elements to zero with probability 0.5 during training.\nDropoutLayer[p] sets its input elements to zero with probability p during training." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DropoutLayer)))
(def Dt "Dt[f, x] gives the total derivative d f/dx. \nDt[f] gives the total differential df. \nDt[f, {x, n}] gives the multiple derivative d^n f/dx^n. \nDt[f, x1, x2, …] gives d/dx1 d/dx2 … f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dt)))
(def DualPlanarGraph "DualPlanarGraph[g] gives the dual of the planar graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DualPlanarGraph)))
(def DualPolyhedron "DualPolyhedron[poly] gives the dual polyhedron of the polyhedron poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DualPolyhedron)))
(def DualSystemsModel "DualSystemsModel[ssm] gives the dual of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DualSystemsModel)))
(def DumpSave "DumpSave[\"file.mx\", symbol] writes definitions associated with a symbol to a file in internal Wolfram System format. \nDumpSave[\"file.mx\", \"context`\"] writes out definitions associated with all symbols in the specified context. \nDumpSave[\"file.mx\", {object1, object2, …}] writes out definitions for several symbols or contexts. \nDumpSave[\"package`\", objects] chooses the name of the output file based on the computer system used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DumpSave)))
(def DuplicateFreeQ "DuplicateFreeQ[list] gives True if list has no duplicates, and False otherwise.\nDuplicateFreeQ[list, test] applies test to pairs of elements to determine whether they should be considered duplicates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DuplicateFreeQ)))
(def Duration "Duration[expr] returns the duration of expr.\nDuration[expr, unit] returns the result in the specified unit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Duration)))
(def Dynamic "Dynamic[expr] represents an object that displays as the dynamically updated current value of expr. If the displayed form of Dynamic[expr] is interactively changed or edited, an assignment expr=val is done to give expr the new value val that corresponds to the displayed form. \nDynamic[expr, None] does not allow interactive changing or editing. \nDynamic[expr, f] continually evaluates f[val, expr] during interactive changing or editing of val. \nDynamic[expr, {f, fend}] also evaluates fend[val, expr] when interactive changing or editing is complete. \nDynamic[expr, {fstart, f, fend}] also evaluates fstart[val, expr] when interactive changing or editing begins." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Dynamic)))
(def DynamicEvaluationTimeout "DynamicEvaluationTimeout is an option for displayed objects, cells, and notebooks that specifies the timeout in seconds for any Dynamic computations they contain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicEvaluationTimeout)))
(def DynamicGeoGraphics "DynamicGeoGraphics[primitives, options] represents a dynamic, interactive, two-dimensional geographical image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicGeoGraphics)))
(def DynamicImage "DynamicImage[image] displays a dynamic version of image, supporting panning, zooming, etc.\nDynamicImage[file] displays a dynamic version of the image stored in file. \nDynamicImage[url] displays a dynamic version of the image stored in url." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicImage)))
(def DynamicModule "DynamicModule[{x, y, …}, expr] represents an object which maintains the same local instance of the symbols x, y, … in the course of all evaluations of Dynamic objects in expr. Symbols specified in a DynamicModule will by default have their values maintained even across Wolfram System sessions. \nDynamicModule[{x=x0, y=y0, …}, expr] specifies initial values for x, y, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicModule)))
(def DynamicModuleBox "DynamicModuleBox[{x, y, …}, expr] is a low-level construct that represents a DynamicModule with localized symbols x, y, ….\nDynamicModuleBox[{x=x0, y=y0, …}, expr] specifies values for x, y, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicModuleBox)))
(def DynamicModuleBoxOptions "DynamicModuleBoxOptions{opt1val1, opt2val2, …} is an option that specifies settings for DynamicModuleBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicModuleBoxOptions)))
(def DynamicModuleValues "DynamicModuleValues is an option for DynamicModule that stores downvalues of local symbols." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicModuleValues)))
(def DynamicSetting "DynamicSetting[e] represents an object which displays as e, but is interpreted as the dynamically updated current value of Setting[e] if supplied as Wolfram Language input.\nDynamicSetting[f, e] displays as e, but is interpreted as f[e] if supplied as input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicSetting)))
(def DynamicUpdating "DynamicUpdating is an option for displayed objects, cells and notebooks that specifies whether dynamic objects and option values in their contents will update." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicUpdating)))
(def DynamicWrapper "DynamicWrapper[e, expr] represents an object that displays as e, but dynamically updates the expression expr whenever that object is visible on screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote DynamicWrapper)))
(def E "E is the exponential constant  (base of natural logarithms), with numerical value ≃2.71828." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote E)))
(def EarthImpactData "EarthImpactData[entity, property] gives the value of the specified property for the earth impact crater entity.\nEarthImpactData[{entity1, entity2, …}, property] gives a list of property values for the specified earth impact crater names.\nEarthImpactData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EarthImpactData)))
(def EarthquakeData "EarthquakeData[loc] gives all earthquake properties for the location corresponding to loc.\nEarthquakeData[loc, mag] restricts earthquakes returned to the magnitude range mag. \nEarthquakeData[loc, mag, {start, end}] gives earthquake data within the magnitude range mag during the time interval start to end.\nEarthquakeData[loc, mag, {start, end}, property] gives a time series for the specific earthquake property for earthquakes within the magnitude range mag during the time interval start to end.\nEarthquakeData[entity, property] returns data for a specific earthquake." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EarthquakeData)))
(def EccentricityCentrality "EccentricityCentrality[g] gives a list of eccentricity centralities for the vertices in the graph g.\nEccentricityCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EccentricityCentrality)))
(def Echo "Echo[expr] prints expr and returns expr.\nEcho[expr, label] prints expr prepending label and returns expr.\nEcho[expr, label, f] prints f[expr] prepending label and returns expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Echo)))
(def EchoEvaluation "EchoEvaluation[expr] prints expr before evaluation, then prints the result after evaluation and returns that result.\nEchoEvaluation[expr, label] prepends label when printing expr before and after evaluation.\nEchoEvaluation[expr, label1label2] prepends label1 before evaluation and label2 after evaluation.\nEchoEvaluation[expr, labels, f] prints expr before evaluation, then evaluates expr to the result res and prints f[res].\nEchoEvaluation[expr, labels, gf] prints g[expr] before evaluating expr and then f[res] after evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EchoEvaluation)))
(def EchoFunction "EchoFunction[f][expr] prints f[expr] and returns expr.\nEchoFunction[label, f][expr] prints f[expr] prepending label and returns expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EchoFunction)))
(def EchoLabel "EchoLabel[label][expr] prints expr prepending label and returns expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EchoLabel)))
(def EchoTiming "EchoTiming[expr] evaluates expr, prints the time in seconds used and returns the result of the evaluation.\nEchoTiming[expr, label] prints the timing, prepending label." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EchoTiming)))
(def EclipseType "EclipseType is an option for SolarEclipse and LunarEclipse that specifies the type of eclipse being queried for." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EclipseType)))
(def EdgeAdd "EdgeAdd[g, e] makes a graph by adding the edge e to the graph g.\nEdgeAdd[g, {e1, e2, …}] adds a collection of edges to g.\nEdgeAdd[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeAdd)))
(def EdgeBetweennessCentrality "EdgeBetweennessCentrality[g] gives a list of betweenness centralities for the edges in the graph g.\nEdgeBetweennessCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeBetweennessCentrality)))
(def EdgeCapacity "EdgeCapacity is an option and annotation for Graph and related functions that specifies an edge capacity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeCapacity)))
(def EdgeChromaticNumber "EdgeChromaticNumber[g] gives the chromatic number for the edges of the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeChromaticNumber)))
(def EdgeConnectivity "EdgeConnectivity[g] gives the edge connectivity of the graph g.\nEdgeConnectivity[g, s, t] gives the s-t edge connectivity of the graph g.\nEdgeConnectivity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeConnectivity)))
(def EdgeContract "EdgeContract[g, e] contracts the edge e of the graph g.\nEdgeContract[g, {e1, e2, …}] contracts a collection of edges e1, e2, ….\nEdgeContract[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeContract)))
(def EdgeCost "EdgeCost is an option and annotation for Graph and related functions that specifies an edge cost." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeCost)))
(def EdgeCount "EdgeCount[g] gives a count of the number of edges in the graph g.\nEdgeCount[g, patt] gives a count of the number of edges that match the pattern patt.\nEdgeCount[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeCount)))
(def EdgeCoverQ "EdgeCoverQ[g, elist] yields True if the edge list elist is an edge cover of the graph g and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeCoverQ)))
(def EdgeCycleMatrix "EdgeCycleMatrix[g] gives the edge cycle matrix of a graph g.\nEdgeCycleMatrix[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeCycleMatrix)))
(def EdgeDelete "EdgeDelete[g, e] makes a graph by deleting the edge e from the graph g.\nEdgeDelete[g, {e1, e2, …}] deletes a collection of edges from g.\nEdgeDelete[g, patt] deletes all edges that match the pattern patt.\nEdgeDelete[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeDelete)))
(def EdgeDetect "EdgeDetect[image] finds edges in image and returns the result as a binary image.\nEdgeDetect[image, r] finds edges at the scale of the specified pixel range r.\nEdgeDetect[image, r, t] uses a threshold t for selecting image edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeDetect)))
(def EdgeForm "EdgeForm[g] is a graphics directive that specifies that edges of polygons and other filled graphics objects are to be drawn using the graphics directive or list of directives g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeForm)))
(def EdgeIndex "EdgeIndex[g, e] gives the integer index for the edge e in the graph g.\nEdgeIndex[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeIndex)))
(def EdgeLabelStyle "EdgeLabelStyle is an option and property for Graph and related functions that specifies the style to use for edge labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeLabelStyle)))
(def EdgeLabels "EdgeLabels is an option and annotation for Graph and related functions that specifies what labels and label positions should be used for edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeLabels)))
(def EdgeList "EdgeList[g] gives the list of edges for the graph g.\nEdgeList[g, patt] gives a list of edges that match the pattern patt.\nEdgeList[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeList)))
(def EdgeQ "EdgeQ[g, e] yields True if e is an edge in the graph g and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeQ)))
(def EdgeRules "EdgeRules[g] gives the list of edge rules for the graph g.\nEdgeRules[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeRules)))
(def EdgeShapeFunction "EdgeShapeFunction is an option and annotation for Graph and related functions that specifies a function to use to generate primitives for rendering each edge." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeShapeFunction)))
(def EdgeStyle "EdgeStyle is an option and annotation for Graph and related functions that specifies what style to use for edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeStyle)))
(def EdgeTaggedGraph "EdgeTaggedGraph[{e1, e2, …}] yields a graph with edges ej tagged with unique tags.\nEdgeTaggedGraph[{e1, e2, …}{t1, t2, …}] yields a graph with edges ej tagged with tj.\nEdgeTaggedGraph[{v1, v2, …}, {e1, e2, …}{t1, t2, …}] yields a graph with vertices vi and edges ej tagged with tj.\nEdgeTaggedGraph[{…, wi[vi], …}, {…, wj[ej], …}{t1, t2, …}] yields a graph with vertex and edge annotations defined by the symbolic wrappers wk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeTaggedGraph)))
(def EdgeTaggedGraphQ "EdgeTaggedGraphQ[g] yields True if the graph g has edges tagged and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeTaggedGraphQ)))
(def EdgeTags "EdgeTags[g] gives the list of tags for all edges in the graph g.\nEdgeTags[g, {u, v}] gives the list of tags for edges between u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeTags)))
(def EdgeTransitiveGraphQ "EdgeTransitiveGraphQ[g] yields True if the graph g is a edge-transitive graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeTransitiveGraphQ)))
(def EdgeValueRange "EdgeValueRange is an option for GeoGraphValuePlot that specifies the range of edge values to include in a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeValueRange)))
(def EdgeValueSizes "EdgeValueSizes is an option for GeoGraphValuePlot that specifies the thicknesses used to show edge values in a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeValueSizes)))
(def EdgeWeight "EdgeWeight is an option and annotation for Graph and related functions that specifies an edge weight." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeWeight)))
(def EdgeWeightedGraphQ "EdgeWeightedGraphQ[g] yields True if the graph g is an edge-weighted graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EdgeWeightedGraphQ)))
(def EditDistance "EditDistance[u, v] gives the edit or Levenshtein distance between strings or vectors u and v.\nEditDistance[u, v] gives the edit or Levenshtein distance between strings, vectors or biomolecular sequences u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EditDistance)))
(def Editable "Editable is an option for displayed objects, cells, and notebooks that specifies whether their contents can be edited interactively using the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Editable)))
(def EffectiveInterest "EffectiveInterest[r, q] gives the effective interest rate corresponding to interest specification r, compounded at time intervals q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EffectiveInterest)))
(def Eigensystem "Eigensystem[m] gives a list {values, vectors} of the eigenvalues and eigenvectors of the square matrix m. \nEigensystem[{m, a}] gives the generalized eigenvalues and eigenvectors of m with respect to a. \nEigensystem[m, k] gives the eigenvalues and eigenvectors for the first k eigenvalues of m. \nEigensystem[{m, a}, k] gives the first k generalized eigenvalues and eigenvectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Eigensystem)))
(def Eigenvalues "Eigenvalues[m] gives a list of the eigenvalues of the square matrix m. \nEigenvalues[{m, a}] gives the generalized eigenvalues of m with respect to a. \nEigenvalues[m, k] gives the first k eigenvalues of m. \nEigenvalues[{m, a}, k] gives the first k generalized eigenvalues." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Eigenvalues)))
(def EigenvectorCentrality "EigenvectorCentrality[g] gives a list of eigenvector centralities for the vertices in the graph g.\nEigenvectorCentrality[g, \"In\"] gives a list of in-centralities for a directed graph g.\nEigenvectorCentrality[g, \"Out\"] gives a list of out-centralities for a directed graph g.\nEigenvectorCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EigenvectorCentrality)))
(def Eigenvectors "Eigenvectors[m] gives a list of the eigenvectors of the square matrix m. \nEigenvectors[{m, a}] gives the generalized eigenvectors of m with respect to a. \nEigenvectors[m, k] gives the first k eigenvectors of m. \nEigenvectors[{m, a}, k] gives the first k generalized eigenvectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Eigenvectors)))
(def ElectricCurrentDensityValue "ElectricCurrentDensityValue[pred, vars, pars] represents a current density boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nElectricCurrentDensityValue[pred, vars, pars, lkey] represents a current density boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectricCurrentDensityValue)))
(def ElectricCurrentPDEComponent "ElectricCurrentPDEComponent[vars, pars] yields an electric current PDE term with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectricCurrentPDEComponent)))
(def ElectricFluxDensityValue "ElectricFluxDensityValue[pred, vars, pars] represents an electric flux density boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nElectricFluxDensityValue[pred, vars, pars, lkey] represents an electric flux density boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectricFluxDensityValue)))
(def ElectricPotentialCondition "ElectricPotentialCondition[pred, vars, pars] represents an electric potential surface boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nElectricPotentialCondition[pred, vars, pars, lkey] represents an electric potential surface boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectricPotentialCondition)))
(def ElectricSymmetryValue "ElectricSymmetryValue[pred, vars, pars] represents an electric symmetry boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nElectricSymmetryValue[pred, vars, pars, lkey] represents an electric symmetry boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectricSymmetryValue)))
(def ElectrostaticPDEComponent "ElectrostaticPDEComponent[vars, pars] yields an electrostatic PDE term with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElectrostaticPDEComponent)))
(def Element "Element[x, dom] or x∈dom asserts that x is an element of the domain dom. \nElement[x, reg] or x∈reg asserts that x is an element of the region reg.\nElement[x1|x2|…, dom] asserts that all the xi are elements of dom. \nElement[patt, dom] asserts that any expression matching the pattern patt is an element of dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Element)))
(def ElementData "ElementData[\"name\", \"property\"] gives the value of the specified property for the chemical element \"name\".\nElementData[n, \"property\"] gives the specified property for the n ^th chemical element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElementData)))
(def Elementwise "Elementwise[f][{x1, …, xn}, {y1, …, yn}] gives {f[x1, y1], …, f[xn, yn]}.\nElementwise[f][arg1, …] threads over any lists in arg1, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Elementwise)))
(def ElementwiseLayer "ElementwiseLayer[f] represents a net layer that applies a unary function f to every element of the input array.\nElementwiseLayer[\"name\"] applies the function specified by \"name\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElementwiseLayer)))
(def ElidedForms "ElidedForms is an option to TextString and related functions that specifies which expressions should be elided." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ElidedForms)))
(def Eliminate "Eliminate[eqns, vars] eliminates variables between a set of simultaneous equations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Eliminate)))
(def Ellipsoid "Ellipsoid[p, {r1, …}] represents an axis-aligned ellipsoid centered at the point p and with semiaxes lengths ri.\nEllipsoid[p, Σ] represents an ellipsoid centered at p and weight matrix Σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ellipsoid)))
(def EllipticE "EllipticE[m] gives the complete elliptic integral E (m). \nEllipticE[ϕ, m] gives the elliptic integral of the second kind E (ϕm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticE)))
(def EllipticExp "EllipticExp[u, {a, b}] is the inverse for EllipticLog. It produces a list {x, y} such that u==EllipticLog[{x, y}, {a, b}]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticExp)))
(def EllipticExpPrime "EllipticExpPrime[u, {a, b}] gives the derivative of EllipticExp[u, {a, b}] with respect to u." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticExpPrime)))
(def EllipticF "EllipticF[ϕ, m] gives the elliptic integral of the first kind F (ϕm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticF)))
(def EllipticFilterModel "EllipticFilterModel[n] designs a lowpass elliptic filter of order n.\nEllipticFilterModel[{n, ωc}] uses the cutoff frequency ωc.\nEllipticFilterModel[{\"type\", spec}] designs an elliptic filter of the specified type \"type\", using the spec.\nEllipticFilterModel[{\"type\", spec}, var] expresses the model in terms of the variable var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticFilterModel)))
(def EllipticK "EllipticK[m] gives the complete elliptic integral of the first kind K (m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticK)))
(def EllipticLog "EllipticLog[{x, y}, {a, b}] gives the generalized logarithm associated with the elliptic curve y^2=x^3+a x^2+b x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticLog)))
(def EllipticNomeQ "EllipticNomeQ[m] gives the nome q corresponding to the parameter m in an elliptic function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticNomeQ)))
(def EllipticPi "EllipticPi[n, m] gives the complete elliptic integral of the third kind Π (nm). \nEllipticPi[n, ϕ, m] gives the incomplete elliptic integral Π (n;ϕm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticPi)))
(def EllipticTheta "EllipticTheta[a, u, q] gives the theta function ϑa(u, q) (a=1, …, 4).\nEllipticTheta[a, q] gives the theta constant ϑa(q)ϑa (0, q)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticTheta)))
(def EllipticThetaPrime "EllipticThetaPrime[a, u, q] gives the derivative with respect to u of the theta function ϑa(u, q) (a=1, …, 4).\nEllipticThetaPrime[a, q] gives the theta constant ϑ_a^′(0, q)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EllipticThetaPrime)))
(def EmbedCode "EmbedCode[obj] generates the code necessary to embed the object obj on a webpage.\nEmbedCode[obj, \"dest\"] generates code for an external environment or language of type \"dest\".\nEmbedCode[obj, \"dest\", dir] saves the generated code as files in the directory dir.\nEmbedCode[obj, \"dest\", loc] saves the generated code as a file archive in the file location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbedCode)))
(def EmbeddedHTML "EmbeddedHTML[\"string\"] is an object that formats as a web frame containing the HTML content \"string\". \nEmbeddedHTML[URL[\"url\"]] formats as a rendering of the webpage corresponding to the specified URL.\nEmbeddedHTML[CloudObject[…]] formats as a web rendering of the specified cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbeddedHTML)))
(def EmbeddedSQLEntityClass "EmbeddedSQLEntityClass[string, props] represents a verbatim SQL query to be interpreted as an entity class with properties given by props.\nEmbeddedSQLEntityClass[template, props, args] represents an SQL query string template with arguments provided by args." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbeddedSQLEntityClass)))
(def EmbeddedSQLExpression "EmbeddedSQLExpression[string] represents an SQL expression to be evaluated verbatim within an EntityFunction object.\nEmbeddedSQLExpression[template, args] represents an SQL expression string template with arguments provided by args." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbeddedSQLExpression)))
(def EmbeddedService "EmbeddedService[service] is an object that formats as a web frame containing content from the specified external service." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbeddedService)))
(def EmbeddingLayer "EmbeddingLayer[size, n] represents a trainable net layer that embeds integers between 1 and n into a continuous vector space of dimension size.\nEmbeddingLayer[size] leaves the n to be inferred from context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmbeddingLayer)))
(def EmitSound "EmitSound[snd] emits the sound snd when evaluated. \nEmitSound[{snd1, snd2, …}] emits each of the sounds sndi in sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmitSound)))
(def EmpiricalDistribution "EmpiricalDistribution[{x1, x2, …}] represents an empirical distribution based on the data values xi.\nEmpiricalDistribution[{{x1, y1, …}, {x2, y2, …}, …}] represents a multivariate empirical distribution based on the data values {xi, yi, …}.\nEmpiricalDistribution[{w1, w2, …}{d1, d2, …}] represents an empirical distribution where data values di occur with weights wi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmpiricalDistribution)))
(def EmptyGraphQ "EmptyGraphQ[g] yields True if g is an empty graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmptyGraphQ)))
(def EmptyRegion "EmptyRegion[n] represents the empty subset of ^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmptyRegion)))
(def EmptySpaceF "EmptySpaceF[pdata, r] estimates the empty space function F(r) for point data pdata at radius r.\nEmptySpaceF[pproc, r] computes F(r) for point process pproc.\nEmptySpaceF[bdata, r] computes F(r) for binned data bdata. \nEmptySpaceF[pspec] generates the function F that can be applied repeatedly to different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EmptySpaceF)))
(def Enabled "Enabled is an option for objects such as Slider that specifies whether the objects should be enabled for interactive manipulation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Enabled)))
(def Enclose "Enclose[expr] attempts to evaluate expr and return the result, but stops if it catches an error and returns a failure object. \nEnclose[expr, f] applies f to any failure object generated.\nEnclose[expr, \"prop\"] gives the property prop of any failure object generated. \nEnclose[expr, handler, form] only catches errors with explicitly specified tags matching form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Enclose)))
(def Encode "Encode[\"source\", \"dest\"] writes an encoded version of the file source to the file dest. \n<<dest decodes the file before reading its contents. \nEncode[\"source\", \"dest\", \"key\"] produces an encoded file that must be read in using Get[\"dest\", \"key\"]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Encode)))
(def Encrypt "Encrypt[\"password\", expr] encrypts expr using the specified password, to give an encrypted object.\nEncrypt[keyspec, expr] encrypts expr using the cryptographic key specification keyspec.\nEncrypt[expr] interactively requests a password with which to encrypt expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Encrypt)))
(def EncryptFile "EncryptFile[\"password\", file] generates an encrypted version of a file, using the specified password.\nEncryptFile[\"password\", source, target] generates an encrypted version of source, putting the result in target.\nEncryptFile[keyspec, source, …] encrypts using the cryptographic key specification keyspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EncryptFile)))
(def EncryptedObject "EncryptedObject[assoc] represents encrypted data generated by Encrypt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EncryptedObject)))
(def End "End[] returns the present context, and reverts to the previous one." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote End)))
(def EndDialogPacket "EndDialogPacket[integer] is a WSTP packet indicating the end of the Dialog subsession referenced by integer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndDialogPacket)))
(def EndOfBuffer "EndOfBuffer is a symbol that represents the end of currently available data in the buffer for a process or stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndOfBuffer)))
(def EndOfFile "EndOfFile is a symbol returned by Read when it reaches the end of a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndOfFile)))
(def EndOfLine "EndOfLine represents the end of a line in a string for purposes of matching in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndOfLine)))
(def EndOfString "EndOfString represents the end of a string for purposes of matching in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndOfString)))
(def EndPackage "EndPackage[] restores $Context and $ContextPath to their values before the preceding BeginPackage, and prepends the current context to the list $ContextPath." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EndPackage)))
(def EngineeringForm "EngineeringForm[expr] prints with all real numbers in expr given in engineering notation. \nEngineeringForm[expr, n] prints with numbers given to n‐digit precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EngineeringForm)))
(def EnterExpressionPacket "EnterExpressionPacket[expr] is a WSTP packet that requests the evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EnterExpressionPacket)))
(def EnterTextPacket "EnterTextPacket[string] is a WSTP packet that requests the parsing and evaluation of string as an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EnterTextPacket)))
(def Entity "Entity[\"type\", name] represents an entity of the specified type, identified by name.\nEntity[cspec, name] represents an entity from the computed class, specified by cspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Entity)))
(def EntityClass "EntityClass[type, name] represents a class of entities of the specified type identified by name.\nEntityClass[type, {property1vspec1, property2vspec2, …}] represents an implicitly defined entity class containing entities of the specified type for which the properties propertyi conform to the value selector vspeci.\nEntityClass[cspec, psel] represents an entity class with members specified by cspec, selected by the property selector psel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityClass)))
(def EntityClassList "EntityClassList[\"type\"] gives a list of entity classes for the specified type of entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityClassList)))
(def EntityCopies "EntityCopies[entity, n] represents n copies of entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityCopies)))
(def EntityFunction "EntityFunction[x, body] is a function with a single formal parameter x, to be used in EntityValue and related functions.\nEntityFunction[{x1, x2, …}, body] is an EntityFunction with a list of formal parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityFunction)))
(def EntityGroup "EntityGroup[{entity1, entity2, …}] represents a group of entities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityGroup)))
(def EntityInstance "EntityInstance[entity, qualval] represents an entity whose qualifier qual has value val.\nEntityInstance[entity, {qual1val1, qual2val2, …}] represents an entity whose qualifiers quali have values vali.\nEntityInstance[entity, quantity] represents an entity qualified by quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityInstance)))
(def EntityList "EntityList[class] gives a list of entities in the specified entity class. \nEntityList[\"type\"] gives a list of entities of the specified type.\nEntityList[class, simplify] gives a list of entities; simplify determines whether to reduce entities to the simplest possible type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityList)))
(def EntityPrefetch "EntityPrefetch[\"type\"] fetches cacheable values associated with all entities of the specified type.\nEntityPrefetch[EntityProperty[\"type\", \"prop\"]] fetches all values for the specified property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityPrefetch)))
(def EntityProperties "EntityProperties[type] lists properties associated with entity type type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityProperties)))
(def EntityProperty "EntityProperty[type, pname] represents a property identified by pname for use in EntityValue.\nEntityProperty[class, pname] represents a property introduced by the computed entity class class.\nEntityProperty[type, pname, {qual1val1, qual2val2, …}] represents a property modified by the qualifier rules qualivali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityProperty)))
(def EntityPropertyClass "EntityPropertyClass[type, pcname] represents a class of properties identified by the name pcname." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityPropertyClass)))
(def EntityRegister "EntityRegister[estore] registers the entities in the entity store estore so that they can be accessed directly using Entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityRegister)))
(def EntityStore "EntityStore[\"type\"] represents an empty entity store for entities of type \"type\".\nEntityStore[\"type\"->data] represents an entity store for entities of type \"type\" with properties and values defined by data.\nEntityStore[{tspec1, tspec2, …}] represents an entity store for entities of multiple types.\nEntityStore[RelationalDatabase[…]] constructs an entity store from the schema of an external database.\nEntityStore[{tspec1, tspec2, ...}, dbspec] constructs an entity store by mapping table names in the database specified by dbspec to types as specified by the tspeci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityStore)))
(def EntityStores "EntityStores[] gives a list of all registered entity stores that are accessed when Entity is used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityStores)))
(def EntityType "EntityType[\"type\"] represents an entity type with the specified name.\nEntityType[\"type\"->child1->child2->…] represents a child entity type of \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityType)))
(def EntityTypeName "EntityTypeName[entity] gives the name of the entity type of entity.\nEntityTypeName[{entity1, …, entityn}] gives the name of the entity type for entity1 through entityn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityTypeName)))
(def EntityUnregister "EntityUnregister[\"type\"] unregisters all entities in the first entity store that defines entities of the specified type.\nEntityUnregister[store] unregisters all entities in the specified entity store." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityUnregister)))
(def EntityValue "EntityValue[entity, property] gives the value of the specified property for the given entity.\nEntityValue[{entity1, entity2, …}, property] gives the list of values of the specified property for each of the entityi.\nEntityValue[class, property] gives the list of values of the specified property for all entities in the specified class.\nEntityValue[entity, {property1, property2, …}] gives the list of values of the propertyi for the specified entity.\nEntityValue[ents, {property1, property2, …}] gives the list of values of the propertyi for each of the entities represented by ents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntityValue)))
(def Entropy "Entropy[list] gives the base  information entropy of the values in list.\nEntropy[k, list] gives the base k information entropy." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Entropy)))
(def EntropyFilter "EntropyFilter[data, r] filters data by replacing every value by the entropy value in its range-r neighborhood.\nEntropyFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EntropyFilter)))
(def Environment "Environment[\"var\"] gives the value of an operating system environment variable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Environment)))
(def Epilog "Epilog is an option for graphics functions that gives a list of graphics primitives to be rendered after the main part of the graphics is rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Epilog)))
(def EpilogFunction "EpilogFunction is an option for DocumentGenerator allowing arbitrary code to be executed after a document is generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EpilogFunction)))
(def Equal "lhs==rhs returns True if lhs and rhs are identical." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Equal)))
(def EqualTilde "EqualTilde[x, y, …] displays as x≂y≂…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EqualTilde)))
(def EqualTo "EqualTo[y] is an operator form that yields x==y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EqualTo)))
(def Equilibrium "Equilibrium[x, y, …] displays as x⇌y⇌…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Equilibrium)))
(def EquirippleFilterKernel "EquirippleFilterKernel[{{{ω L1, ω R1}, {ω L2, ω R2}, …}, {a1, a2, …}}, n] creates a finite impulse response (FIR) filter kernel of length n with an equiripple amplitude response, given the specified left and right band edge frequencies {ωLi, ωRi} and amplitudes ai.\nEquirippleFilterKernel[{{{ω L1, ω R1}, {ω L2, ω R2}, …}, {a1, a2, …}, {w1, …}}, n] uses relative weights wi for each frequency band.\nEquirippleFilterKernel[{\"type\", {{{ω L1, ω R1}, …}, …}}, n] creates a filter of the specified \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EquirippleFilterKernel)))
(def Equivalent "Equivalent[e1, e2, …] represents the logical equivalence e1⇔e2⇔…, giving True when all of the ei are the same." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Equivalent)))
(def Erf "Erf[z] gives the error function erf (z). \nErf[z0, z1] gives the generalized error function erf(z1)-erf (z0)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Erf)))
(def Erfc "Erfc[z] gives the complementary error function erfc (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Erfc)))
(def Erfi "Erfi[z] gives the imaginary error function erf (iz)/i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Erfi)))
(def ErlangB "ErlangB[c, a] computes the Erlang B loss probability for an M/M/c/c queue." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ErlangB)))
(def ErlangC "ErlangC[c, a] computes the Erlang C probability for nonzero waiting time in an M/M/c queue." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ErlangC)))
(def ErlangDistribution "ErlangDistribution[k, λ] represents the Erlang distribution with shape parameter k and rate λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ErlangDistribution)))
(def Erosion "Erosion[image, ker] gives the morphological erosion of image with respect to the structuring element ker.\nErosion[image, r] gives the erosion with respect to a range-r square.\nErosion[data, …] applies erosion to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Erosion)))
(def ErrorBox "ErrorBox[boxes] is a low-level box construct that represents boxes that cannot be interpreted in input or output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ErrorBox)))
(def EscapeRadius "EscapeRadius is an option to MandelbrotSetPlot that specifies the criterion to use to decide that a point is not in the Mandelbrot set." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EscapeRadius)))
(def EstimatedBackground "EstimatedBackground[data] estimates the background of data.\nEstimatedBackground[data, σ] tries to preserve peaks up to scale σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedBackground)))
(def EstimatedDistribution "EstimatedDistribution[data, dist] estimates the parametric distribution dist from data.\nEstimatedDistribution[data, dist, {{p, p0}, {q, q0}, …}] estimates the parameters p, q, … with starting values p0, q0, ….\nEstimatedDistribution[data, dist, idist] estimates distribution dist with starting values taken from the instantiated distribution idist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedDistribution)))
(def EstimatedPointNormals "EstimatedPointNormals[{p1, p2, …}] estimates normal vectors for the points p1, p2, ….\nEstimatedPointNormals[mreg] estimates normals vectors for the vertices of the mesh region mreg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedPointNormals)))
(def EstimatedPointProcess "EstimatedPointProcess[pdata, pproc] estimates the parametric point process pproc from point data pdata.\nEstimatedPointProcess[pdata, pproc, {{p, p0}, {q, q0}, …}] estimates the parameters p, q, … with starting values p0, q0, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedPointProcess)))
(def EstimatedProcess "EstimatedProcess[data, proc] estimates the parametric process proc from data.\nEstimatedProcess[data, proc, {{p, p0}, {q, q0}, …}] estimates the parameters p, q, … with starting values p0, q0, ….\nEstimatedProcess[data, proc, iproc] estimates process proc with starting values taken from the instantiated process iproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedProcess)))
(def EstimatedVariogramModel "EstimatedVariogramModel[{loc1val1, loc2val2, …}] estimates the best variogram function from values vali given at locations loci.\nEstimatedVariogramModel[{loc1, loc2, …}{val1, val2, …}] generates the same result. \nEstimatedVariogramModel[…, \"model\"] estimates the best parameters of the variogram function specified by \"model\". \nEstimatedVariogramModel[…, {\"model\", params}] estimates the non-numeric parameters in params." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatedVariogramModel)))
(def EstimatorGains "EstimatorGains[ssm, {p1, p2, …, pn}] gives the estimator gain matrix for the StateSpaceModel ssm, such that the poles of the estimator are pi.\nEstimatorGains[{ssm, {out1, …}}, …] specifies the measured outputs outi to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatorGains)))
(def EstimatorRegulator "EstimatorRegulator[sspec, {l, κ}] gives the output feedback controller with estimator and regulator gains l and κ for the system specification sspec.\nEstimatorRegulator[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EstimatorRegulator)))
(def EuclideanDistance "EuclideanDistance[u, v] gives the Euclidean distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EuclideanDistance)))
(def EulerAngles "EulerAngles[r] gives Euler angles {α, β, γ} corresponding to the rotation matrix r.\nEulerAngles[r, {a, b, c}] gives Euler angles {α, β, γ} with rotation order {a, b, c}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerAngles)))
(def EulerCharacteristic "EulerCharacteristic[poly] gives the Euler characteristic of a poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerCharacteristic)))
(def EulerE "EulerE[n] gives the Euler number En. \nEulerE[n, x] gives the Euler polynomial En (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerE)))
(def EulerGamma "EulerGamma is Euler’s constant γ, with numerical value ≃0.577216." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerGamma)))
(def EulerMatrix "EulerMatrix[{α, β, γ}] gives the Euler 3D rotation matrix formed by rotating by α around the current z axis, then by β around the current y axis, and then by γ around the current z axis. \nEulerMatrix[{α, β, γ}, {a, b, c}] gives the Euler 3D rotation matrix corresponding, first rotating by α around the current a axis, then by β around the current b axis, and finally by γ around the current c axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerMatrix)))
(def EulerPhi "EulerPhi[n] gives the Euler totient function ϕ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerPhi)))
(def EulerianGraphQ "EulerianGraphQ[g] yields True if the graph g is Eulerian, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EulerianGraphQ)))
(def Evaluatable "Evaluatable is an option for Cell that specifies whether a cell should be used as input to be evaluated by the Wolfram Language kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Evaluatable)))
(def Evaluate "Evaluate[expr] causes expr to be evaluated even if it appears as the argument of a function whose attributes specify that it should be held unevaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Evaluate)))
(def EvaluatePacket "EvaluatePacket[expr] is a WSTP packet requesting evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluatePacket)))
(def EvaluationBox "EvaluationBox[] returns a BoxObject corresponding to the box structure in which this function is being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationBox)))
(def EvaluationCell "EvaluationCell[] returns a CellObject corresponding to the cell in which this function is being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationCell)))
(def EvaluationData "EvaluationData[expr] gives an association containing the result of evaluating expr and metadata about the process of doing so." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationData)))
(def EvaluationElements "EvaluationElements is an option for NotebookEvaluate that determines which cells to evaluate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationElements)))
(def EvaluationEnvironment "EvaluationEnvironment is an option for functions such as InitializationValue and InitializationObjects that specifies the environment in which an initialization is intended to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationEnvironment)))
(def EvaluationMonitor "EvaluationMonitor is an option for various numerical computation and plotting functions that gives an expression to evaluate whenever functions derived from the input are evaluated numerically." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationMonitor)))
(def EvaluationNotebook "EvaluationNotebook[] gives the notebook in which this function is being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationNotebook)))
(def EvaluationObject "EvaluationObject[expr, …] represents an expression submitted for evaluation on any available parallel kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationObject)))
(def EvaluationPrivileges "EvaluationPrivileges is an option for CloudObject and related cloud functions that specifies what other files and cloud objects can be accessed by evaluations associated with the cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluationPrivileges)))
(def Evaluator "Evaluator is an option for objects such as Button, Dynamic, and Cell that gives the name of the kernel to use to evaluate their contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Evaluator)))
(def EvaluatorNames "EvaluatorNames is a global option that specifies the kernels that are currently configured to perform evaluations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvaluatorNames)))
(def EvenQ "EvenQ[expr] gives True if expr is an even integer, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EvenQ)))
(def EventData "EventData[{e1, e2, …}] represents event data with explicitly specified censoring ei.\nEventData[{e1, e2, …}, {ci1, ci2, …}] represents event data ei with censoring indicators cii.\nEventData[{e1, e2, …}, {cc1, cc2, …}] represents event data ei with censoring counts cci.\nEventData[{e1, e2, …}, cspec, {tr1, tr2, …}] represents event data with censoring and truncation tri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EventData)))
(def EventHandler "EventHandler[expr, {event1:>action1, event2:>action2, …}] displays as expr, evaluating actioni whenever \"eventi\" occurs in connection with expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EventHandler)))
(def EventLabels "EventLabels is an option to CandlestickChart, KagiChart, and similar functions that specifies events to labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EventLabels)))
(def EventSeries "EventSeries[{{t1, v1}, {t2, v2}…}] represents a series of events given as time-value pairs {ti, vi}.\nEventSeries[{v1, v2, …}, tspec] represents a series of events with values vi at times specified by tspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote EventSeries)))
(def ExactBlackmanWindow "ExactBlackmanWindow[x] represents an exact Blackman window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExactBlackmanWindow)))
(def ExactNumberQ "ExactNumberQ[expr] returns True if expr is an exact real or complex number, and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExactNumberQ)))
(def ExampleData "ExampleData[\"type\"] gives a list of names of examples of the specified type.\nExampleData[{\"type\", \"name\"}] gives the default form of the named example of the specified type.\nExampleData[{\"type\", \"name\"}, \"elem\"] gives the specified element or property of an example." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExampleData)))
(def Except "Except[c] is a pattern object which represents any expression except one that matches c. \nExcept[c, p] represents any expression that matches p but not c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Except)))
(def ExcludePods "ExcludePods is an option to WolframAlpha that specifies pod IDs to exclude from the results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExcludePods)))
(def ExcludedContexts "ExcludedContexts is an option for FullDefinition, Manipulate and related symbols that gives contexts whose symbols will not have the definitions recursively saved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExcludedContexts)))
(def ExcludedForms "ExcludedForms is an option that gives a list of patterns for expressions that should be excluded from an operation performed by a particular function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExcludedForms)))
(def ExcludedLines "ExcludedLines is an option for SemanticImport and related functions that specifies which lines should be ignored for further processing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExcludedLines)))
(def ExcludedPhysicalQuantities "ExcludedPhysicalQuantities is an option for FormulaLookup that specifies physical quantities that should be not used by the formulas returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExcludedPhysicalQuantities)))
(def Exclusions "Exclusions is an option that specifies where to exclude in regions used by functions like Plot, Plot3D, and NIntegrate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Exclusions)))
(def ExclusionsStyle "ExclusionsStyle is an option to plotting functions that specifies how to render subregions excluded according to Exclusions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExclusionsStyle)))
(def Exists "Exists[x, expr] represents the statement that there exists a value of x for which expr is True. \nExists[x, cond, expr] states that there exists an x satisfying the condition cond for which expr is True. \nExists[{x1, x2, …}, expr] states that there exist values for all the xi for which expr is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Exists)))
(def Exit "Exit[] terminates a Wolfram Language kernel session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Exit)))
(def ExoplanetData "ExoplanetData[entity, property] gives the value of the specified property for the exoplanet entity.\nExoplanetData[{entity1, entity2, …}, property] gives a list of property values for the specified exoplanet entities.\nExoplanetData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExoplanetData)))
(def Exp "Exp[z] gives the exponential of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Exp)))
(def ExpGammaDistribution "ExpGammaDistribution[κ, θ, μ] represents an exp-gamma distribution with shape parameter κ, scale parameter θ, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpGammaDistribution)))
(def ExpIntegralE "ExpIntegralE[n, z] gives the exponential integral function En (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpIntegralE)))
(def ExpIntegralEi "ExpIntegralEi[z] gives the exponential integral function Ei (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpIntegralEi)))
(def ExpToTrig "ExpToTrig[expr] converts exponentials in expr to trigonometric functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpToTrig)))
(def Expand "Expand[expr] expands out products and positive integer powers in expr. \nExpand[expr, patt] leaves unexpanded any parts of expr that are free of the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Expand)))
(def ExpandAll "ExpandAll[expr] expands out all products and integer powers in any part of expr. \nExpandAll[expr, patt] avoids expanding parts of expr that do not contain terms matching the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpandAll)))
(def ExpandDenominator "ExpandDenominator[expr] expands out products and powers that appear as denominators in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpandDenominator)))
(def ExpandFileName "ExpandFileName[\"name\"] textually expands name to have the form of an absolute file name for your operating system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpandFileName)))
(def ExpandNumerator "ExpandNumerator[expr] expands out products and powers that appear in the numerator of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpandNumerator)))
(def Expectation "Expectation[expr, xdist] gives the expectation of expr under the assumption that x follows the probability distribution dist. \nExpectation[expr, xdata] gives the expectation of expr under the assumption that x follows the probability distribution given by data.\nExpectation[expr, {x1, x2, …}dist] gives the expectation of expr under the assumption that {x1, x2, …} follows the multivariate distribution dist. \nExpectation[expr, {x1dist1, x2dist2, …}] gives the expectation of expr under the assumption that x1, x2, … are independent and follow the distributions dist1, dist2, …. \nExpectation[exprpred, …] gives the conditional expectation of expr given pred." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Expectation)))
(def ExpirationDate "ExpirationDate is an option for various functions that specifies when a persistent value should be treated as expired." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpirationDate)))
(def Exponent "Exponent[expr, form] gives the maximum power with which form appears in the expanded form of expr. \nExponent[expr, form, h] applies h to the set of exponents with which form appears in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Exponent)))
(def ExponentFunction "ExponentFunction is an option for NumberForm and related functions that determines the exponent to use in printing approximate real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentFunction)))
(def ExponentStep "ExponentStep is an option for NumberForm and related functions that determines in what steps exponents are taken to increase when scientific notation is used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentStep)))
(def ExponentialDistribution "ExponentialDistribution[λ] represents an exponential distribution with scale inversely proportional to parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentialDistribution)))
(def ExponentialFamily "ExponentialFamily is an option for GeneralizedLinearModelFit that specifies the exponential family for the model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentialFamily)))
(def ExponentialGeneratingFunction "ExponentialGeneratingFunction[expr, n, x] gives the exponential generating function in x for the sequence whose n ^th term is given by the expression expr.\nExponentialGeneratingFunction[expr, {n1, n2, …}, {x1, x2, …}] gives the multidimensional exponential generating function in x1, x2, … whose n1, n2, … term is given by expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentialGeneratingFunction)))
(def ExponentialMovingAverage "ExponentialMovingAverage[list, α] gives the exponential moving average of list with smoothing constant α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentialMovingAverage)))
(def ExponentialPowerDistribution "ExponentialPowerDistribution[κ, μ, σ] represents an exponential power distribution with shape parameter κ, location parameter μ, and scale parameter σ.\nExponentialPowerDistribution[κ] represents an exponential power distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExponentialPowerDistribution)))
(def Export "Export[\"dest.ext\", expr] exports data to a file, converting it to the format corresponding to the file extension ext. \nExport[dest, expr, \"fmt\"] exports data in the specified format \"fmt\".\nExport[dest, exprs, elements] exports data by treating exprs as elements.\nExport[dest, exprs, elements, options] uses the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Export)))
(def ExportByteArray "ExportByteArray[expr, \"format\"] generates a ByteArray object corresponding to expr exported in the specified format. \nExportByteArray[exprs, elems] generates a ByteArray object by treating exprs as elements specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExportByteArray)))
(def ExportForm "ExportForm[expr, \"fmt\"] specifies that expr should be exported in the specified format in functions like CloudDeploy and in external results from APIFunction and FormFunction.\nExportForm[expr, {\"fmt\", \"type\"}] specifies that when expr is exported, it should be tagged as having the specified MIME type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExportForm)))
(def ExportString "ExportString[expr, \"format\"] generates a string corresponding to expr exported in the specified format. \nExportString[rules, {\"format\", \"Rules\"}] gives explicit rules for different elements of the data to be exported. \nExportString[exprs, elems] generates a string by treating exprs as elements specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExportString)))
(def Expression "Expression is a symbol that represents an ordinary Wolfram Language expression in Read and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Expression)))
(def ExpressionCell "ExpressionCell[expr] gives an expression cell that can appear in a Wolfram System notebook.\nExpressionCell[expr, \"style\"] gives an expression cell with the specified style.\nExpressionCell[expr, style1, style2, …] gives an expression cell with multiple styles applied to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpressionCell)))
(def ExpressionGraph "ExpressionGraph[expr] gives the tree graph with different levels at different depths. \nExpressionGraph[expr, n] gives the tree graph only down to level n.\nExpressionGraph[expr, n, form] gives a tree graph in which subexpressions that match form are leaves." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpressionGraph)))
(def ExpressionTree "ExpressionTree[expr] gives a Tree object from the structure of the expression expr.\nExpressionTree[expr, struct] gives a Tree object from the expression expr with data and subtrees as specified by struct." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpressionTree)))
(def ExpressionUUID "ExpressionUUID is an option for Cell and Notebook that holds the assigned unique UUID string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExpressionUUID)))
(def ExtendedEntityClass "ExtendedEntityClass[class, \"name\"->f] represents an entity class derived from class by adding a new computed property \"name\" whose value for each entity is obtained by applying the entity function f.\nExtendedEntityClass[class, {name1->f1, name2->f2, …}] adds the properties namei defined by the functions fi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtendedEntityClass)))
(def ExtendedGCD "ExtendedGCD[n1, n2, …] gives the extended greatest common divisor of the integers ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtendedGCD)))
(def ExtendedKey "ExtendedKey[key1, key2, …] represents a multilevel column key in a Tabular object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtendedKey)))
(def Extension "Extension is an option for various polynomial and algebraic functions that specifies generators for the algebraic number field to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Extension)))
(def ExtentElementFunction "ExtentElementFunction is an option to DiscretePlot and DiscretePlot3D that gives a function to use to generate the primitives for rendering each extent element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtentElementFunction)))
(def ExtentMarkers "ExtentMarkers is an option to DiscretePlot and DiscretePlot3D that specifies markers to draw at extent boundaries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtentMarkers)))
(def ExtentSize "ExtentSize is an option to DiscretePlot and DiscretePlot3D that specifies how far to extend out from each plot point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtentSize)))
(def ExternalBundle "ExternalBundle[{name1obj1, name2obj2, …}] represents a bundle of resources to be externally deployed as named URLs, functions, etc. \nExternalBundle[{name11{name1…, …}, …}] represents a nested bundle of resources." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalBundle)))
(def ExternalEvaluate "ExternalEvaluate[\"sys\", \"cmd\"] evaluates the command cmd in the external evaluator sys, returning an expression corresponding to the output.\nExternalEvaluate[{\"sys\", opts}, \"cmd\"] uses the options opts for the external evaluator.\nExternalEvaluate[assoc, \"cmd\"] evaluates cmd using the external evaluator specified by assoc.\nExternalEvaluate[session, \"cmd\"] evaluates cmd in the specified running ExternalSessionObject.\nExternalEvaluate[sys\"type\", …] returns output converted to the specified type. \nExternalEvaluate[spec, obj] evaluates the content of the specified ExternalObject, ExternalOperation, File, URL or CloudObject.\nExternalEvaluate[spec, assoc] evaluates the command specified by assoc.\nExternalEvaluate[spec, {cmd1, cmd2, …}] evaluates the list of commands cmdi.\nExternalEvaluate[DatabaseReference[ref], \"cmd\"] evaluates cmd using the database specified by ref.\nExternalEvaluate[spec] represents an operator form of ExternalEvaluate that can be applied to a command or object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalEvaluate)))
(def ExternalFunction "ExternalFunction[sys, \"f\"] represents an external function named \"f\" defined in the external evaluator sys.\nExternalFunction[session, \"f\"] represents an external function \"f\" in the specified ExternalSessionObject.\nExternalFunction[sys, \"code\"] represents an external function defined by the code fragment \"code\".\nExternalFunction[obj, \"method\"] represents a method bound to the ExternalObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalFunction)))
(def ExternalIdentifier "ExternalIdentifier[\"type\", id] represents a resource identified by id in the external identifier system \"type\".\nExternalIdentifier[\"type\", id, meta] includes the metadata given by the association meta to this instance of the external identifier object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalIdentifier)))
(def ExternalObject "ExternalObject[…] represents an external object bound to an ExternalSessionObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalObject)))
(def ExternalOperation "ExternalOperation[\"Eval\", \"code\"] represents an external evaluation of \"code\".\nExternalOperation[\"Eval\", \"code\", assoc] represents an external evaluation of \"code\" with parameters given by assoc.\nExternalOperation[\"Call\", func, arg1, arg2, …] calls the function func with the given arguments arg1, arg2, ….\nExternalOperation[\"GetAttribute\", obj, \"attr\"] gets the attribute \"attr\" of obj.\nExternalOperation[\"SetAttribute\", obj, \"attr\", val] sets the attribute \"attr\" of obj to the given value val.\nExternalOperation[\"Cast\", obj, \"type\"] casts obj to the given \"type\".\nExternalOperation[\"op\", arg1, arg2, …] represents the external operation named \"op\" using arguments arg1, arg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalOperation)))
(def ExternalOptions "ExternalOptions is an option for EmbedCode and related functions that gives options specific to the external environment or language used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalOptions)))
(def ExternalSessionObject "ExternalSessionObject[…] represents an external session started by StartExternalSession for use with ExternalEvaluate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalSessionObject)))
(def ExternalSessions "ExternalSessions[] gives the list of currently active external evaluator sessions.\nExternalSessions[sys] gives the list of sessions associated with the system sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalSessions)))
(def ExternalStorageBase "ExternalStorageBase is an option for various external storage functions that specifies which external storage service to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStorageBase)))
(def ExternalStorageDownload "ExternalStorageDownload[location] downloads content from the specified location.\nExternalStorageDownload[location, dest] downloads content from the specified location to a local destination file or directory dest.\nExternalStorageDownload[locationdest] downloads content from the specified locations to a local destination file or directory dest.\nExternalStorageDownload[{location1, location2, …}, dest] downloads content from the specified locations to local destination dest.\nExternalStorageDownload[{location1, location2, …}dest] downloads content from the specified locations to local destination dest.\nExternalStorageDownload[{location1dest1, location2dest2, …}] downloads content from the specified locations to local destinations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStorageDownload)))
(def ExternalStorageGet "ExternalStorageGet[ExternalStorageObject[…]] reads in an expression stored at an external storage specified by the ExternalStorageObject.\nExternalStorageGet[location] reads in an expression stored at location in an external storage specified by $ExternalStorageBase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStorageGet)))
(def ExternalStorageObject "ExternalStorageObject[location] represents a file stored in an external location.\nExternalStorageObject[assoc] represents a file stored in an external service specified by the components of the association assoc.\nExternalStorageObject[location, assoc] represents a file stored in an external location with additional elements given by assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStorageObject)))
(def ExternalStoragePut "ExternalStoragePut[expr] writes expr to an external storage specified by $ExternalStorageBase.\nExternalStoragePut[expr, path] writes expr to a specific path in an external storage specified by $ExternalStorageBase.\nExternalStoragePut[expr, ExternalStorageObject[...]] writes expr to the service and path represented by an ExternalStorageObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStoragePut)))
(def ExternalStorageUpload "ExternalStorageUpload[file] uploads file to an external storage specified by $ExternalStorageBase.\nExternalStorageUpload[file, dest] uploads file to a specific destination dest for external storage services that support it.\nExternalStorageUpload[filedest] uploads file to a specific destination dest for external storage services that support it. \nExternalStorageUpload[{file1, file2, …}, dest] uploads a list of files to a specific destination dest for external storage services that support it.\nExternalStorageUpload[{file1, file2, …}dest] uploads a list of files to a specific destination dest for external storage services that support it.\nExternalStorageUpload[{file1dest1, file2dest2, …}] uploads a list of files to specific destinations for external storage services that support it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalStorageUpload)))
(def ExternalTypeSignature "ExternalTypeSignature is an option for EmbedCode that gives rules specifying the mapping to external types in an embedded code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalTypeSignature)))
(def ExternalValue "ExternalValue[sys, \"sym\"] gives the value of \"sym\" in external evaluator sys. \nExternalValue[session, \"sym\"] gives the value of \"sym\" in the specified external session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExternalValue)))
(def Extract "Extract[expr, pos] extracts the part of expr at the position specified by pos. \nExtract[expr, {pos1, pos2, …}] extracts a list of parts of expr. \nExtract[expr, pos, h] extracts parts of expr, wrapping each of them with head h before evaluation. \nExtract[pos] represents an operator form of Extract that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Extract)))
(def ExtractArchive "ExtractArchive[source] expands an archive file, saving its content into the current directory.\nExtractArchive[source, dir] saves the content of an archive file into directory dir.\nExtractArchive[source, dir, pattern] extracts only files whose names match pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtractArchive)))
(def ExtractLayer "ExtractLayer[] represents a net layer that takes an array and a position specification as inputs and extracts the specified parts from the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtractLayer)))
(def ExtractPacletArchive "ExtractPacletArchive[file] extracts the contents of the paclet archive file into the directory in which file resides.\nExtractPacletArchive[file, destdir] extracts the contents of the paclet archive file into destdir." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtractPacletArchive)))
(def ExtremeValueDistribution "ExtremeValueDistribution[α, β] represents an extreme value distribution with location parameter α and scale parameter β.\nExtremeValueDistribution[] represents an extreme value distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ExtremeValueDistribution)))
(def FARIMAProcess "FARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, v] represents an autoregressive fractionally integrated moving-average process y(t) such that its d ^th difference is an ARMAProcess[{a1, …, ap}, {b1, …, bq, v].\nFARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, Σ] represents a vector autoregressive fractionally integrated moving-average process (y1(t), … , yn(t)) such that its (d, …, d)^th difference is a vector ARMAProcess.\nFARIMAProcess[{a1, …, ap}, {d1, …, dn}, {b1, …, bq}, Σ] represents a vector autoregressive fractionally integrated moving-average process (y1(t), … , yn(t)) such that its (d1, …, dn)^th difference is a vector ARMAProcess." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FARIMAProcess)))
(def FRatioDistribution "FRatioDistribution[n, m] represents an F-ratio distribution with n numerator and m denominator degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FRatioDistribution)))
(def FaceAlign "FaceAlign[image] attempts to find faces in image and align them.\nFaceAlign[image, fref] gives aligned faces according to the face reference fref. \nFaceAlign[image, fref, size] gives aligned faces of the specified size.\nFaceAlign[{image1, image2, …}, …] gives a list of aligned faces for all imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FaceAlign)))
(def FaceForm "FaceForm[g] is a graphics directive which specifies that faces of polygons and other filled graphics objects are to be drawn using the graphics directive or list of directives g. \nFaceForm[g, gback] specifies that the front faces of three-dimensional polygons should be drawn with directives g, and the backs with directives gback." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FaceForm)))
(def FaceGrids "FaceGrids is an option for three-dimensional graphics functions that specifies grid lines to draw on the faces of the bounding box." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FaceGrids)))
(def FaceGridsStyle "FaceGridsStyle is an option for 3D graphics functions that specifies how face grids should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FaceGridsStyle)))
(def FaceRecognize "FaceRecognize[{example1name1, example2name2, …}] generates a ClassifierFunction[…] based on the face examples and names given.\nFaceRecognize[{example1, example2, …}{name1, name2, …}] also generates a ClassifierFunction[…] based on the examples and names given.\nFaceRecognize[name1{example11, …}, name2{example21, …}, …] uses an association of names with their examples.\nFaceRecognize[training, image] attempts to find faces present in an image and classify them with the given training set. \nFaceRecognize[training, image, prop] returns the specified property prop." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FaceRecognize)))
(def FacialFeatures "FacialFeatures[image] returns a minimal summary of facial features for all detected faces in image.\nFacialFeatures[image, features] returns the specified facial features.\nFacialFeatures[video, …] finds faces in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FacialFeatures)))
(def Factor "Factor[poly] factors a polynomial over the integers. \nFactor[poly, Modulusp] factors a polynomial modulo the prime p. \nFactor[poly, Extension{a1, a2, …}] factors a polynomial allowing coefficients that are rational combinations of the algebraic numbers ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Factor)))
(def FactorInteger "FactorInteger[n] gives a list of the prime factors of the integer n, together with their exponents. \nFactorInteger[n, k] does partial factorization, pulling out at most k distinct factors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorInteger)))
(def FactorList "FactorList[poly] gives a list of the factors of a polynomial, together with their exponents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorList)))
(def FactorSquareFree "FactorSquareFree[poly] pulls out any multiple factors in a polynomial." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorSquareFree)))
(def FactorSquareFreeList "FactorSquareFreeList[poly] gives a list of square‐free factors of a polynomial, together with their exponents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorSquareFreeList)))
(def FactorTerms "FactorTerms[poly] pulls out any overall numerical factor in poly. \nFactorTerms[poly, x] pulls out any overall factor in poly that does not depend on x. \nFactorTerms[poly, {x1, x2, …}] pulls out any overall factor in poly that does not depend on any of the xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorTerms)))
(def FactorTermsList "FactorTermsList[poly] gives a list in which the first element is the overall numerical factor in poly, and the second element is the polynomial with the overall factor removed.\nFactorTermsList[poly, {x1, x2, …}] gives a list of factors of poly. The first element in the list is the overall numerical factor. The second element is a factor that does not depend on any of the xi. Subsequent elements are factors which depend on progressively more of the xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorTermsList)))
(def Factorial "n! gives the factorial of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Factorial)))
(def Factorial2 "n!! gives the double factorial of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Factorial2)))
(def FactorialMoment "FactorialMoment[data, r] gives the order r  factorial moment Overscript[μ, _]r of data.\nFactorialMoment[data, {r1, …, rm}] gives the order {r1, …, rm} multivariate factorial moment Overscript[μ, _]r1, …, rm of data.\nFactorialMoment[dist, …] gives the factorial moment of the distribution dist.\nFactorialMoment[r] represents the order r  formal factorial moment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorialMoment)))
(def FactorialMomentGeneratingFunction "FactorialMomentGeneratingFunction[dist, t] gives the factorial moment-generating function for the distribution dist as a function of the variable t. \nFactorialMomentGeneratingFunction[dist, {t1, t2, …}] gives the factorial moment-generating function for the multivariate distribution dist as a function of the variables t1, t2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorialMomentGeneratingFunction)))
(def FactorialPower "FactorialPower[x, n] gives the factorial power x^(n). \nFactorialPower[x, n, h] gives the step-h factorial power x^(n, h)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FactorialPower)))
(def Failsafe "Failsafe[f][x1, x2, …] returns f[x1, x2, …] if none of the xi is considered a failure, and the first failing xi otherwise.\nFailsafe[f, test][x1, x2, …] returns f[x1, x2, …] if test[x1, x2, …] gives True, and Failure[…] otherwise.\nFailsafe[f, test, failf][x1, x2, …] returns failf[x1, x2, …] if test[x1, x2, …] does not give True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Failsafe)))
(def Failure "Failure[\"tag\", assoc] represents a failure of a type indicated by tag, with details given by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Failure)))
(def FailureAction "FailureAction is an option to Query and related functions that determines what should happen when a failure or message is generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FailureAction)))
(def FailureDistribution "FailureDistribution[bexpr, {{x1, dist1}, {x2, dist2}, …}] represents the failure distribution for a system with events xi having reliability distribution disti where the top event occurs when the Boolean expression bexpr is True and event xi has occurred when xi is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FailureDistribution)))
(def FailureQ "FailureQ[expr] gives True if expr has head Failure or is equal to $Failed or $Aborted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FailureQ)))
(def False "False is the symbol for the Boolean value false." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote False)))
(def FareySequence "FareySequence[n] generates the Farey sequence of order n.\nFareySequence[n, k] gives the k ^th element of the Farey sequence of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FareySequence)))
(def FeatureDistance "FeatureDistance[example1, example2, extractor] gives the distance between example1 and example2 in the feature space defined by extractor.\nFeatureDistance[extractor] represents an operator form of FeatureDistance that can be applied to a pair of examples." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureDistance)))
(def FeatureExtract "FeatureExtract[{example1, example2, …}] extracts features for each of the examplei using a feature extractor trained on all the examplei.\nFeatureExtract[examples, extractor] extracts features using the specified feature extractor method.\nFeatureExtract[examples, {extractor1, extractor2, …}] extracts features by applying the extractori in sequence.\nFeatureExtract[examples, specext] uses the extractor methods specified by ext on parts of examples specified by spec. \nFeatureExtract[examples, {spec1ext1, spec2ext2, …}] uses the extractor methods exti on parts of examples specified by the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureExtract)))
(def FeatureExtraction "FeatureExtraction[{example1, example2, …}] generates a FeatureExtractorFunction[…] trained from the examples given.\nFeatureExtraction[examples, extractor] uses the specified feature extractor method.\nFeatureExtraction[examples, {extractor1, extractor2, …}] applies the extractori in sequence to generate a feature extractor.\nFeatureExtraction[examples, specext] uses the extractor methods specified by ext on parts of examples specified by spec. \nFeatureExtraction[examples, {spec1ext1, spec2ext2, …}] uses the extractor methods exti on parts of examples specified by the speci.\nFeatureExtraction[examples, extractor, props] gives the feature extraction properties specified by props." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureExtraction)))
(def FeatureExtractor "FeatureExtractor is an option for functions such as Classify that specifies how features should be extracted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureExtractor)))
(def FeatureExtractorFunction "FeatureExtractorFunction[…] represents a feature extractor function generated by FeatureExtraction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureExtractorFunction)))
(def FeatureImpactPlot "FeatureImpactPlot[model, data] plots the impact of the value of each feature in data on the result of model.\nFeatureImpactPlot[model] estimates the feature impacts using synthetic data.\nFeatureImpactPlot[modelfname, …] plots only the impact of the specified feature fname.\nFeatureImpactPlot[modelfnameclass, …] plots only the impact on the classification class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureImpactPlot)))
(def FeatureNames "FeatureNames is an option for machine learning functions such as Classify or Predict that specifies names to use for elements of input data given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureNames)))
(def FeatureNearest "FeatureNearest[{elem1, elem2, …}, x] gives the list of elemi to which x is nearest in a computed feature space.\nFeatureNearest[{elem1v1, elem2v2, …}, x] gives the vi corresponding to the elemi to which x is nearest.\nFeatureNearest[{elem1, elem2, …}{v1, v2, …}, x] gives the same result.\nFeatureNearest[{elem1, elem2, …}prop, x] gives the property prop for the elemi to which x is nearest.\nFeatureNearest[data, {x1, x2, …}] effectively gives {FeatureNearest[data, x1], FeatureNearest[data, x2], …}.\nFeatureNearest[data, x, n] gives the n nearest elemi to x.\nFeatureNearest[data] generates a NearestFunction[…] that can be applied repeatedly to different x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureNearest)))
(def FeatureSpacePlot "FeatureSpacePlot[{example1, example2, …}] plots features extracted from the examplei as a scatter plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureSpacePlot)))
(def FeatureSpacePlot3D "FeatureSpacePlot3D[{example1, example2, …}] plots features extracted from the examplei as a scatter 3D plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureSpacePlot3D)))
(def FeatureTypes "FeatureTypes is an option for machine learning functions such as Classify or Predict that specifies what feature types to assume for elements of input data given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureTypes)))
(def FeatureValueDependencyPlot "FeatureValueDependencyPlot[model, data] plots the dependency of the result of model on the value of a particular feature in data.\nFeatureValueDependencyPlot[model] estimates the feature value dependency using synthetic data.\nFeatureValueDependencyPlot[modelfname, …] plots only the dependency on the specified feature fname.\nFeatureValueDependencyPlot[modelfnameclass, …] plots only the dependency on the classification class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureValueDependencyPlot)))
(def FeatureValueImpactPlot "FeatureValueImpactPlot[model, data] plots the impact of the value of a given feature in data on the result of model.\nFeatureValueImpactPlot[model] estimates the feature value impact using synthetic data.\nFeatureValueImpactPlot[modelfname, …] plots only the impact of the specified feature fname.\nFeatureValueImpactPlot[modelfnameclass, …] plots only the impact on the classification class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeatureValueImpactPlot)))
(def FeedbackLinearize "FeedbackLinearize[asys] input-output linearizes the AffineStateSpaceModel asys by state transformation and feedback.\nFeedbackLinearize[asys, {z, v}] specifies the new states z and the new control inputs v.\nFeedbackLinearize[asys, {z, v}, \"prop\"] computes the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeedbackLinearize)))
(def FeedbackSector "FeedbackSector is an option to NyquistPlot that specifies the sector limits of the nonlinearity in the feedback." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeedbackSector)))
(def FeedbackSectorStyle "FeedbackSectorStyle is an option to NyquistPlot that specifies the style in which graphics of FeedbackSector should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeedbackSectorStyle)))
(def FeedbackType "FeedbackType is an option for some control system functions that specifies the feedback type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FeedbackType)))
(def FetalGrowthData "FetalGrowthData[age] returns the values for all properties of fetal development for the specified age of the fetus.\nFetalGrowthData[age, property] returns the value for a property of fetal development for the specified age.\nFetalGrowthData[age, index] returns the values for all properties of fetal development at the specified age and percentile.\nFetalGrowthData[age, property, index] returns the value for a property at the specified age and percentile." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FetalGrowthData)))
(def Fibonacci "Fibonacci[n] gives the Fibonacci number Fn. \nFibonacci[n, x] gives the Fibonacci polynomial Fn (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Fibonacci)))
(def Fibonorial "Fibonorial[n] gives the fibonorial n!F." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Fibonorial)))
(def FieldCompletionFunction "FieldCompletionFunction is an option for InputField that specifies a function to apply to the input field's contents to generate a list of completions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FieldCompletionFunction)))
(def FieldHint "FieldHint is an option for InputField that specifies contents to display when the input field is empty." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FieldHint)))
(def FieldHintStyle "FieldHintStyle is an option for InputField that specifies the style to use for displaying the field hint." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FieldHintStyle)))
(def FieldMasked "FieldMasked is an option to InputField that determines whether to mask user input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FieldMasked)))
(def FieldSize "FieldSize is an option for InputField, PopupMenu, and related functions that specifies the size of the field allowed for input or contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FieldSize)))
(def File "File[\"path\"] is a symbolic representation of a location in the local file system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote File)))
(def FileBaseName "FileBaseName[\"file\"] gives the base name for a file without its extension." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileBaseName)))
(def FileByteCount "FileByteCount[file] gives the number of bytes in a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileByteCount)))
(def FileConvert "FileConvert[source\"dest.ext\"] converts the contents of source to the format defined by the extension ext and writes the result to the file dest.ext. \nFileConvert[source, \"format\"] writes the result to the filename defined by source, but with an extension defined by the specified format.\nFileConvert[source\"dest.ext\", format1format2] takes the contents of source to be in the specified format \"format1\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileConvert)))
(def FileDate "FileDate[\"file\"] gives the date and time at which a file was last modified. \nFileDate[\"file\", \"type\"] gives information on the specified type of date associated with a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileDate)))
(def FileExistsQ "FileExistsQ[\"name\"] gives True if the file with the specified name exists, and gives False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileExistsQ)))
(def FileExtension "FileExtension[\"file\"] gives the file extension for a file name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileExtension)))
(def FileFormat "FileFormat[source] attempts to determine what Import format could be used to import the file corresponding to source. \nFileFormat[source, {fmt1, fmt2, …}] returns the first \"fmti\" that can be used to import source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileFormat)))
(def FileFormatProperties "FileFormatProperties[\"fmt\"] returns an association of properties for the specified format \"fmt\".\nFileFormatProperties[\"fmt\", \"prop\"] returns the property \"prop\" for the format \"fmt\".\nFileFormatProperties[\"fmt\", {prop1, prop2, …}] returns multiple properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileFormatProperties)))
(def FileFormatQ "FileFormatQ[source, \"fmt\"] gives True if the file corresponding to source might be imported as format \"fmt\" and gives False otherwise.\nFileFormatQ[source, {fmt1, fmt2, …}] gives True if source might be imported as one of \"fmti\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileFormatQ)))
(def FileHash "FileHash[file] gives an integer hash code for the contents of the specified file.\nFileHash[file, \"type\"] gives an integer hash of the specified type.\nFileHash[file, \"type\", \"format\"] gives a hash code in the specified format.\nFileHash[{file, range}, …] gives the hash code for the specified range of bytes.\nFileHash[{filespec1, filespec2, …}, …] gives the hash codes for a list of files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileHash)))
(def FileNameDepth "FileNameDepth[\"name\"] gives the number of path elements in the file name \"file\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameDepth)))
(def FileNameDrop "FileNameDrop[\"name\", n] drops the first n path elements in the file name \"name\".\nFileNameDrop[\"name\", -n] drops the last n path elements in the file name \"name\".\nFileNameDrop[\"name\", {m, n}] drops elements m through n in the file name \"name\".\nFileNameDrop[\"name\"] drops the last path element in the file name \"name\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameDrop)))
(def FileNameForms "FileNameForms is an option that specifies the pattern for file names to be selected by a function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameForms)))
(def FileNameJoin "FileNameJoin[{name1, name2, …}] joins the namei together into a file name suitable for your current operating system. \nFileNameJoin[{CloudObject[…], name2, …}] joins the namei to the path in the specified cloud object. \nFileNameJoin[{LocalObject[…], name2, …}] joins the namei to the path in the specified local object.\nFileNameJoin[name1, name2, …] is equivalent to FileNameJoin[{name1, name2, …}]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameJoin)))
(def FileNameSetter "FileNameSetter[name] represents a file name setter which displays as a Browse button and when clicked brings up a system file opening dialog, starting from the location corresponding to name. \nFileNameSetter[Dynamic[name]] uses the dynamically updated current value of name, with the value of name being reset if a different file is chosen.\nFileNameSetter[name, \"Save\"] brings up a file saving dialog.\nFileNameSetter[name, \"spec\", {type1->{patt11, patt12, …}, type2->{…}, …}] looks for files of types typei with names matching the file patterns pattij." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameSetter)))
(def FileNameSplit "FileNameSplit[\"name\"] splits a file name into a list of parts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameSplit)))
(def FileNameTake "FileNameTake[\"name\"] gives the last path element in the file name \"name\".\nFileNameTake[\"name\", n] gives the first n path elements in the file name \"name\".\nFileNameTake[\"name\", -n] gives the last n path elements in the file name \"name\".\nFileNameTake[\"name\", {m, n}] gives elements m through n in the file name \"name\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameTake)))
(def FileNameToFormatList "FileNameToFormatList[] returns lists of file formats corresponding to all registered file name patterns.\nFileNameToFormatList[\"file\"] returns a list of file formats that matches the file name \"file\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNameToFormatList)))
(def FileNames "FileNames[] lists all files in the current working directory. \nFileNames[form] lists all files in the current working directory whose names match the string pattern form. \nFileNames[{form1, form2, …}] lists all files whose names match any of the formi. \nFileNames[All, dir] lists all files in the directory dir.\nFileNames[forms, {dir1, dir2, …}] lists files with names matching forms in any of the directories diri. \nFileNames[forms, dirs, n] includes files that are in subdirectories up to n levels down." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileNames)))
(def FilePrint "FilePrint[\"file\"] prints out the raw textual contents of file.\nFilePrint[\"file\", n] prints out the first n raw textual lines of file.\nFilePrint[\"file\", -n] prints out the last n raw textual lines of file.\nFilePrint[\"file\", m;;n] prints out lines m through n of file.\nFilePrint[\"file\", m;;n;;s] prints out lines m through n of file in steps of s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilePrint)))
(def FileSize "FileSize[file] gives the size of a file as a quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileSize)))
(def FileSystemMap "FileSystemMap[f, root] gives an association whose keys are the names of files in root, and whose values are the results of applying f to the full names of these files. \nFileSystemMap[f, root, n] gives a nested association in which subdirectories down to level n are represented by an association.\nFileSystemMap[f, root, {m, n}] gives a nested association including files in subdirectories from level m down through n.\nFileSystemMap[f, root, lev, r] combines levels to give a nested output association with r levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileSystemMap)))
(def FileSystemScan "FileSystemScan[f, root] evaluates f on all files contained in root.\nFileSystemScan[f, root, n] restricts the operation to directories at level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileSystemScan)))
(def FileSystemTree "FileSystemTree[root] gives a tree whose keys are the names of files in root, and whose data is the full names of these files.\nFileSystemTree[root, levelspec] gives a tree in which files on levels specified by levelspec are represented by a subtree.\nFileSystemTree[root, levelspec, r] combines levels to give a tree with maximum level r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileSystemTree)))
(def FileTemplate "FileTemplate[\"file\"] yields a TemplateObject expression that represents a file template to be applied using functions like TemplateApply.\nFileTemplate[src] uses File[…], URL[…], or CloudObject[…] as the specification for the file location.\nFileTemplate[form, args] yields a TemplateObject with arguments, suitable for cloud deployment or other evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileTemplate)))
(def FileTemplateApply "FileTemplateApply[template] applies a template, evaluating all template elements it contains, and then writes the result to a temporary file, whose name is returned.\nFileTemplateApply[template, args] applies a template, using args to fill its slots, and then writes the result to a temporary file.\nFileTemplateApply[template, output] applies a template, writing the results to the file represented by output.\nFileTemplateApply[template, args, output] applies a template, using args to fill its slots, and then writes the result to the file represented by output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileTemplateApply)))
(def FileType "FileType[\"file\"] gives the type of a file, typically File, Directory, or None." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FileType)))
(def FilledCurve "FilledCurve[{segment1, segment2, …}] represents a filled curve consisting of segment1 followed by segment2 etc. \nFilledCurve[{component1, component2, …}] represents a list of separate filled component curves component1, component2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilledCurve)))
(def FilledPolarCurve "FilledPolarCurve[r, θ] gives a filled polar curve with radius r as a function of angle θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilledPolarCurve)))
(def FilledTorus "FilledTorus[{x, y, z}, {rinner, router}] represents a filled torus centered at {x, y, z} with inner radius rinner and outer radius router." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilledTorus)))
(def Filling "Filling is an option for ListPlot, Plot, Plot3D, and related functions that specifies what filling to add under points, curves, and surfaces." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Filling)))
(def FillingStyle "FillingStyle is an option for ListPlot, Plot, Plot3D, and related functions that specifies the default style of filling to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FillingStyle)))
(def FillingTransform "FillingTransform[image] gives a version of image with all extended minima filled.\nFillingTransform[image, marker] fills extended minima in regions where at least one corresponding element of marker is nonzero.\nFillingTransform[image, h] fills only extended minima of depth h or less." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FillingTransform)))
(def FilterRules "FilterRules[rules, patt] filters the list rules by picking out only those rules whose left-hand sides match patt.\nFilterRules[rules, {patt1, patt2, …}] picks out rules whose left-hand sides match any of the patti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilterRules)))
(def FilteredEntityClass "FilteredEntityClass[class, f] represents a class of entities where only entities for which the EntityFunction object f yields True are kept.\nFilteredEntityClass[class, prop] represents a class of entities where only entities for which the property prop is True are kept." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FilteredEntityClass)))
(def FinancialBond "FinancialBond[params, ambientparams] gives the value of a financial bond instrument.\nFinancialBond[params, ambientparams, prop] computes the specified property prop." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FinancialBond)))
(def FinancialData "FinancialData[\"name\"] gives the last known price or value for the financial entity specified by \"name\".\nFinancialData[\"name\", start] gives a list of dates and daily closing values for \"name\" from start until the current date.\nFinancialData[\"name\", {start, end}] gives a list of dates and daily closing values for dates from start to end.\nFinancialData[\"name\", {start, end, period}] gives a list of dates and prices for the specified periods lying between start and end.\nFinancialData[\"name\", \"prop\"] gives the value of the specified property for the financial entity \"name\". \nFinancialData[\"name\", \"prop\", {start, end, …}] gives a list of dates and values of a property for a sequence of dates or periods." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FinancialData)))
(def FinancialDerivative "FinancialDerivative[instrument, params, ambientparams] gives the value of the specified financial instrument.\nFinancialDerivative[instrument, params, ambientparams, prop] computes the specified property prop." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FinancialDerivative)))
(def FinancialIndicator "FinancialIndicator[\"ind\", par1, par2, …] represents a financial indicator \"ind\" with parameters par1, par2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FinancialIndicator)))
(def Find "Find[stream, \"text\"] finds the first line in an input stream that contains the specified string. \nFind[stream, {\"text1\", \"text2\", …}] finds the first line that contains any of the specified strings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Find)))
(def FindAnomalies "FindAnomalies[{example1, example2, …}] gives a list of the examplei that are considered anomalous with respect to the other examples.\nFindAnomalies[examples, prop] gives the specified property related to the anomaly computation.\nFindAnomalies[examples, {prop1, prop2, …}] gives the properties propi.\nFindAnomalies[fun, data] finds anomalies in data using the given AnomalyDetectorFunction[…] or LearnedDistribution[…].\nFindAnomalies[fun, data, props] gives properties related to the anomaly computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindAnomalies)))
(def FindArgMax "FindArgMax[f, x] gives the position xmax of a local maximum of f.\nFindArgMax[f, {x, x0}] gives the position xmax of a local maximum of f, found by a search starting from the point x=x0. \nFindArgMax[f, {{x, x0}, {y, y0}, …}] gives the position {xmax, ymax, …} of a local maximum of a function of several variables. \nFindArgMax[{f, cons}, {{x, x0}, {y, y0}, …}] gives the position of a local maximum subject to the constraints cons.\nFindArgMax[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindArgMax)))
(def FindArgMin "FindArgMin[f, x] gives the position xmin of a local minimum of f.\nFindArgMin[f, {x, x0}] gives the position xmin of a local minimum of f, found by a search starting from the point x=x0. \nFindArgMin[f, {{x, x0}, {y, y0}, …}] gives the position {xmin, ymin, …} of a local minimum of a function of several variables. \nFindArgMin[{f, cons}, {{x, x0}, {y, y0}, …}] gives the position of a local minimum subject to the constraints cons.\nFindArgMin[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindArgMin)))
(def FindAstroEvent "FindAstroEvent[etype] gives the date of the next astro event of type etype.\nFindAstroEvent[etype, date] gives the next astro event following the given date.\nFindAstroEvent[etype, date, loc] gives the date of the next astro event as observed from the location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindAstroEvent)))
(def FindChannels "FindChannels[] gives a list of channels in your home area on the channel broker server.\nFindChannels[None] gives a list of your unnamed channels.\nFindChannels[All] gives a list of all channels owned by you.\nFindChannels[form] gives a list of channels in your home area whose names match the string pattern form.\nFindChannels[\"/abspath\"] gives a list of channels whose names match the string pattern \"\\\"/\\!\\(\\*StyleBox[\\\"abspath\\\", \\\"TI\\\"]\\)\\\"\".\nFindChannels[\"mqtts://…\"] gives a list of channels whose names match the specified pattern representing a URL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindChannels)))
(def FindClique "FindClique[g] finds a largest clique in the graph g.\nFindClique[g, n] finds a clique containing at most n vertices.\nFindClique[g, {n}] finds a clique containing exactly n vertices.\nFindClique[g, {nmin, nmax}] finds a clique containing between nmin and nmax vertices.\nFindClique[g, nspec, s] finds at most s cliques.\nFindClique[{g, v}, …] finds cliques that include the vertex v only.\nFindClique[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindClique)))
(def FindClusters "FindClusters[{e1, e2, …}] partitions the ei into clusters of similar elements. \nFindClusters[{e1v1, e2v2, …}] returns the vi corresponding to the ei in each cluster.\nFindClusters[data, n] partitions data into n clusters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindClusters)))
(def FindCookies "FindCookies[] gives a list of all currently set cookies.\nFindCookies[domain] gives a list of cookies associated with the specified domain.\nFindCookies[assoc] gives a list of cookies whose attributes match the specification in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindCookies)))
(def FindCurvePath "FindCurvePath[{{x1, y1}, {x2, y2}, …}] gives an ordering of the {xi, yi} that corresponds to one or more smooth curves." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindCurvePath)))
(def FindCycle "FindCycle[g] finds a cycle in the graph g.\nFindCycle[g, k] finds a cycle of length at most k in the graph g.\nFindCycle[g, {k}] finds a cycle of length exactly k.\nFindCycle[g, {kmin, kmax}] finds a cycle of length between kmin and kmax.\nFindCycle[g, kspec, s] finds at most s cycles.\nFindCycle[{g, v}, …] finds cycles that include the vertex v.\nFindCycle[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindCycle)))
(def FindDevices "FindDevices[] searches for available devices on your computer system.\nFindDevices[form] gives a list of devices in classes whose names match the string pattern form.\nFindDevices[{form1, form2, …}] gives a list of devices in classes whose names match any of the formi.\nFindDevices[forms, n] returns at most n devices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindDevices)))
(def FindDistribution "FindDistribution[data] finds a simple functional form to fit the distribution of data.\nFindDistribution[data, n] finds up to n best distributions.\nFindDistribution[data, n, prop] returns up to n best distributions associated with property prop.\nFindDistribution[data, n, {prop1, prop2, …}] returns up to n best distributions associated with properties prop1, prop2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindDistribution)))
(def FindDistributionParameters "FindDistributionParameters[data, dist] finds the parameter estimates for the distribution dist from data.\nFindDistributionParameters[data, dist, {{p, p0}, {q, q0}, …}] finds the parameters p, q, … with starting values p0, q0, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindDistributionParameters)))
(def FindDivisions "FindDivisions[{xmin, xmax}, n] finds a list of about n \"nice\" numbers that divide the interval around xmin to xmax into equally spaced parts. \nFindDivisions[{xmin, xmax, dx}, n] makes the parts always have lengths that are integer multiples of dx. \nFindDivisions[{xmin, xmax}, {n1, n2, …}] finds successive subdivisions into about n1, n2, … parts. \nFindDivisions[{xmin, xmax, {dx1, dx2, …}}, {n1, n2, …}] uses spacings that are forced to be multiples of dx1, dx2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindDivisions)))
(def FindEdgeColoring "FindEdgeColoring[g] finds a coloring with minimal size for the edges in the graph g.\nFindEdgeColoring[g, {c1, c2, …}] finds a coloring {c1, c2, …, ck} for the edges in the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEdgeColoring)))
(def FindEdgeCover "FindEdgeCover[g] finds an edge cover of the graph g with a minimum number of edges.\nFindEdgeCover[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEdgeCover)))
(def FindEdgeCut "FindEdgeCut[g] finds a smallest edge cut of the graph g.\nFindEdgeCut[g, s, t] finds a smallest s-t edge cut of the graph g.\nFindEdgeCut[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEdgeCut)))
(def FindEdgeIndependentPaths "FindEdgeIndependentPaths[g, s, t, k] finds at most k edge-independent paths from vertex s to vertex t in the graph g.\nFindEdgeIndependentPaths[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEdgeIndependentPaths)))
(def FindEquationalProof "FindEquationalProof[thm, axms] tries to find an equational proof of the symbolic theorem thm using the axioms axms.\nFindEquationalProof[thm, \"theory\"] tries to find a proof of thm using the specified named axiomatic theory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEquationalProof)))
(def FindEulerianCycle "FindEulerianCycle[g] finds an Eulerian cycle in the graph g.\nFindEulerianCycle[g, k] finds at most k Eulerian cycles.\nFindEulerianCycle[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindEulerianCycle)))
(def FindExternalEvaluators "FindExternalEvaluators[] finds installed external evaluators that can be used with ExternalEvaluate, returning a dataset of the results found.\nFindExternalEvaluators[\"sys\"] finds only external evaluators for language or system sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindExternalEvaluators)))
(def FindFaces "FindFaces[image] attempts to find human faces in image and returns a list of bounding boxes.\nFindFaces[image, prop] returns the specified property prop for each detected face.\nFindFaces[image, crit, prop] finds faces that satisfy the criterion crit.\nFindFaces[video, …] finds faces in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindFaces)))
(def FindFile "FindFile[name] finds the file with the specified name that would be loaded by Get[name] and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindFile)))
(def FindFit "FindFit[data, expr, pars, vars] finds numerical values of the parameters pars that make expr give a best fit to data as a function of vars. \nFindFit[data, {expr, cons}, pars, vars] finds a best fit subject to the parameter constraints cons.\nFindFit[data, exprspec, pars, vars, \"prop\"]  specifies what fit property prop should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindFit)))
(def FindFormula "FindFormula[data] finds a pure function that approximates data.\nFindFormula[data, x] finds a symbolic function of the variable x that approximates data.\nFindFormula[data, x, n] finds up to n functions that approximate data.\nFindFormula[data, x, n, prop] returns up to n best functions associated with property prop.\nFindFormula[data, x, n, {prop1, prop2, …}] returns up to n best functions associated with properties prop1, prop2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindFormula)))
(def FindFundamentalCycles "FindFundamentalCycles[g] finds fundamental cycles of the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindFundamentalCycles)))
(def FindGeneratingFunction "FindGeneratingFunction[{a0, a1, …}, x] attempts to find a simple generating function in x whose n ^th series coefficient is an.\nFindGeneratingFunction[{{n0, a0}, {n1, a1}, …}, x] attempts to find a simple generating function whose ni ^th series coefficient is ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGeneratingFunction)))
(def FindGeoLocation "FindGeoLocation[] attempts to find the current geo location of your computer.\nFindGeoLocation[\"ip\"] gives an estimate of the geo location associated with the IP address given.\nFindGeoLocation[\"address\"] attempts to find the geo location associated with the street address given.\nFindGeoLocation[entity] gives the geo location associated with the specified entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGeoLocation)))
(def FindGeometricConjectures "FindGeometricConjectures[scene] finds conjectures that appear to hold for the GeometricScene object scene and adds these conjectures to the scene object.\nFindGeometricConjectures[{scene1, scene2, …}] finds conjectures that appear to hold for all instances scenei of a geometric scene and returns a combined scene with the conjectures added.\nFindGeometricConjectures[scenes, patt] adds only conjectures that match the pattern patt.\nFindGeometricConjectures[scenes, patt, n] adds only up to n conjectures." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGeometricConjectures)))
(def FindGeometricTransform "FindGeometricTransform[pts1, pts2] finds a geometric transformation that aligns positions specified by pts2 with pts1, returning the alignment error together with the transformation function.\nFindGeometricTransform[ref, {pts1, pts2, …}] finds geometric transformations that align each of the ptsi with ref. \nFindGeometricTransform[{pts1, pts2, …}] finds geometric transformations that align each of the ptsi with pts1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGeometricTransform)))
(def FindGraphCommunities "FindGraphCommunities[g] finds communities in the graph g.\nFindGraphCommunities[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGraphCommunities)))
(def FindGraphIsomorphism "FindGraphIsomorphism[g1, g2] finds an isomorphism that maps the graph g1 to g2 by renaming vertices.\nFindGraphIsomorphism[g1, g2, n] finds at most n isomorphisms. \nFindGraphIsomorphism[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGraphIsomorphism)))
(def FindGraphPartition "FindGraphPartition[g] gives a partition of vertices of the graph g.\nFindGraphPartition[g, k] gives a partition of vertices into k approximately equal-size parts.\nFindGraphPartition[g, {n1, …, nk}] gives a partition of vertices into parts with sizes n1, …, nk.\nFindGraphPartition[g, {α1, …, αk}] gives a partition of vertices into parts with approximate size proportions α1, …, αk.\nFindGraphPartition[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindGraphPartition)))
(def FindHamiltonianCycle "FindHamiltonianCycle[g] finds a Hamiltonian cycle in the graph g.\nFindHamiltonianCycle[g, k] finds at most k Hamiltonian cycles.\nFindHamiltonianCycle[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindHamiltonianCycle)))
(def FindHamiltonianPath "FindHamiltonianPath[g] finds a Hamiltonian path in the graph g with the smallest total length.\nFindHamiltonianPath[g, s, t] finds a Hamiltonian path with the smallest total length from s to t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindHamiltonianPath)))
(def FindHiddenMarkovStates "FindHiddenMarkovStates[data, hmm] finds the most likely hidden states of the HiddenMarkovProcess hmm corresponding to the emissions data.\nFindHiddenMarkovStates[data, hmm, crit] uses the given criterion crit to find the hidden states." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindHiddenMarkovStates)))
(def FindImageShapes "FindImageShapes[image, \"model\"] obtains graphic primitives of shapes in an image.\nFindImageShapes[video, …] finds shapes in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindImageShapes)))
(def FindImageText "FindImageText[image] detects text in image and returns a single bounding box.\nFindImageText[image, level] returns a list of bounding boxes at the specified structural level.\nFindImageText[image, level, prop] returns prop for text at the given level.\nFindImageText[video, …] detects text in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindImageText)))
(def FindIndependentEdgeSet "FindIndependentEdgeSet[g] finds an independent edge set of the graph g with a maximum number of edges.\nFindIndependentEdgeSet[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindIndependentEdgeSet)))
(def FindIndependentVertexSet "FindIndependentVertexSet[g] finds an independent vertex set of the graph g with a maximum number of vertices.\nFindIndependentVertexSet[g, n] finds an independent vertex set with at most n vertices.\nFindIndependentVertexSet[g, {n}] finds an independent vertex set with exactly n vertices.\nFindIndependentVertexSet[g, {nmin, nmax}] finds an independent vertex set containing between nmin and nmax vertices.\nFindIndependentVertexSet[g, nspec, s] finds at most s independent vertex sets.\nFindIndependentVertexSet[{g, v}, …] finds independent sets that include the vertex v only.\nFindIndependentVertexSet[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindIndependentVertexSet)))
(def FindInstance "FindInstance[expr, vars] finds an instance of vars that makes the statement expr be True. \nFindInstance[expr, vars, dom] finds an instance over the domain dom. Common choices of dom are Complexes, Reals, Integers, and Booleans. \nFindInstance[expr, vars, dom, n] finds n instances." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindInstance)))
(def FindIntegerNullVector "FindIntegerNullVector[{x1, x2, …, xn}] finds a list of integers ai such that a1 x1+a2 x2+⋯+an xn0. \nFindIntegerNullVector[{x1, x2, …, xn}, d] finds a list of integers ai with {a1, …, an}≤d such that a1 x1+a2 x2+⋯+an xn0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindIntegerNullVector)))
(def FindIsomers "FindIsomers[chem] returns a list of molecules with the same chemical formula as chem.\nFindIsomers[chem, form] finds isomers of chem and returns them in the given form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindIsomers)))
(def FindIsomorphicSubgraph "FindIsomorphicSubgraph[g1, g2] finds a subgraph of g1 that is isomorphic to g2.\nFindIsomorphicSubgraph[g1, g2, n] finds at most n subgraphs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindIsomorphicSubgraph)))
(def FindKClan "FindKClan[g, k] finds a largest k-clan in the graph g.\nFindKClan[g, k, n] finds a k-clan containing at most n vertices.\nFindKClan[g, k, {n}] finds a k-clan containing exactly n vertices.\nFindKClan[g, k, {nmin, nmax}] finds a k-clan containing between nmin and nmax vertices.\nFindKClan[g, k, nspec, s] finds at most s k-clans.\nFindKClan[{g, v}, k, …] finds k-clans that include the vertex v only.\nFindKClan[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindKClan)))
(def FindKClique "FindKClique[g, k] finds a largest k-clique in the graph g.\nFindKClique[g, k, n] finds a k-clique containing at most n vertices.\nFindKClique[g, k, {n}] finds a k-clique containing exactly n vertices.\nFindKClique[g, k, {nmin, nmax}] finds a k-clique containing between nmin and nmax vertices.\nFindKClique[g, k, nspec, s] finds at most s k-cliques.\nFindKClique[{g, v}, k, …] finds k-cliques that include the vertex v only.\nFindKClique[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindKClique)))
(def FindKClub "FindKClub[g, k] finds a largest k-club in the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindKClub)))
(def FindKPlex "FindKPlex[g, k] finds a largest k-plex in the graph g.\nFindKPlex[g, k, n] finds a k-plex containing at most n vertices.\nFindKPlex[g, k, {n}] finds a k-plex containing exactly n vertices.\nFindKPlex[g, k, {nmin, nmax}] finds a k-plex containing between nmin and nmax vertices.\nFindKPlex[g, k, nspec, s] finds at most s k-plexes.\nFindKPlex[{g, v}, k, …] finds k-plexes that include the vertex v only.\nFindKPlex[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindKPlex)))
(def FindLibrary "FindLibrary[lib] finds a dynamic library that can be loaded by LibraryFunctionLoad." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindLibrary)))
(def FindLinearRecurrence "FindLinearRecurrence[list] finds if possible the minimal linear recurrence that generates list.\nFindLinearRecurrence[list, d] finds if possible the linear recurrence of maximum order d that generates list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindLinearRecurrence)))
(def FindList "FindList[\"file\", \"text\"] gives a list of lines in the file that contain the specified string. \nFindList[\"file\", {\"text1\", \"text2\", …}] gives a list of all lines that contain any of the specified strings. \nFindList[{\"file1\", …}, …] gives a list of lines containing the specified strings in any of the filei. \nFindList[files, text, n] includes only the first n lines found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindList)))
(def FindMatchingColor "FindMatchingColor[image, color] returns a color similar to the color that is present in image.\nFindMatchingColor[image, {color1, color2, …}] returns a list of colors matching each colori.\nFindMatchingColor[{image1, image2, …}, {color1, color2, …}] returns lists of matching colors for all imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMatchingColor)))
(def FindMatrixGameStrategies "FindMatrixGameStrategies[mgame] finds an optimal strategy profile (Nash equilibrium) for the MatrixGame mgame. \nFindMatrixGameStrategies[mgame, spec] finds strategy profiles following the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMatrixGameStrategies)))
(def FindMaxValue "FindMaxValue[f, x] gives the value at a local maximum of f.\nFindMaxValue[f, {x, x0}] gives the value at a local maximum of f, found by a search starting from the point x=x0. \nFindMaxValue[f, {{x, x0}, {y, y0}, …}] gives the value at a local maximum of a function of several variables. \nFindMaxValue[{f, cons}, {{x, x0}, {y, y0}, …}] gives the value at a local maximum subject to the constraints cons.\nFindMaxValue[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMaxValue)))
(def FindMaximum "FindMaximum[f, x] searches for a local maximum in f, starting from an automatically selected point.\nFindMaximum[f, {x, x0}] searches for a local maximum in f, starting from the point x=x0. \nFindMaximum[f, {{x, x0}, {y, y0}, …}] searches for a local maximum in a function of several variables. \nFindMaximum[{f, cons}, {{x, x0}, {y, y0}, …}] searches for a local maximum subject to the constraints cons.\nFindMaximum[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMaximum)))
(def FindMaximumCut "FindMaximumCut[g] gives the maximum cut of the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMaximumCut)))
(def FindMaximumFlow "FindMaximumFlow[g, s, t] finds the maximum flow between source vertex s and target vertex t in a graph g.\nFindMaximumFlow[m, s, t] finds the maximum flow between vertex indices s and t in a graph with edge capacity matrix m.\nFindMaximumFlow[data, {s1, …}, {t1, …}] finds the maximum flow between multi-sources s1, … and multi-targets t1, ….\nFindMaximumFlow[data, source, target, \"property\"] returns the value of \"property\".\nFindMaximumFlow[{v->w, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMaximumFlow)))
(def FindMeshDefects "FindMeshDefects[mreg] finds defects in the mesh region mreg.\nFindMeshDefects[mreg, {def1, …}] finds only the specified type of defects def1, ….\nFindMeshDefects[mreg, defects, format] formats the results according to format specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMeshDefects)))
(def FindMinValue "FindMinValue[f, x] gives the value at a local minimum of f.\nFindMinValue[f, {x, x0}] gives the value at a local minimum of f, found by a search starting from the point x=x0. \nFindMinValue[f, {{x, x0}, {y, y0}, …}] gives the value at a local minimum of a function of several variables. \nFindMinValue[{f, cons}, {{x, x0}, {y, y0}, …}] gives the value at a local minimum subject to the constraints cons.\nFindMinValue[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMinValue)))
(def FindMinimum "FindMinimum[f, x] searches for a local minimum in f, starting from an automatically selected point.\nFindMinimum[f, {x, x0}] searches for a local minimum in f, starting from the point x=x0. \nFindMinimum[f, {{x, x0}, {y, y0}, …}] searches for a local minimum in a function of several variables. \nFindMinimum[{f, cons}, {{x, x0}, {y, y0}, …}] searches for a local minimum subject to the constraints cons.\nFindMinimum[{f, cons}, {x, y, …}] starts from a point within the region defined by the constraints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMinimum)))
(def FindMinimumCostFlow "FindMinimumCostFlow[g, {sd1, sd2, …}] finds the minimum cost flow in the graph g with sd1, sd2, … vertex supplies or demands.\nFindMinimumCostFlow[g, s, t] finds the minimum cost maximum flow between source vertex s and target vertex t in a graph g.\nFindMinimumCostFlow[g, s, t, d] finds the minimum cost flow between source s and target t, with the required flow d.\nFindMinimumCostFlow[m, …] finds the minimum cost flow in a graph with cost matrix m.\nFindMinimumCostFlow[data, …, \"property\"] returns the value of \"property\".\nFindMinimumCostFlow[{v->w, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMinimumCostFlow)))
(def FindMinimumCut "FindMinimumCut[g] gives the minimum cut of the graph g.\nFindMinimumCut[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMinimumCut)))
(def FindMoleculeSubstructure "FindMoleculeSubstructure[mol, patt] finds a mapping between the atom indices in mol and an occurrence of patt in mol.\nFindMoleculeSubstructure[mol, patt, All] finds all occurrences of patt in mol and returns all mappings.\nFindMoleculeSubstructure[mol, patt, n] finds at most n mappings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindMoleculeSubstructure)))
(def FindPath "FindPath[g, s, t] finds a path between vertex s and vertex t in the graph g.\nFindPath[g, s, t, k] finds a path of length at most k between vertex s and vertex t in the graph g.\nFindPath[g, s, t, {k}] finds a path of length exactly k.\nFindPath[g, s, t, {kmin, kmax}] finds a path of length between kmin and kmax.\nFindPath[g, s, t, kspec, n] finds at most n paths.\nFindPath[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPath)))
(def FindPeaks "FindPeaks[list] gives positions and values of the detected peaks in list.\nFindPeaks[list, σ] finds peaks that survive Gaussian blurring up to scale σ.\nFindPeaks[list, σ, s] finds peaks with minimum sharpness s.\nFindPeaks[list, σ, s, t] finds only peaks with values greater than t.\nFindPeaks[list, σ, {s, σs}, {t, σt}] uses different scales for thresholding sharpness and value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPeaks)))
(def FindPermutation "FindPermutation[expr] gives a permutation that produces expr by permuting Sort[expr].\nFindPermutation[expr1, expr2] gives a permutation that converts expr1 to expr2 for two expressions that differ only in the order of their arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPermutation)))
(def FindPlanarColoring "FindPlanarColoring[g] finds a coloring with minimal size for the faces of the planar graph g.\nFindPlanarColoring[g, {c1, c2, …}] finds a coloring {c1, c2, …, ck} for the faces in the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPlanarColoring)))
(def FindPointProcessParameters "FindPointProcessParameters[pdata, pproc] estimates the parameters of the point process pproc from point data pdata.\nFindPointProcessParameters[pdata, pproc, {{p, p0}, {q, q0}, …}] estimates the parameters p, q, … with starting values p0, q0, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPointProcessParameters)))
(def FindPostmanTour "FindPostmanTour[g] finds a Chinese postman tour in the graph g of minimal length.\nFindPostmanTour[g, k] finds at most k Chinese postman tours. \nFindPostmanTour[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindPostmanTour)))
(def FindProcessParameters "FindProcessParameters[data, proc] finds the parameter estimates for the process proc from data.\nFindProcessParameters[data, proc, {{p, p0}, {q, q0}, …}] finds the parameters p, q, … with starting values p0, q0, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindProcessParameters)))
(def FindRegionTransform "FindRegionTransform[reg1, reg2] gives the transformation function that maps the region reg1 to the region reg2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindRegionTransform)))
(def FindRepeat "FindRepeat[list] finds the minimal sublist or subarray that repeats to give list.\nFindRepeat[list, n] requires that the sublist be repeated at least n times in list.\nFindRepeat[list, {n1, n2, …}] requires ni to repeat at level i in list.\nFindRepeat[\"string\"] finds the minimal substring that repeats to give string.\nFindRepeat[\"string\", n] requires that the substring be repeated at least n times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindRepeat)))
(def FindRoot "FindRoot[f, {x, x0}] searches for a numerical root of f, starting from the point x=x0.\nFindRoot[lhs==rhs, {x, x0}] searches for a numerical solution to the equation lhs==rhs. \nFindRoot[{f1, f2, …}, {{x, x0}, {y, y0}, …}] searches for a simultaneous numerical root of all the fi.\nFindRoot[{eqn1, eqn2, …}, {{x, x0}, {y, y0}, …}] searches for a numerical solution to the simultaneous equations eqni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindRoot)))
(def FindSequenceFunction "FindSequenceFunction[{a1, a2, a3, …}] attempts to find a simple function that yields the sequence an when given successive integer arguments.\nFindSequenceFunction[{{n1, a1}, {n2, a2}, …}] attempts to find a simple function that yields ai when given argument ni.\nFindSequenceFunction[n1a1, n2a2, …] gives a function that yields ai when given argument ni.\nFindSequenceFunction[{n1a1, n2a2, …}] gives a function that yields ai when given argument ni.\nFindSequenceFunction[list, n] gives the function applied to n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindSequenceFunction)))
(def FindSettings "FindSettings is a global option that specifies settings for the Find dialog box." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindSettings)))
(def FindShortestPath "FindShortestPath[g, s, t] finds the shortest path from source vertex s to target vertex t in the graph g.\nFindShortestPath[g, s, All] generates a ShortestPathFunction[…] that can be applied repeatedly to different t.\nFindShortestPath[g, All, t] generates a ShortestPathFunction[…] that can be applied repeatedly to different s.\nFindShortestPath[g, All, All] generates a ShortestPathFunction[…] that can be applied to different s and t.\nFindShortestPath[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindShortestPath)))
(def FindShortestTour "FindShortestTour[{v1, v2, …}] attempts to find an ordering of the vi that minimizes the total distance on a tour that visits all the vi once.\nFindShortestTour[graph] attempts to find an ordering of the vertices in graph that minimizes the total length when visiting each vertex once.\nFindShortestTour[{v1, v2, …}, j, k] finds an ordering of the vi that minimizes the total distance on a path from vj to vk.\nFindShortestTour[graph, s, t] finds an ordering of the vertices that minimizes the total length on a path from s to t.\nFindShortestTour[{vw, …}, …] uses rules vw to specify the graph g. \nFindShortestTour[dataprop, …] gives the property prop for data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindShortestTour)))
(def FindSpanningTree "FindSpanningTree[{v1, v2, …, vn}] finds a spanning tree that minimizes the total distance between the vi.\nFindSpanningTree[g] finds a spanning tree of the graph g that minimizes the total distances between vertices.\nFindSpanningTree[{g, v}, …] finds a spanning tree of the connected component of g that includes the vertex v. \nFindSpanningTree[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindSpanningTree)))
(def FindSubgraphIsomorphism "FindSubgraphIsomorphism[g1, g2] finds a subgraph isomorphism that maps the graph g1 to a subgraph of g2 by renaming vertices.\nFindSubgraphIsomorphism[g1, g2, n] finds at most n subgraph isomorphisms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindSubgraphIsomorphism)))
(def FindSystemModelEquilibrium "FindSystemModelEquilibrium[model] searches for an equilibrium to the model model.\nFindSystemModelEquilibrium[model, {{{x1, x10}, …}, {{u1, u10}, …}, {{y1, y10}, …}}] searches for an equilibrium, starting from the points xi=x i0, ui=u i0 and yi=y i0.\nFindSystemModelEquilibrium[model, {x1v1, …}, …] searches for an equilibrium, with variable xi constrained to have the value vi etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindSystemModelEquilibrium)))
(def FindTextualAnswer "FindTextualAnswer[text, \"question\"] gives the substring of text that best appears to answer question.\nFindTextualAnswer[text, \"question\", n] gives a list of up to n answers that appear most probable.\nFindTextualAnswer[text, \"question\", n, prop] gives the specified property for each answer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindTextualAnswer)))
(def FindThreshold "FindThreshold[image] finds a global threshold value that partitions the intensity values in image into two intervals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindThreshold)))
(def FindTransientRepeat "FindTransientRepeat[list, n] returns a pair of lists {transient, repeat} where the elements of repeat occur successively at least n times after the elements of the transient part of list.\nFindTransientRepeat[string, n] returns a pair of strings {transient, repeat}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindTransientRepeat)))
(def FindTreeGameStrategies "FindTreeGameStrategies[tgame] finds an optimal strategy profile for the TreeGame tgame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindTreeGameStrategies)))
(def FindVertexColoring "FindVertexColoring[g] finds a coloring with minimal size for the vertices in the graph g. \nFindVertexColoring[g, {c1, c2, …}] finds a coloring {c1, c2, …, ck} for the vertices in the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindVertexColoring)))
(def FindVertexCover "FindVertexCover[g] finds a vertex cover of the graph g with a minimum number of vertices.\nFindVertexCover[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindVertexCover)))
(def FindVertexCut "FindVertexCut[g] finds a smallest vertex cut of the graph g.\nFindVertexCut[g, s, t] finds a smallest s-t vertex cut of the graph g.\nFindVertexCut[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindVertexCut)))
(def FindVertexIndependentPaths "FindVertexIndependentPaths[g, s, t, k] finds at most k vertex-independent paths from vertex s to vertex t in the graph g.\nFindVertexIndependentPaths[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FindVertexIndependentPaths)))
(def FinishDynamic "FinishDynamic[] finishes updating and displaying all currently visible Dynamic objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FinishDynamic)))
(def FiniteAbelianGroupCount "FiniteAbelianGroupCount[n] gives the number of finite Abelian groups of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteAbelianGroupCount)))
(def FiniteField "FiniteField[p, d] gives a finite field with p^d elements.\nFiniteField[p, f] gives the finite field p[α]/〈f(α)〉, where f(α) is an irreducible polynomial in p[α].\nFiniteField[p, …, rep] uses field element representation rep, either \"Polynomial\" or \"Exponential\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteField)))
(def FiniteFieldElement "FiniteFieldElement[ff, ind] gives the element of the finite field ff with index ind.\nFiniteFieldElement[ff, {c0, c1, c2, …}] gives the element c0+c1 θ+c2 θ^2+… of the finite field ff, where θ is the field generator of ff." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldElement)))
(def FiniteFieldElementNorm "FiniteFieldElementNorm[a] gives the absolute norm of the finite field element a.\nFiniteFieldElementNorm[a, k] gives the norm of a relative to the p^k-element subfield of the ambient field of a.\nFiniteFieldElementNorm[a, emb] gives the norm of a relative to the finite field embedding emb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldElementNorm)))
(def FiniteFieldElementPrimitiveQ "FiniteFieldElementPrimitiveQ[a] tests whether a is a primitive element of its ambient field." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldElementPrimitiveQ)))
(def FiniteFieldElementTrace "FiniteFieldElementTrace[a] gives the absolute trace of the finite field element a.\nFiniteFieldElementTrace[a, k] gives the trace of a relative to the p^k-element subfield of the ambient field of a.\nFiniteFieldElementTrace[a, emb] gives the trace of a relative to the finite field embedding emb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldElementTrace)))
(def FiniteFieldEmbedding "FiniteFieldEmbedding[ff1, ff2] gives an embedding of the finite field ff1 in the finite field ff2.\nFiniteFieldEmbedding[e1e2] represents the embedding of the ambient field of e1 in the ambient field of e2, which maps e1 to e2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldEmbedding)))
(def FiniteFieldIndex "FiniteFieldIndex[u] gives the index of the FiniteFieldElement object u." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteFieldIndex)))
(def FiniteGroupCount "FiniteGroupCount[n] gives the number of finite groups of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteGroupCount)))
(def FiniteGroupData "FiniteGroupData[name, \"property\"] gives the value of the specified property for the finite group specified by name.\nFiniteGroupData[\"class\"] gives a list of finite groups in the specified class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FiniteGroupData)))
(def First "First[expr] gives the first element in expr. \nFirst[expr, def] gives the first element if it exists, or def otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote First)))
(def FirstCase "FirstCase[{e1, e2, …}, pattern] gives the first ei to match pattern, or Missing[\"NotFound\"] if none matching pattern is found. \nFirstCase[{e1, …}, patternrhs] gives the value of rhs corresponding to the first ei to match pattern.\nFirstCase[expr, pattern, default] gives default if no element matching pattern is found. \nFirstCase[expr, pattern, default, levelspec] finds only objects that appear on levels specified by levelspec. \nFirstCase[pattern] represents an operator form of FirstCase that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FirstCase)))
(def FirstPassageTimeDistribution "FirstPassageTimeDistribution[mproc, f] represents the distribution of times for the Markov process mproc to pass from the initial state to final states f for the first time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FirstPassageTimeDistribution)))
(def FirstPosition "FirstPosition[expr, pattern] gives the position of the first element in expr that matches pattern, or Missing[\"NotFound\"] if no such element is found.\nFirstPosition[expr, pattern, default] gives default if no element matching pattern is found.\nFirstPosition[expr, pattern, default, levelspec] finds only objects that appear on levels specified by levelspec. \nFirstPosition[pattern] represents an operator form of FirstPosition that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FirstPosition)))
(def FischerGroupFi22 "FischerGroupFi22[] represents the sporadic simple Fischer group Fi22." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FischerGroupFi22)))
(def FischerGroupFi23 "FischerGroupFi23[] represents the sporadic simple Fischer group Fi23." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FischerGroupFi23)))
(def FischerGroupFi24Prime "FischerGroupFi24Prime[] represents the sporadic simple Fischer group Fi_24^′." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FischerGroupFi24Prime)))
(def FisherHypergeometricDistribution "FisherHypergeometricDistribution[n, nsucc, ntot, w] represents a Fisher noncentral hypergeometric distribution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FisherHypergeometricDistribution)))
(def FisherRatioTest "FisherRatioTest[data] tests whether the variance of data is 1. \nFisherRatioTest[{data1, data2}] tests whether the variances of data1 and data2 are equal.\nFisherRatioTest[dspec, σ_0^2] tests a dispersion measure against σ_0^2.\nFisherRatioTest[dspec, σ_0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FisherRatioTest)))
(def FisherZDistribution "FisherZDistribution[n, m] represents a Fisher z distribution with n numerator and m denominator degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FisherZDistribution)))
(def Fit "Fit[data, {f1, …, fn}, {x, y, …}] finds a fit a1⁢f1+…+an⁢fn to a list of data for functions f1, …, fn of variables {x, y, …}. \nFit[{m, v}] finds a fit vector a that minimizes ||m.a-v|| for a design matrix m.\nFit[…, \"prop\"] specifies what fit property prop should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Fit)))
(def FitRegularization "FitRegularization is an option for Fit and FindFit that specifies a regularization for fitting a model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FitRegularization)))
(def FittedModel "FittedModel[…] represents the symbolic fitted model obtained from functions like LinearModelFit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FittedModel)))
(def FixedOrder "FixedOrder[p1, p2, …] is a grammar rules pattern object that represents a sequence of elements matching p1, p2, …, in the fixed order given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FixedOrder)))
(def FixedPoint "FixedPoint[f, expr] starts with expr, then applies f repeatedly until the result no longer changes.\nFixedPoint[f, expr, n] stops after at most n steps." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FixedPoint)))
(def FixedPointList "FixedPointList[f, expr] generates a list giving the results of applying f repeatedly, starting with expr, until the results no longer change.\nFixedPointList[f, expr, n] stops after at most n steps." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FixedPointList)))
(def Flat "Flat is an attribute that can be assigned to a symbol f to indicate that all expressions involving nested functions f should be flattened out. This property is accounted for in pattern matching." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Flat)))
(def FlatShading "FlatShading[] is a three-dimensional graphics directive that specifies that faces of polygons and other filled graphics objects are to be drawn to reflect as a flat surface.\nFlatShading[d] uses the attenuation factor d for the diffuse light.\nFlatShading[d, a] uses the attenuation factor a for the ambient light." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlatShading)))
(def FlatTopWindow "FlatTopWindow[x] represents an exact flat top window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlatTopWindow)))
(def Flatten "Flatten[list] flattens out nested lists. \nFlatten[list, n] flattens to level n. \nFlatten[list, n, h] flattens subexpressions with head h. \nFlatten[list, {{s11, s12, …}, {s21, s22, …}, …}] flattens list by combining all levels sij to make each level i in the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Flatten)))
(def FlattenAt "FlattenAt[list, n] flattens out a sublist that appears as the n^th element of list. If n is negative, the position is counted from the end. \nFlattenAt[expr, {i, j, …}] flattens out the part of expr at position {i, j, …}. \nFlattenAt[expr, {{i1, j1, …}, {i2, j2, …}, …}] flattens out parts of expr at several positions.\nFlattenAt[pos] represents an operator form of FlattenAt that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlattenAt)))
(def FlattenLayer "FlattenLayer[] represents a net layer that flattens any input array into a vector.\nFlattenLayer[n] represents a net layer that flattens its input to level n.\nFlattenLayer[{{s11, s12, …}, {s21, s22, …}, …}] represents a net layer that flattens its input by combining all levels sij to make each level i in the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlattenLayer)))
(def FlightData "FlightData[spec, options] returns a subset of properties for a flight or selection of flights with specifications spec.\nFlightData[spec, prop, options] returns the value of the property prop for specifications spec.\nFlightData[spec, prop, datespec, options] returns the value of the property prop for a specific time or time range datespec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlightData)))
(def FlipView "FlipView[{expr1, expr2}] represents an object which flips between displaying expr1 and expr2 each time it is clicked.\nFlipView[{expr1, expr2, …}] cyclically flips through successive expri.\nFlipView[{expr1, expr2, …}, i] makes expri be the object currently displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlipView)))
(def Floor "Floor[x] gives the greatest integer less than or equal to x. \nFloor[x, a] gives the greatest multiple of a less than or equal to x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Floor)))
(def FlowPolynomial "FlowPolynomial[g, k] gives the flow polynomial of the graph g.\nFlowPolynomial[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FlowPolynomial)))
(def FluidFlowPDEComponent "FluidFlowPDEComponent[vars, pars] yields a flow PDE term with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FluidFlowPDEComponent)))
(def Fold "Fold[f, x, list] gives the last element of FoldList[f, x, list].\nFold[f, list] is equivalent to Fold[f, First[list], Rest[list]].\nFold[f] represents an operator form of Fold that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Fold)))
(def FoldList "FoldList[f, x, {a, b, …}] gives {x, f[x, a], f[f[x, a], b], …}. \nFoldList[f, {a, b, c, …}] gives {a, f[a, b], f[f[a, b], c], …}.\nFoldList[f] represents an operator form of FoldList that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoldList)))
(def FoldPair "FoldPair[f, y0, list] gives the last element of FoldPairList[f, y0, list].\nFoldPair[f, y0, list, g] gives the last element of FoldPairList[f, y0, list, g].\nFoldPair[f, {a0, a1, a2, …}] is equivalent to FoldPair[f, a0, {a1, a2, …}]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoldPair)))
(def FoldPairList "FoldPairList[f, y0, {a1, a2, …}] gives the list of successive xi obtained by applying f to pairs of the form {y i-1, ai}, where at each step f returns {xi, yi}.\nFoldPairList[f, y0, list, g] gives the list of successive values of g[{xi, yi}].\nFoldPairList[f, {a0, a1, a2, …}] is equivalent to FoldPairList[f, a0, {a1, a2, …}]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoldPairList)))
(def FoldWhile "FoldWhile[f, x, {a1, a2, …}, test] returns the first expression f[… f[f[x, a1], a2]…, ak] to which applying test does not yield True.\nFoldWhile[f, list, test] is equivalent to FoldWhile[f, First[list], Rest[list], test].\nFoldWhile[f, x, {a1, a2, …}, test, m] supplies the most recent m results as arguments for test at each step.\nFoldWhile[f, x, {a1, a2, …}, test, All] supplies all results so far as arguments for test at each step. \nFoldWhile[f, x, {a1, a2, …}, test, m, n] returns the result after applying f an extra n times after test fails.\nFoldWhile[f, x, {a1, a2, …}, test, m, -n] returns the result found when f had been applied n fewer times.\nFoldWhile[f, test] represents an operator form of FoldWhile that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoldWhile)))
(def FoldWhileList "FoldWhileList[f, x, {a1, a2, …}, test] returns {x, f[x, a1], f[f[x, a1], a2], …}, repeatedly applying f with subsequent values ai until applying test to the result does not yield True.\nFoldWhileList[f, list, test] is equivalent to FoldWhileList[f, First[list], Rest[list], test].\nFoldWhileList[f, x, {a1, a2, …}, test, m] supplies the most recent m results as arguments for test at each step.\nFoldWhileList[f, x, {a1, a2, …}, test, All] supplies all results so far as arguments for test at each step.\nFoldWhileList[f, x, {a1, a2, …}, test, m, n] returns n additional results by applying f an extra n times after test fails.\nFoldWhileList[f, x, {a1, a2, …}, test, m, -n] returns n fewer results.\nFoldWhileList[f, test] represents an operator form of FoldWhileList that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoldWhileList)))
(def FollowRedirects "FollowRedirects is an option for URLRead and related functions that specifies whether to follow HTTP redirects when retrieving a URL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FollowRedirects)))
(def FontColor "FontColor is an option for Style, Cell, and related constructs that specifies the default color in which to render text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontColor)))
(def FontFamily "FontFamily is an option for Style and Cell that specifies the font family in which text should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontFamily)))
(def FontSize "FontSize is an option for Style and Cell that specifies the default size in printer's points of the font in which to render text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontSize)))
(def FontSlant "FontSlant is an option for Style, Cell, and related constructs that specifies how slanted characters in text should be." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontSlant)))
(def FontSubstitutions "FontSubstitutions is a global option that gives a list of substitutions to try for font family names." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontSubstitutions)))
(def FontTracking "FontTracking is an option for Style and Cell that specifies how condensed or expanded you want the font in which text is rendered to be." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontTracking)))
(def FontVariations "FontVariations is an option for Style, Cell, and related constructs that specifies what font variations should be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontVariations)))
(def FontWeight "FontWeight is an option for Style, Cell, and related constructs that specifies how heavy the characters in a font should be." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FontWeight)))
(def For "For[start, test, incr, body] executes start, then repeatedly evaluates body and incr until test fails to give True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote For)))
(def ForAll "ForAll[x, expr] represents the statement that expr is True for all values of x. \nForAll[x, cond, expr] states that expr is True for all x satisfying the condition cond. \nForAll[{x1, x2, …}, expr] states that expr is True for all values of all the xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForAll)))
(def ForAllType "ForAllType[x, type] represents a type parameterized by x.\nForAllType[x, cond, type] represents a type satisfying cond.\nForAllType[{x1, x1, …}, cond, type] represents a type with multiple parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForAllType)))
(def ForceVersionInstall "ForceVersionInstall is an option to PacletInstall and PacletInstallSubmit that specifies whether an older version of a paclet is allowed to be installed if a newer version is already installed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForceVersionInstall)))
(def ForeignCallback "ForeignCallback[…] represents a foreign callback that can be called from external libraries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForeignCallback)))
(def ForeignFunction "ForeignFunction[args] represents a function that has been loaded from a library." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForeignFunction)))
(def ForeignFunctionLoad "ForeignFunctionLoad[lib, fun, {argtype1, argtype2, …}rettype] loads the function fun with the specified argument and output types from the library lib.\nForeignFunctionLoad[ptr, {argtype1, argtype2, …}rettype] creates a foreign function from the function pointer ptr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForeignFunctionLoad)))
(def ForeignPointerLookup "ForeignPointerLookup[lib, fun] returns the pointer to the function fun in the library lib." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForeignPointerLookup)))
(def FormBox "FormBox[boxes, form] is a low-level box construct which displays as boxes but specifies that rules associated with form should be used to interpret boxes on input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormBox)))
(def FormBoxOptions "FormBoxOptions is an option for cells that specifies settings for FormBox objects within the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormBoxOptions)))
(def FormControl "FormControl[assoc, struct] represents an editable form in a notebook, with structure specified by struct and current values specified by assoc.\nFormControl[Dynamic[x], struct] represents a form in a notebook in which current values are given by the dynamically updated value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormControl)))
(def FormFunction "FormFunction[formspec, func] represents an active form that, when submitted, applies func to the values obtained from the form specified by formspec.\nFormFunction[{name1type1, …}, func] represents an active form with fields named namei interpreted as types typei.\nFormFunction[{{name1, label1}type1, …}, func] uses labeli as the label for the field named namei.\nFormFunction[{namespec1type1default1, …}, func] uses defaulti as the default for the field specified by namespeci.\nFormFunction[formspec, func, fmt] specifies that in the cloud, the result from applying func should be returned in format fmt.\nFormFunction[{formspec1, formspec2, …}, func, …] represents a multipage form, in which the successive formspeci can be functions that are applied to the values obtained so far." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormFunction)))
(def FormLayoutFunction "FormLayoutFunction is an option for FormObject and FormFunction that can be used to specify how to lay out a form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormLayoutFunction)))
(def FormObject "FormObject[{name1type1, name2type2, …}] represents a form with fields having names namei that take data of type typei.\nFormObject[{{name1, label1}type1, …}] uses labeli as the label for the field named namei.\nFormObject[{name1assoc1, …, objj, …}] uses full specification associ for a field, and objj as part of the layout of the form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormObject)))
(def FormPage "FormPage[formspec, func] represents an active page that takes input from a form and generates results on the same page by applying func to the values obtained from the form whose structure is defined by formspec.\nFormPage[{name1type1, …}, func] represents an active form page with fields named namei interpreted as types typei.\nFormPage[{{name1, label1}type1, …}, func] uses labeli as the label for the field named namei.\nFormPage[{namespec1type1default1, …}, func] uses defaulti as the default for the field specified by namespeci.\nFormPage[formspec, func, form] lays out the page according to the layout specification form.\nFormPage[formspec, func, initformresform] uses initform as the initial layout specification and resform as the layout specification for result pages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormPage)))
(def FormProtectionMethod "FormProtectionMethod is an option for form generation functions that specifies what method to use for protecting the form against spam and other undesired submissions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormProtectionMethod)))
(def Format "Format[expr] prints as the formatted form of expr. Assigning values to Format[expr] defines print forms for expressions. \nFormat[expr, form] gives a format for the specified form of output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Format)))
(def FormatType "FormatType is an option for output streams, graphics, and functions such as Text that specifies the default format type to use when outputting expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormatType)))
(def FormulaData "FormulaData[name] gives the equations for the formula name.\nFormulaData[name, {var1quantity1, var2quantity2, …}] solves or simplifies equations using the specified values quantityi for the variables vari.\nFormulaData[name, \"property\"] gives the value of the specified property for the formula name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormulaData)))
(def FormulaLookup "FormulaLookup[\"query\"] gives a list of the full names of formulas whose names are consistent with \"query\".\nFormulaLookup[\"query\", n] returns at most n results.\nFormulaLookup[\"class\"] returns the names of all formulas within that class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FormulaLookup)))
(def FortranForm "FortranForm[expr] prints as a Fortran language version of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FortranForm)))
(def Forward "Forward is a symbol that represents the forward direction for purposes of motion and animation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Forward)))
(def ForwardBackward "ForwardBackward is a symbol that represents alternate forward and backward motion or animation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForwardBackward)))
(def ForwardCloudCredentials "ForwardCloudCredentials is an option for remote evaluation and submission functions that specifies whether Wolfram Cloud credentials from the local session should be copied into remote sessions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ForwardCloudCredentials)))
(def Fourier "Fourier[list] finds the discrete Fourier transform of a list of complex numbers.\nFourier[list, {p1, p2, …}] returns the specified positions of the discrete Fourier transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Fourier)))
(def FourierCoefficient "FourierCoefficient[expr, t, n] gives the n ^th coefficient in the Fourier series expansion of expr.\nFourierCoefficient[expr, {t1, t2, …}, {n1, n2, …}] gives a multidimensional Fourier coefficient." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierCoefficient)))
(def FourierCosCoefficient "FourierCosCoefficient[expr, t, n] gives the n ^th coefficient in the Fourier cosine series expansion of expr.\nFourierCosCoefficient[expr, {t1, t2, …}, {n1, n2, …}] gives a multidimensional Fourier cosine coefficient." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierCosCoefficient)))
(def FourierCosSeries "FourierCosSeries[expr, t, n] gives the n ^th-order Fourier cosine series expansion of expr in t.\nFourierCosSeries[expr, {t1, t2, …}, {n1, n2, …}] gives the multidimensional Fourier cosine series of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierCosSeries)))
(def FourierCosTransform "FourierCosTransform[expr, t, ω] gives the symbolic Fourier cosine transform of expr. \nFourierCosTransform[expr, {t1, t2, …}, {ω1, ω2, …}] gives the multidimensional Fourier cosine transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierCosTransform)))
(def FourierDCT "FourierDCT[list] finds the Fourier discrete cosine transform of a list of real numbers.\nFourierDCT[list, m] finds the Fourier discrete cosine transform of type m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierDCT)))
(def FourierDCTFilter "FourierDCTFilter[image, t] reduces noise in image by locally thresholding the discrete cosine transforms of overlapping subimages, using the hard threshold t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierDCTFilter)))
(def FourierDCTMatrix "FourierDCTMatrix[n] returns an n×n discrete cosine transform matrix of type 2.\nFourierDCTMatrix[n, m] returns an n×n discrete cosine transform matrix of type m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierDCTMatrix)))
(def FourierDST "FourierDST[list] finds the Fourier discrete sine transform of a list of real numbers.\nFourierDST[list, m] finds the Fourier discrete sine transform of type m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierDST)))
(def FourierDSTMatrix "FourierDSTMatrix[n] returns an n×n discrete sine transform matrix of type 2.\nFourierDSTMatrix[n, m] returns an n×n discrete sine transform matrix of type m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierDSTMatrix)))
(def FourierMatrix "FourierMatrix[n] returns an n×n Fourier matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierMatrix)))
(def FourierParameters "FourierParameters is an option to Fourier and related functions that specifies the conventions to use in computing Fourier transforms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierParameters)))
(def FourierSequenceTransform "FourierSequenceTransform[expr, n, ω] gives the Fourier sequence transform of expr.\nFourierSequenceTransform[expr, {n1, n2, …}, {ω1, ω2, …}] gives the multidimensional Fourier sequence transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierSequenceTransform)))
(def FourierSeries "FourierSeries[expr, t, n] gives the n ^th-order Fourier series expansion of expr in t. \nFourierSeries[expr, {t1, t2, …}, {n1, n2, …}] gives the multidimensional Fourier series." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierSeries)))
(def FourierSinCoefficient "FourierSinCoefficient[expr, t, n] gives the n ^th coefficient in the Fourier sine series expansion of expr.\nFourierSinCoefficient[expr, {t1, t2, …}, {n1, n2, …}] gives a multidimensional Fourier sine coefficient." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierSinCoefficient)))
(def FourierSinSeries "FourierSinSeries[expr, t, n] gives the n ^th-order Fourier sine series expansion of expr in t.\nFourierSinSeries[expr, {t1, t2, …}, {n1, n2, …}] gives the multidimensional Fourier sine series of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierSinSeries)))
(def FourierSinTransform "FourierSinTransform[expr, t, ω] gives the symbolic Fourier sine transform of expr. \nFourierSinTransform[expr, {t1, t2, …}, {ω1, ω2, …}] gives the multidimensional Fourier sine transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierSinTransform)))
(def FourierTransform "FourierTransform[expr, t, ω] gives the symbolic Fourier transform of expr. \nFourierTransform[expr, {t1, t2, …}, {ω1, ω2, …}] gives the multidimensional Fourier transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierTransform)))
(def FourierTrigSeries "FourierTrigSeries[expr, t, n] gives the n ^th-order Fourier trigonometric series expansion of expr in t.\nFourierTrigSeries[expr, {t1, t2, …}, {n1, n2, …}] gives the multidimensional Fourier trigonometric series of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FourierTrigSeries)))
(def FoxH "FoxH[{{{a1, α1}, …, {an, αn}}, {{a n+1, α n+1}, …, {ap, αp}}}, {{{b1, β1}, …, {bm, βm}}, {{b m+1, β m+1}, …, {bq, βq}}}, z] is the Fox H-function H _p, q^m, n(z(a1, α1), …, (ap, αp)\n(b1, β1), …, (bq, βq)\n\n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoxH)))
(def FoxHReduce "FoxHReduce[expr, x] attempts to reduce expr to a single FoxH object as a function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FoxHReduce)))
(def FractionBox "FractionBox[x, y] is a low-level formatting construct that represents x/y in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionBox)))
(def FractionBoxOptions "FractionBoxOptions is an option that specifies settings for FractionBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionBoxOptions)))
(def FractionalBrownianMotionProcess "FractionalBrownianMotionProcess[μ, σ, h] represents fractional Brownian motion process with drift μ, volatility σ, and Hurst index h.\nFractionalBrownianMotionProcess[h] represents fractional Brownian motion process with drift 0, volatility 1, and Hurst index h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionalBrownianMotionProcess)))
(def FractionalD "FractionalD[f, {x, α}] gives the Riemann–Liouville fractional derivative 0D_x^αf(x) of order α of the function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionalD)))
(def FractionalGaussianNoiseProcess "FractionalGaussianNoiseProcess[μ, σ, h] represents a fractional Gaussian noise process with drift μ, volatility σ, and Hurst index h.\nFractionalGaussianNoiseProcess[h] represents a fractional Gaussian noise process with drift 0, volatility 1, and Hurst index h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionalGaussianNoiseProcess)))
(def FractionalPart "FractionalPart[x] gives the fractional part of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FractionalPart)))
(def Frame "Frame is an option for Graphics, Grid, and other constructs that specifies whether to include a frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Frame)))
(def FrameBox "FrameBox[box] is a low-level box construct that represents box with a frame drawn around it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameBox)))
(def FrameBoxOptions "FrameBoxOptions is an option that specifies default settings for FrameBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameBoxOptions)))
(def FrameLabel "FrameLabel is an option for Graphics, Manipulate, and related functions that specifies labels to be placed on the edges of a frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameLabel)))
(def FrameListVideo "FrameListVideo[{img1, img2, …}] generates a video containing frames img1, img2, etc.\nFrameListVideo[files] generates a video from existing image files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameListVideo)))
(def FrameMargins "FrameMargins is an option for objects that can be displayed with frames which specifies the absolute margins in printer's points to leave inside the frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameMargins)))
(def FrameRate "FrameRate is an option to specify the number of frames per second." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameRate)))
(def FrameStyle "FrameStyle is an option for Graphics, Grid, and other constructs that specifies the style in which to draw frames." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameStyle)))
(def FrameTicks "FrameTicks is an option for 2D graphics functions that specifies tick marks for the edges of a frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameTicks)))
(def FrameTicksStyle "FrameTicksStyle is an option for 2D graphics functions that specifies how frame ticks should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrameTicksStyle)))
(def Framed "Framed[expr] displays a framed version of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Framed)))
(def FrechetDistribution "FrechetDistribution[α, β] represents the Fréchet distribution with shape parameter α and scale parameter β.\nFrechetDistribution[α, β, μ] represents the Fréchet distribution with shape parameter α, scale parameter β, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrechetDistribution)))
(def FreeQ "FreeQ[expr, form] yields True if no subexpression in expr matches form, and yields False otherwise. \nFreeQ[expr, form, levelspec] tests only those parts of expr on levels specified by levelspec. \nFreeQ[form] represents an operator form of FreeQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FreeQ)))
(def FreeformEvaluate "FreeformEvaluate[\"query\"] or =[query] interprets query using Wolfram|Alpha and computes the result.\nFreeformEvaluate[\"query\", h] interprets query and wraps the result of interpretation in the head h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FreeformEvaluate)))
(def FrenetSerretSystem "FrenetSerretSystem[{x1, …, xn}, t] gives the generalized curvatures and Frenet–Serret basis for the parametric curve xi[t].\nFrenetSerretSystem[{x1, …, xn}, t, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrenetSerretSystem)))
(def FrequencySamplingFilterKernel "FrequencySamplingFilterKernel[{a1, …, ak}] creates a finite impulse response (FIR) filter kernel using a frequency sampling method from amplitude values ai.\nFrequencySamplingFilterKernel[{a1, …, ak}, m] creates an FIR filter kernel of type m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrequencySamplingFilterKernel)))
(def FresnelC "FresnelC[z] gives the Fresnel integral C (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FresnelC)))
(def FresnelF "FresnelF[z] gives the Fresnel auxiliary function F (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FresnelF)))
(def FresnelG "FresnelG[z] gives the Fresnel auxiliary function G (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FresnelG)))
(def FresnelS "FresnelS[z] gives the Fresnel integral S (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FresnelS)))
(def Friday "Friday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Friday)))
(def FrobeniusAutomorphism "FrobeniusAutomorphism[a] gives the value of the Frobenius automorphism at the finite field element a.\nFrobeniusAutomorphism[a, k] gives the value of the k^th functional power of the Frobenius automorphism at a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrobeniusAutomorphism)))
(def FrobeniusNumber "FrobeniusNumber[{a1, …, an}] gives the Frobenius number of a1, …, an." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrobeniusNumber)))
(def FrobeniusSolve "FrobeniusSolve[{a1, …, an}, b] gives a list of all solutions of the Frobenius equation a1 x1+…+an xnb.\nFrobeniusSolve[{a1, …, an}, b, m] gives at most m solutions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrobeniusSolve)))
(def FromAbsoluteTime "FromAbsoluteTime[time] gives a date object corresponding to an absolute time specification as given by AbsoluteTime." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromAbsoluteTime)))
(def FromCharacterCode "FromCharacterCode[n] gives a string consisting of the character with integer code n. \nFromCharacterCode[{n1, n2, …}] gives a string consisting of the sequence of characters with codes ni. \nFromCharacterCode[{{n11, n12, …}, {n21, …}, …}] gives a list of strings. \nFromCharacterCode[codes, \"encoding\"] uses the specified character encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromCharacterCode)))
(def FromCoefficientRules "FromCoefficientRules[list, {x1, x2, …}] constructs a polynomial from a list of rules for exponent vectors and coefficients." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromCoefficientRules)))
(def FromContinuedFraction "FromContinuedFraction[list] reconstructs a number from the list of its continued fraction terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromContinuedFraction)))
(def FromDMS "FromDMS[{d, m, s}] converts from degrees, minutes, and seconds to decimal degrees. \nFromDMS[\"dms\"] converts from a DMS string to decimal degrees.\nFromDMS[\"latlon\"] converts from a latitude-longitude string to latitude and longitude in decimal degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromDMS)))
(def FromDateString "FromDateString[\"string\"] gives a date object corresponding to the date represented by \"string\".\nFromDateString[\"string\", {e1, e2, …}] gives the date object obtained by extracting elements \"ei\" from \"string\".\nFromDateString[\"string\", fmt] gives the date object obtained using the date format fmt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromDateString)))
(def FromDigits "FromDigits[list] constructs an integer from the list of its decimal digits. \nFromDigits[list, b] takes the digits to be given in base b. \nFromDigits[list, MixedRadix[blist]] uses the mixed radix with list of bases blist. \nFromDigits[\"string\"] constructs an integer from a string of digits.\nFromDigits[\"string\", \"Roman\"] constructs an integer from Roman numerals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromDigits)))
(def FromEntity "FromEntity[entity] returns a Wolfram Language object corresponding to an entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromEntity)))
(def FromFiniteField "FromFiniteField[a, ff] converts the element a of the prime subfield of the finite field ff to an integer.\nFromFiniteField[expr, ff, t] converts the elements of the finite field ff in the coefficients of the rational expression expr to polynomials in t, where t represents the field generator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromFiniteField)))
(def FromFiniteFieldIndex "FromFiniteFieldIndex[ind, ff] gives the element of the finite field ff with index ind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromFiniteFieldIndex)))
(def FromJulianDate "FromJulianDate[jd] gives a date object corresponding to the Julian date jd.\nFromJulianDate[\"type\", jd] gives a date object corresponding to the specified Julian date variant." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromJulianDate)))
(def FromLetterNumber "FromLetterNumber[n] gives the lowercase letter at position n in the English alphabet.\nFromLetterNumber[n, alpha] gives the letter at position n in the alphabet specified by alpha." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromLetterNumber)))
(def FromLunationNumber "FromLunationNumber[ln] returns the date corresponding to the lunation number ln.\nFromLunationNumber[scheme, ln] returns the date corresponding to the lunation number in the given counting scheme." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromLunationNumber)))
(def FromPolarCoordinates "FromPolarCoordinates[{r, θ}] gives the {x, y} Cartesian coordinates corresponding to the polar coordinates {r, θ}. \nFromPolarCoordinates[{r, θ1, …, θ n-2, ϕ}] gives the coordinates corresponding to the hyperspherical coordinates {r, θ1, …, θ n-2, ϕ}" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromPolarCoordinates)))
(def FromRawPointer "FromRawPointer[p] returns the value referred to by the pointer p for use in compiled code.\nFromRawPointer[array, offset] returns the value of a C array at an offset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromRawPointer)))
(def FromRomanNumeral "FromRomanNumeral[\"string\"] gives the integer corresponding to the Roman numeral \"string\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromRomanNumeral)))
(def FromSphericalCoordinates "FromSphericalCoordinates[{r, θ, ϕ}] gives the {x, y, z} Cartesian coordinates corresponding to the spherical coordinates {r, θ, ϕ}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromSphericalCoordinates)))
(def FromTabular "FromTabular[tab, \"form\"] converts a Tabular object tab to an object given by \"form\". \nFromTabular[tab, \"form\", assoc] uses directives from the association assoc to give details of the conversion." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromTabular)))
(def FromUnixTime "FromUnixTime[time] gives a date object corresponding to a UnixTime specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FromUnixTime)))
(def Front "Front is a symbol that represents the front of a graphic for purposes of placement and alignment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Front)))
(def FrontEndDynamicExpression "FrontEndDynamicExpression is a global front end option that specifies an expression to be dynamically updated whenever the front end is running." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrontEndDynamicExpression)))
(def FrontEndEventActions "FrontEndEventActions is an option for the notebook front end that gives a list of actions to perform when specified user-interface events occur." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrontEndEventActions)))
(def FrontEndExecute "FrontEndExecute[expr] sends expr to be executed by the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrontEndExecute)))
(def FrontEndToken "FrontEndToken[\"cmd\"] is an object that represents a front end command token, typically corresponding to a front end menu item, to be executed by FrontEndExecute. \nFrontEndToken[nb, \"cmd\"] represents a command that targets the specified notebook. \nFrontEndToken[nb, \"cmd\", param] represents a command with a parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrontEndToken)))
(def FrontEndTokenExecute "FrontEndTokenExecute[\"cmd\"] executes the specified front end command token, typically corresponding to a front end menu item." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FrontEndTokenExecute)))
(def Full "Full is a setting used for certain options, typically indicating that a full range of values should be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Full)))
(def FullDefinition "FullDefinition[symbol] prints as the definitions given for symbol, and all symbols on which these depend.\nFullDefinition[\"symbol\"] prints as the definitions given for the symbol named \"symbol\" if it exists, and all symbols on which these depend.\nFullDefinition[patt] prints as the definitions given for the symbols whose names textually match the arbitrary string pattern patt, and all symbols on which these depend.\nFullDefinition[{spec1, spec2, …}] prints as the definitions given for the symbols that are equal to or whose names match any of the speci, and all symbols on which these depend." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullDefinition)))
(def FullForm "FullForm[expr] prints as the full form of expr, with no special syntax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullForm)))
(def FullGraphics "FullGraphics[g] takes a graphics object, and generates a new one in which objects specified by graphics options are given as explicit lists of graphics primitives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullGraphics)))
(def FullInformationOutputRegulator "FullInformationOutputRegulator[sys, rspec] gives the full state information output regulator for sys using specification rspec. \nFullInformationOutputRegulator[{sys, {out1, …}, {in1, …}}, …] specifies the regulated outputs outi and the controlled inputs inj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullInformationOutputRegulator)))
(def FullMoon "FullMoon[] gives the date of the next full moon.\nFullMoon[date] gives the date of the first full moon after the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullMoon)))
(def FullRegion "FullRegion[n] represents the full region ^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullRegion)))
(def FullSimplify "FullSimplify[expr] tries a wide range of transformations on expr involving elementary and special functions and returns the simplest form it finds. \nFullSimplify[expr, assum] does simplification using assumptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FullSimplify)))
(def Function "body& or Function[body] is a pure (or \"anonymous\") function. The formal parameters are # (or #1), #2, etc. \nx|->body or xbody or Function[x, body] is a pure function with a single formal parameter x. \n{x1, x2, …}|->body or {x1, x2, …}body or Function[{x1, x2, …}, body] is a pure function with a list of formal parameters. \nFunction[params, body, attrs] is a pure function that is treated as having attributes attrs for purposes of evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Function)))
(def FunctionAnalytic "FunctionAnalytic[f, x] tests whether f(x) is an analytic function for x∈Reals.\nFunctionAnalytic[f, x, dom] tests whether f(x) is an analytic function for x∈dom.\nFunctionAnalytic[{f1, f2, …}, {x1, x2, …}, dom] tests whether f1(x1, x2, …), f2(x1, x2, …), … are analytic functions for x1, x2, …∈dom.\nFunctionAnalytic[{funs, cons}, xvars, dom] tests whether funs(xvars) are analytic functions for xvars in an open set containing the solutions of the constraints cons over the domain dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionAnalytic)))
(def FunctionBijective "FunctionBijective[f, x] tests whether f(x)y has exactly one solution x∈Reals for each y∈Reals.\nFunctionBijective[f, x, dom] tests whether f(x)y has exactly one solution x∈dom for each y∈dom.\nFunctionBijective[{f1, f2, …}, {x1, x2, …}, dom] tests whether f1(x1, x2, …)y1, f2(x1, x2, …)y2, … has exactly one solution x1, x2, …∈dom for each y1, y2, …∈dom.\nFunctionBijective[{funs, xcons, ycons}, xvars, yvars, dom] tests whether funs(xvars)yvars has exactly one solution with xvars∈dom restricted by the constraints xcons for each yvars∈dom restricted by the constraints ycons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionBijective)))
(def FunctionCompile "FunctionCompile[f] generates a compiled code function from a pure function.\nFunctionCompile[{f1, f2, …}] generates a list of compiled code functions from a list of pure functions.\nFunctionCompile[k1f1, k2f2, …] generates an association of compiled code functions from an association of Wolfram Language functions.\nFunctionCompile[defs, fspec] uses the local auxiliary definitions defs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionCompile)))
(def FunctionCompileExport "FunctionCompileExport[\"file.ext\", fspec] exports a compiled version of functions fspec in the format specified by the file extension ext.\nFunctionCompileExport[path, defs, fspec] exports a compiled version of fspec using local auxiliary definitions defs.\nFunctionCompileExport[path, fspec, \"format\"] exports in the specified format.\nFunctionCompileExport[path, defs, fspec, \"format\"] exports a compiled version using local auxiliary definitions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionCompileExport)))
(def FunctionCompileExportByteArray "FunctionCompileExportByteArray[fspec] gives a byte array of binary LLVM code obtained by compiling the function specification fspec.\nFunctionCompileExportByteArray[defs, fspec] uses the auxiliary definitions defs for compilation.\nFunctionCompileExportByteArray[fspec, \"format\"] gives a byte array of binary code in the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionCompileExportByteArray)))
(def FunctionCompileExportLibrary "FunctionCompileExportLibrary[file, fspec] exports a compiled version of function specification fspec as a shared library suitable for external use.\nFunctionCompileExportLibrary[file, defs, fspec] uses the auxiliary definitions defs for compilation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionCompileExportLibrary)))
(def FunctionCompileExportString "FunctionCompileExportString[fspec] gives a string of textual LLVM code obtained by compiling the function specification fspec.\nFunctionCompileExportString[defs, fspec] uses the auxiliary definitions defs for compilation.\nFunctionCompileExportString[fspec, \"format\"] gives a string of textual code in the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionCompileExportString)))
(def FunctionContinuous "FunctionContinuous[f, x] tests whether f(x) is a real-valued continuous function for x∈Reals.\nFunctionContinuous[f, x, dom] tests whether f(x) is a continuous function for x∈dom.\nFunctionContinuous[{f1, f2, …}, {x1, x2, …}, dom] tests whether f1(x1, x2, …), f2(x1, x2, …), … are continuous functions for x1, x2, …∈dom.\nFunctionContinuous[{funs, cons}, xvars, dom] tests whether funs(xvars) are continuous functions for xvars∈dom restricted by the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionContinuous)))
(def FunctionConvexity "FunctionConvexity[f, {x1, x2, …}] finds the convexity of the function f with variables x1, x2, … over the reals.\nFunctionConvexity[{f, cons}, {x1, x2, …}] finds the convexity when variables are restricted by the constraints cons representing a convex region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionConvexity)))
(def FunctionDeclaration "FunctionDeclaration[name, typedfun] declares name to be a typed function suitable for use in a compiler environment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionDeclaration)))
(def FunctionDiscontinuities "FunctionDiscontinuities[f, x] finds the discontinuities of f(x) for x∈Reals. \nFunctionDiscontinuities[f, x, dom] finds the discontinuities of f(x) for x∈dom.\nFunctionDiscontinuities[{f1, f2, …}, {x1, x2, …}, dom] finds the discontinuities of f1(x1, x2, …), f2(x1, x2, …), … for x1, x2, …∈dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionDiscontinuities)))
(def FunctionDomain "FunctionDomain[f, x] finds the largest domain of definition of the real function f of the variable x. \nFunctionDomain[f, x, dom] considers f to be a function with arguments and values in the domain dom.\nFunctionDomain[funs, vars, dom] finds the largest domain of definition of the mapping funs of the variables vars. \nFunctionDomain[{funs, cons}, vars, dom] finds the domain of funs with the values of vars restricted by constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionDomain)))
(def FunctionExpand "FunctionExpand[expr] tries to expand out special and certain other functions in expr, when possible reducing compound arguments to simpler ones. \nFunctionExpand[expr, assum] expands using assumptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionExpand)))
(def FunctionInjective "FunctionInjective[f, x] tests whether f(x)y has at most one solution x∈Reals for each y.\nFunctionInjective[f, x, dom] tests whether f(x)y has at most one solution x∈dom. \nFunctionInjective[{f1, f2, …}, {x1, x2, …}, dom] tests whether f1(x1, x2, …)y1, f2(x1, x2, …)y2, … has at most one solution x1, x2, …∈dom.\nFunctionInjective[{funs, xcons, ycons}, xvars, yvars, dom] tests whether funs(xvars)yvars has at most one solution with xvars∈dom restricted by the constraints xcons for each yvars∈dom restricted by the constraints ycons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionInjective)))
(def FunctionInterpolation "FunctionInterpolation[expr, {x, xmin, xmax}] evaluates expr with x running from xmin to xmax and constructs an InterpolatingFunction object which represents an approximate function corresponding to the result. \nFunctionInterpolation[expr, {x, xmin, xmax}, {y, ymin, ymax}, …] constructs an InterpolatingFunction object with several arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionInterpolation)))
(def FunctionLayer "FunctionLayer[f] represents a net layer that applies function f to its input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionLayer)))
(def FunctionMeromorphic "FunctionMeromorphic[f, x] tests whether f(x) is a meromorphic function of x.\nFunctionMeromorphic[f, {x1, x2, …}] tests whether f1(x1, x2, …) is a meromorphic function of x1, x2, ….\nFunctionMeromorphic[{f1, f2, …}, {x1, x2, …}] tests whether f1(x1, x2, …), f2(x1, x2, …), … are meromorphic functions for x1, x2, ….\nFunctionMeromorphic[{funs, cons}, xvars] tests whether funs(xvars) are meromorphic functions for xvars in an open set containing the solutions of the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionMeromorphic)))
(def FunctionMonotonicity "FunctionMonotonicity[f, x] finds the monotonicity of the function f with the variable x over the reals.\nFunctionMonotonicity[f, x, dom] finds the monotonicity of f when x is restricted to the domain dom.\nFunctionMonotonicity[{f, cons}, x, dom] gives the monotonicity of f when x is restricted by the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionMonotonicity)))
(def FunctionPeriod "FunctionPeriod[f, x] gives a period p of the function f over the reals such that f(x+p)f (x).\nFunctionPeriod[f, x, dom] gives a period with x restricted to the domain dom.\nFunctionPeriod[{f1, f2, …}, {x1, x2, …}, …] gives periods {p1, p2, …} for {x1, x2, …} such that f(x1+p1, x2+p2, …)f (x1, x2, …)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionPeriod)))
(def FunctionPoles "FunctionPoles[f, x] finds the poles of the meromorphic function f with the variable x.\nFunctionPoles[{f, cons}, x] gives the poles of f when x is restricted by the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionPoles)))
(def FunctionRange "FunctionRange[f, x, y] finds the range of the real function f of the variable x returning the result in terms of y.\nFunctionRange[f, x, y, dom] considers f to be a function with arguments and values in the domain dom.\nFunctionRange[funs, xvars, yvars, dom] finds the range of the mapping funs of the variables xvars returning the result in terms of yvars.\nFunctionRange[{funs, cons}, xvars, yvars, dom] finds the range of the mapping funs with the values of xvars restricted by constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionRange)))
(def FunctionSign "FunctionSign[f, {x1, x2, …}] finds the real sign of the function f with variables x1, x2, … over the reals.\nFunctionSign[f, {x1, x2, …}, dom] finds the real sign with variables restricted to the domain dom. \nFunctionSign[{f, cons}, {x1, x2, …}, dom] gives the sign when variables are restricted by the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionSign)))
(def FunctionSingularities "FunctionSingularities[f, x] finds the singularities of f(x) for x∈Reals. \nFunctionSingularities[f, x, dom] finds the singularities of f(x) for x∈dom.\nFunctionSingularities[{f1, f2, …}, {x1, x2, …}, dom] finds the singularities of f1(x1, x2, …), f2(x1, x2, …), … for x1, x2, …∈dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionSingularities)))
(def FunctionSpace "FunctionSpace is an option for FindSequenceFunction and related functions that specifies the space of functions to consider for representations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionSpace)))
(def FunctionSurjective "FunctionSurjective[f, x] tests whether f(x)y has at least one solution x∈ for each y∈Reals.\nFunctionSurjective[f, x, dom] tests whether f(x)y has at least one solution x∈dom for each y∈dom.\nFunctionSurjective[{f1, f2, …}, {x1, x2, …}, dom] tests whether f1(x1, x2, …)y1, f2(x1, x2, …)y2, … has at least one solution x1, x2, …∈dom for each y1, y2, …∈dom.\nFunctionSurjective[{funs, xcons, ycons}, xvars, yvars, dom] tests whether funs(xvars)yvars has at least one solution with xvars∈dom restricted by the constraints xcons for each yvars∈dom restricted by the constraints ycons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FunctionSurjective)))
(def FussellVeselyImportance "FussellVeselyImportance[rdist, t] gives the Fussell–Vesely importances for all components in the ReliabilityDistribution rdist at time t.\nFussellVeselyImportance[fdist, t] gives the Fussell–Vesely importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote FussellVeselyImportance)))
(def GARCHProcess "GARCHProcess[κ, {α1, …, αq}, {β1, …, βp}] represents a generalized autoregressive conditionally heteroscedastic process of orders p and q, driven by a standard white noise.\nGARCHProcess[κ, {α1, …, αq}, {β1, …, βp}, init] represents a GARCH process with initial data init." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GARCHProcess)))
(def GCD "GCD[n1, n2, …] gives the greatest common divisor of the ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GCD)))
(def GPUArray "GPUArray[array] yields an array stored in memory accessible for GPU-accelerated computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GPUArray)))
(def GPUArrayQ "GPUArrayQ[g] gives True if g is a valid GPUArray object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GPUArrayQ)))
(def GaborFilter "GaborFilter[data, r, k] filters data by convolving with a Gabor kernel of pixel radius r and wave vector k.\nGaborFilter[data, r, k, ϕ] uses a Gabor kernel with phase shift ϕ.\nGaborFilter[data, {r, σ}, …]  uses a Gabor kernel with radius r  and standard deviation σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaborFilter)))
(def GaborMatrix "GaborMatrix[r, k] gives a matrix that corresponds to the real part of a Gabor kernel of radius r and wave vector k.\nGaborMatrix[r, k, ϕ] uses phase shift ϕ.\nGaborMatrix[{r, σ}, …] uses the specified standard deviation σ.\nGaborMatrix[{{r1, r2, …}}, …] gives an array corresponding to a Gabor kernel with radius ri in the i ^th index direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaborMatrix)))
(def GaborWavelet "GaborWavelet[] represents a Gabor wavelet of frequency 6.\nGaborWavelet[w] represents a Gabor wavelet of frequency w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaborWavelet)))
(def GainMargins "GainMargins[lsys] gives the gain margins of the linear time-invariant system lsys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GainMargins)))
(def GainPhaseMargins "GainPhaseMargins[lsys] gives the gain and phase margins of the linear time-invariant system lsys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GainPhaseMargins)))
(def GalaxyData "GalaxyData[entity, property] gives the value of the specified property for the galaxy entity.\nGalaxyData[{entity1, entity2, …}, property] gives a list of property values for the specified galaxy entities.\nGalaxyData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GalaxyData)))
(def GalleryView "GalleryView[{expr1, expr2, …}] represents an object in which the expri are displayed in a browsable gallery layout.\nGalleryView[{assoc1, assoc2, …}] uses each of the associations associ to define the display of an item in the gallery." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GalleryView)))
(def GameActionLabels "GameActionLabels is an option that specifies names for the actions taken by players in game theory functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GameActionLabels)))
(def GamePlayerLabels "GamePlayerLabels is an option for specifying the names of players in game theory functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GamePlayerLabels)))
(def GameTheoryData "GameTheoryData[\"game\"] gives the mathematical game \"game\". \nGameTheoryData[{\"game\", n}] gives an n-player version of \"game\" if available. \nGameTheoryData[…, property] gives the value of the property for the specified game. \nGameTheoryData[\"class\"] gives a list of available named games in the specified \"class\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GameTheoryData)))
(def Gamma "Gamma[z] is the Euler gamma function Γ (z). \nGamma[a, z] is the incomplete gamma function Γ (a, z). \nGamma[a, z0, z1] is the generalized incomplete gamma function Γ(a, z0)-Γ (a, z1)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Gamma)))
(def GammaDistribution "GammaDistribution[α, β] represents a gamma distribution with shape parameter α and scale parameter β.\nGammaDistribution[α, β, γ, μ] represents a generalized gamma distribution with shape parameters α and γ, scale parameter β, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GammaDistribution)))
(def GammaRegularized "GammaRegularized[a, z] is the regularized incomplete gamma function Q (a, z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GammaRegularized)))
(def GapPenalty "GapPenalty is an option for SequenceAlignment and related functions that gives the additional cost associated with each gap corresponding to a run of insertions or deletions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GapPenalty)))
(def GatedRecurrentLayer "GatedRecurrentLayer[n] represents a trainable recurrent layer that takes a sequence of vectors and produces a sequence of vectors each of size n.\nGatedRecurrentLayer[n, opts] includes options for initial weights and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GatedRecurrentLayer)))
(def Gather "Gather[list] gathers the elements of list into sublists of identical elements.\nGather[list, test] applies test to pairs of elements to determine if they should be considered identical." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Gather)))
(def GatherBy "GatherBy[list, f] gathers into sublists each set of elements in list that gives the same value when f is applied.\nGatherBy[list, {f1, f2, …}] gathers list into nested sublists using fi at level i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GatherBy)))
(def GaugeFaceElementFunction "GaugeFaceElementFunction is an option for gauge functions that gives a function to use to generate the primitives for rendering the gauge face." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeFaceElementFunction)))
(def GaugeFaceStyle "GaugeFaceStyle is an option for gauge functions that specifies the style in which the face is to be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeFaceStyle)))
(def GaugeFrameElementFunction "GaugeFrameElementFunction is an option for gauge functions that gives a function to generate the primitives for rendering the gauge frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeFrameElementFunction)))
(def GaugeFrameSize "GaugeFrameSize is an option for gauge functions that controls the size of the frame around the gauge." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeFrameSize)))
(def GaugeFrameStyle "GaugeFrameStyle is an option for gauge functions that specifies the style in which the frame is to be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeFrameStyle)))
(def GaugeLabels "GaugeLabels is an option for gauge functions that specifies labels to be placed on the gauge." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeLabels)))
(def GaugeMarkers "GaugeMarkers is an option for gauge functions that specifies what markers to draw to mark the values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeMarkers)))
(def GaugeStyle "GaugeStyle is an option for gauge functions that specifies styles in which the markers are to be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaugeStyle)))
(def GaussianFilter "GaussianFilter[data, r] filters data by convolving with a Gaussian kernel of radius r.\nGaussianFilter[data, r, {n1, n2, …}] convolves data with a kernel formed from the ni ^th derivatives of the discrete Gaussian.\nGaussianFilter[data, {r, σ}, …]  uses a Gaussian kernel with radius r and standard deviation σ.\nGaussianFilter[data, {{r1, r2, …}, …}] uses radius ri at level i in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianFilter)))
(def GaussianIntegers "GaussianIntegers is an option for FactorInteger, PrimeQ, Factor, and related functions that specifies whether factorization should be done over Gaussian integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianIntegers)))
(def GaussianMatrix "GaussianMatrix[r] gives a matrix that corresponds to a Gaussian kernel of radius r. \nGaussianMatrix[{r, σ}] gives a matrix corresponding to a Gaussian kernel with radius r and standard deviation σ.\nGaussianMatrix[r, {n1, n2}] gives a matrix formed from the n1 ^th derivative of the Gaussian with respect to rows and the n2 ^th derivative with respect to columns.\nGaussianMatrix[r, {{n11, n12}, {n21, n22}, …}] gives a matrix formed from the sums of the n i1 and n i2 derivatives.\nGaussianMatrix[{{r1, r2, …}, σ}, …] gives an array corresponding to a Gaussian kernel with radius ri in the i ^th index direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianMatrix)))
(def GaussianOrthogonalMatrixDistribution "GaussianOrthogonalMatrixDistribution[σ, n] represents a Gaussian orthogonal matrix distribution with matrix dimensions {n, n} and scale parameter σ.\nGaussianOrthogonalMatrixDistribution[n] represents a Gaussian orthogonal matrix distribution with unit scale parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianOrthogonalMatrixDistribution)))
(def GaussianSymplecticMatrixDistribution "GaussianSymplecticMatrixDistribution[σ, n] represents a Gaussian symplectic matrix distribution with matrix dimensions {2 n, 2 n} over the field of complex numbers and scale parameter σ.\nGaussianSymplecticMatrixDistribution[n] represents a Gaussian symplectic matrix distribution with unit scale parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianSymplecticMatrixDistribution)))
(def GaussianUnitaryMatrixDistribution "GaussianUnitaryMatrixDistribution[σ, n] represents a Gaussian unitary matrix distribution with matrix dimensions {n, n} and scale parameter σ.\nGaussianUnitaryMatrixDistribution[n] represents a Gaussian unitary matrix distribution with unit scale parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianUnitaryMatrixDistribution)))
(def GaussianWindow "GaussianWindow[x] represents a Gaussian window function of x.\nGaussianWindow[x, σ] uses standard deviation σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GaussianWindow)))
(def GegenbauerC "GegenbauerC[n, m, x] gives the Gegenbauer polynomial C _n^(m)(x). \nGegenbauerC[n, x] gives the renormalized form Underscript[\"lim\", m0]\nSubsuperscriptBox[\"C\", \nTemplateArgBox[\"n\"], \nRowBox[{\"(\", \nTemplateArgBox[\"m\"], \")\"}]](\nTemplateArgBox[\"x\"])/m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GegenbauerC)))
(def General "General is a symbol to which general system messages are attached." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote General)))
(def GeneralizedLinearModelFit "GeneralizedLinearModelFit[{{x1, y1}, {x2, y2}, …}, {f1, f2, …}, x] constructs a generalized linear model of the form g^-1 (β0+β1 f1+β2 f2+…) that fits the yi for each xi.\nGeneralizedLinearModelFit[data, {f1, f2, …}, {x1, x2, …}] constructs a generalized linear model of the form g^-1 (β0+β1 f1+β2 f2+…) where the fi depend on the variables xk.\nGeneralizedLinearModelFit[{m, v}] constructs a generalized linear model from the design matrix m and response vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneralizedLinearModelFit)))
(def GenerateAsymmetricKeyPair "GenerateAsymmetricKeyPair[] randomly generates a PrivateKey and corresponding PublicKey object for use with public-key cryptographic functions.\nGenerateAsymmetricKeyPair[type] randomly generates private and public keys of the specified type.\nGenerateAsymmetricKeyPair[opts] randomly generates keys using the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateAsymmetricKeyPair)))
(def GenerateConditions "GenerateConditions is an option for Integrate, Sum, and similar functions that specifies whether explicit conditions on parameters should be generated in the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateConditions)))
(def GenerateDerivedKey "GenerateDerivedKey[password] generates a DerivedKey object from the password given.\nGenerateDerivedKey[password, salt] generates a DerivedKey object from the password and salt given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateDerivedKey)))
(def GenerateDigitalSignature "GenerateDigitalSignature[expr, key] generates a digital signature for expr using the specified private key.\nGenerateDigitalSignature[key] represents an operator form of GenerateDigitalSignature that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateDigitalSignature)))
(def GenerateDocument "GenerateDocument[nb] generates a document by evaluating all template elements in the notebook nb.\nGenerateDocument[nb, args] generates a document using args to fill template slots.\nGenerateDocument[nb, output] writes the generated document in the output file represented by output.\nGenerateDocument[nb, args, output] uses args to fill template slots and puts the result in output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateDocument)))
(def GenerateFileSignature "GenerateFileSignature[\"file\", key] generates a digital signature of file using the specified private key.\nGenerateFileSignature[{\"file\", range}, key] generates a digital signature of the specified range of bytes in the file.\nGenerateFileSignature[{{file1, range1}, {file2, range2}, …}, key] generates digital signatures for each specified filei and rangei.\nGenerateFileSignature[key] represents an operator form of GenerateFileSignature that can be applied to files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateFileSignature)))
(def GenerateHTTPResponse "GenerateHTTPResponse[expr] gives the HTTPResponse object that is generated when a cloud object containing expr is requested on the web.\nGenerateHTTPResponse[expr, req] gives the response for the HTTP request specified by req." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateHTTPResponse)))
(def GenerateLLMToolResponse "GenerateLLMToolResponse[tool, req] gives the LLMToolResponse generated by executing tool on the LLMToolRequest req.\nGenerateLLMToolResponse[{tool1, tool2, …}, req] picks a tool based on req.\nGenerateLLMToolResponse[config, req] uses the tools from an LLMConfiguration." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateLLMToolResponse)))
(def GenerateSecuredAuthenticationKey "GenerateSecuredAuthenticationKey[] generates a new anonymous SecuredAuthenticationKey owned by the current user ID.\nGenerateSecuredAuthenticationKey[\"name\"] generates a new SecuredAuthenticationKey with the specified name owned by the current user ID.\nGenerateSecuredAuthenticationKey[SecuredAuthenticationKey[…]] generates a new set of credentials for an existing SecuredAuthenticationKey." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateSecuredAuthenticationKey)))
(def GenerateSymmetricKey "GenerateSymmetricKey[] randomly generates a SymmetricKey object suitable for use with cryptographic functions.\nGenerateSymmetricKey[\"password\"] derives a SymmetricKey object from the password string given.\nGenerateSymmetricKey[bytes] generates a SymmetricKey object using the byte array or list of bytes directly as the key.\nGenerateSymmetricKey[DerivedKey[…]] generates a symmetric key object with a key given by the DerivedKey object.\nGenerateSymmetricKey[opts] randomly generates a symmetric key using the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenerateSymmetricKey)))
(def GeneratedAssetFormat "GeneratedAssetFormat is an option for functions like VideoGenerator that specifies the format of the resulting asset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedAssetFormat)))
(def GeneratedAssetLocation "GeneratedAssetLocation is an option for functions like VideoGenerator that specifies the location of the resulting asset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedAssetLocation)))
(def GeneratedCell "GeneratedCell is an option for Cell that indicates whether the cell was generated from the kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedCell)))
(def GeneratedDocumentBinding "GeneratedDocumentBinding is an option for supplying parameters to a DocumentGenerator during manual evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedDocumentBinding)))
(def GeneratedParameters "GeneratedParameters is an option that specifies how parameters generated to represent the results of various symbolic operations should be named." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedParameters)))
(def GeneratedQuantityMagnitudes "GeneratedQuantityMagnitudes is an option that specifies how quantities generated to represent the quantity multiplier results in NondimensionalizationTransform should be named." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratedQuantityMagnitudes)))
(def GeneratingFunction "GeneratingFunction[expr, n, x] gives the generating function in x for the sequence whose n ^th series coefficient is given by the expression expr.\nGeneratingFunction[expr, {n1, …, nm}, {x1, …, xm}] gives the multidimensional generating function in x1, …, xm whose n1, … , nm coefficient is given by expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratingFunction)))
(def GeneratorDescription "GeneratorDescription is an option for providing a textual description for a DocumentGenerator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratorDescription)))
(def GeneratorHistoryLength "GeneratorHistoryLength is an option for document generators controlling the number of runs archived in the cloud." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratorHistoryLength)))
(def GeneratorOutputType "GeneratorOutputType is an option controlling the file format of documents produced by a DocumentGenerator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeneratorOutputType)))
(def GenericCylindricalDecomposition "GenericCylindricalDecomposition[ineqs, {x1, x2, …}] finds the full-dimensional part of the decomposition of the region represented by the inequalities ineqs into cylindrical parts whose directions correspond to the successive xi, together with any hypersurfaces containing the rest of the region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenericCylindricalDecomposition)))
(def GenomeData "GenomeData[\"gene\"] gives the DNA sequence for the specified gene on the reference human genome.\nGenomeData[\"gene\", \"property\"] gives the value of the specified property for the human gene gene.\nGenomeData[{\"chr\", {n1, n2}}] gives the sequence from positions n1 to n2 on chromosome chr in the reference human genome." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenomeData)))
(def GenomeLookup "GenomeLookup[\"seq\"] returns the positions of exact matches for the DNA sequence seq on the reference human genome.\nGenomeLookup[\"seq\", n] returns at most n matches." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GenomeLookup)))
(def GeoAntipode "GeoAntipode[loc] gives the antipodal position of location loc.\nGeoAntipode[g] gives the antipodal primitive of the geo primitive g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoAntipode)))
(def GeoArea "GeoArea[g] gives the area of the geo region g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoArea)))
(def GeoArraySize "GeoArraySize is an option for geographic data functions that determines the dimensions of the array generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoArraySize)))
(def GeoBackground "GeoBackground is an option that specifies the background style of a GeoGraphics object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBackground)))
(def GeoBoundary "GeoBoundary[g] returns the boundary line of the geo region g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBoundary)))
(def GeoBoundingBox "GeoBoundingBox[g] gives the geo positions that define the bounding rectangle enclosing the geo region g.\nGeoBoundingBox[g, δ] pads the region on all sides by an amount δ.\nGeoBoundingBox[g, Scaled[s]] pads by a fractional amount s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBoundingBox)))
(def GeoBounds "GeoBounds[g] gives the ranges of latitudes and longitudes in the geo region g.\nGeoBounds[g, δ] pads ranges of latitudes and longitudes by ±δ.\nGeoBounds[g, Scaled[s]] pads range of latitudes and longitudes by a scaled amount s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBounds)))
(def GeoBoundsRegion "GeoBoundsRegion[{{latmin, latmax}, {lonmin, lonmax}}] is a two-dimensional GeoGraphics primitive that represents a geo region bounded by parallels latmin, latmax and meridians lonmin, lonmax on the surface of the Earth.\nGeoBoundsRegion[g] represents the latitude-longitude bounding box of the geo region g.\nGeoBoundsRegion[g, δ] pads the ranges of latitudes and longitudes by ±δ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBoundsRegion)))
(def GeoBoundsRegionBoundary "GeoBoundsRegionBoundary[{{latmin, latmax}, {lonmin, lonmax}}] is a one-dimensional GeoGraphics primitive that represents the boundary of the region between parallels latmin, latmax and meridians lonmin, lonmax on the surface of the Earth.\nGeoBoundsRegionBoundary[g] represents the boundary of the latitude-longitude bounding box of the geo region g.\nGeoBoundsRegionBoundary[g, δ] pads the ranges of latitudes and longitudes by ±δ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBoundsRegionBoundary)))
(def GeoBubbleChart "GeoBubbleChart[{reg1val1, reg2val2, …}] makes a geo bubble chart with bubbles centered at the geographic regions regi with sizes vali.\nGeoBubbleChart[regionsvalues] uses a collection of regions regi from regions with corresponding sizes vali from values.\nGeoBubbleChart[{data1, data2, …}] plots data from all the datai.\nGeoBubbleChart[{…, w[datai], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoBubbleChart)))
(def GeoCenter "GeoCenter is an option for GeoGraphics that specifies the coordinates of the point that should appear at the geographic center of the final map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoCenter)))
(def GeoCircle "GeoCircle[loc, r] is a two-dimensional GeoGraphics primitive that represents a circle of radius r centered at the location loc on the surface of the Earth.\nGeoCircle[loc, r, {α1, α2}] represents a sector of a circle from bearing α1 to bearing α2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoCircle)))
(def GeoContourPlot "GeoContourPlot[{loc1val1, loc2val2, …}] makes a geo contour plot from values vali defined at specified locations loci.\nGeoContourPlot[locsvals] uses a collection of locations locs with corresponding values vals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoContourPlot)))
(def GeoDensityPlot "GeoDensityPlot[{loc1val1, loc2val2, …}] makes a geo density plot with colors at the location loci determined by the value vali.\nGeoDensityPlot[locsvals] uses a collection of locations locs with corresponding values vals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDensityPlot)))
(def GeoDestination "GeoDestination[loc, {d, α}] gives the end position of the geodesic of length d starting from loc with azimuthal direction α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDestination)))
(def GeoDirection "GeoDirection[{lat1, lon1}, {lat2, lon2}] gives the azimuthal direction from one latitude-longitude position on the Earth to another.\nGeoDirection[loc1, loc2] gives the azimuthal direction between locations specified by position objects or geographic entities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDirection)))
(def GeoDisk "GeoDisk[loc, r]  is a two-dimensional GeoGraphics primitive that represents a filled disk of radius r centered at the location loc on the surface of the Earth.\nGeoDisk[loc, r, {α1, α2}] gives a sector of a disk from bearing α1 to bearing α2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDisk)))
(def GeoDisplacement "GeoDisplacement[{dist, α}] represents a geodesic displacement of length dist and initial bearing α from a geo location.\nGeoDisplacement[{dist, α}, pathtype] represents a displacement of length dist and initial bearing α along a path of type pathtype.\nGeoDisplacement[loc1, loc2, pathtype] returns the displacement needed to reach loc2 from loc1 along a path of type pathtype." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDisplacement)))
(def GeoDistance "GeoDistance[{lat1, lon1}, {lat2, lon2}] gives the geodesic distance between latitude-longitude positions on the Earth.\nGeoDistance[loc1, loc2] gives the distance between locations specified by position objects or geographical entities.\nGeoDistance[{loc1, …, locn}] gives the total distance from loc1 to locn through all the intermediate loci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDistance)))
(def GeoDistanceList "GeoDistanceList[{loc1, loc2, …, locn}] returns the list of geodesic distances between consecutive pairs of locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoDistanceList)))
(def GeoElevationData "GeoElevationData[] gives the elevation above sea level at $GeoLocation.\nGeoElevationData[loc] gives the elevation at the geographic location loc.\nGeoElevationData[{loc1, loc2}] gives an array of elevation values within the bounding box given by {loc1, loc2}.\nGeoElevationData[GeoPosition[{{lat1, lon1}, {lat2, lon2}, …}]] gives the list of elevations at the positions {lati, loni}.\nGeoElevationData[loc, etype] gives the elevation of type etype for the location loc.\nGeoElevationData[loc, etype, format] gives the elevation in the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoElevationData)))
(def GeoEntities "GeoEntities[reg, enttype] gives a list of the geographic entities of type enttype contained in the extended region reg.\nGeoEntities[reg] gives a list of the geographic regions of any type contained in reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoEntities)))
(def GeoGraphPlot "GeoGraphPlot[{e1, e2, …}] generates a plot of the geographic graph with edges ei.\nGeoGraphPlot[{v1, v2, …}, {e1, e2, …}] generates a plot with vertices vi and edges ej.\nGeoGraphPlot[{v iv j, …}] uses rules vivj to specify the graph.\nGeoGraphPlot[g] displays the graph g with vertices at geographic locations on a map.\nGeoGraphPlot[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGraphPlot)))
(def GeoGraphValuePlot "GeoGraphValuePlot[{{src1, dest1, flow1}, {src2, dest2, flow2}, …, {srcn, destn, flown}}] plots the flows between geo locations.\nGeoGraphValuePlot[{{e1, val1}, {e2, val2}, …}] plots the values vali for the edges ei.\nGeoGraphValuePlot[g] plots the flow for a graph g with associated edge weights." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGraphValuePlot)))
(def GeoGraphics "GeoGraphics[primitives, options] represents a two-dimensional geographical image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGraphics)))
(def GeoGridDirectionDifference "GeoGridDirectionDifference[proj, loc, β] gives the difference between the angle from north to direction β on the geo grid obtained with projection proj and the actual angle from north to direction β at location loc.\nGeoGridDirectionDifference[proj, loc, αβ] gives the difference between projected and unprojected angles from direction α to direction β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridDirectionDifference)))
(def GeoGridLines "GeoGridLines is an option for GeoGraphics that specifies what parallels and meridians to show." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridLines)))
(def GeoGridLinesStyle "GeoGridLinesStyle is an option for GeoGraphics that specifies how parallels and meridians should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridLinesStyle)))
(def GeoGridPosition "GeoGridPosition[{x, y}, proj] represents a point {x, y} in a planimetric cartographic grid using the projection proj.\nGeoGridPosition[{x, y, h}, proj] represents a point {x, y, h} in a cartographic grid with height h with respect to the reference ellipsoid.\nGeoGridPosition[{{x1, y1}, {x2, y2}, …}, proj] represents an array of cartographic grid positions.\nGeoGridPosition[{x, y, h}, proj, datum] represents a point in a cartographic grid obtained by projection from data in the given datum.\nGeoGridPosition[entity, proj] returns the cartographic grid position of the specified geographical entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridPosition)))
(def GeoGridRange "GeoGridRange is an option for geographic functions that specifies the range of projected coordinates to include." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridRange)))
(def GeoGridRangePadding "GeoGridRangePadding is an option for geographic functions that specifies how much to extend the projected coordinate ranges determined by GeoGridRange." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridRangePadding)))
(def GeoGridUnitArea "GeoGridUnitArea[proj, loc] gives the actual geo area corresponding to a unit area on the geo grid obtained with projection proj, evaluated in the limit of small geo regions around location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridUnitArea)))
(def GeoGridUnitDistance "GeoGridUnitDistance[proj, loc, α] gives the actual geo distance corresponding to a unit distance on the geo grid obtained with projection proj, evaluated in the limit of small displacement from location loc in direction α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridUnitDistance)))
(def GeoGridVector "GeoGridVector[loc{vx, vy}, proj] represents a horizontal two-dimensional vector of components vx, vy in the orthonormal frame of the coordinates of the geo projection proj, at geo location loc.\nGeoGridVector[loc{vx, vy, vz}, proj] represents a three-dimensional vector of horizontal components vx, vy and vertical component vz at geo location loc.\nGeoGridVector[{loc1, loc2, …}{vec1, vec2, …}, proj] represents a collection of vectors veci at respective geo locations loci.\nGeoGridVector[{loc1vec1, loc2vec2, …}, proj] represents the same collection of vectors.\nGeoGridVector[vec, proj] represents a geo vector whose associated location has been implicitly specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGridVector)))
(def GeoGroup "GeoGroup[geoobjects] represents a list of geographic objects to be treated as a single object for certain operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoGroup)))
(def GeoHemisphere "GeoHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth centered at your current geo location.\nGeoHemisphere[loc] represents the half of the Earth centered at the location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoHemisphere)))
(def GeoHemisphereBoundary "GeoHemisphereBoundary[] is a one-dimensional GeoGraphics primitive that represents the boundary line of a hemisphere of the Earth centered at the current geo location.\nGeoHemisphereBoundary[loc] represents the boundary line of a hemisphere centered at the location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoHemisphereBoundary)))
(def GeoHistogram "GeoHistogram[locs] plots a density histogram of the geographic locations locs.\nGeoHistogram[locs, bspec] plots a density histogram with bins specified by bspec.\nGeoHistogram[locs, bspec, hspec] plots a density histogram with bin densities computed according to the specification hspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoHistogram)))
(def GeoIdentify "GeoIdentify[enttype] identifies the geographic entities of the type enttype in which the current geo location is contained.\nGeoIdentify[enttype, loc] identifies the entities in which the location loc is contained.\nGeoIdentify[] identifies the entities of any type in which the current geo location is contained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoIdentify)))
(def GeoImage "GeoImage[reg] gives a satellite image of the geo region reg.\nGeoImage[reg, mapstyle] gives an image of the geo region reg with style mapstyle." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoImage)))
(def GeoLabels "GeoLabels is an option for GeoListPlot and GeoRegionValuePlot that specifies whether and how to add labels to the locations in the first argument." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoLabels)))
(def GeoLength "GeoLength[g] gives the length of the geo path g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoLength)))
(def GeoListPlot "GeoListPlot[{loc1, loc2, …}] generates a map on which the locations loci are indicated.\nGeoListPlot[{list1, list2, …}]  generates a map showing several lists of locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoListPlot)))
(def GeoLocation "GeoLocation is an option for Interpreter and related functions that specifies the location to assume for semantic interpretation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoLocation)))
(def GeoMarker "GeoMarker[] is a GeoGraphics primitive that represents a marker at the current $GeoLocation.\nGeoMarker[loc] is a GeoGraphics primitive that represents a marker at the location loc.\nGeoMarker[{loc1, loc2, …}] is a GeoGraphics primitive that represents markers at locations loci.\nGeoMarker[loc, marker] is a GeoGraphics primitive that represents a custom marker at the location loc.\nGeoMarker[{loc1, loc2, …}, marker] is a GeoGraphics primitive that represents custom markers at locations loci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoMarker)))
(def GeoModel "GeoModel is an option for GeoGraphics that specifies the reference body or model for it for the purposes of geodetic computations and map drawing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoModel)))
(def GeoNearest "GeoNearest[enttype, loc] returns the geographic entity of type enttype closest to the geo location loc.\nGeoNearest[{reg1, reg2, …, regn}, loc] returns the nearest of the regi.\nGeoNearest[{reg1val1, reg2val2, …, regnvaln}, loc] returns the vali corresponding to the nearest regi.\nGeoNearest[{reg1, reg2, …, regn}{val1, val2, …, valn}, loc] returns the same result.\nGeoNearest[{reg1, reg2, …, regn}Automatic, loc] takes the vali to be successive integers i. \nGeoNearest[spec, loc, n] returns n nearest values.\nGeoNearest[spec, loc, {n, r}] returns up to n matches within a radius r of loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoNearest)))
(def GeoOrientationData "GeoOrientationData[date, prop] gives the value of the property prop about the orientation of the Earth on the given date.\nGeoOrientationData[date, prop, \"variant\"] gives the specified variant of the property prop on the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoOrientationData)))
(def GeoPath "GeoPath[{loc1, loc2}, pathtype] is a GeoGraphics primitive that represents a path of type pathtype between locations loc1 and loc2.\nGeoPath[{loc1, loc2, …}, pathtype] represents a path formed by joining paths of type pathtype between consecutive locations loci.\nGeoPath[{loc1, d, α}, pathtype] represents a path moving from location loc1 a distance d with initial bearing α.\nGeoPath[{{loc11, loc12, …}, {loc21, …}, …}, pathtype] represents a disjoint collection of paths of type pathtype." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoPath)))
(def GeoPolygon "GeoPolygon[{loc1, …, locn}] is a GeoGraphics primitive that represents a filled polygon whose boundary is formed by geodesic segments between locations loci and loc i+1.\nGeoPolygon[{loc1, …, locn}{{q1, …, qm}, …}] represents a geo polygon with holes {q1, …, qm}, ….\nGeoPolygon[{poly1, poly2, …}] represents a collection of polygons polyi.\nGeoPolygon[{poly1, poly2, …}, sideness] specifies which of the two sides of each boundary polyi is in the interior of the geo polygon.\nGeoPolygon[polys, sideness, pathtype] represents a geo polygon whose boundary is formed by geo paths of type pathtype." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoPolygon)))
(def GeoPosition "GeoPosition[{lat, lon}] represents a geodetic position with latitude lat and longitude lon.\nGeoPosition[{lat, lon, h}] represents a geodetic position with height h relative to the reference ellipsoid.\nGeoPosition[{lat, lon, h}, datum] represents a geodetic position referring to the specified datum.\nGeoPosition[{{lat1, lon1}, {lat2, lon2}, …}, datum] represents an array of geodetic positions.\nGeoPosition[entity] returns the geodetic position of the specified geographical entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoPosition)))
(def GeoPositionENU "GeoPositionENU[{east, north, up}, p]  represents a position with local Cartesian coordinates {east, north, up} in a reference system centered at the position p.\nGeoPositionENU[{{e1, n1, u1}, {e2, n2, u2}, …}, p] represents an array of positions.\nGeoPositionENU[entity, p] returns the Cartesian position with respect to p of the specified geographical entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoPositionENU)))
(def GeoPositionXYZ "GeoPositionXYZ[{x, y, z}] represents a position in a Cartesian geocentric coordinate system.\nGeoPositionXYZ[{x, y, z}, datum] represents a point referred to the specified datum.\nGeoPositionXYZ[{{x1, y1, z1}, {x2, y2, z2}, …}, datum] represents an array of points in a Cartesian geocentric coordinate system.\nGeoPositionXYZ[entity] returns the Cartesian geocentric position of the given geographical entity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoPositionXYZ)))
(def GeoProjection "GeoProjection is an option for GeoGraphics that specifies the cartographic projection to use for the map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoProjection)))
(def GeoProjectionData "GeoProjectionData[\"projection\", \"property\"] gives the value of the specified property for the specified cartographic projection.\nGeoProjectionData[\"projection\"] gives the complete options for the default form of the specified projection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoProjectionData)))
(def GeoRange "GeoRange is an option for geographic functions that specifies the range of latitude and longitude to include." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoRange)))
(def GeoRangePadding "GeoRangePadding is an option for GeoGraphics that specifies what padding to use when extending beyond the original ranges of latitude and longitude." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoRangePadding)))
(def GeoRegionValuePlot "GeoRegionValuePlot[{reg1val1, reg2val2, …}] generates a plot in which the geographic regions regi are colored according to the values vali.\nGeoRegionValuePlot[regionsvalues] uses a collection of regions regi from regions with corresponding values vali from values.\nGeoRegionValuePlot[regionprop] generates a plot in which the geographic subdivisions in region are colored according to the values EntityValue[…, prop].\nGeoRegionValuePlot[data] generates a plot using the data available in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoRegionValuePlot)))
(def GeoResolution "GeoResolution is an option for geographic functions that specifies an average distance between neighboring pixels in the resulting map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoResolution)))
(def GeoScaleBar "GeoScaleBar is an option for GeoGraphics that determines what scale to show on the map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoScaleBar)))
(def GeoServer "GeoServer is an option for GeoGraphics, GeoStyling and GeoImage that specifies the URL address of a geo server and connection parameters to download map tiles and geo elevation data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoServer)))
(def GeoSmoothHistogram "GeoSmoothHistogram[locs] plots a smooth kernel histogram of the geo locations locs.\nGeoSmoothHistogram[locs, espec] plots a smooth kernel histogram with estimator specification espec.\nGeoSmoothHistogram[locs, espec, dfun] plots the distribution function dfun." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoSmoothHistogram)))
(def GeoStreamPlot "GeoStreamPlot[vecs] generates a stream plot from the field of geo vectors vecs.\nGeoStreamPlot[{vecs1, vecs2, …}] generates a separate set of streams for each vecsi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoStreamPlot)))
(def GeoStyling "GeoStyling[mapstyle] displays faces of polygons and other filled geo objects using mapstyle.\nGeoStyling[mapstyle, directive] uses mapstyle with the given graphics directive applied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoStyling)))
(def GeoStylingImageFunction "GeoStylingImageFunction is an option for specifying an image effect to apply to a geo style." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoStylingImageFunction)))
(def GeoVariant "GeoVariant[obj, qual] represents a geographic object obj with qualifier qual." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVariant)))
(def GeoVector "GeoVector[loc{m, α}] represents a horizontal two-dimensional vector of magnitude m and bearing α at geo location loc.\nGeoVector[loc{m, α, w}] represents a three-dimensional vector of horizontal modulus m, bearing α and vertical component w at geo location loc.\nGeoVector[{loc1, loc2, …}{vec1, vec2, …}] represents a collection of vectors veci at respective geo locations loci.\nGeoVector[{loc1vec1, loc2vec2, …}] represents the same collection of vectors.\nGeoVector[vec] represents a geo vector whose associated location has been implicitly specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVector)))
(def GeoVectorENU "GeoVectorENU[loc{ve, vn}] represents a horizontal two-dimensional vector of components ve and vn in an orthonormal frame tangent to the Earth at geo location loc.\nGeoVectorENU[loc{ve, vn, vu}] represents a three-dimensional vector of horizontal components ve and vn, and vertical component vu at geo location loc. \nGeoVectorENU[{loc1, loc2, …}{vec1, vec2, …}] represents a collection of vectors veci at respective geo locations loci.\nGeoVectorENU[{loc1vec1, loc2vec2, …}] represents the same collection of vectors.\nGeoVectorENU[vec] represents a geo vector whose associated location has been implicitly specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVectorENU)))
(def GeoVectorPlot "GeoVectorPlot[vecs] generates a vector plot from the field of geo vectors vecs.\nGeoVectorPlot[{vecs1, vecs2, …}] generates a separate set of vectors for each vecsi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVectorPlot)))
(def GeoVectorXYZ "GeoVectorXYZ[loc{vX, vY, vZ}] represents a three-dimensional vector of Cartesian components vX, vY, vZ in an orthonormal frame parallel to the geocentric frame, at location loc.\nGeoVectorXYZ[{loc1, loc2, …}{vec1, vec2, …}] represents a collection of vectors veci at respective geo locations loci.\nGeoVectorXYZ[{loc1vec1, loc2vec2, …}] represents the same collection of vectors.\nGeoVectorXYZ[vec] represents a geo vector whose associated location has been implicitly specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVectorXYZ)))
(def GeoVisibleRegion "GeoVisibleRegion[{lat, lon, h}] is a two-dimensional GeoGraphics primitive that represents the region on the surface of the Earth visible from the point of coordinates lat, lon and height h above the reference ellipsoid.\nGeoVisibleRegion[pos] represents the region visible from the position pos.\nGeoVisibleRegion[{pos1, pos2, …}] represents the collection of regions visible from the positions posi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVisibleRegion)))
(def GeoVisibleRegionBoundary "GeoVisibleRegionBoundary[{lat, lon, h}] is a one-dimensional GeoGraphics primitive that represents the boundary of the region on the surface of the Earth visible from the point of coordinates lat, lon and height h above the reference ellipsoid.\nGeoVisibleRegionBoundary[pos] represents the boundary of the region visible from the position pos.\nGeoVisibleRegionBoundary[{pos1, pos2, …}] represents the collection of boundaries of the regions visible from the positions posi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoVisibleRegionBoundary)))
(def GeoWithinQ "GeoWithinQ[reg, loc] returns True if the location loc is contained within the region reg, and False otherwise.\nGeoWithinQ[reg] represents an operator form of GeoWithinQ that can be applied to a location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoWithinQ)))
(def GeoZoomLevel "GeoZoomLevel is an option for specifying the resolution at which to render a map." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeoZoomLevel)))
(def GeodesicClosing "GeodesicClosing[image, ker] gives the geodesic closing of image with respect to the structuring element ker.\nGeodesicClosing[image, r] gives the geodesic closing with respect to a range r square.\nGeodesicClosing[data, …] applies geodesic closing to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesicClosing)))
(def GeodesicDilation "GeodesicDilation[marker, mask] gives the fixed point of the geodesic dilation of the marker constrained by the mask." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesicDilation)))
(def GeodesicErosion "GeodesicErosion[marker, mask] gives the fixed point of the geodesic erosion of the marker constrained by the mask." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesicErosion)))
(def GeodesicOpening "GeodesicOpening[image, ker] gives the geodesic opening of image with respect to the structuring element ker.\nGeodesicOpening[image, r] gives the geodesic opening with respect to a range r square.\nGeodesicOpening[data, …] applies geodesic opening to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesicOpening)))
(def GeodesicPolyhedron "GeodesicPolyhedron[n] gives the order‐n geodesic polyhedron.\nGeodesicPolyhedron[\"poly\", n] gives the order‐n geodesic polyhedron based on the polyhedron \"poly\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesicPolyhedron)))
(def GeodesyData "GeodesyData[\"name\", \"property\"] gives the value of the specified property for a named geodetic datum or reference ellipsoid.\nGeodesyData[{a, b}, \"property\"] gives the value of the property for the ellipsoid with semimajor axis a and semiminor axis b.\nGeodesyData[obj, {\"property\", coords}] gives the value of the property at the specified coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeodesyData)))
(def GeogravityModelData "GeogravityModelData[] returns the gravitational field data for the current location.\nGeogravityModelData[locationspec] returns the gravitational field data for a location.\nGeogravityModelData[locationspec, component] returns the component of the gravitational field." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeogravityModelData)))
(def GeologicalPeriodData "GeologicalPeriodData[entity, property] gives the value of the specified property for the geological period entity.\nGeologicalPeriodData[{entity1, entity2, …}, property] gives a list of property values for the specified period name entities.\nGeologicalPeriodData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeologicalPeriodData)))
(def GeomagneticModelData "GeomagneticModelData[] returns the current magnetic field data for the current location.\nGeomagneticModelData[locationspec] returns the current magnetic field data for a location.\nGeomagneticModelData[datespec] returns the magnetic field data for the specified time for the current location.\nGeomagneticModelData[locationspec, datespec] returns the magnetic field data for the specified time and location.\nGeomagneticModelData[locationspec, datespec, component] returns the component of the magnetic field for the specified time and location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeomagneticModelData)))
(def GeometricAssertion "GeometricAssertion[obj, prop] represents the assertion that the geometric object obj satisfies prop.\nGeometricAssertion[{obj1, obj2, …}, prop] represents the assertion that the obji satisfy prop.\nGeometricAssertion[objs, prop1, prop2, …] represents the assertion that objs satisfies each of the propi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricAssertion)))
(def GeometricBrownianMotionProcess "GeometricBrownianMotionProcess[μ, σ, x0] represents a geometric Brownian motion process with drift μ, volatility σ, and initial value x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricBrownianMotionProcess)))
(def GeometricDistribution "GeometricDistribution[p] represents a geometric distribution with probability parameter p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricDistribution)))
(def GeometricMean "GeometricMean[data] gives the geometric mean of the values in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricMean)))
(def GeometricMeanFilter "GeometricMeanFilter[data, r] filters data by replacing every value by the geometric mean value in its range-r neighborhood.\nGeometricMeanFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricMeanFilter)))
(def GeometricOptimization "GeometricOptimization[f, cons, vars] finds positive values of variables vars that minimize the posynomial objective subject to posynomial constraints cons.\nGeometricOptimization[{a0, b0}, {{a1, b1}, …}, {aeq, beq}] finds the positive vector x=^y that minimizes ∑_j=1^k0^(a 0j.y+b 0j) subject to inequality constraints ∑_j=1^ki ^(a ij.y+b ij)≤ 1, i=1, …, s and linear equality constraints a eq.y+b eq=0.\nGeometricOptimization[…, \"prop\"]  specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricOptimization)))
(def GeometricScene "GeometricScene[{p1, p2, …}, {hyp1, hyp2, …}] represents an abstract 2D geometric scene defined by the hypotheses hypi in terms of the symbolic points pi.\nGeometricScene[{{p1, p2, …}, {k1, k2, …}}, hyps] represents a scene whose hypotheses depend on the symbolic scalar quantities ki.\nGeometricScene[{{p1{x1, y1}, …}, {k1v1, …}}, hyps] represents a specific instance with explicit values for all points and scalar quantities.\nGeometricScene[params, hyps, {con1, con2, …}] represents a scene together with some conclusions coni about it.\nGeometricScene[{{{p1{x1, y1}, …}, {k1v1, …}}, …}, hyps] represents a collection of specific instances of the same scene.\nGeometricScene[{scene1, scene2, …}] combines several scene instances into one scene object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricScene)))
(def GeometricSolveValues "GeometricSolveValues[scene, expr] solves for the symbolic geometric quantity expr defined by the GeometricScene object scene.\nGeometricSolveValues[scene, {expr1, expr2, …}] returns a list containing the solutions of scene for expr1, expr2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricSolveValues)))
(def GeometricStep "GeometricStep[{hyp1, hyp2, …}] gives a symbolic representation of a step in the definition of a geometric scene, in which the hypotheses hypi are introduced. \nGeometricStep[hyps, label] labels the step with label when displaying an instance of the geometric scene." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricStep)))
(def GeometricStylingRules "GeometricStylingRules is an option to GeometricScene that specifies how to style structures in GeometricScene." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricStylingRules)))
(def GeometricTest "GeometricTest[obj, prop] tests whether the geometric object obj satisfies prop.\nGeometricTest[{obj1, obj2, …}, prop] tests whether the obji satisfy prop.\nGeometricTest[objs, prop1, prop2, …] tests whether objs satisfy each of the propi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricTest)))
(def GeometricTransformation "GeometricTransformation[g, tfun] represents the result of applying the transformation function tfun to the geometric objects corresponding to the primitives g.\nGeometricTransformation[g, m] transforms geometric objects in g by effectively replacing every point r by m.r. \nGeometricTransformation[g, {m, v}] effectively replaces every point r by m.r+v.\nGeometricTransformation[g, {t1, t2, …}] represents multiple copies of g transformed by a collection of transformations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GeometricTransformation)))
(def GestureHandler "GestureHandler[expr, {gesture1fun1, gesture2fun2, …}] displays as expr, evaluating funi[value, velocity] whenever \"gesturei\" occurs within the screen space occupied by expr.\nGestureHandler[expr, {\"gesture\":>{fun, funend}, …}] evaluates fun as updates are received for \"gesture\", followed by funend[value, velocity] when the gesture ends.\nGestureHandler[expr, {\"gesture\":>{funstart, fun, funend}, …}] also evaluates fstart[value, velocity] when \"gesture\" begins." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GestureHandler)))
(def Get "<<name reads in a file, evaluating each expression in it and returning the last one. \nGet[stream] reads from a stream, evaluating each expression in it and returning the last one.\nGet[\"file\", \"key\"] reads a file that has been encoded using Encode[\"source\", \"file\", \"key\"]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Get)))
(def GetEnvironment "GetEnvironment[\"var\"] gives the setting corresponding to the variable \"var\" in the operating system environment.\nGetEnvironment[{var1, var2, …}] gives a list of rules, corresponding to specified environment variables.\nGetEnvironment[] gives information about all existing settings in the operating system environment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GetEnvironment)))
(def GibbsPointProcess "GibbsPointProcess[{\"PairPotential\", μ, ϕ}, d] represents a Gibbs point process with density μ and pair-potential function ϕ in ^d.\nGibbsPointProcess[{\"PairInteraction\", μ, h}, d] represents a Gibbs point process with density μ and pair-interaction function h in ^d.\nGibbsPointProcess[{\"Papangelou\", λ^*}, d] represents a Gibbs point process with Papangelou conditional density λ^* in ^d.\nGibbsPointProcess[{\"Density\", f}, d] represents a Gibbs point process with density function proportional to f in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GibbsPointProcess)))
(def Glaisher "Glaisher is Glaisher's constant with numerical value ≃1.28243." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Glaisher)))
(def GlobalClusteringCoefficient "GlobalClusteringCoefficient[g] gives the global clustering coefficient of the graph g.\nGlobalClusteringCoefficient[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GlobalClusteringCoefficient)))
(def Glow "Glow[col] is a graphics directive which specifies that surfaces of 3D graphics objects that follow are to be taken to glow with color col. \nGlow[] specifies that there is no glow." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Glow)))
(def GoldenAngle "GoldenAngle is the golden angle (3-Sqrt[5]) π, with numerical value ≃137.5°." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GoldenAngle)))
(def GoldenRatio "GoldenRatio is the golden ratio ϕ1/2 (Sqrt[5]+1), with numerical value ≃1.61803." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GoldenRatio)))
(def GompertzMakehamDistribution "GompertzMakehamDistribution[λ, ξ] represents a Gompertz distribution with scale parameter λ and frailty parameter ξ.\nGompertzMakehamDistribution[λ, ξ, θ, α] represents a Gompertz–Makeham distribution with parameters λ, ξ, θ, and α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GompertzMakehamDistribution)))
(def GoochShading "GoochShading[] is a three-dimensional graphics directive specifying that surfaces that follow are to be drawn with a warm color facing toward the light and a cool color facing away.\nGoochShading[col] uses cool and warm colors obtained by blending col with slate Blue and Orange.\nGoochShading[{ccol, wcol}] uses the cool color ccol and the warm color wcol.\nGoochShading[{w1, w2}{ccol, wcol}] uses the colors ccol and wcol weighted by the wi.\nGoochShading[\"scheme\"] uses the specified gradient color scheme in ColorData." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GoochShading)))
(def GoodmanKruskalGamma "GoodmanKruskalGamma[v1, v2] gives the Goodman–Kruskal γ coefficient for the vectors v1 and v2.\nGoodmanKruskalGamma[m] gives the Goodman–Kruskal γ coefficients for the matrix m.\nGoodmanKruskalGamma[m1, m2] gives the Goodman–Kruskal γ coefficients for the matrices m1 and m2.\nGoodmanKruskalGamma[dist] gives the γ coefficient matrix for the multivariate symbolic distribution dist.\nGoodmanKruskalGamma[dist, i, j] gives the (i, j)^th γ coefficient for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GoodmanKruskalGamma)))
(def GoodmanKruskalGammaTest "GoodmanKruskalGammaTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nGoodmanKruskalGammaTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GoodmanKruskalGammaTest)))
(def Goto "Goto[tag] scans for Label[tag], and transfers control to that point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Goto)))
(def GouraudShading "GouraudShading[] is a three‐dimensional graphics directive that specifies that faces of polygons and other filled graphics objects are to be drawn to reflect as a smooth surface using a normal‐vector average shading.\nGouraudShading[d] uses the attenuation factor d for the diffuse light.\nGouraudShading[d, s] uses the attenuation factor s for the specular light.\nGouraudShading[d, s, a] uses the attenuation factor a for the ambient light." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GouraudShading)))
(def Grad "Grad[f, {x1, …, xn}] gives the gradient (∂f/∂x1, …, ∂f/∂xn).\nGrad[f, {x1, …, xn}, chart] gives the gradient in the coordinates chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Grad)))
(def Gradient "Gradient is an option for FindMinimum and related functions that specifies the gradient vector to assume for the function being extremized." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Gradient)))
(def GradientFilter "GradientFilter[data, r] gives the magnitude of the gradient of data, computed using discrete derivatives of a Gaussian of sample radius r.\nGradientFilter[data, {r, σ}] uses a Gaussian with standard deviation σ.\nGradientFilter[data, {{r1, r2, …}, …}] uses a Gaussian with radius ri at level i in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GradientFilter)))
(def GradientFittedMesh "GradientFittedMesh[{p1, p2, …}] gives a MeshRegion whose gradient best fits the normals at points p1, p2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GradientFittedMesh)))
(def GradientOrientationFilter "GradientOrientationFilter[data, r] gives the local orientation parallel to the gradient of data, computed using discrete derivatives of a Gaussian of pixel radius r, returning values between -π/2 and π/2.\nGradientOrientationFilter[data, {r, σ}] uses a Gaussian with standard deviation σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GradientOrientationFilter)))
(def GrammarApply "GrammarApply[grammar, input] attempts to parse input according to the grammar defined by grammar." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GrammarApply)))
(def GrammarRules "GrammarRules[rules] represents grammar rules to be deployed to a cloud object that implements the grammar in a form suitable for use with functions like GrammarApply and Interpreter.\nGrammarRules[rules, defs] uses grammar definitions defs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GrammarRules)))
(def GrammarToken "GrammarToken[form] is a grammar rules pattern object that represents any input of the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GrammarToken)))
(def Graph "Graph[{e1, e2, …}] yields a graph with edges ej.\nGraph[{v1, v2, …}, {e1, e2, …}] yields the graph with vertices vi and edges ej. \nGraph[{…, wi[vi, …], …}, {…, wj[ej, …], …}] yields a graph with vertex and edge properties defined by the symbolic wrappers wk.\nGraph[data] yields a graph from data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Graph)))
(def Graph3D "Graph3D[g] creates a graph with vertices and edges from the graph g and represented as a 3D plot.\nGraph3D[{e1, e2, …}] creates a graph with edges ej and represented as a 3D plot.\nGraph3D[{v1, v2, …}, {e1, e2, …}] creates a graph with vertices vi and edges ej." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Graph3D)))
(def GraphAssortativity "GraphAssortativity[g] gives the assortativity coefficient of a graph g using vertex degrees.\nGraphAssortativity[g, \"prop\"] gives the assortativity coefficient of the graph g using vertex property \"prop\".\nGraphAssortativity[g, {{v i1, v i2, …}, …}] gives the assortativity coefficient of the graph g with respect to the vertex partition {{v i1, v i2, …}, …}.\nGraphAssortativity[g, {v1, v2, …}{x1, x2, …}] gives the assortativity coefficient of the graph g using data {x1, x2, …} for vertices {v1, v2, …}.\nGraphAssortativity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphAssortativity)))
(def GraphAutomorphismGroup "GraphAutomorphismGroup[g] gives the automorphism group of a graph g.\nGraphAutomorphismGroup[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphAutomorphismGroup)))
(def GraphCenter "GraphCenter[g] gives the set of vertices with minimum eccentricity in the graph g.\nGraphCenter[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphCenter)))
(def GraphComplement "GraphComplement[g] gives the graph complement of the graph g.\nGraphComplement[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphComplement)))
(def GraphData "GraphData[name] gives a graph with the specified name.\nGraphData[entity] gives the graph corresponding to the graph entity.\nGraphData[entity, property] gives the value of the property for the specified graph entity.\nGraphData[class] gives a list of available named graphs in the specified graph class.\nGraphData[n] gives a list of available named graphs with n vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphData)))
(def GraphDensity "GraphDensity[g] gives the graph density of the graph g.\nGraphDensity[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDensity)))
(def GraphDiameter "GraphDiameter[g] gives the greatest distance between any pair of vertices in the graph g.\nGraphDiameter[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDiameter)))
(def GraphDifference "GraphDifference[g1, g2] gives the graph difference of the graphs g1 and g2.\nGraphDifference[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDifference)))
(def GraphDisjointUnion "GraphDisjointUnion[g1, g2] gives the graph disjoint union of the graphs g1 and g2.\nGraphDisjointUnion[g1, g2, …] gives the disjoint union of g1, g2, ….\nGraphDisjointUnion[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDisjointUnion)))
(def GraphDistance "GraphDistance[g, s, t] gives the distance from source vertex s to target vertex t in the graph g.\nGraphDistance[g, s] gives the distance from s to all vertices of the graph g.\nGraphDistance[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDistance)))
(def GraphDistanceMatrix "GraphDistanceMatrix[g] gives the matrix of distances between vertices for the graph g.\nGraphDistanceMatrix[g, d] gives the matrix of distances between vertices of maximal distance d in the graph g.\nGraphDistanceMatrix[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphDistanceMatrix)))
(def GraphEmbedding "GraphEmbedding[g] gives coordinates of the vertices of the graph g.\nGraphEmbedding[g, \"emb\"] gives coordinates of the vertices of the graph g using the embedding \"emb\".\nGraphEmbedding[g, \"emb\", dim] gives coordinates in dimension dim of the vertices of the graph g using the embedding \"emb\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphEmbedding)))
(def GraphHighlight "GraphHighlight is an option to Graph and related objects that specifies graph elements to highlight." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphHighlight)))
(def GraphHighlightStyle "GraphHighlightStyle is an option to Graph and related objects that specifies styles to use for highlighted graph elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphHighlightStyle)))
(def GraphHub "GraphHub[g] gives the set of vertices with maximum vertex degree in the underlying simple graph of g.\nGraphHub[g, \"In\"] gives the set of vertices with maximum vertex in-degree.\nGraphHub[g, \"Out\"] gives the set of vertices with maximum vertex out-degree.\nGraphHub[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphHub)))
(def GraphIntersection "GraphIntersection[g1, g2] gives the graph intersection of the graphs g1 and g2.\nGraphIntersection[g1, g2, …] gives the graph intersection of g1, g2, … .\nGraphIntersection[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphIntersection)))
(def GraphJoin "GraphJoin[g1, g2] gives the graph join of the graphs g1 and g2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphJoin)))
(def GraphLayerStyle "GraphLayerStyle is an option for LayeredGraphPlot3D and related functions that specifies the style in which to draw a layer on the plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphLayerStyle)))
(def GraphLayers "GraphLayers is an option for LayeredGraphPlot3D and related functions that specifies layers to draw on the plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphLayers)))
(def GraphLayout "GraphLayout is an option to Graph and related functions that specifies what layout to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphLayout)))
(def GraphLinkEfficiency "GraphLinkEfficiency[g] gives the link efficiency of the graph g.\nGraphLinkEfficiency[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphLinkEfficiency)))
(def GraphPeriphery "GraphPeriphery[g] gives vertices that are maximally distant to at least one vertex in the graph g.\nGraphPeriphery[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphPeriphery)))
(def GraphPlot "GraphPlot[g] generates a plot of the graph g.\nGraphPlot[{e1, e2, …}] generates a plot of the graph with edges ei.\nGraphPlot[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w.\nGraphPlot[{v i1v j1, …}] uses rules vikvjk to specify the graph g.\nGraphPlot[m] uses the adjacency matrix m to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphPlot)))
(def GraphPlot3D "GraphPlot3D[g] generates a 3D plot of the graph g.\nGraphPlot3D[{e1, e2, …}] generates a 3D plot of the graph with edges ei.\nGraphPlot3D[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w.\nGraphPlot3D[{v i1v j1, …}] uses rules vikvjk to specify the graph g.\nGraphPlot3D[m] uses the adjacency matrix m to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphPlot3D)))
(def GraphPower "GraphPower[g, n] gives the graph-n ^th power of the graph g.\nGraphPower[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphPower)))
(def GraphProduct "GraphProduct[g1, g2] gives the Cartesian product of the graphs g1 and g2.\nGraphProduct[g1, g2, \"op\"] gives the product of type \"op\" for the graphs g1 and g2" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphProduct)))
(def GraphPropertyDistribution "GraphPropertyDistribution[expr, xgdist] represents the distribution of the property expr where the random variable x follows the graph distribution gdist.\nGraphPropertyDistribution[expr, {x1gdist1, x2gdist2, …}] represents the distribution where x1, x2, … are independent and follow the graph distributions gdist1, gdist2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphPropertyDistribution)))
(def GraphQ "GraphQ[g] yields True if g is a valid Graph object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphQ)))
(def GraphRadius "GraphRadius[g] gives the minimum eccentricity of the vertices in the graph g.\nGraphRadius[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphRadius)))
(def GraphReciprocity "GraphReciprocity[g] gives the reciprocity of a graph g.\nGraphReciprocity[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphReciprocity)))
(def GraphSum "GraphSum[g1, g2] gives the graph sum of the graphs g1 and g2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphSum)))
(def GraphTree "GraphTree[g] constructs a tree from the tree graph g.\nGraphTree[g, root] specifies what vertex to use as the root.\nGraphTree[g, root, h] applies h to each vertex to get the corresponding data and ordering of subtrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphTree)))
(def GraphTriangleCount "GraphTriangleCount[g] gives the number of triangles in the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphTriangleCount)))
(def GraphUnion "GraphUnion[g1, g2] gives the graph union of the graphs g1 and g2.\nGraphUnion[g1, g2, …] gives the graph union of g1, g2, ….\nGraphUnion[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphUnion)))
(def Graphics "Graphics[primitives, options] represents a two-dimensional graphical image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Graphics)))
(def Graphics3D "Graphics3D[primitives, options] represents a three-dimensional graphical image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Graphics3D)))
(def GraphicsColumn "GraphicsColumn[{g1, g2, …}] generates a graphic in which the gi are laid out in a column, with g1 above g2, etc. \nGraphicsColumn[list, alignment] aligns each element horizontally in the specified way. \nGraphicsColumn[list, alignment, spacing] leaves the specified spacing between successive elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphicsColumn)))
(def GraphicsComplex "GraphicsComplex[{pt1, pt2, …}, data] represents a graphics complex in which coordinates given as integers i in graphics primitives in data are taken to be pti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphicsComplex)))
(def GraphicsGrid "GraphicsGrid[{{g11, g12, …}, …}] generates a graphic in which the gij are laid out in a two-dimensional grid." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphicsGrid)))
(def GraphicsGroup "GraphicsGroup[{g1, g2, …}] represents a collection of graphics objects grouped together for purposes of interactive selection in a notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphicsGroup)))
(def GraphicsRow "GraphicsRow[{g1, g2, …}] generates a graphic in which the gi are laid out in a row.\nGraphicsRow[list, spacing] leaves the specified spacing between successive elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GraphicsRow)))
(def Gray "Gray represents the color gray in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Gray)))
(def GrayLevel "GrayLevel[g] represents a color in the grayscale color space with gray level g.\nGrayLevel[g, a] specifies opacity a. \nGrayLevel[\"string\"] returns a color from an HTML color name etc.\nGrayLevel[color] returns the grayscale representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GrayLevel)))
(def Greater "x>y yields True if x is determined to be greater than y. \nx1>x2>x3 yields True if the xi form a strictly decreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Greater)))
(def GreaterEqual "x>=y or x≥y yields True if x is determined to be greater than or equal to y. \nx1≥x2≥x3 yields True if the xi form a nonincreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterEqual)))
(def GreaterEqualLess "GreaterEqualLess[x, y, …] displays as x⋛y⋛…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterEqualLess)))
(def GreaterEqualThan "GreaterEqualThan[y] is an operator form that yields x≥y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterEqualThan)))
(def GreaterFullEqual "GreaterFullEqual[x, y, …] displays as x≧y≧…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterFullEqual)))
(def GreaterGreater "GreaterGreater[x, y, …] displays as x≫y≫…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterGreater)))
(def GreaterLess "GreaterLess[x, y, …] displays as x≷y≷…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterLess)))
(def GreaterSlantEqual "GreaterSlantEqual[x, y, …] displays as x⩾y⩾…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterSlantEqual)))
(def GreaterThan "GreaterThan[y] is an operator form that yields x>y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterThan)))
(def GreaterTilde "GreaterTilde[x, y, …] displays as x≳y≳…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreaterTilde)))
(def Green "Green represents the color green in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Green)))
(def GreenFunction "GreenFunction[{ℒ[u[x]], ℬ[u[x]]}, u, {x, xmin, xmax}, y] gives a Green's function for the linear differential operator ℒ with boundary conditions ℬ in the range xmin to xmax. \nGreenFunction[{ℒ[u[x1, x2, …]], ℬ[u[x1, x2, …]]}, u, {x1, x2, …}∈Ω, {y1, y2, …}] gives a Green's function for the linear partial differential operator ℒ over the region Ω.\nGreenFunction[{ℒ[u[x, t]], ℬ[u[x, t]]}, u, {x, xmin, xmax}, t, {y, τ}] gives a Green's function for the linear time-dependent operator ℒ in the range xmin to xmax.\nGreenFunction[{ℒ[u[x1, …, t]], ℬ[u[x1, …, t]]}, u, {x1, …}∈Ω, t, {y1, …, τ}] gives a Green's function for the linear time-dependent operator ℒ over the region Ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GreenFunction)))
(def Grid "Grid[{{expr11, expr12, …}, {expr21, expr22, …}, …}] is an object that formats with the exprij arranged in a two-dimensional grid." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Grid)))
(def GridBox "GridBox[{{box11, box12, …}, {box21, box22, …}, …}] is a low-level box construct that represents a two-dimensional grid of boxes or strings in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridBox)))
(def GridDefaultElement "GridDefaultElement is an option for the low-level function GridBox that specifies what to insert when a new element is created interactively in a GridBox." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridDefaultElement)))
(def GridGraph "GridGraph[{m, n}] gives the grid graph with m×n vertices G m, n.\nGridGraph[{n1, n2, …, nk}] gives the k-dimensional grid graph with n1×n2×⋯×nk vertices G n1, n2, …, nk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridGraph)))
(def GridLines "GridLines is an option for two-dimensional graphics functions that specifies grid lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridLines)))
(def GridLinesStyle "GridLinesStyle is an option for 2D graphics functions that specifies how grid lines should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridLinesStyle)))
(def GridVideo "GridVideo[{v1, v2, …}] creates a video in which each frame is a grid of frames of all vi at the corresponding time.\nGridVideo[{{v11, v12, …}, …}] uses the array position of each video vij to create the video grid." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GridVideo)))
(def GroebnerBasis "GroebnerBasis[{poly1, poly2, …}, {x1, x2, …}] gives a list of polynomials that form a Gröbner basis for the set of polynomials polyi. \nGroebnerBasis[{poly1, poly2, …}, {x1, x2, …}, {y1, y2, …}] finds a Gröbner basis in which the yi have been eliminated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroebnerBasis)))
(def GroupActionBase "GroupActionBase is an option to specify a base for a group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupActionBase)))
(def GroupBy "GroupBy[{elem1, elem2, …}, f] gives an association that groups the elemi into lists associated with distinct keys f[elemi].\nGroupBy[{elem1, elem2, …}, fkfv] groups the fv[elemi] according to the fk[elemi].\nGroupBy[{elem1, elem2, …}, {fs1, fs2, …}] groups into nested associations using fsi at level i.\nGroupBy[{elem1, elem2, …}, spec, red] applies the function red to reduce lists of values that are generated.\nGroupBy[spec] represents an operator form of GroupBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupBy)))
(def GroupCentralizer "GroupCentralizer[group, g] returns the centralizer of the element g in group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupCentralizer)))
(def GroupElementFromWord "GroupElementFromWord[group, w] returns the element of group determined by the word w in the generators of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupElementFromWord)))
(def GroupElementPosition "GroupElementPosition[group, g] returns the position of the element g in the list of elements of group.\nGroupElementPosition[group, {g1, …, gn}] returns the list of positions of the elements g1, …, gn in group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupElementPosition)))
(def GroupElementQ "GroupElementQ[group, g] returns True if the object g is an element of group and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupElementQ)))
(def GroupElementToWord "GroupElementToWord[group, g] decomposes the group element g as a product of generators of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupElementToWord)))
(def GroupElements "GroupElements[group] returns the list of all elements of group.\nGroupElements[group, {r1, …, rk}] returns the elements numbered r1, …, rk in group in the standard order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupElements)))
(def GroupGenerators "GroupGenerators[group] returns a list of generators of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupGenerators)))
(def GroupMultiplicationTable "GroupMultiplicationTable[group] gives the multiplication table of group as an array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupMultiplicationTable)))
(def GroupOrbits "GroupOrbits[group, {p1, …}] returns the orbits of the points pi under the action of the elements of group.\nGroupOrbits[group, {p1, …}, f] finds the orbits under the group action given by a function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupOrbits)))
(def GroupOrder "GroupOrder[group] returns the number of elements of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupOrder)))
(def GroupPageBreakWithin "GroupPageBreakWithin is an option for Cell that specifies whether a page break should be allowed within the group of cells if the notebook that contains the group is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupPageBreakWithin)))
(def GroupSetwiseStabilizer "GroupSetwiseStabilizer[group, {p1, …, pn}] returns the subgroup of group for which the images of the points pi are still in the list {p1, …, pn}.\nGroupSetwiseStabilizer[group, {p1, …, pn}, f] returns the setwise stabilizer subgroup under the action given by the function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupSetwiseStabilizer)))
(def GroupStabilizer "GroupStabilizer[group, {p1, …, pn}] returns the subgroup of elements of group that move none of the points p1, …, pn.\nGroupStabilizer[group, {p1, …, pn}, f] returns the stabilizer subgroup under the action given by the function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupStabilizer)))
(def GroupStabilizerChain "GroupStabilizerChain[group] returns a list of successive stabilizers in group of the points in a base of group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GroupStabilizerChain)))
(def Groupings "Groupings[n, k] gives a list of all possible groupings of 1, …, n taken k at a time. \nGroupings[{a1, …, an}, k] gives all possible groupings of a1, …, an taken k at a time.\nGroupings[{{a1, a2, …}, {b1, b2, …}, …}, k] gives the combination of all possible groupings of each of the lists ai, bi, … taken k at a time.\nGroupings[aspec, fk] gives all possible groupings of aspec taken k at a time with the function f applied at each level. \nGroupings[aspec, {f1k1, f2k2, …}] gives all possible groupings in which the function fi is applied to ki elements. \nGroupings[aspec, {{f1k1, m1}, {f2k2, m2}, …}] allows at most mi occurrences in a given grouping of fi applied to ki elements.\nGroupings[aspec, kspec, h] wraps the function h around each grouping generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Groupings)))
(def GrowCutComponents "GrowCutComponents[image, {marker1, marker2, …}] creates a segmentation from image by growing each markeri. \nGrowCutComponents[video, …] returns segmentation for each frame in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GrowCutComponents)))
(def Gudermannian "Gudermannian[z] gives the Gudermannian function gd (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Gudermannian)))
(def GuidedFilter "GuidedFilter[image, guide, r, ϵ] filters image using the guide image guide over range-r neighborhoods with pixel-value regularizer ϵ.\nGuidedFilter[image, r, ϵ] filters image so as to reduce noise, using image as the guide." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GuidedFilter)))
(def GumbelDistribution "GumbelDistribution[α, β] represents a Gumbel distribution with location parameter α and scale parameter β.\nGumbelDistribution[] represents a Gumbel distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote GumbelDistribution)))
(def HITSCentrality "HITSCentrality[g] gives a list of authority and hub centralities for the vertices in the graph g.\nHITSCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HITSCentrality)))
(def HTTPErrorResponse "HTTPErrorResponse[code] is an object that represents an error response to an HTTP request, with specified error code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HTTPErrorResponse)))
(def HTTPRedirect "HTTPRedirect[uri] represents an HTTP redirect to the specified uri.\nHTTPRedirect[uri, metadata] represents an HTTP redirect to uri with the specified metadata." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HTTPRedirect)))
(def HTTPRequest "HTTPRequest[url] represents an HTTP request for the specified URL.\nHTTPRequest[assoc] represents an HTTP request built from the components in the association assoc. \nHTTPRequest[url, assoc] represents an HTTP request for the specified URL with additional elements such as headers given by assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HTTPRequest)))
(def HTTPRequestData "HTTPRequestData[\"prop\"] gives the value of the specified property of the current HTTP request.\nHTTPRequestData[] gives an association with values of properties of the current HTTP request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HTTPRequestData)))
(def HTTPResponse "HTTPResponse[body] is an object that represents a successful response to an HTTP request, with the specified body and default metadata.\nHTTPResponse[body, metadata] represents a response to an HTTP request, including the specified body and metadata." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HTTPResponse)))
(def HaarWavelet "HaarWavelet[] represents a Haar wavelet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HaarWavelet)))
(def HadamardMatrix "HadamardMatrix[n] returns an n×n Hadamard matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HadamardMatrix)))
(def HalfLine "HalfLine[{p1, p2}] represents the half-line from the point p1 through p2. \nHalfLine[p, v] represents the half-line from the point p in the direction v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HalfLine)))
(def HalfNormalDistribution "HalfNormalDistribution[θ] represents a half-normal distribution with scale inversely proportional to parameter θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HalfNormalDistribution)))
(def HalfPlane "HalfPlane[{p1, p2}, w] represents the half-plane bounded by the line through p1 and p2 and extended in the direction w.\nHalfPlane[p, v, w] represents the half-plane bounded by the line through p along v and extended in the direction w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HalfPlane)))
(def HalfSpace "HalfSpace[n, p] represents the half-space of points x such that n.(x-p)≤0.\nHalfSpace[n, c] represents the half-space of points x such that n.x≤c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HalfSpace)))
(def HalftoneShading "HalftoneShading[] is a three-dimensional graphics directive specifying that surfaces that follow are to be drawn with a base pattern of dots.\nHalftoneShading[d] uses the density d of shading.\nHalftoneShading[col] uses dots with the specified color col.\nHalftoneShading[\"shape\"] uses the specified \"shape\" as base pattern. \nHalftoneShading[d, col, \"shape\"] uses a fixed pattern of \"shape\" with the specified color col and density d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HalftoneShading)))
(def Haloing "Haloing[] is a two‐dimensional directive specifying that graphics objects are to be drawn with a halo.\nHaloing[col] uses the specified color col for the halo.\nHaloing[col, w] uses the specified width w for the halo.\nHaloing[col, w, r] applies a blur effect with radius r to the halo." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Haloing)))
(def HamiltonianGraphQ "HamiltonianGraphQ[g] yields True if the graph g is Hamiltonian, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HamiltonianGraphQ)))
(def HammingDistance "HammingDistance[u, v] gives the Hamming distance between strings or vectors u and v.\nHammingDistance[u, v] gives the Hamming distance between strings, vectors or biomolecular sequences u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HammingDistance)))
(def HammingWindow "HammingWindow[x] represents a Hamming window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HammingWindow)))
(def HandlerFunctions "HandlerFunctions is an option that specifies functions to apply when events are generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HandlerFunctions)))
(def HandlerFunctionsKeys "HandlerFunctionsKeys is an option that specifies the content of associations to which to apply handler functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HandlerFunctionsKeys)))
(def HankelH1 "HankelH1[n, z] gives the Hankel function of the first kind H _n^(1)(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HankelH1)))
(def HankelH2 "HankelH2[n, z] gives the Hankel function of the second kind H _n^(2)(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HankelH2)))
(def HankelMatrix "HankelMatrix[n] gives the n×n Hankel matrix with first row and first column being successive integers.\nHankelMatrix[{c1, c2, …, cn}] gives the Hankel matrix whose first column consists of entries c1, c2, ….\nHankelMatrix[{c1, c2, …, cm}, {r1, r2, …, rn}] gives the Hankel matrix with entries ci down the first column, and ri across the last row." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HankelMatrix)))
(def HankelTransform "HankelTransform[expr, r, s] gives the Hankel transform of order 0 for expr.\nHankelTransform[expr, r, s, ν] gives the Hankel transform of order ν for expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HankelTransform)))
(def HannPoissonWindow "HannPoissonWindow[x] represents a Hann–Poisson window function of x.\nHannPoissonWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HannPoissonWindow)))
(def HannWindow "HannWindow[x] represents a Hann window function of x.\nHannWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HannWindow)))
(def HaradaNortonGroupHN "HaradaNortonGroupHN[] represents the sporadic simple Harada–Norton group HN." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HaradaNortonGroupHN)))
(def HararyGraph "HararyGraph[k, n] generates the minimal k-connected graph on n vertices H k, n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HararyGraph)))
(def HardcorePointProcess "HardcorePointProcess[μ, rh, d] represents a hard-core point process with constant intensity μ and hard-core radius rh in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HardcorePointProcess)))
(def HarmonicMean "HarmonicMean[data] gives the harmonic mean of the values in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HarmonicMean)))
(def HarmonicMeanFilter "HarmonicMeanFilter[data, r] filters data by replacing every value by the harmonic mean value in its range-r neighborhood.\nHarmonicMeanFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HarmonicMeanFilter)))
(def HarmonicNumber "HarmonicNumber[n] gives the n ^th harmonic number Hn.\nHarmonicNumber[n, r] gives the harmonic number H _n^(r) of order r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HarmonicNumber)))
(def Hash "Hash[expr] gives an integer hash code for the expression expr.\nHash[expr, type] gives an integer hash digest of the specified type for expr.\nHash[expr, type, \"format\"] gives a hash code in the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hash)))
(def HatchFilling "HatchFilling[] is a two-dimensional graphics directive that specifies that faces of polygons and other filled graphics objects are to be drawn using closely spaced parallel lines. \nHatchFilling[\"name\"] uses the specified line hatching \"name\".\nHatchFilling[θ] draws parallel lines with an angle θ.\nHatchFilling[θ, r] draws parallel lines with absolute thickness r. \nHatchFilling[θ, r, d] draws parallel lines with gaps of absolute thickness d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HatchFilling)))
(def HatchShading "HatchShading[] is a three-dimensional graphics directive specifying that objects that follow are to be drawn with closely spaced parallel lines.\nHatchShading[d] uses the density d of shading.\nHatchShading[col] uses lines with the specified color col. \nHatchShading[d, col] uses lines with the specified color col and density d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HatchShading)))
(def Haversine "Haversine[z] gives the haversine function hav (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Haversine)))
(def HazardFunction "HazardFunction[dist, x] gives the hazard function for the distribution dist evaluated at x.\nHazardFunction[dist, {x1, x2, …}] gives the multivariate hazard function for the distribution dist evaluated at {x1, x2, …}.\nHazardFunction[dist] gives the hazard function as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HazardFunction)))
(def Head "Head[expr] gives the head of expr. \nHead[expr, h] wraps the result with h." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Head)))
(def HeaderAlignment "HeaderAlignment is an option for Dataset that specifies how the contents of a header should be aligned within the available area in the header." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderAlignment)))
(def HeaderBackground "HeaderBackground is an option for Dataset that specifies what background color to use for row and column headers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderBackground)))
(def HeaderDisplayFunction "HeaderDisplayFunction is an option for Dataset that specifies a function to apply to headers before displaying them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderDisplayFunction)))
(def HeaderLines "HeaderLines is an option for SemanticImport and related functions that specifies how many of the initial rows should be considered part of a column header." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderLines)))
(def HeaderSize "HeaderSize is an option for Dataset that specifies the widths and heights of headers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderSize)))
(def HeaderStyle "HeaderStyle is an option for Dataset that specifies the style to use for headers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeaderStyle)))
(def Heads "Heads is an option for functions which use level specifications that specifies whether heads of expressions should be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Heads)))
(def HeatFluxValue "HeatFluxValue[pred, vars, pars] represents a thermal heat flux boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatFluxValue[pred, vars, pars, lkey] represents a thermal heat flux boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatFluxValue)))
(def HeatInsulationValue "HeatInsulationValue[pred, vars, pars] represents a thermal insulation boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatInsulationValue[pred, vars, pars, lkey] represents a thermal insulation boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatInsulationValue)))
(def HeatOutflowValue "HeatOutflowValue[pred, vars, pars] represents a thermal outflow boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatOutflowValue[pred, vars, pars, lkey] represents a thermal outflow boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatOutflowValue)))
(def HeatRadiationValue "HeatRadiationValue[pred, vars, pars] represents a thermal radiation boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatRadiationValue[pred, vars, pars, lkey] represents a thermal radiation boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatRadiationValue)))
(def HeatSymmetryValue "HeatSymmetryValue[pred, vars, pars] represents a thermal symmetry boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatSymmetryValue[pred, vars, pars, lkey] represents a thermal symmetry boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatSymmetryValue)))
(def HeatTemperatureCondition "HeatTemperatureCondition[pred, vars, pars] represents a thermal surface boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatTemperatureCondition[pred, vars, pars, lkey] represents a thermal surface boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatTemperatureCondition)))
(def HeatTransferPDEComponent "HeatTransferPDEComponent[vars, pars] yields a heat transfer PDE term with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatTransferPDEComponent)))
(def HeatTransferValue "HeatTransferValue[pred, vars, pars] represents a thermal transfer boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nHeatTransferValue[pred, vars, pars, lkey] represents a thermal transfer boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeatTransferValue)))
(def HeavisideLambda "HeavisideLambda[x] represents the triangle distribution Λ(x) which is nonzero for x<1.\nHeavisideLambda[x1, x2, …] represents the multidimensional triangle distribution Λ(x1, x2, …) which is nonzero for xi<1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeavisideLambda)))
(def HeavisidePi "HeavisidePi[x] represents the box distribution Π(x), equal to 1 for x<1/2 and 0 for x>(1/2).\nHeavisidePi[x1, x2, …] represents the multidimensional box distribution Π(x1, x2, …) which is 1 if all xi<1/2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeavisidePi)))
(def HeavisideTheta "HeavisideTheta[x] represents the Heaviside theta function θ(x), equal to 0 for x<0 and 1 for x>0. \nHeavisideTheta[x1, x2, …] represents the multidimensional Heaviside theta function, which is 1 only if all of the xi are positive." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeavisideTheta)))
(def HeldGroupHe "HeldGroupHe[] represents the sporadic simple Held group He." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeldGroupHe)))
(def HelmholtzPDEComponent "HelmholtzPDEComponent[vars, pars] yields a Helmholtz PDE term ∇^2{x1, …, xn}u+k^2 u with model variables vars and model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HelmholtzPDEComponent)))
(def Here "Here represents the current deduced geo location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Here)))
(def HermiteDecomposition "HermiteDecomposition[m] gives the Hermite normal form decomposition of an integer matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HermiteDecomposition)))
(def HermiteH "HermiteH[n, x] gives the Hermite polynomial Hn (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HermiteH)))
(def Hermitian "Hermitian[{1, 2}] represents the symmetry of a Hermitian matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hermitian)))
(def HermitianMatrix "HermitianMatrix[hmat] converts the Hermitian matrix hmat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HermitianMatrix)))
(def HermitianMatrixQ "HermitianMatrixQ[m] gives True if m is explicitly Hermitian, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HermitianMatrixQ)))
(def HessenbergDecomposition "HessenbergDecomposition[m] gives the Hessenberg decomposition of a numerical matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HessenbergDecomposition)))
(def HeunB "HeunB[q, α, γ, δ, ϵ, z] gives the bi-confluent Heun function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunB)))
(def HeunBPrime "HeunBPrime[q, α, γ, δ, ϵ, z] gives the z-derivative of the HeunB function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunBPrime)))
(def HeunC "HeunC[q, α, γ, δ, ϵ, z] gives the confluent Heun function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunC)))
(def HeunCPrime "HeunCPrime[q, α, γ, δ, ϵ, z] gives the z-derivative of the HeunC function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunCPrime)))
(def HeunD "HeunD[q, α, γ, δ, ϵ, z] gives the double-confluent Heun function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunD)))
(def HeunDPrime "HeunDPrime[q, α, γ, δ, ϵ, z] gives the z-derivative of the HeunD function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunDPrime)))
(def HeunG "HeunG[a, q, α, β, γ, δ, z] gives the general Heun function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunG)))
(def HeunGPrime "HeunGPrime[a, q, α, β, γ, δ, z] gives the z-derivative of the HeunG function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunGPrime)))
(def HeunT "HeunT[q, α, γ, δ, ϵ, z] gives the tri-confluent Heun function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunT)))
(def HeunTPrime "HeunTPrime[q, α, γ, δ, ϵ, z] gives the z-derivative of the HeunT function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HeunTPrime)))
(def HexadecimalCharacter "HexadecimalCharacter represents a hexadecimal digit character 0–9, a–f, A–F in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HexadecimalCharacter)))
(def Hexahedron "Hexahedron[{p1, p2, …, p8}] represents a filled hexahedron with corners p1, p2, …, p8.\nHexahedron[{{p 1, 1, p 1, 2, …, p 1, 8}, {p 2, 1, …}, …}] represents a collection of hexahedra." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hexahedron)))
(def HiddenItems "HiddenItems is an option for Dataset that specifies which items to hide." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HiddenItems)))
(def HiddenMarkovProcess "HiddenMarkovProcess[i0, m, em] represents a discrete-time, finite-state hidden Markov process with transition matrix m, emission matrix em, and initial hidden state i0.\nHiddenMarkovProcess[…, m, {dist1, …}] represents a hidden Markov process with emission distributions disti.\nHiddenMarkovProcess[p0, m, …] represents a hidden Markov process with initial hidden state probability vector p0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HiddenMarkovProcess)))
(def HighlightGraph "HighlightGraph[g, {a1, a2, …}] highlights the ai that can be vertices, edges, or subgraphs of g.\nHighlightGraph[g, {…, wj[aj], …}] highlights using the symbolic wrappers wj.\nHighlightGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HighlightGraph)))
(def HighlightImage "HighlightImage[image, roi] highlights the specified region of interest roi in image.\nHighlightImage[image, {roi1, roi2, …}] highlights several regions of interest roii.\nHighlightImage[image, {…, w[roii], …}] highlights using a feature defined by the symbolic wrapper w.\nHighlightImage[image, fg, bgstyle] applies the styling bgstyle to the complement of all the regions of interest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HighlightImage)))
(def HighlightMesh "HighlightMesh[mr, {cellspec1, cellspec2, …}] highlights the cells specified by cellspeci in the mesh region mr.\nHighlightMesh[mr, {…, wj[cellspecj], …}] highlights using the symbolic wrappers wj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HighlightMesh)))
(def HighlightVideo "HighlightVideo[video, f] runs f on each frame of video.\nHighlightVideo[video, objs] highlights regions of interest objs for given times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HighlightVideo)))
(def Highlighted "Highlighted[expr] displays a highlighted version of expr.\nHighlighted[expr, effect] uses the effect effect to highlight plot elements representing expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Highlighted)))
(def HighpassFilter "HighpassFilter[data, ωc] applies a highpass filter with a cutoff frequency ωc to an array of data.\nHighpassFilter[data, ωc, n] uses a filter kernel of length n.\nHighpassFilter[data, ωc, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HighpassFilter)))
(def HigmanSimsGroupHS "HigmanSimsGroupHS[] represents the sporadic simple Higman–Sims group HS." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HigmanSimsGroupHS)))
(def HilbertCurve "HilbertCurve[n] gives the line segments representing the n ^th-step Hilbert curve.\nHilbertCurve[n, d] gives the n ^th-step Hilbert curve in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HilbertCurve)))
(def HilbertFilter "HilbertFilter[data, ωc] applies a Hilbert filter with a cutoff frequency ωc to an array of data.\nHilbertFilter[data, ωc, n] uses a filter kernel of length n.\nHilbertFilter[data, ωc, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HilbertFilter)))
(def HilbertMatrix "HilbertMatrix[n] gives the n×n Hilbert matrix with elements of the form 1/(i+j-1).\nHilbertMatrix[{m, n}] gives the m×n Hilbert matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HilbertMatrix)))
(def Histogram "Histogram[{x1, x2, …}] plots a histogram of the values xi.\nHistogram[{x1, x2, …}, bspec] plots a histogram with bin width specification bspec.\nHistogram[{x1, x2, …}, bspec, hspec] plots a histogram with bin heights computed according to the specification hspec.\nHistogram[{data1, data2, …}, …] plots histograms for multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Histogram)))
(def Histogram3D "Histogram3D[{{x1, y1}, {x2, y2}, …}] plots a 3D histogram of the values {xi, yi}.\nHistogram3D[{{x1, y1}, {x2, y2}, …}, bspec] plots a 3D histogram with bins specified by bspec.\nHistogram3D[{{x1, y1}, {x2, y2}, …}, bspec, hspec] plots a 3D histogram with bin heights computed according to the specification hspec.\nHistogram3D[{data1, data2, …}] plots 3D histograms for multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Histogram3D)))
(def HistogramDistribution "HistogramDistribution[{x1, x2, …}] represents the probability distribution corresponding to a histogram of the data values xi.\nHistogramDistribution[{{x1, y1, …}, {x2, y2, …}, …}] represents a multivariate histogram distribution based on data values {xi, yi, …}.\nHistogramDistribution[…, bspec] represents a histogram distribution with bins specified by bspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistogramDistribution)))
(def HistogramList "HistogramList[{x1, x2, …}] gives a list of bins and histogram heights of the values xi.\nHistogramList[{{x1, y1, …}, {x2, y2, …}, …}] gives a list of bins and histogram heights of the values {xi, yi, …}.\nHistogramList[…, bspec] gives a list of bins and histogram heights with bins specified by bspec.\nHistogramList[…, bspec, hspec] gives a list of bins and histogram heights with bin heights computed according to the specification hspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistogramList)))
(def HistogramPointDensity "HistogramPointDensity[pdata] estimates the histogram point density function μ(x) for point data pdata. \nHistogramPointDensity[pdata, bspec] estimates the histogram point density function μ(x) with histogram bins specified by bspec.\nHistogramPointDensity[bdata, …, …] estimates the histogram point density function μ(x) for binned data bdata. \nHistogramPointDensity[pproc, …, …] computes the histogram point density function μ(x) for the point process pproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistogramPointDensity)))
(def HistogramTransform "HistogramTransform[image] transforms pixel values of image so that its histogram is nearly flat.\nHistogramTransform[image, ref] modifies pixel values of image so that its histogram would have nearly the same distribution as ref.\nHistogramTransform[image, ref, n] uses n equally spaced quantiles.\nHistogramTransform[{x1, x2, …}, …] transforms values xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistogramTransform)))
(def HistogramTransformInterpolation "HistogramTransformInterpolation[{x1, x2, …}] finds a function f so that the transformed values f(xi) are distributed nearly uniformly.\nHistogramTransformInterpolation[{x1, x2, …}, ref] finds f so that f(xi) are distributed with distribution ref.\nHistogramTransformInterpolation[{x1, x2, …}, ref, n] finds a function with n equally spaced quantiles.\nHistogramTransformInterpolation[image, …] finds a function that reshapes the histogram of image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistogramTransformInterpolation)))
(def HistoricalPeriodData "HistoricalPeriodData[entity, property] gives the value of the specified property for the historical period entity.\nHistoricalPeriodData[{entity1, entity2, …}, property] gives a list of property values for the specified historical period entities.\nHistoricalPeriodData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HistoricalPeriodData)))
(def HitMissTransform "HitMissTransform[image, ker] gives the hit-or-miss transform of image with respect to the composite structuring element ker.\nHitMissTransform[image, {ker1, ker2, …}] gives the union of the hit-or-miss transforms for all the structuring elements keri.\nHitMissTransform[image, {ker1, ker2, …}, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HitMissTransform)))
(def HjorthDistribution "HjorthDistribution[m, s, f] represents the Hjorth distribution with location parameter m, scale parameter s, and shape parameter f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HjorthDistribution)))
(def HodgeDual "HodgeDual[tensor] gives the Hodge dual of the tensor\nHodgeDual[tensor, dim] dualizes tensor in the slots with dimension dim\nHodgeDual[tensor, dim, slots] dualizes tensor in the given slots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HodgeDual)))
(def HoeffdingD "HoeffdingD[v1, v2] gives Hoeffding's dependence measure  for the vectors v1 and v2.\nHoeffdingD[m] gives Hoeffding's dependence measure  for the matrix m.\nHoeffdingD[m1, m2] gives Hoeffding's dependence measure  for the matrices m1 and m2.\nHoeffdingD[dist] gives Hoeffding's  matrix for the multivariate symbolic distribution dist.\nHoeffdingD[dist, i, j] gives the (i, j)^th element of  for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoeffdingD)))
(def HoeffdingDTest "HoeffdingDTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nHoeffdingDTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoeffdingDTest)))
(def Hold "Hold[expr] maintains expr in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hold)))
(def HoldAll "HoldAll is an attribute that specifies that all arguments to a function are to be maintained in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldAll)))
(def HoldAllComplete "HoldAllComplete is an attribute which specifies that all arguments to a function are not to be modified or looked at in any way in the process of evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldAllComplete)))
(def HoldComplete "HoldComplete[expr] shields expr completely from the standard Wolfram Language evaluation process, preventing even upvalues associated with expr from being used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldComplete)))
(def HoldCompleteForm "HoldCompleteForm[expr] prints as the expression expr, shielding expr completely from the standard Wolfram Language evaluation process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldCompleteForm)))
(def HoldFirst "HoldFirst is an attribute that specifies that the first argument to a function is to be maintained in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldFirst)))
(def HoldForm "HoldForm[expr] prints as the expression expr, with expr maintained in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldForm)))
(def HoldPattern "HoldPattern[expr] is equivalent to expr for pattern matching, but maintains expr in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldPattern)))
(def HoldRest "HoldRest is an attribute which specifies that all but the first argument to a function are to be maintained in an unevaluated form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoldRest)))
(def HolderModel "HolderModel[] represents the single-input, single-output model of a zero-order hold.\nHolderModel[specs] represents a holder with specifications specs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HolderModel)))
(def HolidayCalendar "HolidayCalendar is an option that specifies the holiday calendar schedule in business day functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HolidayCalendar)))
(def HorizontalGauge "HorizontalGauge[value] draws a linear gauge showing value in a range of 0 to 1.\nHorizontalGauge[value, {min, max}] draws a linear gauge showing value in a range of min to max.\nHorizontalGauge[Dynamic[value], …] allows value to be set interactively using the gauge.\nHorizontalGauge[{value1, value2, …}, …] draws a gauge showing multiple values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HorizontalGauge)))
(def HornerForm "HornerForm[poly] puts the polynomial poly in Horner form.\nHornerForm[poly, vars] puts poly in Horner form with respect to the variable or variable list vars.\nHornerForm[poly1/poly2] puts the rational function poly1/poly2 in Horner form by nesting poly1 and poly2.\nHornerForm[poly1/poly2, vars1, vars2] puts poly1/poly2 in Horner form using the variables or variable lists vars1 and vars2 for poly1 and poly2, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HornerForm)))
(def HostLookup "HostLookup[name] gives the IP address for the host with the specified name.\nHostLookup[address] gives the host name for the host at the specified IP address.\nHostLookup[spec, prop] gives a specified property of the host.\nHostLookup[spec, All] gives an association of properties found for the host." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HostLookup)))
(def HotellingTSquareDistribution "HotellingTSquareDistribution[p, m] represents Hotelling's T^2 distribution with dimensionality parameter p and m degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HotellingTSquareDistribution)))
(def HoytDistribution "HoytDistribution[q, ω] represents a Hoyt distribution with shape parameter q and spread parameter ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HoytDistribution)))
(def Hue "Hue[h] represents a color in the HSB color space with hue h. \nHue[h, s, b] specifies colors in terms of hue, saturation and brightness. \nHue[h, s, b, a] specifies opacity a. \nHue[\"string\"] returns a color from an HTML color name etc.\nHue[color] returns the HSB representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hue)))
(def HumanGrowthData "HumanGrowthData[spec] returns the range of values within one standard deviation of the mean for all properties of human growth at the specification spec.\nHumanGrowthData[spec, property] returns the range of values within one standard deviation of the mean of a property for the specification spec.\nHumanGrowthData[spec, index] returns the values for all properties of human growth for spec at the specified percentile.\nHumanGrowthData[spec, property, index] returns the value at a specific index of a property for spec at the specified percentile.\nHumanGrowthData[spec, property, quantity] returns the percentile and probability density for a specific value quantity of the property at spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HumanGrowthData)))
(def HumpDownHump "HumpDownHump[x, y, …] displays as x≎y≎…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HumpDownHump)))
(def HumpEqual "HumpEqual[x, y, …] displays as x≏y≏…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HumpEqual)))
(def HurwitzLerchPhi "HurwitzLerchPhi[z, s, a] gives the Hurwitz–Lerch transcendent Φ (z, s, a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HurwitzLerchPhi)))
(def HurwitzZeta "HurwitzZeta[s, a] gives the Hurwitz zeta function ζ (s, a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HurwitzZeta)))
(def HyperbolicDistribution "HyperbolicDistribution[α, β, δ, μ] represents a hyperbolic distribution with location parameter μ, scale parameter δ, shape parameter α, and skewness parameter β.\nHyperbolicDistribution[λ, α, β, δ, μ] represents a generalized hyperbolic distribution with shape parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HyperbolicDistribution)))
(def HypercubeGraph "HypercubeGraph[n] gives the n-dimensional hypercube graph Qn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypercubeGraph)))
(def HyperexponentialDistribution "HyperexponentialDistribution[{α1, …, αm}, {λ1, …, λm}] represents an m-phase hyperexponential distribution with phase probabilities αi and rates λi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HyperexponentialDistribution)))
(def Hyperfactorial "Hyperfactorial[n] gives the hyperfactorial function H (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hyperfactorial)))
(def Hypergeometric0F1 "Hypergeometric0F1[a, z] is the confluent hypergeometric function 0F1(;a;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric0F1)))
(def Hypergeometric0F1Regularized "Hypergeometric0F1Regularized[a, z] is the regularized confluent hypergeometric function 0F1(;a;z)/Γ(a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric0F1Regularized)))
(def Hypergeometric1F1 "Hypergeometric1F1[a, b, z] is the Kummer confluent hypergeometric function 1F1(a;b;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric1F1)))
(def Hypergeometric1F1Regularized "Hypergeometric1F1Regularized[a, b, z] is the regularized confluent hypergeometric function 1F1(a;b;z)/Γ(b)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric1F1Regularized)))
(def Hypergeometric2F1 "Hypergeometric2F1[a, b, c, z] is the hypergeometric function 2F1(a, b;c;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric2F1)))
(def Hypergeometric2F1Regularized "Hypergeometric2F1Regularized[a, b, c, z] is the regularized hypergeometric function 2F1(a, b;c;z)/Γ(c)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hypergeometric2F1Regularized)))
(def HypergeometricDistribution "HypergeometricDistribution[n, nsucc, ntot] represents a hypergeometric distribution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypergeometricDistribution)))
(def HypergeometricPFQ "HypergeometricPFQ[{a1, …, ap}, {b1, …, bq}, z] is the generalized hypergeometric function pFq (a;b;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypergeometricPFQ)))
(def HypergeometricPFQRegularized "HypergeometricPFQRegularized[{a1, …, ap}, {b1, …, bq}, z] is the regularized generalized hypergeometric function pFq (a;b;z)/(Γ(b1)… Γ(bq))." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypergeometricPFQRegularized)))
(def HypergeometricU "HypergeometricU[a, b, z] is the Tricomi confluent hypergeometric function U (a, b, z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypergeometricU)))
(def Hyperlink "Hyperlink[uri] represents a hyperlink that jumps to the specified URI when clicked. \nHyperlink[label, uri] represents a hyperlink to be displayed as label." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hyperlink)))
(def HyperlinkAction "HyperlinkAction is an option for Hyperlink that controls the behavior of following links in cloud notebooks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HyperlinkAction)))
(def Hyperplane "Hyperplane[n, p] represents the hyperplane with normal n passing through the point p.\nHyperplane[n, c] represents the hyperplane with normal n given by the points x that satisfy n.xc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hyperplane)))
(def Hyphenation "Hyphenation is an option for Cell that specifies whether to allow hyphenation for words of text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Hyphenation)))
(def HypoexponentialDistribution "HypoexponentialDistribution[{λ1, …, λm}] represents an m-phase hypoexponential distribution with rates λ1, …, λm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypoexponentialDistribution)))
(def HypothesisTestData "HypothesisTestData[…] represents hypothesis test data such as generated by DistributionFitTest, AndersonDarlingTest, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote HypothesisTestData)))
(def I "I represents the imaginary unit Sqrt[-1]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote I)))
(def IPAddress "IPAddress[\"address\"] is a symbolic representation of an IPv4 or IPv6 IP address." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IPAddress)))
(def IconData "IconData[type, value] generates an icon of the specified type assuming the value given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IconData)))
(def IconRules "IconRules is an option for CloudObject and related objects that specifies icons to use in different environments to represent an object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IconRules)))
(def Iconize "Iconize[expr] gives an iconized form that can be used to stand in for expr in notebook input.\nIconize[expr, \"name\"] displays with the specified name in the icon." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Iconize)))
(def Icosahedron "Icosahedron[] represents a regular icosahedron centered at the origin with unit edge length.\nIcosahedron[l] represents an icosahedron with edge length l.\nIcosahedron[{θ, ϕ}, …] represents an icosahedron rotated by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nIcosahedron[{x, y, z}, …] represents an icosahedron centered at {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Icosahedron)))
(def Identity "Identity[expr] gives expr (the identity operation)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Identity)))
(def IdentityMatrix "IdentityMatrix[n] gives the nn identity matrix. \nIdentityMatrix[{m, n}] gives the mn identity matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IdentityMatrix)))
(def If "If[condition, t, f] gives t if condition evaluates to True, and f if it evaluates to False. \nIf[condition, t, f, u] gives u if condition evaluates to neither True nor False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote If)))
(def IfCompiled "IfCompiled[comp, uncomp] gives comp when compiled and uncomp when evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IfCompiled)))
(def IgnoreCase "IgnoreCase is an option for string manipulation and searching functions that specifies whether lowercase and uppercase letters should be treated as equivalent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnoreCase)))
(def IgnoreDiacritics "IgnoreDiacritics is an option for string, grammar, and related functions that specifies whether diacritics should be ignored in strings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnoreDiacritics)))
(def IgnoreIsotopes "IgnoreIsotopes is an option for MoleculeMatchQ that determines whether isotopes should be ignored for pattern matching." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnoreIsotopes)))
(def IgnorePunctuation "IgnorePunctuation is an option for AlphabeticSort and related functions that specifies whether to consider punctuation in determining sorting order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnorePunctuation)))
(def IgnoreStereochemistry "IgnoreStereochemistry is an option for MoleculeMatchQ that determines whether stereochemistry should be ignored for pattern matching." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnoreStereochemistry)))
(def IgnoringInactive "IgnoringInactive[patt] is a pattern object that, for purposes of pattern matching, ignores occurrences of Inactive in both patt and the expression being matched." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IgnoringInactive)))
(def Im "Im[z] gives the imaginary part of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Im)))
(def Image "Image[data] represents a raster image with pixel values given by the array data.\nImage[graphics] creates a raster image from a graphics object. \nImage[obj, options] gives an image that uses the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Image)))
(def Image3D "Image3D[data] represents a 3D image with pixel values given by the array data.\nImage3D[{image1, image2, …}] creates a 3D image from a list of 2D images.\nImage3D[obj, \"type\"] creates a 3D image of the specified data type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Image3D)))
(def Image3DProjection "Image3DProjection[image] takes a 3D image and returns a 2D image of maximum projection onto the x-y plane.\nImage3DProjection[image, dir] performs a projection in the direction specified by dir.\nImage3DProjection[image, dir, mode] specifies the projection mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Image3DProjection)))
(def Image3DSlices "Image3DSlices[image] gives a list of 2D images corresponding to the slices in the Image3D object image.\nImage3DSlices[image, n] gives the n ^th slice as a 2D image.\nImage3DSlices[image, {s1, s2, …}] extracts the specified slices si.\nImage3DSlices[image, sm;;sn] extracts slices sm through sn.\nImage3DSlices[image, …, d] takes slices in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Image3DSlices)))
(def ImageAccumulate "ImageAccumulate[image] gives an image in which each pixel represents a sum of all pixels below and to the left of that pixel in image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAccumulate)))
(def ImageAdd "ImageAdd[image, x] adds an amount x to each channel value in image.\nImageAdd[image1, image2] gives an image in which each pixel is the sum of the corresponding pixels in image1 and image2.\nImageAdd[image, expr1, expr2, …] adds all expri to image, where each expri can be either an image, a number, or a color value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAdd)))
(def ImageAdjust "ImageAdjust[image] adjusts the levels in image, rescaling them to cover the range 0 to 1.\nImageAdjust[image, corr] adjusts the image according to the correction specification corr.\nImageAdjust[image, corr, {inmin, inmax}] first rescales so that the range of input values inmin to inmax is mapped to 0 to 1.\nImageAdjust[image, corr, {inmin, inmax}, {outmin, outmax}] rescales so that the range of input values inmin to inmax is mapped to outmin to outmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAdjust)))
(def ImageAlign "ImageAlign[ref, image] returns a version of image that is aligned with the reference image ref.\nImageAlign[ref, {image1, …, imagen}] gives the result of aligning each of the imagei with the reference image ref.\nImageAlign[{image1, …, imagen}] uses image1 as the reference image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAlign)))
(def ImageApply "ImageApply[f, image] applies the function f to the list of channel values for each pixel in image.\nImageApply[f, {image1, image2, …}] applies f to the sequence of corresponding pixel values taken from each imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageApply)))
(def ImageApplyIndexed "ImageApplyIndexed[f, image] applies the function f to the list of channel values for each pixel in image, giving the row and column index of each pixel as a second argument to f.\nImageApplyIndexed[f, {image1, image2, …}] applies f to the sequence of corresponding pixel values taken from each imagei, giving the corresponding row and column index of pixels as the last argument to f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageApplyIndexed)))
(def ImageAspectRatio "ImageAspectRatio[image] gives the ratio of height to width for image.\nImageAspectRatio[video] gives the aspect ratio of video frames." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAspectRatio)))
(def ImageAssemble "ImageAssemble[{{im11, …, im 1n}, …, {im m1, …, immn}}] assembles a single image from an array of images.\nImageAssemble[{{im11, …, im 1n}, …, {im m1, …, immn}}, fitting] assembles images using the fitting method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAssemble)))
(def ImageAugmentationLayer "ImageAugmentationLayer[{h, w}] represents a net layer that applies random image transformations to produce images of height h and width w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageAugmentationLayer)))
(def ImageBoundingBoxes "ImageBoundingBoxes[image] gives an association of lists of bounding boxes for each identified category of objects in image.\nImageBoundingBoxes[image, category] gives a list of bounding boxes for subimages identified as an instance of the specified category.\nImageBoundingBoxes[video, …] gives a time series of detected bounding boxes in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageBoundingBoxes)))
(def ImageCapture "ImageCapture[] opens a graphical user interface for capturing images from connected cameras." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCapture)))
(def ImageCaptureFunction "ImageCaptureFunction is an option for ImageCapture that specifies the function to apply to images acquired by the imaging device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCaptureFunction)))
(def ImageCases "ImageCases[image] gives an association of lists of subimages for each identified category of objects in image.\nImageCases[image, category] gives a list of subimages identified as an instance of the specified category.\nImageCases[image, categoryprop] gives the specified property prop for each identified subimage.\nImageCases[image, {category1, category2, …}] gives an association with lists of subimages identified as being instances of each of the categoryi.\nImageCases[video, …] gives a time series of detected objects in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCases)))
(def ImageChannels "ImageChannels[image] gives the number of channels present in the data for the Image or Image3D object image.\nImageChannels[video] gives the number of channels present in frames of a video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageChannels)))
(def ImageClip "ImageClip[image] clips all channel values in image to lie in the default range.\nImageClip[image, {min, max}] clips channel values to lie in the range from min to max.\nImageClip[image, {min, max}, {vmin, vmax}] gives vmin for values below min and vmax for values above max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageClip)))
(def ImageCollage "ImageCollage[{image1, image2, …}] creates a collage of images imagei.\nImageCollage[{w1image1, w2image2, …}] creates a collage of images imagei based on their corresponding weights wi.\nImageCollage[image1w1, image2w2, …] also creates a collage of images imagei based on their corresponding weights wi.\nImageCollage[{w1, w2, …}{image1, image2, …}] also creates a collage of images imagei based on their corresponding weights wi.\nImageCollage[{{image1, w1}, {image2, w2}, …}] also creates a collage of images imagei based on their corresponding weights wi.\nImageCollage[…, fitting] uses the fitting method to create the collage.\nImageCollage[…, fitting, size] creates a collage of the specified size." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCollage)))
(def ImageColorSpace "ImageColorSpace[image] gives the name of the color space of image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageColorSpace)))
(def ImageCompose "ImageCompose[image, overlay] gives the result of overlaying overlay onto image. \nImageCompose[image, {overlay, α}] gives the result of alpha blending overlay into image using blending fraction α.\nImageCompose[image, overlay, pos] places the center of overlay at position pos in image.\nImageCompose[image, overlay, pos, opos] places the point opos in overlay at position pos in image.\nImageCompose[image, overlay, pos, opos, {fi, fo, mode}] uses the compositing fractions fk and the specified compositing mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCompose)))
(def ImageContainsQ "ImageContainsQ[image, category] returns True if an instance of the specified category is detected in image.\nImageContainsQ[image, {category1, category2, …}] returns True if at least one instance of each of the categoryi is detected in image.\nImageContainsQ[image, category1|category2|…] returns True if image contains an instance of at least one of categoryi.\nImageContainsQ[video, …] returns a time series of Boolean values for every frame of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageContainsQ)))
(def ImageContents "ImageContents[image] gives a dataset of identified entities in image.\nImageContents[image, category] gives a dataset that only contains entities in the specified category.\nImageContents[image, category, prop] includes the properties prop for each identified object.\nImageContents[video, …] gives a time series of detected objects in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageContents)))
(def ImageConvolve "ImageConvolve[image, ker] gives the convolution of image with kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageConvolve)))
(def ImageCooccurrence "ImageCooccurrence[image, n] gives the n×n co-occurrence matrix for image.\nImageCooccurrence[image, n, ker] computes a co-occurrence matrix for arbitrary spatial relationships specified by a kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCooccurrence)))
(def ImageCorners "ImageCorners[image] finds corners in image and returns their coordinates.\nImageCorners[image, r] finds corners at a pixel range r.\nImageCorners[image, r, t] uses a threshold t for selecting corners.\nImageCorners[image, r, t, d] returns corners that are at least d+1 pixels apart.\nImageCorners[video, …] returns corners in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCorners)))
(def ImageCorrelate "ImageCorrelate[image, ker] gives the correlation of image with kernel ker.\nImageCorrelate[image, ker, f] computes a generalized correlation in which the function f is used in place of Dot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCorrelate)))
(def ImageCorrespondingPoints "ImageCorrespondingPoints[image1, image2] finds a set of matching interest points in image1 and image2 and returns their pixel coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCorrespondingPoints)))
(def ImageCrop "ImageCrop[image] crops image by removing borders of uniform color. \nImageCrop[image, size] crops image based on the size specification size.\nImageCrop[image, size, spec] crops image by removing pixels from sides specified by spec.\nImageCrop[video, …] crops frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageCrop)))
(def ImageData "ImageData[image] gives the array of pixel values in an Image or Image3D object image.\nImageData[image, \"type\"] gives the array of pixel values converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageData)))
(def ImageDeconvolve "ImageDeconvolve[image, ker] gives a deconvolution of image using kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDeconvolve)))
(def ImageDemosaic "ImageDemosaic[image, cfa] reconstructs a color image using the specified color filter array cfa.\nImageDemosaic[image, {\"cfa\", {row, col}}] aligns the top-left pixel of the pattern with the {row, col} pixel of image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDemosaic)))
(def ImageDifference "ImageDifference[image1, image2] gives an image in which each pixel is the absolute difference of the corresponding pixels in image1 and image2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDifference)))
(def ImageDimensions "ImageDimensions[image] gives the pixel dimensions of an Image or Image3D object image.\nImageDimensions[video] gives the pixel dimensions of the first video track of the Video object video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDimensions)))
(def ImageDisplacements "ImageDisplacements[{image1, image2, …, imagen}] gives estimated horizontal and vertical displacements between consecutive images.\nImageDisplacements[{image1, image2, …, imagen}, flow] uses flow as an initial estimate for displacement between image1 and image2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDisplacements)))
(def ImageDistance "ImageDistance[image1, image2] returns a distance measure between image1 and image2. \nImageDistance[image1, image2, pos] places the center of image2 at position pos in image1.\nImageDistance[image1, image2, pos1, pos2] places the point pos2 of image2 at position pos1 in image1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageDistance)))
(def ImageEffect "ImageEffect[image, \"effect\"] applies the specified image effect to image.\nImageEffect[image, {\"effect\", params}] uses parameters params.\nImageEffect[video, …] applies the image effect to frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageEffect)))
(def ImageExposureCombine "ImageExposureCombine[{image1, image2, …}] combines differently exposed images imagei of the same scene into a single image with overall good exposure.\nImageExposureCombine[{image1, image2, …}, mode] creates a low or a high dynamic range image based on the specified mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageExposureCombine)))
(def ImageFeatureTrack "ImageFeatureTrack[{image1, image2, …, imagen}] tracks features from image1 through imagen.\nImageFeatureTrack[{image1, image2, …, imagen}, pts] tracks features starting from the initial set of points pts in image1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFeatureTrack)))
(def ImageFileApply "ImageFileApply[f, inputfile, outputfile] applies the function f to the list of channel values for each pixel of the image stored in inputfile and stores the result in outputfile." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFileApply)))
(def ImageFileFilter "ImageFileFilter[f, inputfile, r, outputfile] applies the function f to the range r neighborhood of each pixel in each channel of the image stored in inputfile and stores the result in outputfile." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFileFilter)))
(def ImageFileScan "ImageFileScan[f, inputfile] applies the function f to the list of channel values for each pixel of the image stored in inputfile." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFileScan)))
(def ImageFilter "ImageFilter[f, image, r] applies the function f to the range-r neighborhood of each pixel in each channel of image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFilter)))
(def ImageFocusCombine "ImageFocusCombine[{image1, image2, …}] combines differently focused images imagei of the same scene to obtain a single well-focused image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFocusCombine)))
(def ImageForestingComponents "ImageForestingComponents[image] finds a segmentation of image, returning an integer matrix in which positive integers label different components.\nImageForestingComponents[image, marker] tries to find a segmentation into components that include pixels indicated by marker.\nImageForestingComponents[image, marker, r] finds components that are connected at a pixel scale given by r.\nImageForestingComponents[video, …] computes components for each frame in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageForestingComponents)))
(def ImageFormattingWidth "ImageFormattingWidth is an option that specifies the target width at which to wrap when formatting an object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageFormattingWidth)))
(def ImageForwardTransformation "ImageForwardTransformation[image, f] gives an image in which each pixel at position f[{x, y}] corresponds to the position {x, y} in image.\nImageForwardTransformation[image, f, size] gives an image of the specified size.\nImageForwardTransformation[video, …] transforms frames of a video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageForwardTransformation)))
(def ImageGraphics "ImageGraphics[image] returns the content of image in the form of scalable vector graphics.\nImageGraphics[image, n] uses up to n colors for the vector graphics.\nImageGraphics[image, colors] creates vector graphics containing the specified colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageGraphics)))
(def ImageHistogram "ImageHistogram[image] plots a histogram of the pixel levels for each channel in image.\nImageHistogram[image, bspec] uses bin specification bspec.\nImageHistogram[image, bspec, range] plots the histogram of the pixel values in the given range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageHistogram)))
(def ImageIdentify "ImageIdentify[image] yields the result of attempting to identify what image is a picture of. \nImageIdentify[image, category] restricts the identification of image to objects within the specified category.\nImageIdentify[image, category, n] gives a list of up to n possible identifications.\nImageIdentify[image, category, n, \"prop\"] gives the specified property for each identification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageIdentify)))
(def ImageInstanceQ "ImageInstanceQ[image, obj] gives True if image appears to be an instance of the object obj, and gives False otherwise.\nImageInstanceQ[image, obj, cat] assumes that the image is of something in the category cat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageInstanceQ)))
(def ImageKeypoints "ImageKeypoints[image] finds key features in image and returns their coordinates.\nImageKeypoints[image, prop] gives the specified property prop for each keypoint.\nImageKeypoints[video, …] finds keypoints in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageKeypoints)))
(def ImageLabels "ImageLabels is an option for image highlighting that specifies what labels to use for each highlighted feature." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageLabels)))
(def ImageLegends "ImageLegends is an option for image highlighting that specifies what legends to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageLegends)))
(def ImageLevels "ImageLevels[image] gives a list of pixel values and counts for each channel in image. \nImageLevels[image, bspec] bins pixel values using bin specification bspec.\nImageLevels[image, bspec, range] gives counts for bins in the given range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageLevels)))
(def ImageLines "ImageLines[image] finds line segments in image and returns the coordinates of their endpoints.\nImageLines[image, t] uses the threshold t for selecting image lines.\nImageLines[image, t, d] uses the parameter d to control the distinctness of the detected lines.\nImageLines[video, …] finds lines in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageLines)))
(def ImageMargins "ImageMargins is an option that specifies the absolute margins to leave around the image displayed for an object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageMargins)))
(def ImageMarker "ImageMarker[pos] is a HighlightImage specification that represents a marker at position pos.\nImageMarker[pos, marker] represents a custom marker at position pos.\nImageMarker[{pos1, pos2, …}, …] represents multiple marker positions posi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageMarker)))
(def ImageMeasurements "ImageMeasurements[image, \"prop\"] returns the value of property \"prop\" for the entire image.\nImageMeasurements[image, \"prop\", format] returns the values in the specified output format.\nImageMeasurements[{image1, image2, …}, …] returns measurements for all imagei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageMeasurements)))
(def ImageMesh "ImageMesh[image] returns the foreground region in image as a BoundaryMeshRegion object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageMesh)))
(def ImageMultiply "ImageMultiply[image, x] multiplies each channel value in image by a factor x.\nImageMultiply[image1, image2] gives an image in which each pixel is the product of the corresponding pixels in image1 and image2.\nImageMultiply[image, expr1, expr2, …] multiplies all expri with image, where each expri can be either an image, a number, or a color value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageMultiply)))
(def ImagePad "ImagePad[image, m] pads image on all sides with m background pixels.\nImagePad[image, m, padding] pads image on all sides using the value or method specified by padding.\nImagePad[image, {{left, right}, {bottom, top}}, …] pads image with the specified numbers of pixels on each side.\nImagePad[image, {{left, right}, {front, back}, {bottom, top}}, …] pads a 3D image with the specified numbers of pixels.\nImagePad[video, …] pads frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePad)))
(def ImagePadding "ImagePadding is an option for graphics functions that specifies what absolute extra padding should be left for extended objects such as thick lines and annotations such as tick and axis labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePadding)))
(def ImagePartition "ImagePartition[image, s] partitions an image into an array of ss-pixel subimages.\nImagePartition[image, {w, h}] partitions an image into an array of subimages of pixel width w and pixel height h.\nImagePartition[image, {w, h}, {dw, dh}] uses pixel offsets dw and dh." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePartition)))
(def ImagePeriodogram "ImagePeriodogram[image] shows the squared magnitude of the discrete Fourier transform (power spectrum) of image.\nImagePeriodogram[image, n] shows the average of power spectra of non-overlapping partitions of size n×n.\nImagePeriodogram[image, n, d] uses partitions with offset d.\nImagePeriodogram[image, n, d, wfun] applies a smoothing window wfun to each partition.\nImagePeriodogram[image, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePeriodogram)))
(def ImagePerspectiveTransformation "ImagePerspectiveTransformation[image, m] applies a linear fractional transform specified by a matrix m to the positions of each pixel in image.\nImagePerspectiveTransformation[image, tf] uses the TransformationFunction given by tf.\nImagePerspectiveTransformation[image, …, size] gives an image of the specified size.\nImagePerspectiveTransformation[video, …] transforms frames of a video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePerspectiveTransformation)))
(def ImagePosition "ImagePosition[image] gives an association of image positions for each identified category of objects in image.\nImagePosition[image, obj] gives a list of image positions for subimages identified as instances of the specified category.\nImagePosition[video, …] gives a time series of detected object positions in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePosition)))
(def ImagePreviewFunction "ImagePreviewFunction is an option for CurrentImage and similar functions that specifies the function to apply to images before being displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePreviewFunction)))
(def ImagePyramid "ImagePyramid[image] creates a Gaussian image pyramid formed from image.\nImagePyramid[image, pyrtype] returns a Gaussian or Laplacian pyramid depending of the specified pyrtype.\nImagePyramid[image, pyrtype, n] returns up to n levels of the pyramid.\nImagePyramid[image, pyrtype, {size}] returns pyramid levels down to image dimensions given by size.\nImagePyramid[image, pyrtype, n, s] returns a pyramid with successive levels downsampled by factor s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePyramid)))
(def ImagePyramidApply "ImagePyramidApply[f, pyr] applies f to all images in the ImagePyramid object pyr.\nImagePyramidApply[f, {pyr1, pyr2, …}] applies f to the sequence of corresponding levels taken from each pyri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagePyramidApply)))
(def ImageQ "ImageQ[image] yields True if image has the form of a valid Image or Image3D object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageQ)))
(def ImageRecolor "ImageRecolor[image, regioncolor] recolors pixels in image specified by region using the specified color.\nImageRecolor[image, {region1color1, …}] recolors multiple regions.\nImageRecolor[video, …] recolors frames of a video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageRecolor)))
(def ImageReflect "ImageReflect[image] reverses image by top-bottom mirror reflection. \nImageReflect[image, side] reverses image by reflecting it so that the specified side goes to the opposite side.\nImageReflect[image, side1side2] reflects image so that side1 is interchanged with side2.\nImageReflect[video, …] reflects frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageReflect)))
(def ImageResize "ImageResize[image, width] gives a resized version of image that is width pixels wide.\nImageResize[image, {size}] gives a resized version of image with a maximum pixel width or height given by size.\nImageResize[image, {width, height}] gives a resized version of image that has exactly the specified pixel width and height.\nImageResize[video, …] gives a video in which every frame is resized.\nImageResize[image, {width, depth, height}] gives a resized version of a 3D image with the specified dimensions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageResize)))
(def ImageResolution "ImageResolution is an option for Export, Rasterize, and related functions that specifies at what resolution bitmap images should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageResolution)))
(def ImageRestyle "ImageRestyle[image, sample] attempts to restyle image so as to follow the graphical style of sample. \nImageRestyle[image, wsample] uses restyle weighting w. \nImageRestyle[image, {sample1, …}] attempts to restyle image using a blend of the graphical styles of the samplei.\nImageRestyle[image, {w1sample1, …}] uses weightings wi for the samplei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageRestyle)))
(def ImageRotate "ImageRotate[image] rotates image by 90° about its center in the x-y plane. \nImageRotate[image, θ] rotates image by θ radians.\nImageRotate[image, {θ, w}] rotates a 3D image around the 3D vector w.\nImageRotate[image, …, size] gives an image of the specified size.\nImageRotate[video, …] rotate frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageRotate)))
(def ImageSaliencyFilter "ImageSaliencyFilter[image] returns a saliency map for image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSaliencyFilter)))
(def ImageScaled "ImageScaled[{x, y}] gives the position of a graphical object in terms of coordinates scaled to run from 0 to 1 across the whole image region in each direction. \nImageScaled[{dx, dy}, {x0, y0}] gives a position obtained by starting at ordinary coordinates {x0, y0}, then moving by an image‐scaled offset {dx, dy}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageScaled)))
(def ImageScan "ImageScan[f, image] evaluates f applied to each pixel of image in turn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageScan)))
(def ImageSegmentationComponents "ImageSegmentationComponents[image] performs a global segmentation of image and returns a label matrix of components.\nImageSegmentationComponents[image, spec] segments an image into components based on the given spec.\nImageSegmentationComponents[video, …] segments frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSegmentationComponents)))
(def ImageSegmentationFilter "ImageSegmentationFilter[image, marker] segments part of image specified by marker and returns an image mask." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSegmentationFilter)))
(def ImageSize "ImageSize is an option that specifies the overall size of an image to display for an object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSize)))
(def ImageSizeAction "ImageSizeAction is an option for Pane and related constructs that specifies what to do if the specified ImageSize setting does not match the size of the contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSizeAction)))
(def ImageSizeMultipliers "ImageSizeMultipliers is an option that specifies how much smaller to render graphics that appear within other constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSizeMultipliers)))
(def ImageStitch "ImageStitch[{image1, image2, …}] gives a composed image from an unordered list of imagei.\nImageStitch[{{image11, image12, …}, {image21, image22, …}, …}] returns a stitched image from a matrix of images imageij, according to their array position.\nImageStitch[images, canvas] projects the stitched image onto the geometry specified by canvas." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageStitch)))
(def ImageSubtract "ImageSubtract[image, x] subtracts a constant amount x from each channel value in image.\nImageSubtract[image1, image2] gives an image in which each pixel is obtained by subtracting the values of the corresponding pixels in image1 and image2.\nImageSubtract[image, expr1, expr2, …] subtracts all expri from image, where each expri can be either an image, a number, or a color value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSubtract)))
(def ImageSynthesize "ImageSynthesize[text] generates an image based on the textual description text.\nImageSynthesize[image] generates a new image based on image.\nImageSynthesize[spec, n] generates n images based on the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageSynthesize)))
(def ImageTake "ImageTake[image, n] gives an image consisting of the first n rows of image.\nImageTake[image, -n] gives an image consisting of the last n rows of image.\nImageTake[image, {row1, row2}] gives rows row1 through row2.\nImageTake[image, {row1, row2}, {col1, col2}] gives the image that spans row1 to row2 and col1 to col2.\nImageTake[video, …] returns a video in which every frame consists of the specified region of interest.\nImageTake[image3d, {slice1, slice2}, {row1, row2}, {col1, col2}] gives the 3D image consisting of the specified slices, rows, and columns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageTake)))
(def ImageTransformation "ImageTransformation[image, f] gives an image in which each pixel at position p corresponds to the position f[p] in image.\nImageTransformation[image, f, size] gives an image of the specified size.\nImageTransformation[video, …] transforms frames of a video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageTransformation)))
(def ImageTrim "ImageTrim[image, roi] gives the smallest subimage of image that includes the specified region of interest roi.\nImageTrim[image, roi, r] adds a margin of size r back to the resulting image.\nImageTrim[image, {roi1, roi2, …}, …] extracts multiple subimages specified by roii from image.\nImageTrim[video, …] extracts the subimages from video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageTrim)))
(def ImageType "ImageType[image] gives the underlying type of values used for each pixel element in the Image or Image3D object image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageType)))
(def ImageValue "ImageValue[image, pos] gives the interpolated value of image at position pos.\nImageValue[image, pos, \"type\"] gives the value converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageValue)))
(def ImageValuePositions "ImageValuePositions[image, val] returns a list of pixel positions in image that exactly match the value val.\nImageValuePositions[image, val, d] returns all pixel positions that have values within a distance d from val." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageValuePositions)))
(def ImageVectorscopePlot "ImageVectorscopePlot[image] plots the chrominance of image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageVectorscopePlot)))
(def ImageWaveformPlot "ImageWaveformPlot[image] plots the waveform of image.\nImageWaveformPlot[image, colorspace] plots the waveform of image in colorspace.\nImageWaveformPlot[image, channel] plots the waveform for the specified channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImageWaveformPlot)))
(def ImagingDevice "ImagingDevice is an option to specify what device to use for capturing images." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImagingDevice)))
(def ImplicitD "ImplicitD[eqn, y, x] gives the partial derivative ∂y/∂x, assuming that the variable y represents an implicit function defined by the equation eqn.\nImplicitD[f, eqn, y, x] gives the partial derivative ∂f/∂x, assuming that the variable y represents an implicit function defined by the equation eqn.\nImplicitD[f, {eqn1, …, eqnk}, {y1, …, yk}, x] gives the partial derivative ∂f/∂x, assuming that the variables y1, …, yk represent implicit functions defined by the system of equations eqn1∧…∧eqnk.\nImplicitD[f, eqns, ys, {x, n}] gives the multiple derivative ∂^nf/∂x^n.\nImplicitD[f, eqns, ys, x1, x2, …] gives the partial derivative ⋯ (∂/∂x2)(∂/∂x1) f.\nImplicitD[f, eqns, ys, {x1, n1}, {x2, n2}, …] gives the multiple partial derivative ⋯ (∂^n2/∂x2^n2)(∂^n1/∂x1^n1) f.\nImplicitD[f, eqns, ys, {{x1, x2, …}}] for a scalar f gives the vector derivative (∂f/∂x1, ∂f/∂x2, …). \nImplicitD[f, eqns, ys, {array}] gives an array derivative." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImplicitD)))
(def ImplicitRegion "ImplicitRegion[cond, {x1, …, xn}] represents a region in ^n that satisfies the conditions cond. \nImplicitRegion[cond, {{x1, a1, b1}, …}] represents a region in ^n that satisfies the conditions cond as well as a1≤x1≤b1 etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImplicitRegion)))
(def Implies "Implies[p, q] represents the logical implication p⇒q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Implies)))
(def Import "Import[source] imports data from source, returning a Wolfram Language representation of it.\nImport[source, \"fmt\"] takes the file to be in the specified format \"fmt\".\nImport[source, elements] imports the specified elements from a file.\nImport[source, …, options] uses the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Import)))
(def ImportByteArray "ImportByteArray[ba, \"format\"] imports data in the specified format from a ByteArray object.\nImportByteArray[ba, elements] imports the specified elements.\nImportByteArray[ba] attempts to determine the format automatically." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImportByteArray)))
(def ImportOptions "ImportOptions is an option for Interpreter and related functions that specifies what options should be used in importing data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImportOptions)))
(def ImportString "ImportString[\"data\", \"format\"] imports data in the specified format from a string. \nImportString[\"data\", elements] imports the specified elements.\nImportString[\"data\"] attempts to determine the format of the string from its contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImportString)))
(def ImportedObject "ImportedObject[…] represents a piece of imported data that has no special representation in the Wolfram Language." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImportedObject)))
(def ImprovementImportance "ImprovementImportance[rdist, t] gives the improvement importances for all components in the ReliabilityDistribution rdist at time t.\nImprovementImportance[fdist, t] gives the improvement importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ImprovementImportance)))
(def In "In[n] is a global object that is assigned to have a delayed value of the n ^th input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote In)))
(def InString "InString[n] is a global object that is assigned to be the text of the n ^th input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InString)))
(def Inactivate "Inactivate[expr] replaces all instances of f with Inactive[f] for symbols f used as heads in expr.\nInactivate[expr, patt] inactivates all symbols in expr that match the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inactivate)))
(def Inactive "Inactive[f] is an inactive form of f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inactive)))
(def IncidenceGraph "IncidenceGraph[m] gives the graph with incidence matrix m.\nIncidenceGraph[{v1, v2, …}, m] gives the graph with vertices vi and incidence matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncidenceGraph)))
(def IncidenceList "IncidenceList[g, v] gives a list of edges incident to vertex v.\nIncidenceList[g, patt] gives a list of edges incident to vertices that match the pattern patt.\nIncidenceList[g, patt, d] gives a list of incident edges d steps away.\nIncidenceList[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncidenceList)))
(def IncidenceMatrix "IncidenceMatrix[g] gives the vertex-edge incidence matrix of the graph g.\nIncidenceMatrix[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncidenceMatrix)))
(def IncludeAromaticBonds "IncludeAromaticBonds is an option for Molecule that specifies whether aromatic bonds should be detected and labeled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeAromaticBonds)))
(def IncludeConstantBasis "IncludeConstantBasis is an option for LinearModelFit and other fitting functions that specifies whether a constant term should be included if not explicitly given in the list of basis functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeConstantBasis)))
(def IncludeDefinitions "IncludeDefinitions is an option for cloud and other functions that specifies whether current definitions relevant for the evaluation of an expression should be explicitly included when the expression is deployed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeDefinitions)))
(def IncludeDirectories "IncludeDirectories is an option that specifies whether directories are included in evaluations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeDirectories)))
(def IncludeGeneratorTasks "IncludeGeneratorTasks is an option controlling the scope of scheduled task listings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeGeneratorTasks)))
(def IncludeGroupAggregates "IncludeGroupAggregates is an option of PivotTable that specifies whether to add rows and columns with group aggregates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeGroupAggregates)))
(def IncludeHydrogens "IncludeHydrogens is an option that specifies whether hydrogen atoms should be explicitly included in the results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeHydrogens)))
(def IncludeInflections "IncludeInflections is an option for linguistic functions that specifies whether inflected forms of words should be included in results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeInflections)))
(def IncludeMetaInformation "IncludeMetaInformation is an option for Import, Thumbnail, and other functions to specify what types of metadata to include." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeMetaInformation)))
(def IncludePods "IncludePods is an option for WolframAlpha that determines specific pod IDs to include in the results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludePods)))
(def IncludeQuantities "IncludeQuantities is an option for DimensionalCombinations for additional quantities to include in the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeQuantities)))
(def IncludeRelatedTables "IncludeRelatedTables is an option for RelationalDatabase that specifies whether to include tables specified in foreign keys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeRelatedTables)))
(def IncludeSingularSolutions "IncludeSingularSolutions is an option for DSolve that specifies whether singular solutions should be returned along with the general solution for a nonlinear ordinary differential equation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeSingularSolutions)))
(def IncludeWaters "IncludeWaters is an option that specifies whether disconnected water molecules should be included in the results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeWaters)))
(def IncludeWindowTimes "IncludeWindowTimes is an option to TimeSeriesWindow that specifies whether the endpoints in the time window should be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludeWindowTimes)))
(def IncludedContexts "IncludedContexts is an option for FullDefinition, Manipulate and related symbols that gives contexts whose symbols will have their definitions recursively saved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IncludedContexts)))
(def Increment "x++ increases the value of x by 1, returning the old value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Increment)))
(def IndefiniteMatrixQ "IndefiniteMatrixQ[m] gives True if m is explicitly indefinite, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndefiniteMatrixQ)))
(def IndependenceTest "IndependenceTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nIndependenceTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nIndependenceTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependenceTest)))
(def IndependentEdgeSetQ "IndependentEdgeSetQ[g, elist] yields True if the edge list elist is an independent edge set of the graph g, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependentEdgeSetQ)))
(def IndependentPhysicalQuantity "IndependentPhysicalQuantity[string] represents a physical quantity string with no relationship to other physical quantities used in QuantityVariable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependentPhysicalQuantity)))
(def IndependentUnit "IndependentUnit[string] represents a unit string with no relationship to other units within a Quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependentUnit)))
(def IndependentUnitDimension "IndependentUnitDimension[dim] represents the base dimension dim associated with an independent physical quantity or unit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependentUnitDimension)))
(def IndependentVertexSetQ "IndependentVertexSetQ[g, vlist] yields True if the vertex list vlist is an independent vertex set in the graph g, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndependentVertexSetQ)))
(def Indeterminate "Indeterminate is a symbol that represents a numerical quantity whose magnitude cannot be determined." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Indeterminate)))
(def IndeterminateThreshold "IndeterminateThreshold is an option for Classify, Predict, and related functions that specifies below what probability or probability density a result should be considered indeterminate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndeterminateThreshold)))
(def IndexEdgeTaggedGraph "IndexEdgeTaggedGraph[g] sets tags of edges in the graph g to their edge indices.\nIndexEdgeTaggedGraph[g, r] sets tags of edges to r, r+1, …" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndexEdgeTaggedGraph)))
(def IndexGraph "IndexGraph[g] replaces the vertices of the graph g by its vertex indices.\nIndexGraph[g, r] replaces the vertices with integers r,  r+1, ….\nIndexGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IndexGraph)))
(def Indexed "Indexed[expr, i] represents the component of expr with index i and formats as expri.\nIndexed[expr, {i, j, …}] represents the component with indices i, j, … and formats as expr i, j, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Indexed)))
(def InertEvaluate "InertEvaluate[inertExpr] evaluates an \"InertExpression\", returning a new \"InertExpression\" in compiled code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InertEvaluate)))
(def InertExpression "InertExpression[expr] creates an inert expression in compiled code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InertExpression)))
(def InexactNumberQ "InexactNumberQ[expr] returns True if expr is an inexact real or complex number, and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InexactNumberQ)))
(def InfiniteFuture "InfiniteFuture returns a DateObject expression representing infinite future in time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InfiniteFuture)))
(def InfiniteLine "InfiniteLine[{p1, p2}] represents the infinite straight line passing through the points p1 and p2. \nInfiniteLine[p, v] represents the infinite straight line passing through the point p in the direction v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InfiniteLine)))
(def InfiniteLineThrough "InfiniteLineThrough[{p1, p2, …}] gives an infinite line passing through the points pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InfiniteLineThrough)))
(def InfinitePast "InfinitePast returns a DateObject expression representing infinite past in time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InfinitePast)))
(def InfinitePlane "InfinitePlane[{p1, p2, p3}] represents the plane passing through the points p1, p2, and p3.\nInfinitePlane[p, {v1, v2}] represents the plane passing through the point p in the directions v1 and v2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InfinitePlane)))
(def Infinity "Infinity or ∞ is a symbol that represents a positive infinite quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Infinity)))
(def Infix "Infix[f[e1, e2, …]] prints with f[e1, e2, …] given in default infix form: e1~f~e2~f~e3…. \nInfix[expr, h] prints with arguments separated by h: e1 h e2 h e3 …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Infix)))
(def InflationAdjust "InflationAdjust[quantity, targetdate] attempts to adjust the specified quantity purchasing power to targetdate.\nInflationAdjust[quantity] uses the current year as targetdate.\nInflationAdjust[quantity, targetunit] converts the currency to targetunit after adjusting to the current year.\nInflationAdjust[timeseries, targetdate] attempts to adjust the specified timeseries data purchasing power to targetdate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InflationAdjust)))
(def InflationMethod "InflationMethod is an option for InflationAdjust that specifies what time series data is to be used for adjustment in time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InflationMethod)))
(def Information "Information[expr] gives information about the expression expr. \nInformation[expr, prop] gives the value of the property prop for expr.\nInformation[{expr1, expr2, …}, …] gives information about all of the expri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Information)))
(def InheritScope "InheritScope is an option for DynamicModule that specifies whether to attempt to bind variables referenced in the DynamicModule to a parent DynamicModule instance." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InheritScope)))
(def Inherited "Inherited represents an option value to be inherited from an enclosing style, cell, or notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inherited)))
(def InhomogeneousPoissonPointProcess "InhomogeneousPoissonPointProcess[μ, d] represents an inhomogeneous Poisson point process with density function μ:^d> in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InhomogeneousPoissonPointProcess)))
(def InhomogeneousPoissonProcess "InhomogeneousPoissonProcess[λ[t], t] represents an inhomogeneous Poisson process with intensity λ[t] given as a function of t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InhomogeneousPoissonProcess)))
(def InitialEvaluationHistory "InitialEvaluationHistory is an option for functions such as BayesianMinimization that gives an initial set of configurations and values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitialEvaluationHistory)))
(def InitialSeeding "InitialSeeding is an option for NDSolve and other functions that specifies equations that specify initial seeding values for variables that may be used by iterative algorithms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitialSeeding)))
(def Initialization "Initialization is an option for notebooks, cells, Dynamic, DynamicModule, Manipulate and related constructs that specifies an expression to be evaluated when the construct is first displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Initialization)))
(def InitializationCell "InitializationCell is an option for Cell that specifies whether the cell should be tagged to be evaluated by the Wolfram Language kernel immediately before the first evaluation performed by the user after the notebook is opened." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitializationCell)))
(def InitializationObject "InitializationObject[sym, loc] gives the persistent object where InitializationValue[sym, loc] is stored.\nInitializationObject[\"context`name\", loc] gives the persistent object where the initialization value for the symbol with the specified complete name is stored." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitializationObject)))
(def InitializationObjects "InitializationObjects[] gives the list of all persistent initialization objects in all locations in $PersistencePath.\nInitializationObjects[\"patt\"] gives all persistent initialization objects for symbols matching the string pattern \"patt\".\nInitializationObjects[\"patt\", loc] gives all matching persistent initialization objects in the persistence location loc.\nInitializationObjects[\"patt\", {loc1, …}] gives all matching persistent initialization objects in all the loci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitializationObjects)))
(def InitializationValue "InitializationValue[sym] represents the settable persistent value with which the symbol sym will be initialized.\nInitializationValue[\"context`name\"] represents the settable initialization value for the symbol with the specified complete name.\nInitializationValue[sym, {loc1, …}] specifies the persistence locations to search for a possible initialization value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InitializationValue)))
(def Initialize "Initialize[sym] initializes the symbol sym from persistent values on the default persistence path.\nInitialize[sym, {loc1, …}] initializes the symbol sym from persistent values on the persistence path {loc1, …}.\nInitialize[\"patt\"] initializes all variables matching the string pattern \"patt\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Initialize)))
(def Inner "Inner[f, list1, list2, g] is a generalization of Dot in which f plays the role of multiplication and g of addition." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inner)))
(def InnerPolygon "InnerPolygon[poly] gives the inner polygon of the polygon poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InnerPolygon)))
(def InnerPolyhedron "InnerPolyhedron[poly] gives the inner polyhedron of the polyhedron poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InnerPolyhedron)))
(def Inpaint "Inpaint[image, region] retouches parts of image that correspond to nonzero elements in region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inpaint)))
(def Input "Input[] interactively reads in one Wolfram Language expression. \nInput[prompt] requests input, displaying prompt as a \"prompt\".\nInput[prompt, init] in a notebook front end uses init as the initial contents of the input field." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Input)))
(def InputAliases "InputAliases is an option for cells and notebooks which specifies additional Esc name Esc aliases to be allowed on input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputAliases)))
(def InputAssumptions "InputAssumptions is an option for WolframAlpha that specifies assumptions for current query input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputAssumptions)))
(def InputAutoReplacements "InputAutoReplacements is an option for cells and notebooks which specifies strings of characters that should be replaced immediately on input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputAutoReplacements)))
(def InputField "InputField[] represents a blank editable input field. \nInputField[x] represents an editable input field that currently contains the expression x. \nInputField[Dynamic[x]] takes the contents of the input field to be the dynamically updated current value of x, with the value of x being reset if new contents are entered. \nInputField[x, String] represents an input field whose contents are taken to be a string. \nInputField[x, Number] represents an input field whose contents are taken to be a number. \nInputField[x, type] represents an input field whose contents are taken to be of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputField)))
(def InputForm "InputForm[expr] prints as a version of expr suitable for input to the Wolfram Language." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputForm)))
(def InputNamePacket "InputNamePacket[string] is a WSTP packet that contains in string the name to be assigned to the next input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputNamePacket)))
(def InputNotebook "InputNotebook[] gives the current notebook into which keyboard input in the front end will be directed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputNotebook)))
(def InputOutputResponse "InputOutputResponse[sys, u, tspec] gives the response of the input-output model sys with input signals u and temporal specification tspec.\nInputOutputResponse[sys, …, \"prop\"] gives the value of property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputOutputResponse)))
(def InputOutputResponseData "InputOutputResponseData[…] represents response data generated by InputOutputResponse." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputOutputResponseData)))
(def InputPacket "InputPacket[] is a WSTP packet that indicates a prompt for input as generated by Input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputPacket)))
(def InputPorts "InputPorts is an option to specify the number, names or shapes of input ports for some neural net layers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputPorts)))
(def InputStream "InputStream[\"name\", n] is an object that represents an input stream for functions such as Read and Find." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputStream)))
(def InputString "InputString[] interactively reads in a character string. \nInputString[prompt] requests input, displaying prompt as a \"prompt\". \nInputString[prompt, init] in a notebook front end uses init as the initial contents of the input field." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputString)))
(def InputStringPacket "InputStringPacket[] is a WSTP packet that requests input in string form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InputStringPacket)))
(def InscribedBall "InscribedBall[{p1, p2, …}] gives the largest ball that lies inside the convex hull of the points p1, p2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InscribedBall)))
(def Insert "Insert[list, elem, n] inserts elem at position n in list. If n is negative, the position is counted from the end. \nInsert[expr, elem, {i, j, …}] inserts elem at position {i, j, …} in expr. \nInsert[expr, elem, {{i1, j1, …}, {i2, j2, …}, …}] inserts elem at several positions. \nInsert[elem, pos] represents an operator form of Insert that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Insert)))
(def InsertColumns "InsertColumns[tab, {col1cval1, …}] inserts the column cvali with name coli in the tabular object tab.\nInsertColumns[cspec] represents an operator form of InsertColumns that can be applied to a tabular object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InsertColumns)))
(def InsertLinebreaks "InsertLinebreaks[\"string\"] inserts newline characters into string to make a string in which no line is longer than 78 characters.\nInsertLinebreaks[\"string\", n] inserts newline characters to make no line longer than n characters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InsertLinebreaks)))
(def InsertResults "InsertResults is an option for NotebookEvaluate that determines whether to place the results of evaluation in the notebook being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InsertResults)))
(def InsertionFunction "InsertionFunction is an option for template functions that specifies how expressions are to be processed before they are inserted when the template is applied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InsertionFunction)))
(def Inset "Inset[obj] represents an object obj inset in a graphic. \nInset[obj, pos] specifies that the inset should be placed at position pos in the graphic. \nInset[obj, pos, opos] aligns the inset so that position opos in the object lies at position pos in the enclosing graphic. \nInset[obj, pos, opos, size] specifies the size of the inset in the coordinate system of the enclosing graphic. \nInset[obj, pos, opos, size, dirs] specifies that the axes of the inset should be oriented in directions dirs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inset)))
(def Insphere "Insphere[{p1, …, p n+1}] gives the sphere that can be inscribed in the simplex defined by points pi in ^n.\nInsphere[poly] gives the insphere of a polyhedron or polygon poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Insphere)))
(def Install "Install[\"name\"] starts a WSTP-compatible external program and installs Wolfram Language definitions to call functions in it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Install)))
(def InstallService "InstallService[\"url\"] installs the web service operations in the WSDL description at the URL given.\nInstallService[\"url\", \"context`\"] installs web service operations, creating functions in the specified context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InstallService)))
(def Integer "Integer is the head used for integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Integer)))
(def IntegerDigits "IntegerDigits[n] gives a list of the decimal digits in the integer n. \nIntegerDigits[n, b] gives a list of the base b digits in the integer n. \nIntegerDigits[n, b, len] pads the list on the left with zeros to give a list of length len. \nIntegerDigits[n, MixedRadix[blist]] uses the mixed radix with list of bases blist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerDigits)))
(def IntegerExponent "IntegerExponent[n, b] gives the highest power of b that divides n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerExponent)))
(def IntegerLength "IntegerLength[n] gives the number of digits in the base 10 representation of the integer n.\nIntegerLength[n, b] gives the number of digits in the base b representation of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerLength)))
(def IntegerName "IntegerName[n] gives a string containing the full English name of the integer n.\nIntegerName[n, qualifier] gives a string conforming to the given qualifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerName)))
(def IntegerPart "IntegerPart[x] gives the integer part of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerPart)))
(def IntegerPartitions "IntegerPartitions[n] gives a list of all possible ways to partition the integer n into smaller integers. \nIntegerPartitions[n, k] gives partitions into at most k integers. \nIntegerPartitions[n, {k}] gives partitions into exactly k integers. \nIntegerPartitions[n, {kmin, kmax}] gives partitions into between kmin and kmax integers. \nIntegerPartitions[n, kspec, {s1, s2, …}] gives partitions involving only the si. \nIntegerPartitions[n, kspec, sspec, m] limits the result to the first m partitions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerPartitions)))
(def IntegerQ "IntegerQ[expr] gives True if expr is an integer, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerQ)))
(def IntegerReverse "IntegerReverse[n] gives the integer whose digits are reversed with respect to those of the integer n.\nIntegerReverse[n, b] gives the integer whose digits in base b are reversed with respect to those of n.\nIntegerReverse[n, b, len] gives the integer with reversed digits after padding n with zeros on the left to have len digits." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerReverse)))
(def IntegerString "IntegerString[n] gives a string consisting of the decimal digits in the integer n. \nIntegerString[n, b] gives a string consisting of the base-b digits in the integer n. \nIntegerString[n, b, len] pads the string on the left with zero digits to give a string of length len. \nIntegerString[n, MixedRadix[blist]] uses the mixed radix with a list of bases blist.\nIntegerString[n, \"numsys\"] gives the numeral form of n based on the numeric system defined by \"numsys\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegerString)))
(def Integers "Integers represents the domain of integers, as in x∈Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Integers)))
(def Integrate "Integrate[f, x] gives the indefinite integral ∫f dx. \nIntegrate[f, {x, xmin, xmax}] gives the definite integral ∫_xmin^xmax f dx. \nIntegrate[f, {x, xmin, xmax}, {y, ymin, ymax}, …] gives the multiple integral ∫_xmin^xmaxdx ∫_ymin^ymaxdy … f. \nIntegrate[f, {x, y, …}∈reg] integrates over the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Integrate)))
(def IntegrateChangeVariables "IntegrateChangeVariables[integral, u, trans] changes the variable in integral to the new variable u using the transformation trans. \nIntegrateChangeVariables[integral, {u, v, …}, trans] changes the variables to the new variables u, v, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntegrateChangeVariables)))
(def Interactive "Interactive is an option that specifies whether a function should create a user prompt when mimicking an action that would have created a user prompt if invoked manually." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interactive)))
(def InteractiveTradingChart "InteractiveTradingChart[{{date1, {open1, high1, low1, close1, volume1}}, …}] makes a chart showing prices and volume for each date. \nInteractiveTradingChart[{\"name\", daterange}] makes a financial chart for the financial entity \"name\" over the daterange. \nInteractiveTradingChart[{…}, {ind1, ind2, …}] makes a financial chart with indicators ind1, ind2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InteractiveTradingChart)))
(def InterfaceSwitched "InterfaceSwitched[<|size1expr1, size2expr2, …|>] is a construct that behaves as if it were expri when it is in an interface environment with width sizei.\nInterfaceSwitched[\"param\", <|key1->expr1, key2->expr2, …|>] behaves as if it were expri when the value of the interface parameter param corresponds to keyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterfaceSwitched)))
(def Interleaving "Interleaving is an option for Image and related functions that specifies whether data corresponding to different channels in an object such as an image should be interleaved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interleaving)))
(def IntermediateTest "IntermediateTest[input] creates an intermediate test to determine whether input evaluates to True.\nIntermediateTest[input, expected] creates an intermediate test to determine whether input evaluates to expected.\nIntermediateTest[input, expected, messages] creates an intermediate test that is expected to generate the list of message names messages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntermediateTest)))
(def InternallyBalancedDecomposition "InternallyBalancedDecomposition[ssm] yields the internally balanced decomposition of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InternallyBalancedDecomposition)))
(def InterpolatingFunction "InterpolatingFunction[domain, table] represents an approximate function whose values are found by interpolation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpolatingFunction)))
(def InterpolatingPolynomial "InterpolatingPolynomial[{f1, f2, …}, x] constructs an interpolating polynomial in x which reproduces the function values fi at successive integer values 1, 2, … of x. \nInterpolatingPolynomial[{{x1, f1}, {x2, f2}, …}, x] constructs an interpolating polynomial for the function values fi corresponding to x values xi.\nInterpolatingPolynomial[{{{x1, y1, …}, f1}, {{x2, y2, …}, f2}, …}, {x, y, …}] constructs a multidimensional interpolating polynomial in the variables x, y, ….\nInterpolatingPolynomial[{{{x1, …}, f1, df1, …}, …}, {x, …}] constructs an interpolating polynomial that reproduces derivatives as well as function values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpolatingPolynomial)))
(def Interpolation "Interpolation[{f1, f2, …}] constructs an interpolation of the function values fi, assumed to correspond to x values 1, 2, … . \nInterpolation[{{x1, f1}, {x2, f2}, …}] constructs an interpolation of the function values fi corresponding to x values xi.\nInterpolation[{{{x1, y1, …}, f1}, {{x2, y2, …}, f2}, …}] constructs an interpolation of multidimensional data.\nInterpolation[{{{x1, …}, f1, df1, …}, …}] constructs an interpolation that reproduces derivatives as well as function values.\nInterpolation[data, x] find an interpolation of data at the point x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interpolation)))
(def InterpolationOrder "InterpolationOrder is an option for Interpolation, as well as ListLinePlot, ListPlot3D, ListContourPlot, and related functions, that specifies what order of interpolation to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpolationOrder)))
(def InterpolationPoints "InterpolationPoints is an option to SmoothKernelDistribution and FunctionInterpolation that specifies the initial number of interpolation points to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpolationPoints)))
(def Interpretation "Interpretation[e, expr] represents an object that displays as e, but is interpreted as the unevaluated form of expr if supplied as input. \nInterpretation[{x=x0, y=y0, …}, e, expr] allows local variables x, y, … in e and expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interpretation)))
(def InterpretationBox "InterpretationBox[boxes, expr] is a low-level box construct that displays as boxes but is interpreted on input as expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpretationBox)))
(def InterpretationBoxOptions "InterpretationBoxOptions is an option for selections that specifies settings for InterpretationBox constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpretationBoxOptions)))
(def InterpretationFunction "InterpretationFunction is an option for TemplateBox that specifies how the box is to be evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterpretationFunction)))
(def Interpreter "Interpreter[form] represents an interpreter object that can be applied to an input to try to interpret it as an object of the specified form. \nInterpreter[form, test] returns the interpreted object only if applying test to it yields True; otherwise it returns a Failure object.\nInterpreter[form, test, fail] returns the result of applying the function fail if the test fails." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interpreter)))
(def InterquartileRange "InterquartileRange[data] gives the difference between the upper and lower quartiles Overscript[q, ^]3/4-Overscript[q, ^]1/4 for the elements in data.\nInterquartileRange[data, {{a, b}, {c, d}}] uses the quantile definition specified by parameters a, b, c, d.\nInterquartileRange[dist] gives the difference between the upper and lower quartiles q 3/4-q 1/4 for the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InterquartileRange)))
(def Interrupt "Interrupt[] generates an interrupt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interrupt)))
(def IntersectedEntityClass "IntersectedEntityClass[class1, class2, …] represents an entity class containing all the entities common to all classi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntersectedEntityClass)))
(def IntersectingQ "IntersectingQ[list1, list2] yields True if list1 and list2 have at least one element in common, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntersectingQ)))
(def Intersection "Intersection[list1, list2, …] gives a sorted list of the elements common to all the listi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Intersection)))
(def Interval "Interval[{min, max}] represents the range of values between min and max. \nInterval[{min1, max1}, {min2, max2}, …] represents the union of the ranges min1 to max1, min2 to max2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Interval)))
(def IntervalIntersection "IntervalIntersection[interval1, interval2, …] gives the interval representing all points common to each of the intervali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalIntersection)))
(def IntervalMarkers "IntervalMarkers is an option for plotting functions such as ListPlot and BarChart that specifies how to represent uncertainty intervals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalMarkers)))
(def IntervalMarkersStyle "IntervalMarkersStyle is an option for plotting functions that specifies styles in which uncertainty intervals are drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalMarkersStyle)))
(def IntervalMemberQ "IntervalMemberQ[interval, x] gives True if the number x lies within the specified interval, and False otherwise. \nIntervalMemberQ[interval1, interval2] gives True if interval2 is completely contained within interval1. \nIntervalMemberQ[interval] represents an operator form of IntervalMemberQ that can be applied to a number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalMemberQ)))
(def IntervalSlider "IntervalSlider[{xmin, xmax}] represents a slider with setting {xmin, xmax} in the range 0 to 1.\nIntervalSlider[Dynamic[int]] takes the setting to be the dynamically updated current value of int, with the value of int being reset if the slider is moved.\nIntervalSlider[int, {min, max}] represents a slider with range min to max.\nIntervalSlider[int, {min, max, dx}] represents a slider that jumps in steps dx." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalSlider)))
(def IntervalUnion "IntervalUnion[interval1, interval2, …] gives an interval containing the set of all points in any of the intervali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IntervalUnion)))
(def Inverse "Inverse[m] gives the inverse of a square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Inverse)))
(def InverseBetaRegularized "InverseBetaRegularized[s, a, b] gives the inverse of the regularized incomplete beta function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseBetaRegularized)))
(def InverseBilateralLaplaceTransform "InverseBilateralLaplaceTransform[expr, s, t] gives the inverse bilateral Laplace transform of expr. \nInverseBilateralLaplaceTransform[expr, {s1, s2, …, sn}, {t1, t2, …, tn}] gives the multidimensional inverse bilateral Laplace transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseBilateralLaplaceTransform)))
(def InverseBilateralZTransform "InverseBilateralZTransform[expr, z, n] gives the inverse bilateral Z transform of expr.\nInverseBilateralZTransform[expr, {z1, …, zk}, {n1, …, nk}] gives the multidimensional inverse bilateral Z transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseBilateralZTransform)))
(def InverseCDF "InverseCDF[dist, q] gives the inverse of the cumulative distribution function for the distribution dist as a function of the variable q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseCDF)))
(def InverseChiSquareDistribution "InverseChiSquareDistribution[ν] represents an inverse χ^2 distribution with ν degrees of freedom.\nInverseChiSquareDistribution[ν, ξ] represents a scaled inverse χ^2 distribution with ν degrees of freedom and scale ξ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseChiSquareDistribution)))
(def InverseContinuousWaveletTransform "InverseContinuousWaveletTransform[cwd] gives the inverse continuous wavelet transform of a ContinuousWaveletData object cwd. \nInverseContinuousWaveletTransform[cwd, wave] gives the inverse transform using the wavelet wave.\nInverseContinuousWaveletTransform[cwd, wave, octvoc] gives the inverse transform from the wavelet coefficients specified by octvoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseContinuousWaveletTransform)))
(def InverseDistanceTransform "InverseDistanceTransform[image] gives the inverse distance transform of image, returning the result as a binary image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseDistanceTransform)))
(def InverseEllipticNomeQ "InverseEllipticNomeQ[q] gives the parameter m corresponding to the nome q in an elliptic function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseEllipticNomeQ)))
(def InverseErf "InverseErf[s] gives the inverse error function obtained as the solution for z in s=erf (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseErf)))
(def InverseErfc "InverseErfc[s] gives the inverse complementary error function obtained as the solution for z in s=erfc (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseErfc)))
(def InverseFourier "InverseFourier[list] finds the discrete inverse Fourier transform of a list of complex numbers.\nInverseFourier[list, {p1, p2, …}] returns the specified positions of the discrete inverse Fourier transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFourier)))
(def InverseFourierCosTransform "InverseFourierCosTransform[expr, ω, t] gives the symbolic inverse Fourier cosine transform of expr. \nInverseFourierCosTransform[expr, {ω1, ω2, …}, {t1, t2, …}] gives the multidimensional inverse Fourier cosine transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFourierCosTransform)))
(def InverseFourierSequenceTransform "InverseFourierSequenceTransform[expr, ω, n] gives the inverse discrete-time Fourier transform of expr.\nInverseFourierSequenceTransform[expr, {ω1, ω2, …}, {n1, n2, …}] gives the multidimensional inverse Fourier sequence transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFourierSequenceTransform)))
(def InverseFourierSinTransform "InverseFourierSinTransform[expr, ω, t] gives the symbolic inverse Fourier sine transform of expr. \nInverseFourierSinTransform[expr, {ω1, ω2, …}, {t1, t2, …}] gives the multidimensional inverse Fourier sine transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFourierSinTransform)))
(def InverseFourierTransform "InverseFourierTransform[expr, ω, t] gives the symbolic inverse Fourier transform of expr. \nInverseFourierTransform[expr, {ω1, ω2, …}, {t1, t2, …}] gives the multidimensional inverse Fourier transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFourierTransform)))
(def InverseFunction "InverseFunction[f] represents the inverse of the function f, defined so that InverseFunction[f][y] gives the value of x for which f[x] is equal to y. \nInverseFunction[f, n, tot] represents the inverse with respect to the n ^th argument when there are tot arguments in all." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFunction)))
(def InverseFunctions "InverseFunctions is an option for Solve and related functions that specifies whether inverse functions should be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseFunctions)))
(def InverseGammaDistribution "InverseGammaDistribution[α, β] represents an inverse gamma distribution with shape parameter α and scale parameter β.\nInverseGammaDistribution[α, β, γ, μ] represents a generalized inverse gamma distribution with shape parameters α and γ, scale parameter β, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseGammaDistribution)))
(def InverseGammaRegularized "InverseGammaRegularized[a, s] gives the inverse of the regularized incomplete gamma function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseGammaRegularized)))
(def InverseGaussianDistribution "InverseGaussianDistribution[μ, λ] represents an inverse Gaussian distribution with mean μ and scale parameter λ.\nInverseGaussianDistribution[μ, λ, θ] represents a generalized inverse Gaussian distribution with parameters μ, λ, and θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseGaussianDistribution)))
(def InverseGudermannian "InverseGudermannian[z] gives the inverse Gudermannian function gd^-1 (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseGudermannian)))
(def InverseHankelTransform "InverseHankelTransform[expr, s, r] gives the inverse Hankel transform of order 0 for expr.\nInverseHankelTransform[expr, s, r, ν] gives the inverse Hankel transform of order ν for expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseHankelTransform)))
(def InverseHaversine "InverseHaversine[z] gives the inverse haversine function hav^-1 (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseHaversine)))
(def InverseImagePyramid "InverseImagePyramid[pyr] reconstructs an image from an ImagePyramid object pyr.\nInverseImagePyramid[pyr, pyrtype] assumes the specified pyramid type pyrtype.\nInverseImagePyramid[pyr, pyrtype, n] reconstructs up to pyramid level n.\nInverseImagePyramid[pyr, pyrtype, {size}] reconstructs up to the smallest pyramid level larger than the specified size." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseImagePyramid)))
(def InverseJacobiCD "InverseJacobiCD[v, m] gives the inverse Jacobi elliptic function cd^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiCD)))
(def InverseJacobiCN "InverseJacobiCN[v, m] gives the inverse Jacobi elliptic function cn^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiCN)))
(def InverseJacobiCS "InverseJacobiCS[v, m] gives the inverse Jacobi elliptic function cs^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiCS)))
(def InverseJacobiDC "InverseJacobiDC[v, m] gives the inverse Jacobi elliptic function dc^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiDC)))
(def InverseJacobiDN "InverseJacobiDN[v, m] gives the inverse Jacobi elliptic function dn^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiDN)))
(def InverseJacobiDS "InverseJacobiDS[v, m] gives the inverse Jacobi elliptic function ds^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiDS)))
(def InverseJacobiNC "InverseJacobiNC[v, m] gives the inverse Jacobi elliptic function nc^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiNC)))
(def InverseJacobiND "InverseJacobiND[v, m] gives the inverse Jacobi elliptic function nd^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiND)))
(def InverseJacobiNS "InverseJacobiNS[v, m] gives the inverse Jacobi elliptic function ns^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiNS)))
(def InverseJacobiSC "InverseJacobiSC[v, m] gives the inverse Jacobi elliptic function sc^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiSC)))
(def InverseJacobiSD "InverseJacobiSD[v, m] gives the inverse Jacobi elliptic function sd^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiSD)))
(def InverseJacobiSN "InverseJacobiSN[v, m] gives the inverse Jacobi elliptic function sn^-1 (vm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseJacobiSN)))
(def InverseLaplaceTransform "InverseLaplaceTransform[F[s], s, t] gives the symbolic inverse Laplace transform of F[s] in the variable s as f[t] in the variable t. \nInverseLaplaceTransform[F[s], s, Overscript[t, ^]] gives the numeric inverse Laplace transform at the numerical value Overscript[t, ^].\nInverseLaplaceTransform[F[s1, …, sn], {s1, s2, …}, {t1, t2, …}] gives the multidimensional inverse Laplace transform of F[s1, …, sn]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseLaplaceTransform)))
(def InverseMellinTransform "InverseMellinTransform[expr, s, x] gives the inverse Mellin transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseMellinTransform)))
(def InversePermutation "InversePermutation[perm] returns the inverse of permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InversePermutation)))
(def InverseRadon "InverseRadon[image] gives the inverse discrete Radon transform of image.\nInverseRadon[image, {w, h}] specifies the width w and the height h of the resulting image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseRadon)))
(def InverseRadonTransform "InverseRadonTransform[expr, {p, ϕ}, {x, y}] gives the inverse Radon transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseRadonTransform)))
(def InverseSeries "InverseSeries[s] takes the series s, and gives a series for the inverse of the function represented by s. \nInverseSeries[s, x] uses the variable x in the inverse series." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseSeries)))
(def InverseShortTimeFourier "InverseShortTimeFourier[input] reconstructs the signal from short-time Fourier data.\nInverseShortTimeFourier[input, n] assumes the spectrogram data was computed with partitions of length n.\nInverseShortTimeFourier[input, n, d] assumes partitions with offset d.\nInverseShortTimeFourier[input, n, d, wfun] assumes a smoothing window wfun was applied to each partition." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseShortTimeFourier)))
(def InverseSpectrogram "InverseSpectrogram[data] reconstructs the signal from the magnitude spectrogram data.\nInverseSpectrogram[img] reconstructs the signal, assuming that the image img is the magnitude spectrogram.\nInverseSpectrogram[input, n] assumes the spectrogram data was computed with partitions of length n.\nInverseSpectrogram[input, n, d] assumes partitions with offset d.\nInverseSpectrogram[input, n, d, wfun] assumes a smoothing window wfun was applied to each partition." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseSpectrogram)))
(def InverseSurvivalFunction "InverseSurvivalFunction[dist, q] gives the inverse of the survival function for the distribution dist as a function of the variable q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseSurvivalFunction)))
(def InverseTransformedRegion "InverseTransformedRegion[reg, f, n] represents the inverse transformed region {p∈^n|f(p)∈reg}, where reg is a region and f is a function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseTransformedRegion)))
(def InverseWaveletTransform "InverseWaveletTransform[dwd] gives the inverse wavelet transform of a DiscreteWaveletData object dwd.\nInverseWaveletTransform[dwd, wave] gives the inverse transform using the wavelet wave.\nInverseWaveletTransform[dwd, wave, wind] gives the inverse transform from the wavelet coefficients specified by wind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseWaveletTransform)))
(def InverseWeierstrassP "InverseWeierstrassP[p, {g2, g3}] gives a value of u for which the Weierstrass function ℘(u;g2, g3) is equal to p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseWeierstrassP)))
(def InverseWishartMatrixDistribution "InverseWishartMatrixDistribution[ν, Σ] represents an inverse Wishart matrix distribution with ν degrees of freedom and covariance matrix Σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseWishartMatrixDistribution)))
(def InverseZTransform "InverseZTransform[expr, z, n] gives the inverse Z transform of expr. \nInverseZTransform[expr, {z1, …, zm}, {n1, …, nm}] gives the multiple inverse Z transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote InverseZTransform)))
(def Invisible "Invisible[expr] displays as space that is the same size as the formatted version of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Invisible)))
(def IrreduciblePolynomialQ "IrreduciblePolynomialQ[poly] tests whether poly is an irreducible polynomial over the rationals.\nIrreduciblePolynomialQ[poly, Modulusp] tests whether poly is irreducible modulo a prime p.\nIrreduciblePolynomialQ[poly, Extension{a1, a2, …}] tests whether poly is irreducible over the field extension generated by the algebraic numbers ai.\nIrreduciblePolynomialQ[poly, ExtensionAll] tests whether poly is absolutely irreducible over the complex numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IrreduciblePolynomialQ)))
(def IslandData "IslandData[entity, property] gives the value of the specified property for the island entity.\nIslandData[{entity1, entity2, …}, property] gives a list of property values for the specified island entities.\nIslandData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IslandData)))
(def IsolatingInterval "IsolatingInterval[a] gives a rational isolating interval for the algebraic number a.\nIsolatingInterval[a, dx] gives an isolating interval of width at most dx." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IsolatingInterval)))
(def IsomorphicGraphQ "IsomorphicGraphQ[g1, g2] yields True if the graphs g1 and g2 are isomorphic, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IsomorphicGraphQ)))
(def IsomorphicSubgraphQ "IsomorphicSubgraphQ[g1, g2] yields True if the graph g1 is isomorphic to a subgraph of the graph g2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IsomorphicSubgraphQ)))
(def IsotopeData "IsotopeData[{Z, A}, \"property\"] gives the value of the specified property for the isotope with atomic number Z and mass number A.\nIsotopeData[\"name\", \"property\"] gives the value of the property for the named isotope." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote IsotopeData)))
(def Italic "Italic represents an italic font slant." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Italic)))
(def Item "Item[expr, options] represents an item within constructs such as Grid, Overlay, and Manipulate that displays with expr as the content, and with the specified options applied to the region containing expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Item)))
(def ItemAspectRatio "ItemAspectRatio is an option for GraphicsGrid which specifies the ratio of height to width for the regions in which items are placed in the graphics grid." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ItemAspectRatio)))
(def ItemDisplayFunction "ItemDisplayFunction is an option for Dataset that specifies a function to apply to items before displaying them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ItemDisplayFunction)))
(def ItemSize "ItemSize is an option for Grid, Column, and related constructs that specifies the sizes to allow for items." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ItemSize)))
(def ItemStyle "ItemStyle is an option for Dataset, Grid and related constructs that specifies styles to use for items." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ItemStyle)))
(def ItoProcess "ItoProcess[{a, b}, x, t] represents an Ito process x(t), where x(t)a(t, x(t))t+b (t, x(t)).w(t).\nItoProcess[{a, b, c}, x, t] represents an Ito process y(t)c(t, x(t)), where x(t)a(t, x(t))t+b (t, x(t)).w(t) .\nItoProcess[…, {x, x0}, {t, t0}] uses initial condition x(t0)x0.\nItoProcess[…, …, …, Σ] uses a Wiener process w(t), with covariance Σ.\nItoProcess[proc] converts proc to a standard Ito process whenever possible. \nItoProcess[sdeqns, expr, x, t, wdproc] represents an Ito process specified by a stochastic differential equation sdeqns, output expression expr, with state x and time t, driven by w following the process dproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ItoProcess)))
(def JaccardDissimilarity "JaccardDissimilarity[u, v] gives the Jaccard dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JaccardDissimilarity)))
(def JacobiAmplitude "JacobiAmplitude[u, m] gives the amplitude am(um) for Jacobi elliptic functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiAmplitude)))
(def JacobiCD "JacobiCD[u, m] gives the Jacobi elliptic function cd (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiCD)))
(def JacobiCN "JacobiCN[u, m] gives the Jacobi elliptic function cn (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiCN)))
(def JacobiCS "JacobiCS[u, m] gives the Jacobi elliptic function cs (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiCS)))
(def JacobiDC "JacobiDC[u, m] gives the Jacobi elliptic function dc (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiDC)))
(def JacobiDN "JacobiDN[u, m] gives the Jacobi elliptic function dn (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiDN)))
(def JacobiDS "JacobiDS[u, m] gives the Jacobi elliptic function ds (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiDS)))
(def JacobiEpsilon "JacobiEpsilon[u, m] gives the Jacobi epsilon function ℰ (um)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiEpsilon)))
(def JacobiNC "JacobiNC[u, m] gives the Jacobi elliptic function nc (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiNC)))
(def JacobiND "JacobiND[u, m] gives the Jacobi elliptic function nd (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiND)))
(def JacobiNS "JacobiNS[u, m] gives the Jacobi elliptic function ns (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiNS)))
(def JacobiP "JacobiP[n, a, b, x] gives the Jacobi polynomial P _n^(a, b)(x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiP)))
(def JacobiSC "JacobiSC[u, m] gives the Jacobi elliptic function sc (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiSC)))
(def JacobiSD "JacobiSD[u, m] gives the Jacobi elliptic function sd (u|m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiSD)))
(def JacobiSN "JacobiSN[u, m] gives the Jacobi elliptic function sn (um)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiSN)))
(def JacobiSymbol "JacobiSymbol[n, m] gives the Jacobi symbol (n/m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiSymbol)))
(def JacobiZN "JacobiZN[u, m] gives the Jacobi zeta function zn (um)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiZN)))
(def JacobiZeta "JacobiZeta[ϕ, m] gives the Jacobi zeta function Ζ (ϕm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JacobiZeta)))
(def JankoGroupJ1 "JankoGroupJ1[] represents the sporadic simple Janko group J1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JankoGroupJ1)))
(def JankoGroupJ2 "JankoGroupJ2[] represents the sporadic simple Janko group J2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JankoGroupJ2)))
(def JankoGroupJ3 "JankoGroupJ3[] represents the sporadic simple Janko group J3." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JankoGroupJ3)))
(def JankoGroupJ4 "JankoGroupJ4[] represents the sporadic simple Janko group J4." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JankoGroupJ4)))
(def JarqueBeraALMTest "JarqueBeraALMTest[data] tests whether data is normally distributed using the Jarque–Bera ALM test.\nJarqueBeraALMTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JarqueBeraALMTest)))
(def JohnsonDistribution "JohnsonDistribution[\"SB\", γ, δ, μ, σ] represents a bounded Johnson distribution with shape parameters γ, δ, location parameter μ, and scale parameter σ.\nJohnsonDistribution[\"SL\", γ, δ, μ, σ] represents a semi-bounded Johnson distribution.\nJohnsonDistribution[\"SU\", γ, δ, μ, σ] represents an unbounded Johnson distribution.\nJohnsonDistribution[\"SN\", γ, δ, μ, σ] represents a normal Johnson distribution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JohnsonDistribution)))
(def Join "Join[list1, list2, …] concatenates lists or other expressions that share the same head.\nJoin[list1, list2, …, n] joins the objects at level n in each of the listi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Join)))
(def JoinAcross "JoinAcross[{a1, a2, …}, {b1, b2, …}, key] gives a list of associations obtained by joining those pairs of associations ai and bj in which the values associated with key are the same. \nJoinAcross[{a1, a2, …}, {b1, b2, …}, {key1, key2, …}] joins pairs of associations only when the values associated with all keys keyi are the same.\nJoinAcross[{a1, a2, …}, {b1, b2, …}, keyakeyb] joins pairs of associations ai, bj in which the values associated with keya in the ai are the same as those associated with keyb in the bj.\nJoinAcross[{a1, a2, …}, {b1, b2, …}, {key a1key b1, …}] joins pairs of associations in which pairs of corresponding values agree.\nJoinAcross[alist, blist, keyspec, \"joinspec\"] uses joinspec to determine when to allow associations that contain missing elements to be generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JoinAcross)))
(def JoinForm "JoinForm[type] is a graphics directive that specifies what type of joins should be used to connect segments of lines, tubes, edges, and related primitives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JoinForm)))
(def Joined "Joined is an option for ListPlot and related functions that specifies whether points in each dataset should be joined into a line, or should be plotted as separate points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Joined)))
(def JoinedCurve "JoinedCurve[{segment1, segment2, …}] represents a curve consisting of segment1 followed by segment2 etc. \nJoinedCurve[{component1, component2, …}] represents a list of separate component curves component1, component2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JoinedCurve)))
(def JordanDecomposition "JordanDecomposition[m] yields the Jordan decomposition of a square matrix m. The result is a list {s, j} where s is a similarity matrix and j is the Jordan canonical form of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JordanDecomposition)))
(def JordanModelDecomposition "JordanModelDecomposition[ssm] yields the Jordan decomposition of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JordanModelDecomposition)))
(def JuliaSetBoettcher "JuliaSetBoettcher[c, z] gives the Böttcher coordinate of z with respect to the quadratic Julia set Jc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JuliaSetBoettcher)))
(def JuliaSetIterationCount "JuliaSetIterationCount[f, z, p] returns the number of iterations, beginning with the complex number zp, of the function f(z) needed to determine whether p is in the Julia set of f.\nJuliaSetIterationCount[c, p] returns the number of iterations, beginning with the complex number zp, of the function f(z)z^2+c needed to determine whether p is in the Julia set of f(z)z^2+c.\nJuliaSetIterationCount[f, z, {p1, p2, …}] returns a list of the number of iterations required to determine whether each member of {p1, p2, …} is in the Julia set of f.\nJuliaSetIterationCount[c, {p1, p2, …}] returns a list of the number of iterations required to determine whether each member of {p1, p2, …} is in the Julia set of f(z)z^2+c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JuliaSetIterationCount)))
(def JuliaSetPlot "JuliaSetPlot[f, z] plots the Julia set of the rational function f of the variable z.\nJuliaSetPlot[c] plots the Julia set of the function f(z)z^2+c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JuliaSetPlot)))
(def JuliaSetPoints "JuliaSetPoints[f, z] returns a list of coordinates approximating the real and imaginary parts of the complex numbers in the Julia set of the rational function f of the variable z.\nJuliaSetPoints[c] returns a list of coordinates of points approximating the Julia set of the function f(z)z^2+c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JuliaSetPoints)))
(def JulianDate "JulianDate[] gives the current number of days since noon on November 24, 4714 BCE in the GMT time zone. \nJulianDate[date] gives the number of days for the specified date.\nJulianDate[\"type\"] gives the Julian date variant of the specified type.\nJulianDate[\"type\", date] gives the variant for the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote JulianDate)))
(def KCoreComponents "KCoreComponents[g, k] gives the k-core components of the underlying simple graph of g.\nKCoreComponents[g, k, \"In\"] gives the k-core components with vertex in-degrees at least k.\nKCoreComponents[g, k, \"Out\"] gives the k-core components with vertex out-degrees at least k.\nKCoreComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KCoreComponents)))
(def KDistribution "KDistribution[ν, w] represents a K distribution with shape parameters ν and w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KDistribution)))
(def KEdgeConnectedComponents "KEdgeConnectedComponents[g, k] gives the k-edge-connected components of the graph g.\nKEdgeConnectedComponents[g, k, {v1, v2, …}] gives the k-edge-connected components that include at least one of the vertices v1, v2, ….\nKEdgeConnectedComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KEdgeConnectedComponents)))
(def KEdgeConnectedGraphQ "KEdgeConnectedGraphQ[g, k] yields True if the graph g is k-edge-connected and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KEdgeConnectedGraphQ)))
(def KVertexConnectedComponents "KVertexConnectedComponents[g, k] gives the k-vertex-connected components of the graph g.\nKVertexConnectedComponents[g, k, {v1, v2, …}] gives the k-vertex-connected components that include at least one of the vertices v1, v2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KVertexConnectedComponents)))
(def KVertexConnectedGraphQ "KVertexConnectedGraphQ[g, k] yields True if the graph g is k-vertex-connected and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KVertexConnectedGraphQ)))
(def KagiChart "KagiChart[{{date1, p1}, {date2, p2}, …}] makes a Kagi chart with prices pi at date datei.\nKagiChart[{\"name\", daterange}] makes a Kagi chart of closing prices for the financial entity \"name\" over the date range daterange.\nKagiChart[{…}, rt] makes a Kagi chart with reversal threshold rt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KagiChart)))
(def KaiserBesselWindow "KaiserBesselWindow[x] represents a Kaiser–Bessel window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KaiserBesselWindow)))
(def KaiserWindow "KaiserWindow[x] represents a Kaiser window function of x.\nKaiserWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KaiserWindow)))
(def KalmanEstimator "KalmanEstimator[ssm, {w, v}] constructs the Kalman estimator for the StateSpaceModel ssm with process and measurement noise covariance matrices w and v. \nKalmanEstimator[ssm, {w, v, h}] includes the cross-covariance matrix h.\nKalmanEstimator[{ssm, sensors}, {…}] specifies sensors as the noisy measurements of ssm.\nKalmanEstimator[{ssm, sensors, dinputs}, {…}] specifies dinputs as the deterministic inputs of ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KalmanEstimator)))
(def KalmanFilter "KalmanFilter[tproc, data] filters data using the time series model given by tproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KalmanFilter)))
(def KarhunenLoeveDecomposition "KarhunenLoeveDecomposition[{a1, a2, …}] gives the Karhunen–Loeve transform {{b1, b2, …}, m} of the numerical arrays {a1, a2, …}, where m.aibi. \nKarhunenLoeveDecomposition[{b1, b2, …}, m] uses the inverse of the matrix m for transforming bi to ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KarhunenLoeveDecomposition)))
(def KaryTree "KaryTree[n] gives a binary tree with n vertices.\nKaryTree[n, k] gives a k-ary tree with n vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KaryTree)))
(def KatzCentrality "KatzCentrality[g, α] gives a list of Katz centralities for the vertices in the graph g and weight α.\nKatzCentrality[g, α, β] gives a list of Katz centralities using weight α and initial centralities β.\nKatzCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KatzCentrality)))
(def KeepExistingVersion "KeepExistingVersion is an option for PacletInstall and PacletInstallSubmit that specifies whether an older version of a paclet should remain installed when a newer one gets installed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeepExistingVersion)))
(def KelvinBei "KelvinBei[z] gives the Kelvin function bei (z).\nKelvinBei[n, z] gives the Kelvin function bein (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KelvinBei)))
(def KelvinBer "KelvinBer[z] gives the Kelvin function ber (z).\nKelvinBer[n, z] gives the Kelvin function bern (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KelvinBer)))
(def KelvinKei "KelvinKei[z] gives the Kelvin function kei (z).\nKelvinKei[n, z] gives the Kelvin function kein (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KelvinKei)))
(def KelvinKer "KelvinKer[z] gives the Kelvin function ker (z).\nKelvinKer[n, z] gives the Kelvin function kern (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KelvinKer)))
(def KendallTau "KendallTau[v1, v2] gives Kendall's rank correlation coefficient τ for the vectors v1 and v2.\nKendallTau[m] gives Kendall's rank correlation coefficients τ for the matrix m.\nKendallTau[m1, m2] gives Kendall's rank correlation coefficients τ for the matrices m1 and m2.\nKendallTau[dist] gives Kendall's rank correlation matrix for the multivariate symbolic distribution dist.\nKendallTau[dist, i, j] gives the (i, j)^th Kendall rank correlation for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KendallTau)))
(def KendallTauTest "KendallTauTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nKendallTauTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nKendallTauTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KendallTauTest)))
(def KernelConfiguration "KernelConfiguration[spec] specifies a kernel that can be used for RemoteEvaluate or LaunchKernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelConfiguration)))
(def KernelConfigurationEdit "KernelConfigurationEdit[kernelspec] gives a dialog for editing the properties of a new kernel specification based on kernelspec.\nKernelConfigurationEdit[] prompts for the type of kernel to edit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelConfigurationEdit)))
(def KernelEvaluate "KernelEvaluate[expr] evaluates expr in the Wolfram Language kernel, even when called from compiled code.\nKernelEvaluate[x, expr] captures the value of the compiled variable x for use in the evaluation of expr. \nKernelEvaluate[{x1, x2, …}, expr] captures the values of the xi for use in the evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelEvaluate)))
(def KernelFunction "KernelFunction[f] represents a function to be evaluated in the Wolfram Language kernel, even when called from compiled code." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelFunction)))
(def KernelMixtureDistribution "KernelMixtureDistribution[{x1, x2, …}] represents a kernel mixture distribution based on the data values xi.\nKernelMixtureDistribution[{{x1, y1, …}, {x2, y2, …}, …}] represents a multivariate kernel mixture distribution based on data values {xi, yi, …}.\nKernelMixtureDistribution[…, bw] represents a kernel mixture distribution with bandwidth bw.\nKernelMixtureDistribution[…, bw, ker] represents a kernel mixture distribution with bandwidth bw and smoothing kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelMixtureDistribution)))
(def KernelObject "KernelObject[…] represents a kernel available for parallel computing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KernelObject)))
(def Ket "Ket[{k1, k2, …}] displays as |k1, k2, …〉." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ket)))
(def Key "Key[key] represents a key used to access a value in an association or a column in a Tabular object.\nKey[key][assoc] extracts the value corresponding to key in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Key)))
(def KeyCollisionFunction "KeyCollisionFunction is an option for JoinAcross that specifies how to handle pairs of elements that are not being joined but nevertheless have the same key." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyCollisionFunction)))
(def KeyComplement "KeyComplement[{assocall, assoc1, assoc2, …}] generates an association in which only elements whose keys appear in assocall but not in any of the associ are retained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyComplement)))
(def KeyDrop "KeyDrop[assoc, {key1, key2, …}] yields an association from which elements with keys keyi have been dropped. \nKeyDrop[{assoc1, assoc2, …}, keys] gives a list of associations.\nKeyDrop[keys] represents an operator form of KeyDrop that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyDrop)))
(def KeyDropFrom "KeyDropFrom[a, key] changes the association a by dropping the element with the specified key.\nKeyDropFrom[a, {key1, key2, …}] drops the elements with keys keyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyDropFrom)))
(def KeyExistsQ "KeyExistsQ[assoc, key] returns True if the specified key exists in the association assoc, and False otherwise.\nKeyExistsQ[key] represents an operator form of KeyExistsQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyExistsQ)))
(def KeyFreeQ "KeyFreeQ[assoc, form] yields True if no key in the association assoc matches form, and yields False otherwise.\nKeyFreeQ[form] represents an operator form of KeyFreeQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyFreeQ)))
(def KeyIntersection "KeyIntersection[{assoc1, assoc2, …}] generates a list of associations in which only elements whose keys appear in all the associ are retained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyIntersection)))
(def KeyMap "KeyMap[f, key1val1, key2val2, …] maps f over the keys in an association, giving f[key1]val1, f[key2]val2, ….\nKeyMap[f] represents an operator form of KeyMap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyMap)))
(def KeyMemberQ "KeyMemberQ[assoc, form] yields True if a key in the association assoc matches form, and False otherwise.\nKeyMemberQ[form] represents an operator form of KeyMemberQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyMemberQ)))
(def KeySelect "KeySelect[assoc, crit] selects elements in the association assoc for which crit applied to their keys is True.\nKeySelect[crit] represents an operator form of KeySelect that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeySelect)))
(def KeySort "KeySort[assoc] orders the elements of an association by sorting its keys.\nKeySort[assoc, p] orders the elements of an association using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeySort)))
(def KeySortBy "KeySortBy[assoc, f] sorts the elements of an association in the order defined by applying f to each of their keys.\nKeySortBy[f] represents an operator form of KeySortBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeySortBy)))
(def KeyTake "KeyTake[assoc, {key1, key2, …}] yields an association containing only the elements with keys keyi.\nKeyTake[{assoc1, assoc2, …}, keys] gives a list of associations.\nKeyTake[{key1, key2, …}] represents an operator form of KeyTake that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyTake)))
(def KeyUnion "KeyUnion[{assoc1, assoc2, …}] generates a list of associations in which each association has the union of the keys of the associ, padding by inserting values of Missing[…] if necessary.\nKeyUnion[{assoc1, assoc2, …}, f] uses f[key] as the value associated with a missing key." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyUnion)))
(def KeyValueMap "KeyValueMap[f, key1val1, key2val2, …] gives the list {f[key1, val1], f[key2, val2], …}.\nKeyValueMap[f] represents an operator form of KeyValueMap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyValueMap)))
(def KeyValuePattern "KeyValuePattern[{patt1, …}] is a pattern object that represents an association or list of rules that includes elements matching each of the patti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyValuePattern)))
(def KeyframeActions "KeyframeActions is an option for Manipulate and related functions that gives a list of times and control settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeyframeActions)))
(def KeypointStrength "KeypointStrength is an option for ImageKeypoints and related functions to specify a minimum strength of detected keypoints." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KeypointStrength)))
(def Keys "Keys[key1val1, key2val2, …] gives a list of the keys keyi in an association.\nKeys[{key1val1, key2val2, …}] gives a list of the keyi in a list of rules.\nKeys[expr, h] gives a list of keys in expr, wrapping each of them with head h before evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Keys)))
(def Khinchin "Khinchin is Khinchin's constant, with numerical value ≃2.68545." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Khinchin)))
(def KillProcess "KillProcess[proc] kills the external process represented by the ProcessObject proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KillProcess)))
(def KirchhoffGraph "KirchhoffGraph[kmat] gives the graph with Kirchhoff matrix kmat.\nKirchhoffGraph[{v1, v2, …}, kmat] gives the graph with vertices vi and Kirchhoff matrix kmat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KirchhoffGraph)))
(def KirchhoffMatrix "KirchhoffMatrix[g] gives the Kirchhoff matrix of the graph g.\nKirchhoffMatrix[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KirchhoffMatrix)))
(def KleinInvariantJ "KleinInvariantJ[τ] gives the Klein invariant modular elliptic function J (τ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KleinInvariantJ)))
(def KnapsackSolve "KnapsackSolve[{cost1, cost2, …}, maxtotalcost] solves the knapsack problem of finding the maximum number of items associated with each of the costi, subject to the constraint that the total cost is not larger than maxtotalcost.\nKnapsackSolve[{{payoff1, cost1}, {payoff2, cost2}, …}, maxtotalcost] finds a number of items that maximizes the total payoff, while satisfying the constraint on the total cost.\nKnapsackSolve[{{payoff1, cost1, maxcount1}, …}, maxtotalcost] allows at most maxcounti copies of item i.\nKnapsackSolve[items, {maxtotalpayoff, maxtotalcost}] finds a result that gives a total payoff not larger than maxtotalpayoff.\nKnapsackSolve[items, {maxtotalpayoff, maxtotalcost, maxtotalcount}] adds the constraint of having no more than maxtotalcount items in total. \nKnapsackSolve[label1itemspec1, …, maxtotals] labels each type of item and gives the result as an association." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KnapsackSolve)))
(def KnightTourGraph "KnightTourGraph[m, n] gives a Knight's tour graph on an mn chessboard." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KnightTourGraph)))
(def KnotData "KnotData[knot, \"property\"] gives the specified property for a knot.\nKnotData[knot] gives an image of the knot.\nKnotData[\"class\"] gives a list of knots in the specified class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KnotData)))
(def KnownUnitQ "KnownUnitQ[expr] returns True if expr is a canonical unit, and False otherwise.\nKnownUnitQ[expr, dims] gives True if expr is a canonical unit with physical dimensions dims, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KnownUnitQ)))
(def KochCurve "KochCurve[n] gives the line segments representing the n ^th-step Koch curve.\nKochCurve[n, {θ1, θ2, …}] takes a series of steps of unit length at successive relative angles θi. \nKochCurve[n, {{r1, θ1}, {r2, θ2}, …}] takes successive steps of lengths proportional to ri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KochCurve)))
(def KolmogorovSmirnovTest "KolmogorovSmirnovTest[data] tests whether data is normally distributed using the Kolmogorov–Smirnov test.\nKolmogorovSmirnovTest[data, dist] tests whether data is distributed according to dist using the Kolmogorov–Smirnov test.\nKolmogorovSmirnovTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KolmogorovSmirnovTest)))
(def KroneckerDelta "KroneckerDelta[n1, n2, …] gives the Kronecker delta δ n1 n2 …, equal to 1 if all the ni are equal, and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KroneckerDelta)))
(def KroneckerModelDecomposition "KroneckerModelDecomposition[ssm] yields the Kronecker decomposition of a descriptor state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KroneckerModelDecomposition)))
(def KroneckerProduct "KroneckerProduct[m1, m2, …] constructs the Kronecker product of the arrays mi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KroneckerProduct)))
(def KroneckerSymbol "KroneckerSymbol[n, m] gives the Kronecker symbol (n/m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KroneckerSymbol)))
(def KuiperTest "KuiperTest[data] tests whether data is normally distributed using the Kuiper test.\nKuiperTest[data, dist] tests whether data is distributed according to dist using the Kuiper test.\nKuiperTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KuiperTest)))
(def KumaraswamyDistribution "KumaraswamyDistribution[α, β] represents a Kumaraswamy distribution with shape parameters α and β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KumaraswamyDistribution)))
(def Kurtosis "Kurtosis[data] gives the coefficient of kurtosis for the elements in data.\nKurtosis[dist] gives the coefficient of kurtosis for the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Kurtosis)))
(def KuwaharaFilter "KuwaharaFilter[data, r] computes for each element p in data the variance of the values in the four (r+1)×(r+1) squares that have p as a corner, and replaces p with the mean of the values of the square with least variance." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote KuwaharaFilter)))
(def LABColor "LABColor[l, a, b] represents a color in the CIELAB color space with lightness l and color components a and b. \nLABColor[l, a, b, α] specifies opacity α. \nLABColor[\"string\"] returns a color from an HTML color name etc.\nLABColor[color] returns the CIELAB representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LABColor)))
(def LCHColor "LCHColor[l, c, h] represents a color in the LCH color space with lightness l, chroma c and hue h.\nLCHColor[l, c, h, a] specifies opacity a. \nLCHColor[\"string\"] returns a color from an HTML color name etc.\nLCHColor[color] returns the LCH representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LCHColor)))
(def LCM "LCM[n1, n2, …] gives the least common multiple of the ni." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LCM)))
(def LLMConfiguration "LLMConfiguration[…] represents a configuration for an LLM.\nLLMConfiguration[propval] creates a configuration based on $LLMEvaluator with the specified property set to val.\nLLMConfiguration[<|prop1->val1, prop2->val2, ...|>] specifies several properties and values.\nLLMConfiguration[LLMConfiguration[…], propspec] creates a configuration based on an existing configuration." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMConfiguration)))
(def LLMEvaluator "LLMEvaluator is an option for functions such as LLMSynthesize that specifies the LLM configuration." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMEvaluator)))
(def LLMExampleFunction "LLMExampleFunction[{in1out1, in2out2, …}] creates an LLMFunction from few-shot examples.\nLLMExampleFunction[{in1, in2, …}{out1, out2, …}] generates the same result.\nLLMExampleFunction[{header, training}] prefaces the prompt with header.\nLLMExampleFunction[prompting, form] includes the interpreter form to apply to the response." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMExampleFunction)))
(def LLMFunction "LLMFunction[prompt] represents a template for a large language model (LLM) prompt.\nLLMFunction[{prompt1, prompt2, …}] represents a combination of multiple prompts.\nLLMFunction[prompt, form] includes the interpreter form to apply to the response.\nLLMFunction[…][params] give the LLM service response for prompt applied to parameters params." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMFunction)))
(def LLMPrompt "LLMPrompt[\"name\"] gives the TemplateObject for the specified large language model prompt.\nLLMPrompt[resource] retrieves the TemplateObject for the specified resource.\nLLMPrompt[…, params] gives the TemplateObject with slots filled in by params.\nLLMPrompt[…][p1, p2, …] applies a template with numbered slots to parameter values pi.\nLLMPrompt[…][key1p1, key2p2] applies a template with named slots to parameter data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMPrompt)))
(def LLMPromptGenerator "LLMPromptGenerator[f] represents a prompt generator that uses the function f.\nLLMPromptGenerator[f, inputspec] provides the specified inputspec to f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMPromptGenerator)))
(def LLMResourceFunction "LLMResourceFunction[\"name\"] retrieves an LLMFunction with the specified name.\nLLMResourceFunction[loc] imports an LLMFunction from the specified location.\nLLMResourceFunction[…][params] applies the specified LLMFunction to the parameters params." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMResourceFunction)))
(def LLMResourceTool "LLMResourceTool[name] gives the TemplateObject for the specified large language model tool.\nLLMResourceTool[resource] retrieves the TemplateObject for the specified resource.\nLLMResourceTool[…, key1p1, key2p2, …] gives the TemplateObject with slots filled in by parameters.\nLLMResourceTool[…][key1p1, key2p2, …|>] creates an LLMTool by applying the template to parameter data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMResourceTool)))
(def LLMSynthesize "LLMSynthesize[prompt] generates text according to the input prompt.\nLLMSynthesize[{prompt1, …}] combines multiple prompti together.\nLLMSynthesize[…, prop] returns the specified property of the generated text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMSynthesize)))
(def LLMSynthesizeSubmit "LLMSynthesizeSubmit[prompt] generates text asynchronously according to the input prompt.\nLLMSynthesizeSubmit[{prompt1, …}] combines multiple prompti together." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMSynthesizeSubmit)))
(def LLMTool "LLMTool[\"name\", params, fun] represents a tool for use by an LLM enabling it to run fun on parameters described by params.\nLLMTool[{\"name\", \"description\"}, params, fun] uses a description to prompt the LLM." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMTool)))
(def LLMToolRequest "LLMToolRequest[…] represents a tool request made by an LLM.\nLLMToolRequest[\"tool\", {name1->val1, name2->val2, …}] represents a request to \"tool\" with the specified parameter values.\nLLMToolRequest[\"tool\", params, str] annotates a request with the request string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMToolRequest)))
(def LLMToolResponse "LLMToolResponse[…] represents a response to an LLM tool request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LLMToolResponse)))
(def LQEstimatorGains "LQEstimatorGains[ssm, {w, v}] gives the optimal estimator gain matrix for the StateSpaceModel ssm, with process and measurement noise covariance matrices w and v.\nLQEstimatorGains[ssm, {w, v, h}] includes the cross-covariance matrix h.\nLQEstimatorGains[{ssm, sensors}, {…}] specifies sensors as the noisy measurements of ssm.\nLQEstimatorGains[{ssm, sensors, dinputs}, {…}] specifies dinputs as the deterministic inputs of ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LQEstimatorGains)))
(def LQGRegulator "LQGRegulator[sspec, cvs, wts] gives the optimal output feedback controller for the stochastic system specification sspec with noise covariance matrices cvs that minimizes a cost function with weights wts.\nLQGRegulator[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LQGRegulator)))
(def LQOutputRegulatorGains "LQOutputRegulatorGains[sspec, wts] gives the state feedback gains for the system specification sspec that minimizes an output cost function with weights wts.\nLQOutputRegulatorGains[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LQOutputRegulatorGains)))
(def LQRegulatorGains "LQRegulatorGains[sspec, wts] gives the state feedback gains for the system specification sspec that minimizes a cost function with weights wts.\nLQRegulatorGains[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LQRegulatorGains)))
(def LUDecomposition "LUDecomposition[m] generates a representation of the LU decomposition of a square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LUDecomposition)))
(def LUVColor "LUVColor[l, u, v] represents a color in the LUV color space with lightness l and color components u and v.\nLUVColor[l, u, v, a] specifies opacity a. \nLUVColor[\"string\"] returns a color from an HTML color name etc.\nLUVColor[color] returns the LUV representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LUVColor)))
(def Label "Label[tag] represents a point in a compound expression to which control can be transferred using Goto." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Label)))
(def LabelStyle "LabelStyle is an option for formatting and related constructs that specifies the style to use in displaying their label-like elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LabelStyle)))
(def LabelVisibility "LabelVisibility is an option for Callout and Labeled in plotting functions that determines which labels are shown." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LabelVisibility)))
(def Labeled "Labeled[expr, lbl] displays expr labeled with lbl. \nLabeled[expr, lbl, pos] places lbl at a position specified by pos. \nLabeled[expr, {lbl1, lbl2, …}, {pos1, …}] places the lbli at positions posi. \nLabeled[expr, {lbl1, lbl2, lbl3, lbl4}, All] places the lbli at the bottom, left, top, and right, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Labeled)))
(def LabeledGraphicsBox "LabeledGraphicsBox[box, lbl] is a low-level construct that represents a graphics box with a label attached to it.\nLabeledGraphicsBox[box, lbl, pos] places lbl at a position specified by pos.\nLabeledGraphicsBox[box, {lbl1, lbl2, …}, {pos1, pos2, …}] places the lbli at positions posi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LabeledGraphicsBox)))
(def LabelingFunction "LabelingFunction is an option for data visualization functions to automatically label elements of a visualization." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LabelingFunction)))
(def LabelingSize "LabelingSize is an option to visualization functions that specifies the size to be used for labels and callouts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LabelingSize)))
(def LaguerreL "LaguerreL[n, x] gives the Laguerre polynomial Ln (x). \nLaguerreL[n, a, x] gives the generalized Laguerre polynomial L_n^a(x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaguerreL)))
(def LakeData "LakeData[entity, property] gives the value of the specified property for the lake entity.\nLakeData[{entity1, entity2, …}, property] gives a list of property values for the specified lake entities.\nLakeData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LakeData)))
(def LambdaComponents "LambdaComponents[g] gives the lambda components of the graph g.\nLambdaComponents[g, {v1, v2, …}] gives the lambda components that include at least one of the vertices {v1, v2, …}.\nLambdaComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LambdaComponents)))
(def LameC "LameC[ν, j, z, m] gives the j ^th Lamé function Ec _ν^(j)(zm) of order ν with elliptic parameter m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameC)))
(def LameCPrime "LameCPrime[ν, j, z, m] gives the z-derivative of the j ^th Lamé function Ec _ν^(j)(zm) of order ν with elliptic parameter m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameCPrime)))
(def LameEigenvalueA "LameEigenvalueA[ν, j, m] gives the j ^th Lamé eigenvalue a _ν^(j)(m) of order ν with elliptic parameter m for the function LameC[ν, j, z, m]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameEigenvalueA)))
(def LameEigenvalueB "LameEigenvalueB[ν, j, m] gives the j ^th Lamé eigenvalue b _ν^(j)(m) of order ν with elliptic parameter m for the Lamé function LameS[ν, j, z, m]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameEigenvalueB)))
(def LameS "LameS[ν, j, z, m] gives the j ^th Lamé function Es _ν^(j)(zm) of order ν with elliptic parameter m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameS)))
(def LameSPrime "LameSPrime[ν, j, z, m] gives the z-derivative of the j ^th Lamé function Es _ν^(j)(zm) of order ν with elliptic parameter m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LameSPrime)))
(def LaminaData "LaminaData[entity, property] gives the value of the specified property for the lamina entity.\nLaminaData[{entity1, entity2, …}, property] gives a list of property values for the specified lamina entities.\nLaminaData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaminaData)))
(def LanczosWindow "LanczosWindow[x] represents a Lanczos window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LanczosWindow)))
(def LandauDistribution "LandauDistribution[μ, σ] represents a Landau distribution with location parameter μ and scale parameter σ.\nLandauDistribution[] represents a Landau distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LandauDistribution)))
(def Language "Language is an option that specifies the language to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Language)))
(def LanguageCategory "LanguageCategory is an option for Cell that determines in what category of language the contents of the cell should be assumed to be for purposes of spell checking and hyphenation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LanguageCategory)))
(def LanguageData "LanguageData[entity, property] gives the value of the specified property for the language entity.\nLanguageData[{entity1, entity2, …}, property] gives a list of property values for the specified language entities.\nLanguageData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LanguageData)))
(def LanguageIdentify "LanguageIdentify[\"string\"] attempts to determine what human language text in string is in, predominantly.\nLanguageIdentify[audio] performs language identification in audio recording audio.\nLanguageIdentify[video] performs language identification of the audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LanguageIdentify)))
(def LaplaceDistribution "LaplaceDistribution[μ, β] represents a Laplace double-exponential distribution with mean μ and scale parameter β.\nLaplaceDistribution[] represents a Laplace double-exponential distribution with mean 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaplaceDistribution)))
(def LaplaceTransform "LaplaceTransform[f[t], t, s] gives the symbolic Laplace transform of f[t] in the variable t and returns a transform F[s] in the variable s.\nLaplaceTransform[f[t], t, Overscript[s, ^]] gives the numeric Laplace transform at the numerical value Overscript[s, ^].\nLaplaceTransform[f[t1, …, tn], {t1, …, tn}, {s1, …, sn}] gives the multidimensional Laplace transform of f[t1, …, tn]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaplaceTransform)))
(def Laplacian "Laplacian[f, {x1, …, xn}] gives the Laplacian ∂^2f/∂x1^2+…+∂^2f/∂xn^2.\nLaplacian[f, {x1, …, xn}, chart] gives the Laplacian in the given coordinates chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Laplacian)))
(def LaplacianFilter "LaplacianFilter[data, r] convolves data with a radius-r Laplacian kernel.\nLaplacianFilter[data, {r1, r2, …}] uses radius ri at level i in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaplacianFilter)))
(def LaplacianGaussianFilter "LaplacianGaussianFilter[data, r] convolves data with a Laplacian of Gaussian kernel of pixel radius r.\nLaplacianGaussianFilter[data, {r, σ}]  convolves data with a Laplacian of Gaussian kernel of radius r and standard deviation σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaplacianGaussianFilter)))
(def LaplacianPDETerm "LaplacianPDETerm[vars] represents a Laplacian term ∇^2{x1, …, xn}u with model variables vars.\nLaplacianPDETerm[vars, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaplacianPDETerm)))
(def Large "Large is a style or option setting that specifies that objects should be large." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Large)))
(def Larger "Larger is a style or option setting that specifies that objects should be larger." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Larger)))
(def Last "Last[expr] gives the last element in expr. \nLast[expr, def] gives the last element if there are any elements, or def otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Last)))
(def Latitude "Latitude[pos] gives the latitude in degrees of a geographic position specified by pos.\nLatitude[pos, datum] gives the latitude referring to the specified geodetic datum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Latitude)))
(def LatitudeLongitude "LatitudeLongitude[pos] gives a list of the latitude and longitude in degrees of a geographic position specified by pos.\nLatitudeLongitude[pos, datum] gives the latitude and longitude referring to the specified geodetic datum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LatitudeLongitude)))
(def LatticeData "LatticeData[lattice, \"property\"] gives the specified property for a lattice.\nLatticeData[n] gives a list of named lattices of dimension n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LatticeData)))
(def LatticeReduce "LatticeReduce[{v1, v2, …}] gives a reduced basis for the set of vectors vi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LatticeReduce)))
(def LaunchKernels "LaunchKernels[] launches all currently configured parallel subkernels.\nLaunchKernels[n] launches n local subkernels on the current computer.\nLaunchKernels[ker] launches the kernel specified by ker.\nLaunchKernels[{ker1, ker2, …}] launches the kernels keri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LaunchKernels)))
(def LayerSizeFunction "LayerSizeFunction is an option for TreePlot that gives a function to specify the relative height to allow for each layer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LayerSizeFunction)))
(def LayeredGraph "LayeredGraph[g] creates a graph with vertices and edges from the graph g represented as a layered plot.\nLayeredGraph[{e1, e2, …}] creates a graph with edges ej represented as a layered plot.\nLayeredGraph[{…, w[ei], …}] creates a graph with edges ei with features defined by the symbolic wrapper w.\nLayeredGraph[…, vpos] places the dominant vertex v in the plot at position pos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LayeredGraph)))
(def LayeredGraph3D "LayeredGraph3D[g] creates a graph with vertices and edges from the graph g represented as a 3D layered plot.\nLayeredGraph3D[{e1, e2, …}] creates a graph with edges ej represented as a 3D layered plot.\nLayeredGraph3D[{…, w[ei], …}] creates a graph with edges ei with features defined by the symbolic wrapper w.\nLayeredGraph3D[…, vpos] places the dominant vertex v in the plot at position pos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LayeredGraph3D)))
(def LayeredGraphPlot "LayeredGraphPlot[g] generates a layered plot of the graph g.\nLayeredGraphPlot[{e1, e2, …}] generates a layered plot of the graph with edges ej.\nLayeredGraphPlot[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w.\nLayeredGraphPlot[{v i1v j1, …}] uses rules vikvjk to specify the graph g.\nLayeredGraphPlot[m] uses the adjacency matrix m to specify the graph g.\nLayeredGraphPlot[…, vpos] places the dominant vertex v in the plot at position pos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LayeredGraphPlot)))
(def LayeredGraphPlot3D "LayeredGraphPlot3D[g] generates a 3D layered plot of the graph g.\nLayeredGraphPlot3D[{e1, e2, …}] generates a 3D layered plot of the graph with edges ei.\nLayeredGraphPlot3D[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w.\nLayeredGraphPlot3D[{v i1v j1, …}] uses rules vikvjk to specify the graph g.\nLayeredGraphPlot3D[m] uses the adjacency matrix m to specify the graph g.\nLayeredGraphPlot3D[…, vpos] places the dominant vertex v in the plot at position pos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LayeredGraphPlot3D)))
(def LeaderSize "LeaderSize is an option for Callout that specifies what sizes to use for leader lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeaderSize)))
(def LeafCount "LeafCount[expr] gives the total number of indivisible subexpressions in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeafCount)))
(def LeapVariant "LeapVariant[n] represents a repeated calendar element caused by a leap period." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeapVariant)))
(def LeapYearQ "LeapYearQ[date] returns True if the year corresponding to date is a leap year." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeapYearQ)))
(def LearnDistribution "LearnDistribution[{example1, example2, …}] generates a LearnedDistribution[…] that attempts to represent an underlying distribution for the examples given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LearnDistribution)))
(def LearnedDistribution "LearnedDistribution[…] represents a distribution generated by LearnDistribution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LearnedDistribution)))
(def LearningRate "LearningRate is an option for NetTrain that specifies the rate at which to adjust neural net weights in order to minimize the training loss." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LearningRate)))
(def LearningRateMultipliers "LearningRateMultipliers is an option for net layers and for NetTrain, NetChain, NetGraph that specifies learning rate multipliers to apply during training." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LearningRateMultipliers)))
(def LeastSquares "LeastSquares[m, b] finds an x that solves the linear least-squares problem for the matrix equation m.x==b.\nLeastSquares[a, b] finds an x that solves the linear least-squares problem for the array equation a.x==b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeastSquares)))
(def LeastSquaresFilterKernel "LeastSquaresFilterKernel[{{ω1, …, ω k-1}, {a1, …, ak}}, n] creates a k-band finite impulse response (FIR) filter kernel of length n designed using a least squares method, given the specified frequencies ωi and amplitudes ai.\nLeastSquaresFilterKernel[{\"type\", spec}, n] uses the full filter specification {\"type\", spec}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeastSquaresFilterKernel)))
(def Left "Left is a symbol that represents the left-hand side for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Left)))
(def LeftArrow "LeftArrow[x, y, …] displays as x←y←…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftArrow)))
(def LeftArrowBar "LeftArrowBar[x, y, …] displays as x⇤y⇤…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftArrowBar)))
(def LeftArrowRightArrow "LeftArrowRightArrow[x, y, …] displays as x⇆y⇆…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftArrowRightArrow)))
(def LeftDownTeeVector "LeftDownTeeVector[x, y, …] displays as x⥡y⥡…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftDownTeeVector)))
(def LeftDownVector "LeftDownVector[x, y, …] displays as x⇃y⇃…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftDownVector)))
(def LeftDownVectorBar "LeftDownVectorBar[x, y, …] displays as x⥙y⥙…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftDownVectorBar)))
(def LeftRightArrow "LeftRightArrow[x, y, …] displays as x↔y↔…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftRightArrow)))
(def LeftRightVector "LeftRightVector[x, y, …] displays as x⥎y⥎…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftRightVector)))
(def LeftTee "LeftTee[x, y] displays as x⊣y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTee)))
(def LeftTeeArrow "LeftTeeArrow[x, y, …] displays as x↤y↤…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTeeArrow)))
(def LeftTeeVector "LeftTeeVector[x, y, …] displays as x⥚y⥚…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTeeVector)))
(def LeftTriangle "LeftTriangle[x, y, …] displays as x⊲y⊲…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTriangle)))
(def LeftTriangleBar "LeftTriangleBar[x, y, …] displays as x⧏y⧏…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTriangleBar)))
(def LeftTriangleEqual "LeftTriangleEqual[x, y, …] displays as x⊴y⊴…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftTriangleEqual)))
(def LeftUpDownVector "LeftUpDownVector[x, y, …] displays as x⥑y⥑…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftUpDownVector)))
(def LeftUpTeeVector "LeftUpTeeVector[x, y, …] displays as x⥠y⥠…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftUpTeeVector)))
(def LeftUpVector "LeftUpVector[x, y, …] displays as x↿y↿…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftUpVector)))
(def LeftUpVectorBar "LeftUpVectorBar[x, y, …] displays as x⥘y⥘…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftUpVectorBar)))
(def LeftVector "LeftVector[x, y, …] displays as x↼y↼…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftVector)))
(def LeftVectorBar "LeftVectorBar[x, y, …] displays as x⥒y⥒…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeftVectorBar)))
(def LegendAppearance "LegendAppearance is an option for charting functions that specifies the appearance of any legends that are generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendAppearance)))
(def LegendFunction "LegendFunction is an option for legends that specifies an overall function to apply to the generated legend." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendFunction)))
(def LegendLabel "LegendLabel is an option for legends that specifies an overall label for a legend." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendLabel)))
(def LegendLayout "LegendLayout is an option for legends that specifies how to format the legend content." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendLayout)))
(def LegendMargins "LegendMargins is an option for legends that specifies the margins to leave around the legend." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendMargins)))
(def LegendMarkerSize "LegendMarkerSize is an option for legends such as PointLegend that specifies the size of marker regions for each element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendMarkerSize)))
(def LegendMarkers "LegendMarkers is an option for legends such as PointLegend that specifies markers for each element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendMarkers)))
(def Legended "Legended[expr, leg] displays expr with legend leg. \nLegended[expr, lbl] indicates in plotting and charting functions that a legend entry for expr should be created, with label lbl." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Legended)))
(def LegendreP "LegendreP[n, x] gives the Legendre polynomial Pn (x). \nLegendreP[n, m, x] gives the associated Legendre polynomial P_n^m(x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendreP)))
(def LegendreQ "LegendreQ[n, z] gives the Legendre function of the second kind Qn (z). \nLegendreQ[n, m, z] gives the associated Legendre function of the second kind Q_n^m(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LegendreQ)))
(def Length "Length[expr] gives the number of elements in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Length)))
(def LengthWhile "LengthWhile[list, crit] gives the number of contiguous elements ei starting at the beginning of list for which crit[ei] is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LengthWhile)))
(def LerchPhi "LerchPhi[z, s, a] gives the Lerch transcendent Φ (z, s, a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LerchPhi)))
(def Less "x<y yields True if x is determined to be less than y. \nx1<x2<x3 yields True if the xi form a strictly increasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Less)))
(def LessEqual "x<=y or x≤y yields True if x is determined to be less than or equal to y.\nx1≤x2≤x3 yields True if the xi form a nondecreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessEqual)))
(def LessEqualGreater "LessEqualGreater[x, y, …] displays as x⋚y⋚…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessEqualGreater)))
(def LessEqualThan "LessEqualThan[y] is an operator form that yields x≤y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessEqualThan)))
(def LessFullEqual "LessFullEqual[x, y, …] displays as x≦y≦…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessFullEqual)))
(def LessGreater "LessGreater[x, y, …] displays as x≶y≶…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessGreater)))
(def LessLess "LessLess[x, y, …] displays as x≪y≪…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessLess)))
(def LessSlantEqual "LessSlantEqual[x, y, …] displays as x⩽y⩽…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessSlantEqual)))
(def LessThan "LessThan[y] is an operator form that yields x<y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessThan)))
(def LessTilde "LessTilde[x, y, …] displays as x≲y≲…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LessTilde)))
(def LetterCharacter "LetterCharacter represents a letter character in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LetterCharacter)))
(def LetterCounts "LetterCounts[\"string\"] gives an association whose keys are the distinct letters in string, and whose values give the number of times those letters appear in string.\nLetterCounts[\"string\", n] gives counts of the distinct n-grams consisting of runs of n letters in string.\nLetterCounts[\"string\", n, {c1, c2, …}] allows the characters ci to appear in n-grams, in addition to ordinary letters.\nLetterCounts[{string1, string2, …}, …] gives the counts for each of the stringi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LetterCounts)))
(def LetterNumber "LetterNumber[\"c\"] gives the position of the character c in the English alphabet.\nLetterNumber[\"c\", alpha] gives the position of c in the alphabet specified by alpha.\nLetterNumber[\"string\", …] gives a list of the positions of characters in string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LetterNumber)))
(def LetterQ "LetterQ[string] yields True if all the characters in the string are letters, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LetterQ)))
(def Level "Level[expr, levelspec] gives a list of all subexpressions of expr on levels specified by levelspec. \nLevel[expr, levelspec, f] applies f to the sequence of subexpressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Level)))
(def LeveneTest "LeveneTest[data] tests whether the variance of data is 1. \nLeveneTest[{data1, data2, …}] tests whether the variances of data1, data2, … are equal.\nLeveneTest[dspec, σ_0^2] tests a dispersion measure against σ_0^2.\nLeveneTest[dspec, σ_0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeveneTest)))
(def LeviCivitaTensor "LeviCivitaTensor[d] gives the d-dimensional Levi-Civita totally antisymmetric tensor." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LeviCivitaTensor)))
(def LevyDistribution "LevyDistribution[μ, σ] represents a Lévy distribution with location parameter μ and dispersion parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LevyDistribution)))
(def LexicographicOrder "LexicographicOrder[{a1, a2, …}, {b1, b2, …}] gives Order[ai, bi] for the first non-coinciding pair ai, bi of elements, and 0 if the lists are identical.\nLexicographicOrder[{a1, a2, …}, {b1, b2, …}, p] uses the ordering function p to compare ai with bi.\nLexicographicOrder[p] represents an operator form that compares lists when applied to {a1, a2, …}, {b1, b2, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LexicographicOrder)))
(def LexicographicSort "LexicographicSort[{e1, e2, …}] sorts the list of expressions ei in lexicographic order.\nLexicographicSort[{e1, e2, …}, p] compares elements of the ei expressions using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LexicographicSort)))
(def LibraryDataType "LibraryDataType[datatype] specifies the data type for a LibraryFunction argument or result to be datatype.\nLibraryDataType[datatype, etype] specifies an element type etype for data structures.\nLibraryDataType[datatype, etype, d] specifies an array depth d for array data types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryDataType)))
(def LibraryFunction "LibraryFunction[args] represents a function that has been loaded from a Wolfram Library." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunction)))
(def LibraryFunctionDeclaration "LibraryFunctionDeclaration[\"extName\", lib, type] represents a function declaration that exposes the library function extName with the type type from the library lib, for use in compiled code.\nLibraryFunctionDeclaration[name->\"extName\", lib, type] aliases the function with name in compiled code.\nLibraryFunctionDeclaration[nameSpec, type] assumes that the library will be loaded by the time the function is compiled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunctionDeclaration)))
(def LibraryFunctionError "LibraryFunctionError[name, code] represents an error returned from a LibraryFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunctionError)))
(def LibraryFunctionInformation "LibraryFunctionInformation[fun] returns information about a LibraryFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunctionInformation)))
(def LibraryFunctionLoad "LibraryFunctionLoad[lib, fun, argtype, rettype] loads Wolfram Library lib and makes the library function fun available in the Wolfram Language." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunctionLoad)))
(def LibraryFunctionUnload "LibraryFunctionUnload[fun] unloads a LibraryFunction so that it cannot be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryFunctionUnload)))
(def LibraryLoad "LibraryLoad[lib] loads the dynamic library lib into the Wolfram System runtime." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryLoad)))
(def LibraryUnload "LibraryUnload[lib] unloads all functions that have been loaded from a Wolfram Library, then it unloads the library." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LibraryUnload)))
(def LicenseEntitlementObject "LicenseEntitlementObject[…] represents an on-demand license entitlement.\nLicenseEntitlementObject[id] gives the entitlement object representing the entitlement specified by id." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LicenseEntitlementObject)))
(def LicenseEntitlements "LicenseEntitlements[] gives a list of on-demand license entitlements owned by you." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LicenseEntitlements)))
(def LicensingSettings "LicensingSettings is an option for RemoteBatchSubmit and related functions to configure licensing for remote kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LicensingSettings)))
(def LiftingFilterData "LiftingFilterData[…] represents lifting-filter data used to compute forward and inverse lifting wavelet transforms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LiftingFilterData)))
(def LiftingWaveletTransform "LiftingWaveletTransform[data] gives the lifting wavelet transform (LWT) of an array of data.\nLiftingWaveletTransform[data, wave] gives the lifting wavelet transform using the wavelet wave.\nLiftingWaveletTransform[data, wave, r] gives the lifting wavelet transform using r levels of refinement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LiftingWaveletTransform)))
(def LightBlue "LightBlue represents a light blue color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightBlue)))
(def LightBrown "LightBrown represents a light brown color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightBrown)))
(def LightCyan "LightCyan represents a light cyan color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightCyan)))
(def LightDark "LightDark is an option for notebooks that specifies whether to display notebook contents in light or dark mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightDark)))
(def LightDarkSwitched "LightDarkSwitched[lightcolor, darkcolor] returns lightcolor if evaluated in a light-themed notebook; otherwise, it returns darkcolor.\nLightDarkSwitched[lightcolor, Automatic] generates an automatic dark color alternative for lightcolor.\nLightDarkSwitched[Automatic, darkcolor] generates an automatic light color alternative for darkcolor.\nLightDarkSwitched[lightcolor] is equivalent to LightDarkSwitched[lightcolor, Automatic]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightDarkSwitched)))
(def LightGray "LightGray represents a light gray color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightGray)))
(def LightGreen "LightGreen represents a light green color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightGreen)))
(def LightMagenta "LightMagenta represents a light magenta color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightMagenta)))
(def LightOrange "LightOrange represents a light orange color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightOrange)))
(def LightPink "LightPink represents a light pink color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightPink)))
(def LightPurple "LightPurple represents a light purple color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightPurple)))
(def LightRed "LightRed represents a light red color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightRed)))
(def LightYellow "LightYellow represents a light yellow color in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightYellow)))
(def Lighter "Lighter[color] represents a lighter version of the specified color. \nLighter[color, f] represents a version of the specified color lightened by a fraction f. \nLighter[image, …] gives a lighter version of an image.\nLighter[video, …] gives a version of a video with lighter frames." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Lighter)))
(def Lighting "Lighting is an option for Graphics3D and related functions that specifies what simulated lighting to use in coloring 3D surfaces." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Lighting)))
(def LightingAngle "LightingAngle is an option for ReliefPlot and related functions that specifies the angle from which simulated illumination is taken to come." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LightingAngle)))
(def Likelihood "Likelihood[dist, {x1, x2, …}] gives the likelihood function for observations x1, x2, … from the distribution dist.\nLikelihood[proc, {{t1, x1}, {t2, x2}, …}] gives the likelihood function for the observations xi at time ti from the process proc.\nLikelihood[proc, {path1, path2, …}] gives the likelihood function for observations from path1, path2, … from the process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Likelihood)))
(def Limit "Limit[f, xx^*] gives the limit xx^*f(x). \nLimit[f, {x1x_1^*, …, xnx_n^*}] gives the nested limit _x1x_1^*⋯ _xnx_n^*f(x1, …, xn). \nLimit[f, {x1, …, xn}{x_1^*, …, x_n^*}] gives the multivariate limit _{x1, …, xn}{x_1^*, …, x_n^*}f(x1, …, xn)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Limit)))
(def LimitsPositioning "LimitsPositioning is an option for UnderoverscriptBox and related boxes that specifies whether to change the positioning of underscripts and overscripts in the way conventional for limits." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LimitsPositioning)))
(def LindleyDistribution "LindleyDistribution[δ] represents a Lindley distribution with shape parameter δ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LindleyDistribution)))
(def Line "Line[{p1, p2, …}] represents the line segments joining a sequence for points pi.\nLine[{{p11, p12, …}, {p21, …}, …}] represents a collection of lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Line)))
(def LineBreakChart "LineBreakChart[{{date1, p1}, {date2, p2}, …}] makes a line break chart with prices pi at date datei.\nLineBreakChart[{\"name\", daterange}] makes a line break chart of closing prices for the financial entity \"name\" over the date range daterange.\nLineBreakChart[{…}, n] makes a line break chart where n bars in a row cause a reversal." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineBreakChart)))
(def LineGraph "LineGraph[g] gives the line graph of the graph g.\nLineGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineGraph)))
(def LineIndent "LineIndent is an option for Style and Cell that specifies how many ems of indentation to add at the beginnings of lines for each level of nesting in an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineIndent)))
(def LineIndentMaxFraction "LineIndentMaxFraction is an option for Cell, StyleBox, and Style that specifies the maximum fraction of the total page width to indent at the beginnings of lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineIndentMaxFraction)))
(def LineIntegralConvolutionPlot "LineIntegralConvolutionPlot[{{vx, vy}, image}, {x, xmin, xmax}, {y, ymin, ymax}] generates a line integral convolution plot of image convolved with the vector field {vx, vy} as a function of x and y.\nLineIntegralConvolutionPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] generates a line integral convolution plot of white noise with the vector field {vx, vy}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineIntegralConvolutionPlot)))
(def LineIntegralConvolutionScale "LineIntegralConvolutionScale is an option to LineIntegralConvolutionPlot and related functions that determines the scale of the line integral convolution to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineIntegralConvolutionScale)))
(def LineIntegrate "LineIntegrate[f, {x, y, …}∈curve] computes the scalar line integral of the function f[x, y, …] over the curve.\nLineIntegrate[{p, q, …}, {x, y, …}∈curve] computes the vector line integral of the vector function {p[x, y, …], q[x, y, …], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineIntegrate)))
(def LineLegend "LineLegend[{col1, …}, {lbl1, …}] generates a legend that associates color coli with label lbli.\nLineLegend[{col1, …}, Automatic] generates a legend with placeholder labels for the colors coli.\nLineLegend[{lbl1, …}] represents a legend with inherited colors within visualization functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineLegend)))
(def LineSpacing "LineSpacing is an option for Style and Cell that specifies the spacing between successive lines of text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LineSpacing)))
(def LinearFractionalOptimization "LinearFractionalOptimization[f, cons, vars] finds values of variables vars that minimize the linear fractional objective f subject to linear constraints cons.\nLinearFractionalOptimization[{α, β, γ, δ}, {a, b}] finds a vector x that minimizes the linear fractional function (α.x+β)/(γ.x+δ) subject to the linear inequality constraints a.x+b⪰0. \nLinearFractionalOptimization[{α, β, γ, δ}, {a, b}, {aeq, beq}] includes the linear equality constraints aeq.x+beq0.\nLinearFractionalOptimization[{α, β, γ, δ}, …, {dom1, dom2, …}] takes xi to be in the domain domi, where domi is Integers or Reals. \nLinearFractionalOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearFractionalOptimization)))
(def LinearFractionalTransform "LinearFractionalTransform[m] gives a TransformationFunction that represents a linear fractional transformation defined by the homogeneous matrix m. \nLinearFractionalTransform[{a, b, c, d}] represents a linear fractional transformation that maps r to (a.r+b)/(c.r+d)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearFractionalTransform)))
(def LinearGradientFilling "LinearGradientFilling[{col1, col2, …, coln}] is a two-dimensional graphics directive specifying that faces of polygons and other filled graphics objects are to be drawn using a progressive transition between colors coli along a straight horizontal line.\nLinearGradientFilling[{pos1, pos2, …, posn}{col1, col2, …, coln}] uses the colors coli at the scaled positions posi.\nLinearGradientFilling[{pos1, pos2, …, posn}{col1, col2, …, coln}, dir] draws along the straight line with a direction dir.\nLinearGradientFilling[{pos1, …, posn}{col1, …, coln}, dir, padding] uses the specified padding when drawing beyond the boundary positions pos1 and posn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearGradientFilling)))
(def LinearGradientImage "LinearGradientImage[gcol] returns an image with values linearly changing from left to right based on gradient color gcol.\nLinearGradientImage[{pos1, pos2}gcol] returns an image where the gradient starts at pos1 and ends at pos2.\nLinearGradientImage[…, size] returns a linear gradient image of the specified size.\nLinearGradientImage[…, size, \"type\"] gives an image converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearGradientImage)))
(def LinearLayer "LinearLayer[n] represents a trainable, fully connected net layer that computes w.x+b with output vector of size n. \nLinearLayer[{n1, n2, …}] represents a layer that outputs an array of dimensions n1×n2×….\nLinearLayer[] leaves the dimensions of the output array to be inferred from context.\nLinearLayer[n, opts] includes options for initial weights and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearLayer)))
(def LinearModelFit "LinearModelFit[{{x1, y1}, {x2, y2}, …}, {f1, f2, …}, x] constructs a linear model of the form β0+β1 f1+β2 f2+… that fits the yi for successive xi values.\nLinearModelFit[data, {f1, f2, …}, {x1, x2, …}] constructs a linear model where the fi depend on the variables xk.\nLinearModelFit[{m, v}] constructs a linear model from the design matrix m and response vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearModelFit)))
(def LinearOffsetFunction "LinearOffsetFunction is an option for linear and generalized linear model fitting functions that specifies a component for the model that is to be assumed known." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearOffsetFunction)))
(def LinearOptimization "LinearOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective f subject to linear constraints cons.\nLinearOptimization[c, {a, b}]  finds a real vector x that minimizes the linear objective c.x subject to the linear inequality constraints a.x+b⪰0.\nLinearOptimization[c, {a, b}, {aeq, beq}] includes the linear equality constraints aeq.x+beq0.\nLinearOptimization[c, …, {dom1, dom2, …}] takes xi to be in the domain domi, where domi is Integers or Reals.\nLinearOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearOptimization)))
(def LinearRecurrence "LinearRecurrence[ker, init, n] gives the sequence of length n obtained by iterating the linear recurrence with kernel ker starting with initial values init.\nLinearRecurrence[ker, init, {n}] gives the n ^th term.\nLinearRecurrence[ker, init, {nmin, nmax}] yields terms nmin through nmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearRecurrence)))
(def LinearSolve "LinearSolve[m, b] finds an x that solves the matrix equation m.x==b. \nLinearSolve[m] generates a LinearSolveFunction[…] that can be applied repeatedly to different b. \nLinearSolve[a, b] finds an x that solves the array equation a.x==b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearSolve)))
(def LinearSolveFunction "LinearSolveFunction[dimensions, data] represents a function for providing solutions to a matrix equation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearSolveFunction)))
(def LinearizingTransformationData "LinearizingTransformationData[…] represents data of an AffineStateSpaceModel linearized by functions such as FeedbackLinearize and StateTransformationLinearize using transformation of variables." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinearizingTransformationData)))
(def LinkActivate "LinkActivate[lnk] activates a WSTP connection, waiting for the program at the other end to respond." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkActivate)))
(def LinkClose "LinkClose[link] closes an open WSTP connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkClose)))
(def LinkConnect "LinkConnect[\"name\"] connects to a WSTP link created by another program." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkConnect)))
(def LinkCreate "LinkCreate[\"name\"] creates a WSTP link with the specified name for another program to connect to. \nLinkCreate[] creates a WSTP link and picks an unused name for the link." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkCreate)))
(def LinkFunction "LinkFunction is an option for GeneralizedLinearModelFit that specifies the link function for the generalized linear model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkFunction)))
(def LinkInterrupt "LinkInterrupt[link] sends an interrupt to the program at the other end of the specified WSTP connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkInterrupt)))
(def LinkLaunch "LinkLaunch[\"prog\"] starts the external program prog and opens a WSTP connection to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkLaunch)))
(def LinkObject "LinkObject[\"name\", n1, n2] is an object that represents an active WSTP connection for functions such as LinkRead and LinkWrite." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkObject)))
(def LinkPatterns "LinkPatterns[link] gives a list of the patterns for which definitions were set up when the external program associated with the specified WSTP connection was installed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkPatterns)))
(def LinkProtocol "LinkProtocol is an option to LinkLaunch, Install, and related functions that specifies the underlying data transport protocol to use for a new WSTP link." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkProtocol)))
(def LinkRankCentrality "LinkRankCentrality[g, α] gives the link-rank centralities for edges in the graph g and weight α.\nLinkRankCentrality[g, α, β] gives the link-rank centralities, using weight α and initial vertex page-rank centralities β.\nLinkRankCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkRankCentrality)))
(def LinkRead "LinkRead[link] reads one expression from the specified WSTP connection. \nLinkRead[link, h] wraps h around the expression read before evaluating it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkRead)))
(def LinkReadyQ "LinkReadyQ[link] tests whether there is an expression ready to read from the specified WSTP connection. \nLinkReadyQ[link, t] waits for up to t seconds to see if an expression becomes ready to read.\nLinkReadyQ[{link1, link2, …}, t] tests all the linki in parallel, returning as soon as any of them are ready to read from." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkReadyQ)))
(def LinkWrite "LinkWrite[link, expr] writes expr to the specified WSTP connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LinkWrite)))
(def Links "Links[] gives a list of all WSTP connections that are currently open. \nLinks[patt] lists only links whose names match the specified string pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Links)))
(def LiouvilleLambda "LiouvilleLambda[n] gives the Liouville function λ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LiouvilleLambda)))
(def List "{e1, e2, …} is a list of elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote List)))
(def ListAnimate "ListAnimate[{expr1, expr2, …}] generates an animation whose frames are the successive expri. \nListAnimate[list, fps] displays fps frames per second." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListAnimate)))
(def ListContourPlot "ListContourPlot[{{f11, …, f 1n}, …, {f m1, …, fmn}}] generates a contour plot from an array of values fij.\nListContourPlot[{{x1, y1, f1}, …, {xk, yk, fk}}] generates a contour plot from values fi specified at points {xi, yi}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListContourPlot)))
(def ListContourPlot3D "ListContourPlot3D[farr] generates a contour plot from an array farr with values farr[[i, j, k]] at points {k, j, i}.\nListContourPlot3D[{{x1, y1, z1, f1}, {x2, y2, z2, f2}, …}] generates a contour plot from values fi at point {xi, yi, zi}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListContourPlot3D)))
(def ListConvolve "ListConvolve[ker, list] forms the convolution of the kernel ker with list. \nListConvolve[ker, list, k] forms the cyclic convolution in which the k ^th element of ker is aligned with each element in list. \nListConvolve[ker, list, {kL, kR}] forms the cyclic convolution whose first element contains list[[1]]ker[[kL]] and whose last element contains list[[-1]]ker[[kR]]. \nListConvolve[ker, list, klist, p] forms the convolution in which list is padded at each end with repetitions of the element p. \nListConvolve[ker, list, klist, {p1, p2, …}] forms the convolution in which list is padded at each end with cyclic repetitions of the pi. \nListConvolve[ker, list, klist, padding, g, h] forms a generalized convolution in which g is used in place of Times and h in place of Plus. \nListConvolve[ker, list, klist, padding, g, h, lev] forms a convolution using elements at level lev in ker and list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListConvolve)))
(def ListCorrelate "ListCorrelate[ker, list] forms the correlation of the kernel ker with list. \nListCorrelate[ker, list, k] forms the cyclic correlation in which the k ^th element of ker is aligned with each element in list. \nListCorrelate[ker, list, {kL, kR}] forms the cyclic correlation whose first element contains list[[1]]ker[[kL]] and whose last element contains list[[-1]]ker[[kR]]. \nListCorrelate[ker, list, klist, p] forms the correlation in which list is padded at each end with repetitions of the element p. \nListCorrelate[ker, list, klist, {p1, p2, …}] forms the correlation in which list is padded at each end with cyclic repetitions of the pi. \nListCorrelate[ker, list, klist, padding, g, h] forms a generalized correlation in which g is used in place of Times and h in place of Plus. \nListCorrelate[ker, list, klist, padding, g, h, lev] forms a correlation using elements at level lev in ker and list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListCorrelate)))
(def ListCurvePathPlot "ListCurvePathPlot[{{x1, y1}, {x2, y2}, …}] plots a curve that corresponds to a smooth path through the specified points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListCurvePathPlot)))
(def ListDeconvolve "ListDeconvolve[ker, list] gives a deconvolution of list using kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListDeconvolve)))
(def ListDensityPlot "ListDensityPlot[{{f11, …, f 1n}, …, {f m1, …, fmn}}] generates a smooth density plot from an array of values fij.\nListDensityPlot[{{x1, y1, f1}, …, {xk, yk, fk}}] generates a density plot with values fi defined at specified points {xi, yi}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListDensityPlot)))
(def ListDensityPlot3D "ListDensityPlot3D[farr] generates a smooth density plot from an array of values farr. \nListDensityPlot3D[{{x1, y1, z1, f1}, …, {xn, yn, zn, fn}}] generates a density plot with values fi at the specified points {xi, yi, zi}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListDensityPlot3D)))
(def ListFormat "ListFormat is an option to TextString and related functions that determines how lists are formatted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListFormat)))
(def ListFourierSequenceTransform "ListFourierSequenceTransform[list, ω] gives the discrete-time Fourier transform (DTFT) of a list as a function of the parameter ω.\nListFourierSequenceTransform[list, ω, k] places the first element of list at integer time k on the infinite time axis.\nListFourierSequenceTransform[list, {ω1, ω2, …}, {k1, k2, …}] gives the multidimensional discrete-time Fourier transform" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListFourierSequenceTransform)))
(def ListInterpolation "ListInterpolation[array] constructs an InterpolatingFunction object that represents an approximate function that interpolates the array of values given. \nListInterpolation[array, {{xmin, xmax}, {ymin, ymax}, …}] specifies the domain of the grid from which the values in array are assumed to come." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListInterpolation)))
(def ListLineIntegralConvolutionPlot "ListLineIntegralConvolutionPlot[{array, image}] generates a line integral convolution plot of image convolved with the vector field defined by an array of vector field values.\nListLineIntegralConvolutionPlot[array] generates a line integral convolution plot of white noise convolved with the vector field defined by array.\nListLineIntegralConvolutionPlot[{{{{x1, y1}, {vx1, vy1}}, …}, image}] generates a line integral convolution plot of image convolved with the vector field defined by vectors {vxi, vyi} at specified points {xi, yi}.\nListLineIntegralConvolutionPlot[{{{x1, y1}, {vx1, vy1}}, …}] generates a line integral convolution plot of white noise convolved with the vector field defined by {vxi, vyi}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLineIntegralConvolutionPlot)))
(def ListLinePlot "ListLinePlot[{y1, …, yn}] plots a line through the points {1, y1}, …, {n, yn}.\nListLinePlot[{{x1, y1}, …, {xn, yn}}] plots a line through the points {x1, y1}, …, {xn, yn}.\nListLinePlot[{data1, data2, …}] plots lines from all the datai. \nListLinePlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLinePlot)))
(def ListLinePlot3D "ListLinePlot3D[{{x1, y1, z1}, {x2, y2, z2}, …, {xn, yn, zn}}] plots a curve through the 3D points {xi, yi, zi}.\nListLinePlot3D[{{z11, z12, …, z 1n}, …, {z m1, z m2, …, zmn}}] plots each row {z i1, z i2, …, z in} as a curve in the x direction, with successive curves stacked in the y direction. \nListLinePlot3D[{data1, data2, …}] plots curves through multiple sets of {x, y, z} points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLinePlot3D)))
(def ListLogLinearPlot "ListLogLinearPlot[{y1, y2, …}] makes a log-linear plot of the yi, assumed to correspond to x coordinates 1, 2, ….\nListLogLinearPlot[{{x1, y1}, {x2, y2}, …}] makes a log-linear plot of the specified list of x and y values.\nListLogLinearPlot[{list1, list2, …}] plots several lists of values.\nListLogLinearPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLogLinearPlot)))
(def ListLogLogPlot "ListLogLogPlot[{y1, y2, …}] makes a log-log plot of the yi, assumed to correspond to x coordinates 1, 2, ….\nListLogLogPlot[{{x1, y1}, {x2, y2}, …}] makes a log-log plot of the specified list of x and y values.\nListLogLogPlot[{data1, data2, …}] plots data from all the datai.\nListLogLogPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLogLogPlot)))
(def ListLogPlot "ListLogPlot[{y1, y2, …}] makes a log plot of the yi, assumed to correspond to x coordinates 1, 2, ….\nListLogPlot[{{x1, y1}, {x2, y2}, …}] makes a log plot of the specified list of x and y values.\nListLogPlot[{data1, data2, …}] plots data from all the datai.\nListLogPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListLogPlot)))
(def ListPicker "ListPicker[list, {val1, val2, …}] represents a list pane with setting list that can contain possible values vali.\nListPicker[Dynamic[list], {val1, …}] takes the setting to be the dynamically updated current value of list, with members added or removed each time an item is selected or deselected.\nListPicker[list, {val1lbl1, val2lbl2, …}] represents a list pane in which the possible value vali is indicated by lbli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPicker)))
(def ListPickerBox "ListPickerBox[list, {val1lbl1, val2lbl2, …}] is a low-level box structure that represents a list pane control." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPickerBox)))
(def ListPickerBoxOptions "ListPickerBoxOptions is an option that specifies settings for ListPickerBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPickerBoxOptions)))
(def ListPlay "ListPlay[{a1, a2, …}] creates an object that plays as a sound whose amplitude is given by the sequence of levels ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPlay)))
(def ListPlot "ListPlot[{y1, …, yn}] plots regularly spaced points {i, yi}.\nListPlot[{{x1, y1}, …, {xn, yn}}] generates a scatter plot with points {xi, yi}.\nListPlot[{data1, data2, …}] plots points from all the datai.\nListPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPlot)))
(def ListPlot3D "ListPlot3D[{{f11, …, f 1n}, …, {f m1, …, fmn}}] generates a surface with height fij at {x, y} position {j, i}. \nListPlot3D[{{x1, y1, f1}, …, {xk, yk, fk}}] generates a surface with height fi at {x, y} position {xi, yi}. \nListPlot3D[{data1, data2, …}] plots the surfaces corresponding to each of the datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPlot3D)))
(def ListPointPlot3D "ListPointPlot3D[{{x1, y1, z1}, {x2, y2, z2}, …}] generates a 3D scatter plot of points with coordinates {xi, yi, zi}. \nListPointPlot3D[array] generates a 3D scatter plot of points with a 2D array of height values.\nListPointPlot3D[{data1, data2, …}] plots several collections of points, by default in different colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPointPlot3D)))
(def ListPolarPlot "ListPolarPlot[{r1, r2, …}] plots points equally spaced in angle at radii ri.\nListPolarPlot[{{θ1, r1}, {θ2, r2}, …}] plots points at polar coordinates θi, ri.\nListPolarPlot[{list1, list2, …}] plots several lists of values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListPolarPlot)))
(def ListQ "ListQ[expr] gives True if the head of expr is List, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListQ)))
(def ListSliceContourPlot3D "ListSliceContourPlot3D[farr, surf] generates a contour plot of the three-dimensional farr of values sliced to the surface surf.\nListSliceContourPlot3D[{{x1, y1, z1, f1}, {x2, y2, z2, f2}, …}, surf] generates a slice contour plot for the values fi at points {xi, yi, zi}.\nListSliceContourPlot3D[…, {surf1, surf2, …}] generates slice contour plots over several slices surf1, surf2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListSliceContourPlot3D)))
(def ListSliceDensityPlot3D "ListSliceDensityPlot3D[farr, surf] generates a density plot of the three-dimensional farr of values sliced to the surface surf.\nListSliceDensityPlot3D[{{x1, y1, z1, f1}, {x2, y2, z2, f2}, …}, surf] generates a slice density plot for the values fi at points {xi, yi, zi}.\nListSliceDensityPlot3D[…, {surf1, surf2, …}] generates slice density plots over several slices surf1, surf2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListSliceDensityPlot3D)))
(def ListSliceVectorPlot3D "ListSliceVectorPlot3D[varr, surf] generates a vector plot from a 3D array varr of vector field values over the slice surface surf.\nListSliceVectorPlot3D[…, {surf1, surf2, …}] generates a slice vector plot over several surfaces surf1, surf2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListSliceVectorPlot3D)))
(def ListStepPlot "ListStepPlot[{y1, y2, …}] plots the values y1, y2, … in steps at points 1, 2, ….\nListStepPlot[{{x1, y1}, {x2, y2}, …}] plots the values y1, y2, … in steps at points x1, x2, ….\nListStepPlot[{data1, data2, …}] plots data from all the datai.\nListStepPlot[data, step] plots using steps specified by step.\nListStepPlot[{…, w[datai, …], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListStepPlot)))
(def ListStreamDensityPlot "ListStreamDensityPlot[varr] generates a stream density plot from an array varr of vector and scalar field values {{vxij, vyij}, rij}. \nListStreamDensityPlot[{{{x1, y1}, {{vx1, vy1}, r1}}, …}] generates a stream density plot from vector and scalar field values {{vxi, vyi}, ri} given at specified points {xi, yi}.\nListStreamDensityPlot[{data1, data2, …}] plots data for several vector and scalar fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListStreamDensityPlot)))
(def ListStreamPlot "ListStreamPlot[varr] generates a stream plot from an array varr of vectors.\nListStreamPlot[{{{x1, y1}, {vx1, vy1}}, …}] generates a stream plot from vectors {vxi, vyi} given at points {xi, yi}.\nListStreamPlot[{data1, data2, …}] plots data for several vector fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListStreamPlot)))
(def ListStreamPlot3D "ListStreamPlot3D[varr] plots streamlines for the vector field given as an array of vectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListStreamPlot3D)))
(def ListSurfacePlot3D "ListSurfacePlot3D[{{x1, y1, z1}, {x2, y2, z2}, …}] plots a three-dimensional surface constructed to fit the specified points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListSurfacePlot3D)))
(def ListVectorDensityPlot "ListVectorDensityPlot[varr] generates a vector density plot from an array varr of vector and scalar field values {{vxij, vyij}, rij}. \nListVectorDensityPlot[{{{x1, y1}, {{vx1, vy1}, r1}}, …}] generates a vector density plot from vector and scalar field values {{vxi, vyi}, ri} given at specified points {xi, yi}.\nListVectorDensityPlot[{data1, data2, …}] plots data for several vector and scalar fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListVectorDensityPlot)))
(def ListVectorDisplacementPlot "ListVectorDisplacementPlot[{{{vx11, vy11}, …, {vx 1n, vy 1n}}, …, {{vx m1, vy m1}, …, {vxmn, vymn}}}] generates a displacement plot from an array of vector displacements {vxij, vyij}.\nListVectorDisplacementPlot[{{{x1, y1}, {vx1, vy1}}, …, {{x1, y1}, {vx1, vy1}}}] generates a displacement plot from displacements {vxi, vyi} at point {xi, yi}.\nListVectorDisplacementPlot[{{ {{vx11, vy11}, s11}, …, {{vx 1n, vy 1n}, s 1n}}, …, { {{vxmi, vy m1}, s m1}, …, {{vxmn, vymn}, smn}}}] uses the scalar values sij to color the displaced region.\nListVectorDisplacementPlot[{ {{vx1, vy1}, s1}, …, {{vxn, vyn}, sn}}] uses the scalar values si at point {xi, yi} to color the displaced region.\nListVectorDisplacementPlot[…, reg] plots the displacement over the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListVectorDisplacementPlot)))
(def ListVectorDisplacementPlot3D "ListVectorDisplacementPlot3D[{{{vx11, vy11, vz11}, …, {vx 1n, vy 1n, vz 1n}}, …, {{vx m1, vy m1, vz m1}, …, {vxmn, vymn, vzmn}}}] generates a displacement plot from an array of vector displacements {vxij, vyij, vzij}.\nListVectorDisplacementPlot3D[{{{x1, y1, z1}, {vx1, vy1, vz1}}, …, {{xn, yn, zn}, {vxn, vyn, vzn}}}] generates a displacement plot from displacements {vxi, vyi, vzi} at point {xi, yi, zi}.\nListVectorDisplacementPlot3D[{{{{vx11, vy11, vz11}, s11}, …, {{vx 1n, vy 1n, vz 1n}, s 1n}}, …, {{{vx m1, vy m1, vz m1}, s m1}, …, {{vxmn, vymn, vzmn}, smn}}] uses the scalar values sij to color the displaced region.\nListVectorDisplacementPlot3D[{{{x1, y1, z1}, {{vx1, vy1, vz1}, s1}}, …, {{xn, yn, zn}, {{vxn, vyn, vzn}, sn}}}] uses the scalar values si at point {xi, yi, zi} to color the displaced region.\nListVectorDisplacementPlot3D[…, reg] plots the displacement over the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListVectorDisplacementPlot3D)))
(def ListVectorPlot "ListVectorPlot[varr] generates a vector plot from an array varr of vectors.\nListVectorPlot[{{{x1, y1}, {vx1, vy1}}, …}] generates a vector plot from vectors {vxi, vyi} given at specified points {xi, yi}.\nListVectorPlot[{data1, data2, …}] plots data for several vector fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListVectorPlot)))
(def ListVectorPlot3D "ListVectorPlot3D[varr] generates a 3D vector plot from a 3D array of vector field values.\nListVectorPlot3D[{data1, data2, …}] plots data for several vector fields." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListVectorPlot3D)))
(def ListZTransform "ListZTransform[list, z] gives the Z transform of list as a function of z.\nListZTransform[list, z, k] places the first element of list at integer time k on the infinite time axis.\nListZTransform[list, {z1, z2, …}, {k1, k2, …}] gives the multidimensional Z transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ListZTransform)))
(def Listable "Listable is an attribute that can be assigned to a symbol f to indicate that the function f should automatically be threaded over lists that appear as its arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Listable)))
(def LiteralType "LiteralType[x] represents a literal value x for use as a type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LiteralType)))
(def LoadCompiledComponent "LoadCompiledComponent[comp] loads a compiled component comp.\nLoadCompiledComponent[comp, target] loads a compiled component comp from the target location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LoadCompiledComponent)))
(def LocalAdaptiveBinarize "LocalAdaptiveBinarize[image, r] creates a binary image from image by replacing values above the mean of the range-r neighborhood with 1 and others with 0.\nLocalAdaptiveBinarize[image, r, {α, β, γ}] replaces values above α μ+β σ+γ with 1 and others with 0, where μ and σ are the local mean and standard deviation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalAdaptiveBinarize)))
(def LocalCache "LocalCache[CloudObject[uri]] caches a cloud object in a local object.\nLocalCache[URL[url]] caches the contents of a url in a local object.\nLocalCache[obj, LocalObject[name]] caches the contents of obj in the specified local object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalCache)))
(def LocalClusteringCoefficient "LocalClusteringCoefficient[g] gives the list of local clustering coefficients of all vertices in the graph g.\nLocalClusteringCoefficient[g, v] gives the local clustering coefficient of the vertex v in the graph g.\nLocalClusteringCoefficient[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalClusteringCoefficient)))
(def LocalEvaluate "LocalEvaluate[expr] gives the result of evaluating expr using your current default local Wolfram Language kernel.\nLocalEvaluate[ker, expr] gives the result of evaluating expr using the kernel specified by ker.\nLocalEvaluate[{ker1, ker2, …}, expr] gives a list of the results of evaluating expr using each of the kernels keri.\nLocalEvaluate[ker, expr, h] wraps the head h around the result produced before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalEvaluate)))
(def LocalObject "LocalObject[] represents a new anonymous local object.\nLocalObject[\"file:///…\"] represents a local object with a given file path.\nLocalObject[\"relpath\"] represents a local object with the given relative path.\nLocalObject[\"relpath\", \"lbase\"] represents a local object relative to the base lbase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalObject)))
(def LocalObjects "LocalObjects[] gives a list of local objects in your current local base directory.\nLocalObjects[dir] gives a list of local objects in the local directory dir." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalObjects)))
(def LocalResponseNormalizationLayer "LocalResponseNormalizationLayer[] represents a net layer that normalizes its input by averaging across neighboring input channels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalResponseNormalizationLayer)))
(def LocalSubmit "LocalSubmit[expr] submits a task to evaluate expr in a separate kernel.\nLocalSubmit[ScheduledTask[expr, spec]] submits a task to evaluate expr in a separate kernel on the schedule defined by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalSubmit)))
(def LocalSymbol "LocalSymbol[\"name\"] represents a symbol whose value is persistently stored in the local file system.\nLocalSymbol[obj] represents a persistent symbol corresponding to the local object obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalSymbol)))
(def LocalTime "LocalTime[] gives a DateObject corresponding to the current local time at the current geo location.\nLocalTime[loc] gives the current local time at the geo location specified by loc.\nLocalTime[loc, time] gives the local time corresponding to the date object time at the geo location loc.\nLocalTime[loc, time, func] uses func to determine what to return for extended geographic regions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalTime)))
(def LocalTimeZone "LocalTimeZone[] gives the current time zone for the current geo location.\nLocalTimeZone[loc] gives the current time zone for the geo location specified by loc.\nLocalTimeZone[loc, date] gives the time zone for the geo location loc on the specified date.\nLocalTimeZone[loc, date, \"prop\"] gives the specified property of the time zone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalTimeZone)))
(def LocalizeVariables "LocalizeVariables is an option to Manipulate that determines whether the values of variables associated with controls should be localized." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocalizeVariables)))
(def LocationEquivalenceTest "LocationEquivalenceTest[{data1, data2, …}] tests whether the means or medians of the datai are equal. \nLocationEquivalenceTest[{data1, …}, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocationEquivalenceTest)))
(def LocationTest "LocationTest[data] tests whether the mean or median of the data is zero. \nLocationTest[{data1, data2}] tests whether the means or medians of data1 and data2 are equal.\nLocationTest[dspec, μ0] tests a location measure against μ0.\nLocationTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocationTest)))
(def Locator "Locator[{x, y}] represents a locator object at position {x, y} in a graphic. \nLocator[Dynamic[pos]] takes the position to be the dynamically updated current value of pos, with this value being reset if the locator object is moved. \nLocator[{x, y}, obj] displays obj as the locator object. \nLocator[{x, y}, None] displays nothing visible as the locator object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Locator)))
(def LocatorAutoCreate "LocatorAutoCreate is an option for LocatorPane, Manipulate, and related functions that specifies whether new locators should be created when clicking away from existing locators." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocatorAutoCreate)))
(def LocatorPane "LocatorPane[{x, y}, back] represents a pane with a locator at position {x, y} and background back.\nLocatorPane[Dynamic[pt], back] takes the locator position to be the dynamically updated current value of pt, with the value of pt being reset if the locator is moved.\nLocatorPane[{pt1, pt2, …}, back] sets up multiple locators at positions pt1, pt2, …. \nLocatorPane[Dynamic[{pt1, pt2, …}], back] takes the locator positions to be dynamically updated current values of the pti.\nLocatorPane[pts, back, {{xmin, ymin}, {xmax, ymax}}] specifies the range of coordinates for the locator.\nLocatorPane[pts, back, {{xmin, ymin}, {xmax, ymax}, {dx, dy}}] uses jumps dx, dy." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocatorPane)))
(def LocatorRegion "LocatorRegion is an option for Locator that specifies where the locator object should by default be allowed to go when it is dragged." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LocatorRegion)))
(def Locked "Locked is an attribute that, once assigned, prevents modification of any attributes of a symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Locked)))
(def Log "Log[z] gives the natural logarithm of z (logarithm to base e). \nLog[b, z] gives the logarithm to base b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Log)))
(def Log10 "Log10[x] gives the base-10 logarithm of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Log10)))
(def Log2 "Log2[x] gives the base-2 logarithm of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Log2)))
(def LogBarnesG "LogBarnesG[z] gives the logarithm of the Barnes G-function logG (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogBarnesG)))
(def LogGamma "LogGamma[z] gives the logarithm of the gamma function log Γ (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogGamma)))
(def LogGammaDistribution "LogGammaDistribution[α, β, μ] represents a log-gamma distribution with shape parameters α and β and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogGammaDistribution)))
(def LogIntegral "LogIntegral[z] is the logarithmic integral function li (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogIntegral)))
(def LogLikelihood "LogLikelihood[dist, {x1, x2, …}] gives the log‐likelihood function for observations x1, x2, … from the distribution dist.\nLogLikelihood[proc, {{t1, x1}, {t2, x2}, …}] gives the log-likelihood function for the observations xi at time ti from the process proc.\nLogLikelihood[proc, {path1, path2, …}] gives the log-likelihood function for the observations from path1, path2, … from the process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogLikelihood)))
(def LogLinearPlot "LogLinearPlot[f, {x, xmin, xmax}] generates a log-linear plot of f as a function of x from xmin to xmax. \nLogLinearPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions fi. \nLogLinearPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nLogLinearPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogLinearPlot)))
(def LogLogPlot "LogLogPlot[f, {x, xmin, xmax}] generates a log-log plot of f as a function of x from xmin to xmax. \nLogLogPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions fi. \nLogLogPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nLogLogPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogLogPlot)))
(def LogLogisticDistribution "LogLogisticDistribution[γ, σ] represents a log-logistic distribution with shape parameter γ and scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogLogisticDistribution)))
(def LogMultinormalDistribution "LogMultinormalDistribution[μ, Σ] represents a log-multinormal distribution with parameters μ and Σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogMultinormalDistribution)))
(def LogNormalDistribution "LogNormalDistribution[μ, σ] represents a lognormal distribution derived from a normal distribution with mean μ and standard deviation σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogNormalDistribution)))
(def LogPlot "LogPlot[f, {x, xmin, xmax}] generates a log plot of f as a function of x from xmin to xmax. \nLogPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions fi. \nLogPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nLogPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogPlot)))
(def LogRankTest "LogRankTest[{data1, data2, …}] tests for equal hazard rates among the datai using a log-rank type test. \nLogRankTest[{data1, data2, …}, wspec] performs a weighted log-rank test with weights wspec. \nLogRankTest[{data1, …}, wspec, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogRankTest)))
(def LogSeriesDistribution "LogSeriesDistribution[θ] represents a logarithmic series distribution with parameter θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogSeriesDistribution)))
(def LogicalExpand "LogicalExpand[expr] expands out logical combinations of equations, inequalities, and other functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogicalExpand)))
(def LogisticDistribution "LogisticDistribution[μ, β] represents a logistic distribution with mean μ and scale parameter β.\nLogisticDistribution[] represents a logistic distribution with mean 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogisticDistribution)))
(def LogisticSigmoid "LogisticSigmoid[z] gives the logistic sigmoid function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogisticSigmoid)))
(def LogitModelFit "LogitModelFit[{{x1, y1}, {x2, y2}, …}, {f1, f2, …}, x] constructs a binomial logistic regression model of the form 1/(1+^-(β0+β1 f1 +β2 f2 +…)) that fits the yi for each xi.\nLogitModelFit[data, {f1, …}, {x1, x2, …}] constructs a binomial logistic regression model of the form 1/(1+^-(β0+β1 f1 +β2 f2 +…)) where the fi depend on the variables xk.\nLogitModelFit[{m, v}] constructs a binomial logistic regression model from the design matrix m and response vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LogitModelFit)))
(def LongLeftArrow "LongLeftArrow[x, y, …] displays as x⟵y⟵…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongLeftArrow)))
(def LongLeftRightArrow "LongLeftRightArrow[x, y, …] displays as x⟷y⟷…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongLeftRightArrow)))
(def LongRightArrow "LongRightArrow[x, y, …] displays as x⟶y⟶…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongRightArrow)))
(def LongShortTermMemoryLayer "LongShortTermMemoryLayer[n] represents a trainable recurrent layer that takes a sequence of vectors and produces a sequence of vectors, each of size n.\nLongShortTermMemoryLayer[n, opts] includes options for weights and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongShortTermMemoryLayer)))
(def Longest "Longest[p] is a pattern object that matches the longest sequence consistent with the pattern p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Longest)))
(def LongestCommonSequence "LongestCommonSequence[s1, s2] finds the longest sequence of contiguous or disjoint elements common to the strings or lists s1 and s2.\nLongestCommonSequence[s1, s2] finds the longest sequence of contiguous or disjoint elements common to the strings, lists or biomolecular sequences s1 and s2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongestCommonSequence)))
(def LongestCommonSequencePositions "LongestCommonSequencePositions[s1, s2] finds the longest sequence of contiguous or disjoint elements common to the strings or lists s1 and s2 and returns their positions.\nLongestCommonSequencePositions[s1, s2] finds the longest sequence of contiguous or disjoint elements common to the strings, lists or biomolecular sequences s1 and s2 and returns their positions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongestCommonSequencePositions)))
(def LongestCommonSubsequence "LongestCommonSubsequence[s1, s2] finds the longest contiguous subsequence of elements common to the strings or lists s1 and s2.\nLongestCommonSubsequence[s1, s2] finds the longest contiguous subsequence of elements common to the strings, biomolecular sequences or lists s1 and s2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongestCommonSubsequence)))
(def LongestCommonSubsequencePositions "LongestCommonSubsequencePositions[s1, s2] finds the longest contiguous subsequence of elements common to the strings or lists s1 and s2 and returns their positions {pos1, pos2} in s1 and s2.\nLongestCommonSubsequencePositions[s1, s2] finds the longest contiguous subsequence of elements common to the strings, biomolecular sequences or lists s1 and s2 and returns their positions {pos1, pos2} in s1 and s2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongestCommonSubsequencePositions)))
(def LongestOrderedSequence "LongestOrderedSequence[list] finds the longest ordered sequence of contiguous or disjoint elements in list.\nLongestOrderedSequence[list, p] finds the longest ordered sequence using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LongestOrderedSequence)))
(def Longitude "Longitude[pos] gives the longitude in degrees of a geographic position specified by pos.\nLongitude[pos, datum] gives the longitude referring to the specified geodetic datum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Longitude)))
(def Lookup "Lookup[assoc, key] looks up the value associated with key in the association assoc; if the key is not present, Missing[\"KeyAbsent\", key] is returned.\nLookup[assoc, {key1, key2, …}] gives a list of the values associated with the keyi.\nLookup[{assoc1, assoc2, …}, key] gives a list corresponding to the value of key in each associ.\nLookup[assoc, key, default] gives default if the key is not present.\nLookup[assoc, keys, default, h] looks up the values associated with keys, wrapping each of them with head h before evaluation.\nLookup[key] represents an operator form of Lookup that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Lookup)))
(def LoopFreeGraphQ "LoopFreeGraphQ[g] yields True if the graph g has no self-loops, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LoopFreeGraphQ)))
(def Looping "Looping is an option for VideoStream, AudioStream and related functions to specify the playback looping." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Looping)))
(def LossFunction "LossFunction is an option for NetTrain that specifies how to compare actual and requested outputs from a neural net." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LossFunction)))
(def LowerCaseQ "LowerCaseQ[string] yields True if all the characters in the string are lowercase letters, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerCaseQ)))
(def LowerLeftArrow "LowerLeftArrow[x, y, …] displays as x↙y↙…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerLeftArrow)))
(def LowerRightArrow "LowerRightArrow[x, y, …] displays as x↘y↘…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerRightArrow)))
(def LowerTriangularMatrix "LowerTriangularMatrix[lmat] converts the lower triangular matrix lmat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerTriangularMatrix)))
(def LowerTriangularMatrixQ "LowerTriangularMatrixQ[m] gives True if m is lower triangular, and False otherwise.\nLowerTriangularMatrixQ[m, k] gives True if m is lower triangular starting down from the k ^th diagonal, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerTriangularMatrixQ)))
(def LowerTriangularize "LowerTriangularize[m] gives a matrix in which all but the lower triangular elements of m are replaced with zeros. \nLowerTriangularize[m, k] replaces with zeros only the elements above the k ^th subdiagonal of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowerTriangularize)))
(def LowpassFilter "LowpassFilter[data, ωc] applies a lowpass filter with a cutoff frequency ωc to an array of data.\nLowpassFilter[data, ωc, n] uses a filter kernel of length n.\nLowpassFilter[data, ωc, n, wfun] applies a smoothing window wfun to the filter kernel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LowpassFilter)))
(def LucasL "LucasL[n] gives the Lucas number Ln.\nLucasL[n, x] gives the Lucas polynomial Ln (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LucasL)))
(def LuccioSamiComponents "LuccioSamiComponents[g] gives the Luccio–Sami components of the graph g.\nLuccioSamiComponents[g, {v1, v2, …}] gives the components that include at least one of the vertices v1, v2, … .\nLuccioSamiComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LuccioSamiComponents)))
(def LunarEclipse "LunarEclipse[] gives the time of the next lunar eclipse.\nLunarEclipse[datespec] gives the time for the next lunar eclipse after the specified date.\nLunarEclipse[propertyspec] gives the specified property value for the next lunar eclipse.\nLunarEclipse[datespec, propertyspec] gives the specified property value for the next lunar eclipse after the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LunarEclipse)))
(def LunationNumber "LunationNumber[] returns the number of new moons since the first new moon of the year 2000.\nLunationNumber[date] returns the number of new moons since the given date.\nLunationNumber[scheme, date] returns the number of new moons since the zeroth new moon of the given counting scheme." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LunationNumber)))
(def LyapunovSolve "LyapunovSolve[a, c] finds a solution x of the matrix Lyapunov equation a.x+x.ac.\nLyapunovSolve[a, b, c] solves a.x+x.bc.\nLyapunovSolve[{a, d}, c] solves a.x.d+d.x.ac.\nLyapunovSolve[{a, d}, {b, e}, c] solves a.x.e+d.x.bc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LyapunovSolve)))
(def LyonsGroupLy "LyonsGroupLy[] represents the sporadic simple Lyons group Ly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote LyonsGroupLy)))
(def MAProcess "MAProcess[{b1, …, bq}, v] represents a moving-average process of order q with normal white noise variance v.\nMAProcess[{b1, …, bq}, Σ] represents a vector MA process with multinormal white noise covariance matrix Σ.\nMAProcess[{b1, …, bq}, v, init] represents an MA process with initial data init. \nMAProcess[c, …] represents an MA process with a constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MAProcess)))
(def MIMETypeToFormatList "MIMETypeToFormatList[] returns lists of file formats corresponding to all registered MIME types.\nMIMETypeToFormatList[mime] returns a list of file formats that matches the MIME type mime." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MIMETypeToFormatList)))
(def MachineNumberQ "MachineNumberQ[expr] returns True if expr is a machine‐precision real or complex number, and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MachineNumberQ)))
(def MachinePrecision "MachinePrecision is a symbol used to indicate machine‐number precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MachinePrecision)))
(def Magenta "Magenta represents the color magenta in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Magenta)))
(def MagneticFluxDensityValue "MagneticFluxDensityValue[pred, vars, pars] represents a magnetic flux density boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMagneticFluxDensityValue[pred, vars, pars, lkey] represents a magnetic flux density boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MagneticFluxDensityValue)))
(def MagneticPDEComponent "MagneticPDEComponent[vars, pars] yields a magnetic PDE term with variables vars and pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MagneticPDEComponent)))
(def MagneticPotentialCondition "MagneticPotentialCondition[pred, vars, pars] represents a magnetic surface potential boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMagneticPotentialCondition[pred, vars, pars, lkey] represents a magnetic potential surface boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MagneticPotentialCondition)))
(def MagneticSymmetryValue "MagneticSymmetryValue[pred, vars, pars] represents a magnetic symmetry boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMagneticSymmetryValue[pred, vars, pars, lkey] represents a magnetic symmetry boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MagneticSymmetryValue)))
(def MagnetostaticPDEComponent "MagnetostaticPDEComponent[vars, pars] yields a current-free magnetostatic PDE term with variables vars and pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MagnetostaticPDEComponent)))
(def Magnification "Magnification is an option for Style and Cell that specifies what magnification to use for display." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Magnification)))
(def Magnify "Magnify[expr, r] represents an object to be displayed with magnification r. \nMagnify[expr] displays with expr magnified by a fixed factor." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Magnify)))
(def MailAddressValidation "MailAddressValidation is an option for SendMail that specifies whether and how to validate email addresses." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailAddressValidation)))
(def MailExecute "MailExecute[cmd, target] executes the mail command cmd on the target mail server connection, folder, file or item (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailExecute)))
(def MailFolder "MailFolder[…] represents a mail folder associated with an active mail server connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailFolder)))
(def MailItem "MailItem[…] represents an item of mail associated with an active mail server connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailItem)))
(def MailReceiverFunction "MailReceiverFunction[fun] represents a mail receiver function that applies fun to any mail message it receives." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailReceiverFunction)))
(def MailResponseFunction "MailResponseFunction is an option for MailReceiverFunction that specifies what function to apply to respond to the sender of mail received by a MailReceiverFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailResponseFunction)))
(def MailSearch "MailSearch[folder, assoc] searches the specified mail folder for messages with properties matching elements in assoc.\nMailSearch[assoc] searches the current default mail inbox.\nMailSearch[] gives the list of unread messages in the current default mail inbox." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailSearch)))
(def MailServerConnect "MailServerConnect[] connects to your default incoming mail server.\nMailServerConnect[\"server\"] connects to the specified incoming mail server \"server\".\nMailServerConnect[\"server\", userid] connects using the specified user ID userid.\nMailServerConnect[\"server\", userid, password] connects using userid and password." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailServerConnect)))
(def MailServerConnection "MailServerConnection[…] is a symbolic representation of a connection to an incoming mail server." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailServerConnection)))
(def MailSettings "MailSettings is an option for SendMail and MailServerConnect to specify mail settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MailSettings)))
(def Majority "Majority[e1, e2, …] gives True if the majority of the ei are True, and False if the majority are False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Majority)))
(def MakeBoxes "MakeBoxes[expr, form] is the low‐level function used in Wolfram System sessions to convert expressions into boxes. \nMakeBoxes[expr] is the function to convert expr to StandardForm boxes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MakeBoxes)))
(def MakeExpression "MakeExpression[boxes, form] is the low‐level function used in Wolfram System sessions to construct expressions from boxes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MakeExpression)))
(def ManagedLibraryExpressionID "ManagedLibraryExpressionID[expr] returns the positive integer ID associated with expr if it is a managed library expression and $Failed otherwise.\nManagedLibraryExpressionID[expr, mname] only returns the ID if expr is associated with the registered manager having name mname." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ManagedLibraryExpressionID)))
(def ManagedLibraryExpressionQ "ManagedLibraryExpressionQ[expr] returns True if expr is a managed library expression and False otherwise.\nManagedLibraryExpressionQ[expr, mname] only returns True if expr is associated with the registered manager having name mname." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ManagedLibraryExpressionQ)))
(def ManagedObject "ManagedObject[…] represents a managed object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ManagedObject)))
(def MandelbrotSetBoettcher "MandelbrotSetBoettcher[z] gives the Böttcher coordinate of z with respect to the Mandelbrot set." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MandelbrotSetBoettcher)))
(def MandelbrotSetDistance "MandelbrotSetDistance[c] estimates the distance from c to the nearest point in the Mandelbrot set.\nMandelbrotSetDistance[c, \"Interior\"] estimates the distance from c to the nearest point in the complement of the Mandelbrot set." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MandelbrotSetDistance)))
(def MandelbrotSetIterationCount "MandelbrotSetIterationCount[c] returns the number of iterations of the function f(z)z^2+c, beginning with z0, that are needed to determine whether c is in the Mandelbrot set." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MandelbrotSetIterationCount)))
(def MandelbrotSetMemberQ "MandelbrotSetMemberQ[z] returns True if z is in the Mandelbrot set, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MandelbrotSetMemberQ)))
(def MandelbrotSetPlot "MandelbrotSetPlot[{zmin, zmax}] plots the portion of the Mandelbrot set inside the rectangle with corners zmin and zmax.\nMandelbrotSetPlot[] plots the Mandelbrot set over a default rectangle." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MandelbrotSetPlot)))
(def MangoldtLambda "MangoldtLambda[n] gives the von Mangoldt function Λ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MangoldtLambda)))
(def ManhattanDistance "ManhattanDistance[u, v] gives the Manhattan or \"city block\" distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ManhattanDistance)))
(def Manipulate "Manipulate[expr, {u, umin, umax}] generates a version of expr with controls added to allow interactive manipulation of the value of u. \nManipulate[expr, {u, umin, umax, du}] allows the value of u to vary between umin and umax in steps du. \nManipulate[expr, {{u, uinit}, umin, umax, …}] takes the initial value of u to be uinit. \nManipulate[expr, {{u, uinit, ulbl}, …}] labels the controls for u with ulbl. \nManipulate[expr, {u, {u1, u2, …}}] allows u to take on discrete values u1, u2, …. \nManipulate[expr, {u, …}, {v, …}, …] provides controls to manipulate each of the u, v, …. \nManipulate[expr, cu{u, …}, cv{v, …}, …] links the controls to the specified controllers on an external device." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Manipulate)))
(def ManipulateVideo "ManipulateVideo[expr, [u, <|t1u1, …, tnun|>]] generates a video of duration tn from manipulating the value of u given the specification over times ti.\nManipulateVideo[expr, {u, …}, {v, …}, …] provides controls to manipulate each of the u, v, …. \nManipulateVideo[manipulate] creates a video from a Manipulate object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ManipulateVideo)))
(def Manipulator "Manipulator[x] represents a manipulator with setting x in the range 0 to 1. \nManipulator[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the manipulator is moved. \nManipulator[x, {xmin, xmax}] represents a manipulator with range xmin to xmax. \nManipulator[x, {xmin, xmax, dx}] represents a manipulator that jumps in steps dx." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Manipulator)))
(def MannWhitneyTest "MannWhitneyTest[{data1, data2}] tests whether the medians of data1 and data2 are equal.\nMannWhitneyTest[dspec, μ0] tests the median difference against μ0.\nMannWhitneyTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MannWhitneyTest)))
(def MannedSpaceMissionData "MannedSpaceMissionData[entity, property] gives the value of the specified property for the manned space mission entity.\nMannedSpaceMissionData[{entity1, entity2, …}, property] gives a list of property values for the specified manned space mission entities.\nMannedSpaceMissionData[name, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MannedSpaceMissionData)))
(def MantissaExponent "MantissaExponent[x] gives a list containing the mantissa and exponent of a number x. \nMantissaExponent[x, b] gives the base‐b mantissa and exponent of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MantissaExponent)))
(def Manual "Manual represents an option or other value that is to be selected manually, usually by some form of interactive manipulation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Manual)))
(def Map "Map[f, expr] or f/@expr applies f to each element on the first level in expr. \nMap[f, expr, levelspec] applies f to parts of expr specified by levelspec. \nMap[f] represents an operator form of Map that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Map)))
(def MapAll "MapAll[f, expr] or f//@expr applies f to every subexpression in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MapAll)))
(def MapApply "f@@@expr or MapApply[f, expr] replaces heads at level 1 of expr by f.\nMapApply[f] represents an operator form of MapApply that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MapApply)))
(def MapAt "MapAt[f, expr, n] applies f to the element at position n in expr. If n is negative, the position is counted from the end. \nMapAt[f, expr, {i, j, …}] applies f to the part of expr at position {i, j, …}.\nMapAt[f, expr, {{i1, j1, …}, {i2, j2, …}, …}] applies f to parts of expr at several positions.\nMapAt[f, pos] represents an operator form of MapAt that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MapAt)))
(def MapIndexed "MapIndexed[f, expr] applies f to the elements of expr, giving the part specification of each element as a second argument to f. \nMapIndexed[f, expr, levelspec] applies f to all parts of expr on levels specified by levelspec. \nMapIndexed[f] represents an operator form of MapIndexed that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MapIndexed)))
(def MapThread "MapThread[f, {{a1, a2, …}, {b1, b2, …}, …}] gives {f[a1, b1, …], f[a2, b2, …], …}. \nMapThread[f, {expr1, expr2, …}, n] applies f to the parts of the expri at level n.\nMapThread[f] represents an operator form of MapThread that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MapThread)))
(def MarchenkoPasturDistribution "MarchenkoPasturDistribution[λ, σ] represents a Marchenko–Pastur distribution with asymptotic ratio λ and scale parameter σ.\nMarchenkoPasturDistribution[λ] represents a Marchenko–Pastur distribution with unit scale parameter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MarchenkoPasturDistribution)))
(def MarcumQ "MarcumQ[m, a, b] gives Marcum's Q function Qm (a, b).\nMarcumQ[m, a, b0, b1] gives Marcum's Q function Qm(a, b0)-Qm (a, b1)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MarcumQ)))
(def MardiaCombinedTest "MardiaCombinedTest[data] tests whether data follows a MultinormalDistribution using the Mardia combined test.\nMardiaCombinedTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MardiaCombinedTest)))
(def MardiaKurtosisTest "MardiaKurtosisTest[data] tests whether data follows a MultinormalDistribution using the Mardia kurtosis test.\nMardiaKurtosisTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MardiaKurtosisTest)))
(def MardiaSkewnessTest "MardiaSkewnessTest[data] tests whether data follows a MultinormalDistribution using the Mardia skewness test.\nMardiaSkewnessTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MardiaSkewnessTest)))
(def MarginalDistribution "MarginalDistribution[dist, k] represents a univariate marginal distribution of the k ^th coordinate from the multivariate distribution dist.\nMarginalDistribution[dist, {k1, k2, …}] represents a multivariate marginal distribution of the {k1, k2, …} coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MarginalDistribution)))
(def MarkovProcessProperties "MarkovProcessProperties[mproc] gives a summary of properties for the finite state Markov process mproc.\nMarkovProcessProperties[mproc, \"property\"] gives the specified \"property\" for the process mproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MarkovProcessProperties)))
(def Masking "Masking is an option for various image and signal processing functions that specifies on which regions they should operate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Masking)))
(def MassConcentrationCondition "MassConcentrationCondition[pred, vars, pars] represents a mass concentration boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassConcentrationCondition[pred, vars, pars, lkey] represents a thermal surface boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassConcentrationCondition)))
(def MassFluxValue "MassFluxValue[pred, vars, pars] represents a mass flux boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassFluxValue[pred, vars, pars, lkey] represents a mass flux boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassFluxValue)))
(def MassImpermeableBoundaryValue "MassImpermeableBoundaryValue[pred, vars, pars] represents a mass impermeable boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassImpermeableBoundaryValue[pred, vars, pars, lkey] represents a mass impermeable boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassImpermeableBoundaryValue)))
(def MassOutflowValue "MassOutflowValue[pred, vars, pars] represents a mass outflow boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassOutflowValue[pred, vars, pars, lkey] represents a mass outflow boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassOutflowValue)))
(def MassSymmetryValue "MassSymmetryValue[pred, vars, pars] represents a mass symmetry boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassSymmetryValue[pred, vars, pars, lkey] represents a mass symmetry boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassSymmetryValue)))
(def MassTransferValue "MassTransferValue[pred, vars, pars] represents a mass transfer boundary condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nMassTransferValue[pred, vars, pars, lkey] represents a mass transfer boundary condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassTransferValue)))
(def MassTransportPDEComponent "MassTransportPDEComponent[vars, pars] yields a mass transport PDE term with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MassTransportPDEComponent)))
(def MatchLocalNames "MatchLocalNames is an option for Trace and related functions that specifies whether symbols such as x should match symbols with local names of the form x$nnn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatchLocalNames)))
(def MatchQ "MatchQ[expr, form] returns True if expr matches the pattern form, and returns False otherwise.\nMatchQ[form] represents an operator form of MatchQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatchQ)))
(def MatchingDissimilarity "MatchingDissimilarity[u, v] gives the matching dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatchingDissimilarity)))
(def MaterialShading "MaterialShading[\"material\"] is a three-dimensional graphics directive specifying that surfaces that follow are to be drawn with the material \"material\" appearance.\nMaterialShading[{\"material\", col}] uses the specified color col as the base color.\nMaterialShading[<|parm1->val1, parm2->val2, …|>] uses the specified parameters parms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaterialShading)))
(def MaternPointProcess "MaternPointProcess[μ, λ, rm, d] represents a Matérn cluster point process with density μ, cluster mean λ and radius rm in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaternPointProcess)))
(def MathMLForm "MathMLForm[expr] prints as a MathML form of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathMLForm)))
(def MathematicalFunctionData "MathematicalFunctionData[entity, property] gives data corresponding to property for the mathematical function specified by entity.\nMathematicalFunctionData[entprop, annotation] gives data corresponding to the given entity or property in the format specified by annotation.\nMathematicalFunctionData[entity, property, annotation] gives data for the given entity-property pair in the format specified by annotation.\t\nMathematicalFunctionData[entity, property, {qual1val1, qual2val2, …}] gives data for the given entity-property pair with property qualifiers qual1, qual2, … set to the given values.\nMathematicalFunctionData[entity, property, annotation, {qual1val1, qual2val2, …}] gives data corresponding to the given entity, property and annotation format, with property qualifiers qual1, qual2, … set to the given values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathematicalFunctionData)))
(def MathieuC "MathieuC[a, q, z] gives the even Mathieu function with characteristic value a and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuC)))
(def MathieuCPrime "MathieuCPrime[a, q, z] gives the derivative with respect to z of the even Mathieu function with characteristic value a and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuCPrime)))
(def MathieuCharacteristicA "MathieuCharacteristicA[r, q] gives the characteristic value ar for even Mathieu functions with characteristic exponent r and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuCharacteristicA)))
(def MathieuCharacteristicB "MathieuCharacteristicB[r, q] gives the characteristic value br for odd Mathieu functions with characteristic exponent r and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuCharacteristicB)))
(def MathieuCharacteristicExponent "MathieuCharacteristicExponent[a, q] gives the characteristic exponent r for Mathieu functions with characteristic value a and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuCharacteristicExponent)))
(def MathieuGroupM11 "MathieuGroupM11[] represents the sporadic simple Mathieu group M11." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuGroupM11)))
(def MathieuGroupM12 "MathieuGroupM12[] represents the sporadic simple Mathieu group M12." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuGroupM12)))
(def MathieuGroupM22 "MathieuGroupM22[] represents the sporadic simple Mathieu group M22." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuGroupM22)))
(def MathieuGroupM23 "MathieuGroupM23[] represents the sporadic simple Mathieu group M23." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuGroupM23)))
(def MathieuGroupM24 "MathieuGroupM24[] represents the sporadic simple Mathieu group M24." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuGroupM24)))
(def MathieuS "MathieuS[a, q, z] gives the odd Mathieu function with characteristic value a and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuS)))
(def MathieuSPrime "MathieuSPrime[a, q, z] gives the derivative with respect to z of the odd Mathieu function with characteristic value a and parameter q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MathieuSPrime)))
(def Matrices "Matrices[{d1, d2}] represents the domain of matrices of dimensions d1×d2.\nMatrices[{d1, d2}, dom] represents the domain of matrices of dimensions d1×d2, with components in the domain dom.\nMatrices[{d1, d2}, dom, sym] represents the subdomain of matrices d1×d2 with symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Matrices)))
(def MatrixExp "MatrixExp[m] gives the matrix exponential of m. \nMatrixExp[m, v] gives the matrix exponential of m applied to the vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixExp)))
(def MatrixForm "MatrixForm[list] prints with the elements of list arranged in a regular array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixForm)))
(def MatrixFunction "MatrixFunction[f, m] gives the matrix generated by the scalar function f at the matrix argument m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixFunction)))
(def MatrixGame "MatrixGame[{{p _1, 1^1, …}, …}] specifies a zero-sum two-player game with payoff p _i, j^1 for player 1 and -p _i, j^1 for player 2 when players 1 and 2 take actions i and j, respectively.\nMatrixGame[{{{p _1, 1^1, p _1, 1^2}, …}, …}] specifies a general-sum two-player game with payoff p _i, j^1 for player 1 and p _i, j^2 for player 2 when players 1 and 2 take actions i and j, respectively.\nMatrixGame[{…{{p _1, …, 1^1, …, p _1, …, 1^n}, …}…}] specifies a general n-player game with payoff p _i1, …, in^k for player k when players 1 through n take actions i1, …, in, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixGame)))
(def MatrixGamePayoff "MatrixGamePayoff[mgame, {s^1, …, s^n}] gives the expected payoff for each player in the matrix game mgame with strategy profile {s^1, …, s^n}. \nMatrixGamePayoff[mgame, {s^1, …, s^n}, \"prop\"] gives the payoff property \"prop\" for each player. \nMatrixGamePayoff[mgame, <|player1->s^1, …, playern->s^n|>] gives the expected payoff for each named player in the matrix game mgame with strategy profile {s^1, …, s^n} using an association." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixGamePayoff)))
(def MatrixGamePlot "MatrixGamePlot[mgame] generates a plot of the MatrixGame mgame.\nMatrixGamePlot[mgame, strat] highlight the game strategy strat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixGamePlot)))
(def MatrixLog "MatrixLog[m] gives the matrix logarithm of a matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixLog)))
(def MatrixNormalDistribution "MatrixNormalDistribution[Σrow, Σcol] represents zero mean matrix normal distribution with row covariance matrix Σrow and column covariance matrix Σcol.\nMatrixNormalDistribution[μ, Σrow, Σcol] represents matrix normal distribution with mean matrix μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixNormalDistribution)))
(def MatrixPlot "MatrixPlot[m] generates a plot that gives a visual representation of the values of elements in a matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixPlot)))
(def MatrixPower "MatrixPower[m, n] gives the n ^th matrix power of the matrix m. \nMatrixPower[m, n, v] gives the n ^th matrix power of the matrix m applied to the vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixPower)))
(def MatrixPropertyDistribution "MatrixPropertyDistribution[expr, xmdist] represents the distribution of the matrix property expr where the matrix-valued random variable x follows the matrix distribution mdist.\nMatrixPropertyDistribution[expr, {x1mdist1, x2mdist2, …}] represents the distribution where x1, x2, … are independent and follow the matrix distributions mdist1, mdist2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixPropertyDistribution)))
(def MatrixQ "MatrixQ[expr] gives True if expr is a list of lists or a two-dimensional SparseArray object that can represent a matrix, and gives False otherwise. \nMatrixQ[expr, test] gives True only if test yields True when applied to each of the matrix elements in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixQ)))
(def MatrixRank "MatrixRank[m] gives the rank of the matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixRank)))
(def MatrixSymbol "MatrixSymbol[a] represents a matrix with name a.\nMatrixSymbol[a, {m, n}] represents an mn matrix.\nMatrixSymbol[a, {m, n}, dom] represents a matrix with elements in the domain dom.\nMatrixSymbol[a, {m, n}, dom, sym] represents a matrix with the symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixSymbol)))
(def MatrixTDistribution "MatrixTDistribution[Σrow, Σcol, ν] represents zero mean matrix t distribution with row covariance matrix Σrow, column covariance matrix Σcol, and degrees of freedom parameter ν.\nMatrixTDistribution[μ, Σrow, Σcol, ν] represents matrix t distribution with mean matrix μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MatrixTDistribution)))
(def Max "Max[x1, x2, …] yields the numerically largest of the xi. \nMax[{x1, x2, …}, {y1, …}, …] yields the largest element of any of the lists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Max)))
(def MaxCellMeasure "MaxCellMeasure is an option for DiscretizeRegion and related functions that specifies the maximum cell measure for the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxCellMeasure)))
(def MaxColorDistance "MaxColorDistance is an option to specify the maximum distance allowed between colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxColorDistance)))
(def MaxDate "MaxDate[{date1, date2, …}] gives the latest date of the datei.\nMaxDate[interval] gives the endpoint of the date interval interval.\nMaxDate[interval, gran] gives the endpoint of interval as specified by granularity gran." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxDate)))
(def MaxDetect "MaxDetect[image] gives a binary image in which white pixels correspond to constant extended maxima in image.\nMaxDetect[image, h] finds extended maxima where the range of values is not greater than h.\nMaxDetect[data, …] applies maxima detection to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxDetect)))
(def MaxDisplayedChildren "MaxDisplayedChildren is an option for Tree and related functions that specifies the maximum number of children that should be displayed for each subtree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxDisplayedChildren)))
(def MaxDuration "MaxDuration is an option that specifies the maximum duration for audio playback or capture." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxDuration)))
(def MaxExtraBandwidths "MaxExtraBandwidths is an option to SmoothKernelDistribution that controls the behavior outside that data range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxExtraBandwidths)))
(def MaxExtraConditions "MaxExtraConditions is an option to Solve and related functions that specifies how many extra equational conditions on continuous parameters to allow in solutions that are given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxExtraConditions)))
(def MaxFeatureDisplacement "MaxFeatureDisplacement is an option that specifies the maximum displacement allowed for any feature." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxFeatureDisplacement)))
(def MaxFeatures "MaxFeatures is an option that specifies the maximum number of features that will be returned from feature detection algorithms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxFeatures)))
(def MaxFilter "MaxFilter[data, r] filters data by replacing every value by the maximum value in its range-r neighborhood.\nMaxFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxFilter)))
(def MaxItems "MaxItems is an option that specifies the maximum number of items to be used or shown." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxItems)))
(def MaxIterations "MaxIterations is an option that specifies the maximum number of iterations that should be tried in various built-in functions and algorithms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxIterations)))
(def MaxLimit "MaxLimit[f, xx^*] gives the max limit xx^*f(x). \nMaxLimit[f, {x1x_1^*, …, xnx_n^*}] gives the nested max limit _x1x_1^*⋯ _xnx_n^*f(x1, …, xn). \nMaxLimit[f, {x1, …, xn}{x_1^*, …, x_n^*}] gives the multivariate max limit _{x1, …, xn}{x_1^*, …, x_n^*}f(x1, …, xn)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxLimit)))
(def MaxMemoryUsed "MaxMemoryUsed[] gives the maximum number of bytes used to store all data for the current Wolfram System session.\nMaxMemoryUsed[expr] gives the maximum number of bytes used during the evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxMemoryUsed)))
(def MaxMixtureKernels "MaxMixtureKernels is an option for SmoothKernelDistribution and related functions that specifies the maximum number and location of kernel functions to use in the estimation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxMixtureKernels)))
(def MaxOverlapFraction "MaxOverlapFraction is an option that specifies the maximum acceptable overlap between different identifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxOverlapFraction)))
(def MaxPlotPoints "MaxPlotPoints is an option for plotting functions like ArrayPlot and ListPlot3D that specifies the maximum number of points that will explicitly be included in the output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxPlotPoints)))
(def MaxRecursion "MaxRecursion is an option for functions like NIntegrate and Plot that specifies how many recursive subdivisions can be made." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxRecursion)))
(def MaxRoots "MaxRoots is an option for NSolve and related functions that specifies the maximum number of roots that should be returned in the solution for a system of algebraic or transcendental equations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxRoots)))
(def MaxStableDistribution "MaxStableDistribution[μ, σ, ξ] represents a generalized maximum extreme value distribution with location parameter μ, scale parameter σ, and shape parameter ξ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxStableDistribution)))
(def MaxStepFraction "MaxStepFraction is an option to functions like NDSolve that specifies the maximum fraction of the total range to cover in a single step." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxStepFraction)))
(def MaxStepSize "MaxStepSize is an option to functions like NDSolve that specifies the maximum size of a single step used in generating a result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxStepSize)))
(def MaxSteps "MaxSteps is an option to functions like NDSolve that specifies the maximum number of steps to take in generating a result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxSteps)))
(def MaxTrainingRounds "MaxTrainingRounds is an option for NetTrain and related functions that specifies the maximum number of rounds of training to do." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxTrainingRounds)))
(def MaxValue "MaxValue[f, x] gives the maximum value of f with respect to x.\nMaxValue[f, {x, y, …}] gives the maximum value of f with respect to x, y, …. \nMaxValue[{f, cons}, {x, y, …}] gives the maximum value of f subject to the constraints cons. \nMaxValue[…, x∈rdom] constrains x to be in the region or domain rdom.\nMaxValue[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxValue)))
(def MaxWordGap "MaxWordGap is an option for SearchAdjustment that specifies the number of words that can occur between the terms of a phrase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxWordGap)))
(def MaximalBy "MaximalBy[data, f] returns a list of the elements ei of data for which the value of f[ei] is maximal.\nMaximalBy[data, f, n] returns a list of the elements ei of data corresponding to the n largest f[ei].\nMaximalBy[data, f, n, p] uses the ordering function p for sorting.\nMaximalBy[f] represents an operator form of MaximalBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaximalBy)))
(def Maximize "Maximize[f, x] maximizes f symbolically with respect to x.\nMaximize[f, {x, y, …}] maximizes f symbolically with respect to x, y, …. \nMaximize[{f, cons}, {x, y, …}] maximizes f symbolically subject to the constraints cons. \nMaximize[…, x∈rdom] constrains x to be in the region or domain rdom.\nMaximize[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Maximize)))
(def MaxwellDistribution "MaxwellDistribution[σ] represents a Maxwell distribution with scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MaxwellDistribution)))
(def McLaughlinGroupMcL "McLaughlinGroupMcL[] represents the sporadic simple McLaughlin group McL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote McLaughlinGroupMcL)))
(def Mean "Mean[data] gives the mean estimate of the elements in data. \nMean[dist] gives the mean of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Mean)))
(def MeanAbsoluteLossLayer "MeanAbsoluteLossLayer[] represents a loss layer that computes the mean absolute loss between the \"Input\" port and \"Target\" port." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanAbsoluteLossLayer)))
(def MeanAround "MeanAround[{x1, x2, x3, …}] gives an Around object describing the mean of the xi and its uncertainty.\nMeanAround[{{x11, x12, …}, {x21, …}, …}] gives a VectorAround object describing the means of the vectors xi and their covariance." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanAround)))
(def MeanClusteringCoefficient "MeanClusteringCoefficient[g] gives the mean clustering coefficient of the graph g.\nMeanClusteringCoefficient[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanClusteringCoefficient)))
(def MeanDegreeConnectivity "MeanDegreeConnectivity[g] gives a list of k-mean degree connectivity for the graph g for successive k=0, 1, 2… .\nMeanDegreeConnectivity[g, \"In\"] gives a list of k-mean in-degree connectivity for the graph g.\nMeanDegreeConnectivity[g, \"Out\"] gives a list of k-mean out-degree connectivity for the graph g.\nMeanDegreeConnectivity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanDegreeConnectivity)))
(def MeanDeviation "MeanDeviation[data] gives the mean absolute deviation from the mean of the elements in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanDeviation)))
(def MeanFilter "MeanFilter[data, r] filters data by replacing every value by the mean value in its range-r neighborhood.\nMeanFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanFilter)))
(def MeanGraphDistance "MeanGraphDistance[g] gives the mean distance between all pairs of vertices in the graph g.\nMeanGraphDistance[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanGraphDistance)))
(def MeanNeighborDegree "MeanNeighborDegree[g] gives a list of mean neighbor degrees of vertices for the graph g.\nMeanNeighborDegree[g, \"In\"] gives a list of mean neighbor in-degrees.\nMeanNeighborDegree[g, \"Out\"] gives a list of mean neighbor out-degrees.\nMeanNeighborDegree[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanNeighborDegree)))
(def MeanPointDensity "MeanPointDensity[pdata] estimates the mean point density λ from point data pdata in the observation region reg. \nMeanPointDensity[bdata] estimates the mean point density λ from binned data bdata.\nMeanPointDensity[pproc] computes the mean point density λ for point process pproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanPointDensity)))
(def MeanShift "MeanShift[list, d] replaces each element in list by the mean of the values of all elements that differ by less than d.\nMeanShift[list, d, {p1, p2, …}] returns the list where only the specified parts pi are replaced with mean-shifted values.\nMeanShift[image, …] mean shift of the pixel values in image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanShift)))
(def MeanShiftFilter "MeanShiftFilter[data, r, d] filters data by replacing every value by the mean of the pixels in a range-r neighborhood and whose value is within a distance d.\nMeanShiftFilter[data, {r1, r2, …}, d] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanShiftFilter)))
(def MeanSquaredLossLayer "MeanSquaredLossLayer[] represents a loss layer that computes the mean squared loss between its \"Input\" port and \"Target\" port." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeanSquaredLossLayer)))
(def Median "Median[data] gives the median estimate Overscript[q, ^]1/4 of the elements in data. \nMedian[dist] gives the median of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Median)))
(def MedianDeviation "MedianDeviation[data] gives the median absolute deviation from the median Overscript[q, ^]1/2 of the elements in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MedianDeviation)))
(def MedianFilter "MedianFilter[image, r] filters image by replacing every value by the median in its range-r neighborhood. \nMedianFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MedianFilter)))
(def MedicalTestData "MedicalTestData[entity, property] gives the value of the specified property for the medical test entity.\nMedicalTestData[{entity1, entity2, …}, property] gives a list of property values for the specified medical test entities.\nMedicalTestData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MedicalTestData)))
(def Medium "Medium is a style or option setting that specifies that objects should be medium sized." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Medium)))
(def MeijerG "MeijerG[{{a1, …, an}, {a n+1, …, ap}}, {{b1, …, bm}, {b m+1, …, bq}}, z] is the Meijer G-function G _p, q^m, n(za1, …, ap\nb1, …, bq\n\n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeijerG)))
(def MeijerGReduce "MeijerGReduce[expr, x] attempts to reduce expr to a single MeijerG object as a function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeijerGReduce)))
(def MeixnerDistribution "MeixnerDistribution[a, b, m, d] represents a Meixner distribution with location parameter m, scale parameter a, skew parameter b, and shape parameter d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeixnerDistribution)))
(def MellinConvolve "MellinConvolve[f, g, x, y] gives the Mellin convolution with respect to x of the expressions f and g.\nMellinConvolve[f, g, {x1, x2, …}, {y1, y2, …}] gives the multidimensional Mellin convolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MellinConvolve)))
(def MellinTransform "MellinTransform[expr, x, s] gives the Mellin transform of expr.\nMellinTransform[expr, {x1, x2, …}, {s1, s2, …}] gives the multidimensional Mellin transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MellinTransform)))
(def MemberQ "MemberQ[list, form] returns True if an element of list matches form, and False otherwise. \nMemberQ[list, form, levelspec] tests all parts of list specified by levelspec. \nMemberQ[form] represents an operator form of MemberQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MemberQ)))
(def MemoryAvailable "MemoryAvailable[] gives the estimated number of bytes readily available for storing additional data in the current Wolfram Language kernel session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MemoryAvailable)))
(def MemoryConstrained "MemoryConstrained[expr, b] evaluates expr, stopping if more than b bytes of memory are requested. \nMemoryConstrained[expr, b, failexpr] returns failexpr if the memory constraint is not met." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MemoryConstrained)))
(def MemoryConstraint "MemoryConstraint is an option for TestReport and VerificationTest that specifies how much memory (in bytes) the test is allowed to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MemoryConstraint)))
(def MemoryInUse "MemoryInUse[] gives the number of bytes currently being used to store all data in the current Wolfram Language kernel session. \nMemoryInUse[$FrontEnd] gives the number of bytes used in the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MemoryInUse)))
(def MengerMesh "MengerMesh[n] gives a mesh region representing the n ^th-step Menger sponge. \nMengerMesh[n, d] gives the n ^th-step Menger sponge in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MengerMesh)))
(def MenuCommandKey "MenuCommandKey is an option for cells that specifies the keyboard shortcut to be associated with a style listed in the Format ▶ Style submenu." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MenuCommandKey)))
(def MenuPacket "MenuPacket[integer, string] is a WSTP packet indicating a menu request with title string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MenuPacket)))
(def MenuSortingValue "MenuSortingValue is an option for cells and notebooks that specifies where a cell style, stylesheet, or palette is listed in the Format ▶ Style submenu, Format ▶ Stylesheet submenu, or Palettes menu respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MenuSortingValue)))
(def MenuStyle "MenuStyle is an option for menu-generating constructs that specifies the style to use in displaying menu items." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MenuStyle)))
(def MenuView "MenuView[{lbl1expr1, lbl2expr2, …}] represents an object in which selecting the menu item with label lbli displays expri. \nMenuView[{lbl1expr1, lbl2expr2, …}, i] makes the i ^th item be the one currently selected.\nMenuView[{{v1, lbl1expr1}, {v2, lbl2expr2}, …}, v] associates values vi with successive menu items, and makes the item with value v be the one currently selected. \nMenuView[{expr1, expr2, …}] takes the menu items' labels to be successive integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MenuView)))
(def Merge "Merge[{assoc1, assoc2, …}, f] merges the associations associ, using the function f to combine values with the same key. \nMerge[{key1val1, key2val2, …}, f] gives an association in which values corresponding to identical keys are combined using f. \nMerge[f] represents an operator form of Merge that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Merge)))
(def MergingFunction "MergingFunction is an option for functions such as PersistentSymbol that specifies a function to apply to the list of values found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MergingFunction)))
(def MersennePrimeExponent "MersennePrimeExponent[n] gives the n ^th Mersenne prime exponent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MersennePrimeExponent)))
(def MersennePrimeExponentQ "MersennePrimeExponentQ[n] returns True if n is a Mersenne prime exponent, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MersennePrimeExponentQ)))
(def Mesh "Mesh is an option for Plot3D, DensityPlot, and other plotting functions that specifies what mesh should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Mesh)))
(def MeshCellCentroid "MeshCellCentroid is an annotation of MeshRegion and BoundaryMeshRegion objects that gives the centroids of mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellCentroid)))
(def MeshCellCount "MeshCellCount[mreg] gives a list {c0, c1, …} of counts cd of cells of dimension d in the mesh region mreg. \nMeshCellCount[mreg, d] gives the total count of cells of dimension d.\nMeshCellCount[mreg, cellspec] gives the total count of cells specified by cellspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellCount)))
(def MeshCellHighlight "MeshCellHighlight is an option and annotation of MeshRegion, BoundaryMeshRegion, and related functions that specifies mesh cells to highlight." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellHighlight)))
(def MeshCellIndex "MeshCellIndex[mreg, d] gives the cell indices for cells of dimension d in the mesh region mreg.\nMeshCellIndex[mreg, cellspec] gives the cell indices for the cells specified by cellspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellIndex)))
(def MeshCellLabel "MeshCellLabel is an option to MeshRegion, BoundaryMeshRegion and related functions that specifies labels and placements for mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellLabel)))
(def MeshCellMarker "MeshCellMarker is an option to MeshRegion and BoundaryMeshRegion that specifies integer markers to associate with mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellMarker)))
(def MeshCellMeasure "MeshCellMeasure is an annotation of MeshRegion and BoundaryMeshRegion objects that gives the measures of mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellMeasure)))
(def MeshCellQuality "MeshCellQuality is an annotation of MeshRegion and BoundaryMeshRegion objects that gives a quality measure for mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellQuality)))
(def MeshCellShapeFunction "MeshCellShapeFunction is an option and annotation for MeshRegion, BoundaryMeshRegion, and related functions that specifies functions to use to generate primitives for rendering mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellShapeFunction)))
(def MeshCellStyle "MeshCellStyle is an option and annotation of MeshRegion, BoundaryMeshRegion, and related functions that specifies styles to use for mesh cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCellStyle)))
(def MeshCells "MeshCells[mreg, d] gives the cells of dimension d in the mesh region mreg.\nMeshCells[mreg, cellspec] gives the cells specified by cellspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCells)))
(def MeshConnectivityGraph "MeshConnectivityGraph[mr, 0] gives a graph of points connected by lines.\nMeshConnectivityGraph[mr, d] gives a graph between cells of dimension d that share a cell of dimension d-1.\nMeshConnectivityGraph[mr, {d, e}, r] gives a graph from cells of dimension d to cells of dimension e that share a cell of dimension r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshConnectivityGraph)))
(def MeshCoordinates "MeshCoordinates[mreg] gives a list of coordinates in the mesh region mreg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshCoordinates)))
(def MeshFunctions "MeshFunctions is an option for plotting functions that specifies functions to use to determine the placement of mesh divisions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshFunctions)))
(def MeshPrimitives "MeshPrimitives[mreg, d] gives the graphics primitives for cells of dimension d in the mesh region mreg.\nMeshPrimitives[mreg, cellspec] gives the primitives specified by cellspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshPrimitives)))
(def MeshQualityGoal "MeshQualityGoal is an option for DiscretizeRegion and related functions that specifies a mesh cell quality goal for the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshQualityGoal)))
(def MeshRefinementFunction "MeshRefinementFunction is an option for DiscretizeRegion and related functions that specifies a function to indicate whether mesh cells should be refined or not." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshRefinementFunction)))
(def MeshRegion "MeshRegion[{p1, p2, …}, {mcell1[{i1, …}], mcell2[{j1, …}], …}] yields a mesh with cells mcellj, where coordinates given as integer i are taken to be pi.\nMeshRegion[…, {…, wi[mcelli[…]], …}] yields a mesh with cell properties defined by the symbolic wrapper wi. \nMeshRegion[mreg, opts] yields a mesh from a mesh region mreg with options opts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshRegion)))
(def MeshRegionQ "MeshRegionQ[reg] yields True if the region reg is a valid MeshRegion object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshRegionQ)))
(def MeshShading "MeshShading is an option for plotting functions that gives lists of colors to use for regions between mesh divisions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshShading)))
(def MeshStyle "MeshStyle is an option for Plot3D, DensityPlot, and other plotting functions that specifies the style in which to draw a mesh." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeshStyle)))
(def Message "Message[symbol::tag] prints the message symbol::tag unless it has been switched off. \nMessage[symbol::tag, e1, e2, …] prints a message, inserting the values of the ei as needed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Message)))
(def MessageDialog "MessageDialog[expr] puts up a standard message dialog that displays expr together with an OK button.\nMessageDialog[expr, {lbl1:>act1, lbl2:>act2, …}] includes buttons with labels lbli that evaluate the corresponding acti if clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MessageDialog)))
(def MessageList "MessageList[n] is a global object assigned to be a list of the names of messages generated during the processing of the n ^th input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MessageList)))
(def MessageName "symbol::tag is a name for a message." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MessageName)))
(def MessagePacket "MessagePacket[symbol, string] is a WSTP packet containing a Wolfram Language message identifier of the form symbol::string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MessagePacket)))
(def Messages "Messages[symbol] gives all the messages assigned to a particular symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Messages)))
(def MetaInformation "MetaInformation is an option giving metainformation for Image, CloudObject, and other objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MetaInformation)))
(def MeteorShowerData "MeteorShowerData[entity, property] gives the value of the specified property for the meteor shower entity.\nMeteorShowerData[{entity1, entity2, …}, property] gives a list of property values for the specified meteor shower entities.\nMeteorShowerData[name, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeteorShowerData)))
(def Method "Method is an option for various algorithm-intensive functions that specifies what internal methods they should use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Method)))
(def MexicanHatWavelet "MexicanHatWavelet[] represents the Mexican hat wavelet of width 1.\nMexicanHatWavelet[σ] represents the Mexican hat wavelet of width σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MexicanHatWavelet)))
(def MeyerWavelet "MeyerWavelet[] represents the Meyer wavelet of order 3.\nMeyerWavelet[n] represents the Meyer wavelet of order n evaluated on the equally spaced interval {-10, 10}.\nMeyerWavelet[n, lim] represents the Meyer wavelet of order n evaluated on the equally spaced interval {-lim, lim}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MeyerWavelet)))
(def MidDate "MidDate[datespec] gives the midpoint instant of a date or list of dates datespec.\nMidDate[datespec, gran] gives the midpoint date object with granularity gran. \nMidDate[datespec, gran, x] gives the date that is the fraction x between the beginning and end of datespec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MidDate)))
(def Midpoint "Midpoint[{p1, p2}] gives the midpoint of the line segment connecting the points p1 and p2.\nMidpoint[Line[{p1, p2}]] gives the midpoint of a line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Midpoint)))
(def Min "Min[x1, x2, …] yields the numerically smallest of the xi. \nMin[{x1, x2, …}, {y1, …}, …] yields the smallest element of any of the lists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Min)))
(def MinColorDistance "MinColorDistance is an option for DominantColors that specifies the minimum distance between returned colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinColorDistance)))
(def MinDate "MinDate[{date1, date2, …}] gives the earliest date of the datei.\nMinDate[interval] gives the beginning of the date interval interval.\nMinDate[interval, gran] gives the beginning of interval as specified by granularity gran." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinDate)))
(def MinDetect "MinDetect[image] gives a binary image in which white pixels correspond to constant extended minima in image.\nMinDetect[image, h] finds extended minima where the range of values is not greater than h.\nMinDetect[data, …] applies minima detection to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinDetect)))
(def MinFilter "MinFilter[data, r] filters data by replacing every value by the minimum value in its range-r neighborhood.\nMinFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinFilter)))
(def MinIntervalSize "MinIntervalSize is an option for IntervalSlider that specifies the minimum size of the interval during interactive editing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinIntervalSize)))
(def MinLimit "MinLimit[f, xx^*] gives the min limit xx^*f(x). \nMinLimit[f, {x1x_1^*, …, xnx_n^*}] gives the nested min limit _x1x_1^*⋯ _xnx_n^*f(x1, …, xn). \nMinLimit[f, {x1, …, xn}{x_1^*, …, x_n^*}] gives the multivariate min limit _{x1, …, xn}{x_1^*, …, x_n^*}f(x1, …, xn)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinLimit)))
(def MinMax "MinMax[list] gives the list {Min[list], Max[list]}.\nMinMax[list, δ] gives {Min[list]-δ, Max[list]+δ}.\nMinMax[list, Scaled[s]] gives {Min[list]-δ, Max[list]+δ} where δ=s×(Max[list]-Min[list]).\nMinMax[list, {δmin, δmax}] gives {Min[list]-δmin, Max[list]+δmax}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinMax)))
(def MinPointSeparation "MinPointSeparation is an option for GeoGraphValuePlot that determines when to merge nearby vertices into a single vertex." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinPointSeparation)))
(def MinStableDistribution "MinStableDistribution[μ, σ, ξ] represents a generalized minimum extreme value distribution with location parameter μ, scale parameter σ, and shape parameter ξ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinStableDistribution)))
(def MinValue "MinValue[f, x] gives the minimum value of f with respect to x.\nMinValue[f, {x, y, …}] gives the exact minimum value of f with respect to x, y, …. \nMinValue[{f, cons}, {x, y, …}] gives the minimum value of f subject to the constraints cons. \nMinValue[…, x∈rdom] constrains x to be in the region or domain rdom.\nMinValue[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinValue)))
(def MineralData "MineralData[entity, property] gives the value of the specified property for the mineral entity.\nMineralData[{entity1, entity2, …}, property] gives a list of property values for the specified mineral entities.\nMineralData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MineralData)))
(def MinimalBy "MinimalBy[data, f] returns a list of the elements ei of data for which the value of f is minimal.\nMinimalBy[data, f, n] returns a list of the elements ei of data corresponding to the n smallest f[ei].\nMinimalBy[data, f, n, p] uses the ordering function p for sorting.\nMinimalBy[f] represents an operator form of MinimalBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinimalBy)))
(def MinimalPolynomial "MinimalPolynomial[s, x] gives the minimal polynomial in x for which the algebraic number s is a root. \nMinimalPolynomial[u, x] gives the minimal polynomial of the finite field element u over p.\nMinimalPolynomial[u, x, k] gives the minimal polynomial of u over the p^k-element subfield of the ambient field of u.\nMinimalPolynomial[u, x, emb] gives the minimal polynomial of u relative to the finite field embedding emb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinimalPolynomial)))
(def MinimalStateSpaceModel "MinimalStateSpaceModel[sys] gives the minimal state-space model of the state-space model sys.\nMinimalStateSpaceModel[sys, {z1, …}] specifies the new coordinates zi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinimalStateSpaceModel)))
(def Minimize "Minimize[f, x] minimizes f symbolically with respect to x.\nMinimize[f, {x, y, …}] minimizes f symbolically with respect to x, y, …. \nMinimize[{f, cons}, {x, y, …}] minimizes f symbolically subject to the constraints cons. \nMinimize[…, x∈rdom] constrains x to be in the region or domain rdom.\nMinimize[…, …, dom] constrains variables to the domain dom, typically Reals or Integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Minimize)))
(def MinimumTimeIncrement "MinimumTimeIncrement[tseries] gives the minimum time increment in the time series tseries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinimumTimeIncrement)))
(def MinkowskiQuestionMark "MinkowskiQuestionMark[x] gives Minkowski's question mark function ?(x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinkowskiQuestionMark)))
(def MinorPlanetData "MinorPlanetData[entity, property] gives the value of the specified property for the minor planet entity.\nMinorPlanetData[{entity1, entity2, …}, property] gives a list of property values for the specified minor planet entities.\nMinorPlanetData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinorPlanetData)))
(def Minors "Minors[m] gives the minors of a matrix m. \nMinors[m, k] gives the k ^th minors.\nMinors[m, k, f] applies the function f rather than Det to each of the submatrices picked out." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Minors)))
(def Minus "-x is the arithmetic negation of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Minus)))
(def MinusPlus "MinusPlus[x] displays as ∓x.\nMinusPlus[x, y, …] displays as x∓y∓…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MinusPlus)))
(def Missing "Missing[] represents data that is missing.\nMissing[\"reason\"] specifies a reason for the data's being missing.\nMissing[\"reason\", expr] associates the expression expr with the missing data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Missing)))
(def MissingBehavior "MissingBehavior is an option to Query and related functions that specifies how expressions with head Missing should be interpreted in the context of other functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingBehavior)))
(def MissingDataMethod "MissingDataMethod is an option to TemporalData and other functions that controls how to process missing data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingDataMethod)))
(def MissingDataRules "MissingDataRules is an option for SemanticImport and related functions that specifies what should be considered \"missing\" and what to replace it with." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingDataRules)))
(def MissingFallback "MissingFallback[arg1, arg2, …] gives the first argument argi that is not MissingQ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingFallback)))
(def MissingQ "MissingQ[expr] gives True if expr has head Missing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingQ)))
(def MissingString "MissingString is an option for TextString and related functions that indicates how an expression with head Missing should be converted to a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingString)))
(def MissingStyle "MissingStyle is an option for GeoRegionValuePlot that specifies how locations with missing data should be displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingStyle)))
(def MissingValuePattern "MissingValuePattern is an option for SynthesizeMissingValues and ToTabular to specify which data elements are considered missing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingValuePattern)))
(def MissingValueSynthesis "MissingValueSynthesis is an option for functions such as Classify that specifies how missing values should be replaced." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MissingValueSynthesis)))
(def MittagLefflerE "MittagLefflerE[α, z] gives the Mittag–Leffler function Eα (z).\nMittagLefflerE[α, β, z] gives the generalized Mittag–Leffler function E α, β(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MittagLefflerE)))
(def MixedFractionParts "MixedFractionParts[expr] gives the list {IntegerPart[expr], FractionalPart[expr]}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedFractionParts)))
(def MixedGraphQ "MixedGraphQ[g] yields True if the graph g is a mixed graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedGraphQ)))
(def MixedMagnitude "MixedMagnitude[{val1, val2, …, valn}] represents a mixed-magnitude expression consisting of values val1 through valn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedMagnitude)))
(def MixedRadix "MixedRadix[{b1, …, bn}] represents the list of bases of a numerical system in which different digits have different bases." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedRadix)))
(def MixedRadixQuantity "MixedRadixQuantity[{value1, …, valuen}, {unit1, …, unitn}] yields a single Quantity expression representing the addition of compatible units with magnitude values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedRadixQuantity)))
(def MixedUnit "MixedUnit[{unit1, unit2, …, unitn}] represents a mixed-unit expression consisting of units unit1 through unitn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixedUnit)))
(def MixtureDistribution "MixtureDistribution[{w1, …, wn}, {dist1, …, distn}] represents a mixture distribution whose CDF is given as a sum of the CDFs of the component distributions disti, each with weight wi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MixtureDistribution)))
(def Mod "Mod[m, n] gives the remainder on division of m by n. \nMod[m, n, d] uses an offset d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Mod)))
(def Modal "Modal is an option to functions such as CreateDialog that specifies whether the dialog that is created should be modal to the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Modal)))
(def ModelPredictiveController "ModelPredictiveController[sspec, cost, cons] computes the model predictive controller for the system specification sspec that minimizes the cost function cost and satisfies the constraints cons.\nModelPredictiveController[…, \"prop\"] returns the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ModelPredictiveController)))
(def ModularInverse "ModularInverse[k, n] gives the modular inverse of k modulo n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ModularInverse)))
(def ModularLambda "ModularLambda[τ] gives the modular lambda elliptic function λ (τ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ModularLambda)))
(def Module "Module[{x, y, …}, expr] specifies that occurrences of the symbols x, y, … in expr should be treated as local. \nModule[{x=x0, …}, expr] defines initial values for x, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Module)))
(def Modulus "Modulusn is an option that can be given in certain algebraic functions to specify that integers should be treated modulo n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Modulus)))
(def MoebiusMu "MoebiusMu[n] gives the Möbius function μ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoebiusMu)))
(def Molecule "Molecule[{atom1, atom2, …}, {bond1, bond2, …}] represents a molecule with atoms atomi and bonds bondi.\nMolecule[name] gives the molecule corresponding to the input name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Molecule)))
(def MoleculeAlign "MoleculeAlign[ref, mol] returns a version of mol that is aligned with reference molecule ref.\nMoleculeAlign[ref, mol, {r1m1, r2m2, …}] aligns atoms in mol with index mi to the atoms in ref with index ri.\nMoleculeAlign[ref, mol, patt] uses the molecule pattern patt to find an atom mapping between ref and mol.\nMoleculeAlign[ref, {mol1, mol2, …}, patt] aligns each of the moli with ref.\nMoleculeAlign[ref, mols, patt, prop] aligns the molecules and returns the property prop of the alignment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeAlign)))
(def MoleculeContainsQ "MoleculeContainsQ[molecule, patt] returns True if patt is a substructure of molecule, and False otherwise.\nMoleculeContainsQ[patt] represents an operator form of MoleculeContainsQ that can be applied to a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeContainsQ)))
(def MoleculeDraw "MoleculeDraw[] displays a window with interactive tools for drawing a Molecule, and returns the result.\nMoleculeDraw[mol] displays a window that initially contains the Molecule mol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeDraw)))
(def MoleculeFreeQ "MoleculeFreeQ[molecule, patt] returns True if patt is not a substructure of molecule, and False otherwise.\nMoleculeFreeQ[patt] represents an operator form of MoleculeFreeQ that can be applied to a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeFreeQ)))
(def MoleculeGraph "MoleculeGraph[mol] returns a graph constructed from the molecule mol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeGraph)))
(def MoleculeMatchQ "MoleculeMatchQ[mol, patt] returns True if the Molecule matches the given pattern.\nMoleculeMatchQ[patt] represents an operator form of MoleculeMatchQ that can be applied to a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeMatchQ)))
(def MoleculeMaximumCommonSubstructure "MoleculeMaximumCommonSubstructure[{mol1, mol2, …}] returns a molecule pattern representing the largest common substructure for the input molecules.\nMoleculeMaximumCommonSubstructure[{mol1, mol2, …}, params] uses params to determine equivalence between atoms and bonds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeMaximumCommonSubstructure)))
(def MoleculeMesh "MoleculeMesh[mol] returns a BoundaryMeshRegion object representing the Molecule or BioMolecule mol.\nMoleculeMesh[mol, type] returns a mesh of surface type type.\nMoleculeMesh[mol, {type, param1val1, …}] uses the supplied parameters to create the mesh." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeMesh)))
(def MoleculeModify "MoleculeModify[mol, \"mod\"] gives a molecule or list of molecules derived from the molecule mol by applying the modification \"mod\".\nMoleculeModify[mol, {\"mod\", specs}] gives a molecule or list of molecules derived from the molecule mol by applying the modification \"mod\" with additional specifications specs.\nMoleculeModify[\"mod\"] represents an operator form of MoleculeModify that can be applied to a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeModify)))
(def MoleculeName "MoleculeName[mol] attempts to return the systematic chemical name for the given molecule.\nMoleculeName[mol, \"source\"] uses the given source to find the molecule name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeName)))
(def MoleculePattern "MoleculePattern[{atom1, atom2, … }, { bond1, bond2, … }] represents a molecule pattern with atoms atomi and bonds bondi for use in substructure searching.\nMoleculePattern[\"smarts\"] represents a molecule pattern from the input SMARTS pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculePattern)))
(def MoleculePlot "MoleculePlot[mol] creates a two-dimensional structure diagram of the molecule mol.\nMoleculePlot[mol, patt]  creates a diagram of mol where all atoms and bonds matching the pattern patt are highlighted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculePlot)))
(def MoleculePlot3D "MoleculePlot3D[mol] creates a three-dimensional model of the molecule mol.\nMoleculePlot3D[mol, patt]  creates a model of mol where all atoms and bonds matching the pattern patt are highlighted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculePlot3D)))
(def MoleculeProperty "MoleculeProperty[pname] represents a property identified by pname for use in MoleculeValue.\nMoleculeProperty[{pname, item}] represents a property that applies to item within a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeProperty)))
(def MoleculeQ "MoleculeQ[mol] returns True if mol is a valid Molecule expression, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeQ)))
(def MoleculeRecognize "MoleculeRecognize[image] recognizes a molecule in image and returns it as a Molecule object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeRecognize)))
(def MoleculeSubstructureCount "MoleculeSubstructureCount[mol, patt] gives a count of the number of times patt appears as a substructure in mol.\nMoleculeSubstructureCount[patt] represents an operator form of MoleculeSubstructureCount that can be applied to a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeSubstructureCount)))
(def MoleculeValue "MoleculeValue[molecule, property] gives the value of the specified property for the given molecule.\nMoleculeValue[{molecule1, molecule2, …}, property] gives the list of values for the specified property for each of the moleculei.\nMoleculeValue[molecule, {property1, property2, …}] gives the list of values of the propertyi for the specified molecule.\nMoleculeValue[molecule, {property, item}] gives the value of the specified property for item in molecule.\nMoleculeValue[{molecule1, molecule2, …}, {property1, property2, …}] gives the list of values of the propertyi for each of the moleculei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoleculeValue)))
(def Moment "Moment[data, r] gives the order r  moment μ  r of data.\nMoment[data, {r1, …, rm}] gives the order {r1, …, rm} multivariate moment μ r1, …, rm of data.\nMoment[dist, …] gives the moment of the distribution dist.\nMoment[r] represents the order r  formal moment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Moment)))
(def MomentConvert "MomentConvert[mexpr, form] converts the moment expression mexpr to the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MomentConvert)))
(def MomentEvaluate "MomentEvaluate[mexpr, dist] evaluates formal moments in the moment expression mexpr on the distribution dist.\nMomentEvaluate[mexpr, list] evaluates formal moments and formal sample moments in mexpr on the data list. \nMomentEvaluate[mexpr, dist, list] evaluates formal moments on the distribution dist and formal sample moments on the data list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MomentEvaluate)))
(def MomentGeneratingFunction "MomentGeneratingFunction[dist, t] gives the moment-generating function for the distribution dist as a function of the variable t. \nMomentGeneratingFunction[dist, {t1, t2, …}] gives the moment-generating function for the multivariate distribution dist as a function of the variables t1, t2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MomentGeneratingFunction)))
(def MomentOfInertia "MomentOfInertia[reg, pt, v] computes the moment of inertia for the region reg rotating around an axis through the point pt in direction v.\nMomentOfInertia[reg] computes the moment of inertia matrix for the region reg relative to the center of mass.\nMomentOfInertia[reg, pt] computes the moment of inertia matrix relative to the point pt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MomentOfInertia)))
(def Monday "Monday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Monday)))
(def Monitor "Monitor[expr, mon] generates a temporary monitor cell in which the continually updated current value of mon is displayed during the course of evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Monitor)))
(def MonomialList "MonomialList[poly] gives the list of all monomials in the polynomial poly.\nMonomialList[poly, {x1, x2, …}] gives the list of monomials with respect to the variables xi in poly.\nMonomialList[poly, {x1, x2, …}, order] puts the monomials in the specified order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MonomialList)))
(def MonsterGroupM "MonsterGroupM[] represents the sporadic simple monster group M." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MonsterGroupM)))
(def MoonPhase "MoonPhase[] gives moon phase fraction of illumination for the current date.\nMoonPhase[datespec] gives moon phase fraction of illumination for the specified date.\nMoonPhase[property] gives the property of the moon phase for the current date.\nMoonPhase[datespec, property] gives the property of the moon phase for the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoonPhase)))
(def MoonPhaseDate "MoonPhaseDate[] returns the date of the next new moon.\nMoonPhaseDate[phase] returns the date of the next instance of the given phase of the Moon.\nMoonPhaseDate[date, phase] returns the date for the first instance of the given phase after date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoonPhaseDate)))
(def MoonPosition "MoonPosition[] gives the position of the Moon for the current date and location.\nMoonPosition[datespec] gives the position of the Moon for the specified date.\nMoonPosition[locationspec] gives the position of the Moon for the specified location.\nMoonPosition[locationspec, datespec] gives the position of the Moon for the specified date and location.\nMoonPosition[{{location1, date1}, {location2, date2}, …}] gives the positions of the Moon for all specified locations on the specified dates.\nMoonPosition[locationspec, datespec, func] uses func to determine what to return for extended locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoonPosition)))
(def MorletWavelet "MorletWavelet[] represents a Morlet wavelet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorletWavelet)))
(def MorphologicalBinarize "MorphologicalBinarize[image, {t1, t2}] creates a binary image from image by replacing all values above the upper threshold t2 with 1, also including pixels with intensities above the lower threshold t1 that are connected to the foreground.\nMorphologicalBinarize[image, t] uses t as the upper threshold, automatically choosing a suitable value for the lower threshold.\nMorphologicalBinarize[image] chooses the lower and the upper threshold automatically." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalBinarize)))
(def MorphologicalBranchPoints "MorphologicalBranchPoints[image] gives a version of a binary image image in which white pixels represent the morphological branch points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalBranchPoints)))
(def MorphologicalComponents "MorphologicalComponents[image] gives an array in which each pixel of image is replaced by an integer index representing the connected foreground image component in which the pixel lies.\nMorphologicalComponents[image, t] treats values above t as foreground.\nMorphologicalComponents[video, …] computes connected components in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalComponents)))
(def MorphologicalEulerNumber "MorphologicalEulerNumber[image] computes the morphological Euler number of regions in a binary image.\nMorphologicalEulerNumber[image, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalEulerNumber)))
(def MorphologicalGraph "MorphologicalGraph[image] gives a graph object that represents the connectivity of the morphological branch points and endpoints of the objects in image after applying morphological thinning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalGraph)))
(def MorphologicalPerimeter "MorphologicalPerimeter[image] picks out the morphological perimeter of regions of foreground in image.\nMorphologicalPerimeter[image, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalPerimeter)))
(def MorphologicalTransform "MorphologicalTransform[image, f] applies the function f to the 3×3 neighborhood of each pixel in a binary image image.\nMorphologicalTransform[image, rule] applies a morphological transformation specified by a rule number rule.\nMorphologicalTransform[image, \"name\"] uses a named transformation \"name\".\nMorphologicalTransform[image, transformation, n] applies n iterations of transformation on image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MorphologicalTransform)))
(def MortalityData "MortalityData[spec] gives the values of all properties for the specified demographic.\nMortalityData[spec, property] gives the value of the specified property for the specified demographic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MortalityData)))
(def Most "Most[expr] gives expr with the last element removed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Most)))
(def MountainData "MountainData[entity, property] gives the value of the specified property for the mountain entity.\nMountainData[{entity1, entity2, …}, property] gives a list of property values for the specified mountain entities.\nMountainData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MountainData)))
(def MouseAnnotation "MouseAnnotation[] gives any mouse annotation associated with the expression at the current mouse position." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MouseAnnotation)))
(def MouseAppearance "MouseAppearance[expr, graphic] changes the mouse cursor to appear as graphic when the mouse pointer is in the area where expr is displayed.\nMouseAppearance[expr, graphic, {x, y}] uses the coordinates {x, y} in the graphic as the hotspot for the mouse cursor.\nMouseAppearance[expr, graphic, Scaled[{x, y}]] uses the scaled coordinates {x, y} as the hotspot for the mouse cursor.\nMouseAppearance[expr, \"cursorname\"] uses the named cursor \"cursorname\" as the mouse cursor.\nMouseAppearance[expr, Automatic] reverts to normal mouse cursor behavior." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MouseAppearance)))
(def MousePosition "MousePosition[] gives the current mouse position in the notebook front end. \nMousePosition[\"coords\"] gives the mouse position with respect to the specified coordinate system.\nMousePosition[\"coords\", def] returns def if the mouse is not over an object that defines the specified coordinate system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MousePosition)))
(def Mouseover "Mouseover[expr, over] represents an object that displays as over when the mouse pointer is over it, and as expr otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Mouseover)))
(def MovieData "MovieData[entity, property] gives the value of the specified property for the movie entity.\nMovieData[{entity1, entity2, …}, property] gives a list of property values for the specified movie entities.\nMovieData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MovieData)))
(def MovingAverage "MovingAverage[list, r] gives the moving average of list, computed by averaging runs of r elements.\nMovingAverage[list, {w1, w2, …, wr}] gives the moving average of list, computed with weights wi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MovingAverage)))
(def MovingMap "MovingMap[f, data, w] applies f to size w windows in the specified data.\nMovingMap[f, data, wspec] uses windows specified by wspec.\nMovingMap[f, data, wspec, padding] pads data using padding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MovingMap)))
(def MovingMedian "MovingMedian[list, r] gives the moving median of list, computed using spans of r elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MovingMedian)))
(def MoyalDistribution "MoyalDistribution[μ, σ] represents a Moyal distribution with location parameter μ and scale parameter σ.\nMoyalDistribution[] represents a Moyal distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MoyalDistribution)))
(def MultiaxisArrangement "MultiaxisArrangement is an option to plotting functions that specifies how multiple axes are arranged." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultiaxisArrangement)))
(def Multicolumn "Multicolumn[list, cols] is an object that formats with the elements of list arranged in a grid with the indicated number of columns.\nMulticolumn[list, {rows, Automatic}] formats as a grid with the indicated number of rows.\nMulticolumn[list, {rows, cols}] formats as a grid with the indicated number of rows and columns.\nMulticolumn[list] formats with the elements of list in a roughly square arrangement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Multicolumn)))
(def MultiedgeStyle "MultiedgeStyle is an option for GraphPlot and related functions that specifies how to draw multiple edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultiedgeStyle)))
(def MultigraphQ "MultigraphQ[g] yields True if the graph g is a multigraph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultigraphQ)))
(def Multinomial "Multinomial[n1, n2, …] gives the multinomial coefficient (n1+n2+…)!/(n1! n2! …)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Multinomial)))
(def MultinomialDistribution "MultinomialDistribution[n, {p1, p2, …, pm}] represents a multinomial distribution with n trials and probabilities pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultinomialDistribution)))
(def MultinormalDistribution "MultinormalDistribution[Σ] represents a multivariate normal distribution with zero mean and covariance matrix Σ.\nMultinormalDistribution[μ, Σ] represents a multivariate normal (Gaussian) distribution with mean vector μ and covariance matrix Σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultinormalDistribution)))
(def MultiplicativeOrder "MultiplicativeOrder[k, n] gives the multiplicative order of k modulo n, defined as the smallest integer m such that k^m≡1mod n. \nMultiplicativeOrder[k, n, {r1, r2, …}] gives the generalized multiplicative order of k modulo n, defined as the smallest integer m such that k^m≡ri mod n for some i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultiplicativeOrder)))
(def MultiplySides "MultiplySides[rel, x] multiplies each side of the equation or inequality rel by x.\nMultiplySides[rel1, rel2] multiplies the corresponding sides of two equations or inequalities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultiplySides)))
(def Multiselection "Multiselection is an option to ListPicker that specifies whether multiple values may be selected." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Multiselection)))
(def MultivariateHypergeometricDistribution "MultivariateHypergeometricDistribution[n, {m1, m2, …, mk}] represents a multivariate hypergeometric distribution with n draws without replacement from a collection containing mi objects of type i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultivariateHypergeometricDistribution)))
(def MultivariatePoissonDistribution "MultivariatePoissonDistribution[μ0, {μ1, μ2, …}] represents a multivariate Poisson distribution with mean vector {μ0+μ1, μ0+μ2, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultivariatePoissonDistribution)))
(def MultivariateTDistribution "MultivariateTDistribution[Σ, ν] represents the multivariate Student t distribution with scale matrix Σ and degrees of freedom parameter ν.\nMultivariateTDistribution[μ, Σ, ν] represents the multivariate Student t distribution with location μ, scale matrix Σ, and ν degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote MultivariateTDistribution)))
(def N "N[expr] gives the numerical value of expr. \nN[expr, n] attempts to give a result with n‐digit precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote N)))
(def NArgMax "NArgMax[f, x] gives a position xmax at which f is numerically globally maximized.\nNArgMax[f, {x, y, …}] gives a position {xmax, ymax, …} at which f is numerically globally maximized.\nNArgMax[{f, cons}, {x, y, …}] gives a position at which f is numerically globally maximized subject to the constraints cons. \nNArgMax[…, x∈reg] constrains x to be in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NArgMax)))
(def NArgMin "NArgMin[f, x] gives a position xmin at which f is numerically globally minimized.\nNArgMin[f, {x, y, …}] gives a position {xmin, ymin, …} at which f is numerically globally minimized.\nNArgMin[{f, cons}, {x, y, …}] gives a position at which f is numerically globally minimized subject to the constraints cons. \nNArgMin[…, x∈reg] constrains x to be in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NArgMin)))
(def NBodySimulation "NBodySimulation[law, {state1, …, staten}, t] generates a simulation of the motion of a system of n bodies with initial states statei, governed by the specified potential or force law, over a length of time t.\nNBodySimulation[law, <|body1state1, …, bodynstaten|>, t] generates a simulation of the motion of a system of n bodies with names bodyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NBodySimulation)))
(def NBodySimulationData "NBodySimulationData[data…] represents the result of an n-body simulation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NBodySimulationData)))
(def NCache "NCache[x, xn] represents a numeric cache object for a quantity with exact value x and approximate numerical value xn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NCache)))
(def NCaputoD "NCaputoD[f, {x, α}, x0] gives a numerical approximation to the Caputo fractional derivative (^C)0D_x^αf(x) of order α of the function f at the point x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NCaputoD)))
(def NContourIntegrate "NContourIntegrate[f, z∈cont] gives the numerical integral of f along the contour defined by cont in the complex plane." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NContourIntegrate)))
(def NDEigensystem "NDEigensystem[ℒ[u[x, y, …]], u, {x, y, …}∈Ω, n] gives the n smallest magnitude eigenvalues and eigenfunctions for the linear differential operator ℒ over the region Ω.\nNDEigensystem[{ℒ1[u[x, y, …], v[x, y, …], …], ℒ2[u[x, y, …], v[x, y, …], …], …}, {u, v, …}, {x, y, …}∈Ω, n]  gives eigenvalues and eigenfunctions for the coupled differential operators {op1, op2, …} over the region Ω.\nNDEigensystem[eqns, {u, …}, t, {x, y, …}∈Ω, n] gives the eigenvalues and eigenfunctions in the spatial variables {x, y, …} for solutions u, … of the coupled time-dependent differential equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NDEigensystem)))
(def NDEigenvalues "NDEigenvalues[ℒ[u[x, y, …]], u, {x, y, …}∈Ω, n] gives the n smallest magnitude eigenvalues for the linear differential operator ℒ over the region Ω.\nNDEigenvalues[{ℒ1[u[x, y, …], v[x, y, …], …], ℒ2[u[x, y, …], v[x, y, …], …], …}, {u, v, …}, {x, y, …}∈Ω, n]  gives eigenvalues for the coupled differential operators {op1, op2, …} over the region Ω.\nNDEigenvalues[eqns, {u, …}, t, {x, y, …}∈Ω, n] gives the eigenvalues in the spatial variables {x, y, …} for solutions u, … of the coupled time-dependent differential equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NDEigenvalues)))
(def NDSolve "NDSolve[eqns, u, {x, xmin, xmax}] finds a numerical solution to the ordinary differential equations eqns for the function u with the independent variable x in the range xmin to xmax. \nNDSolve[eqns, u, {x, xmin, xmax}, {y, ymin, ymax}] solves the partial differential equations eqns over a rectangular region.\nNDSolve[eqns, u, {x, y}∈Ω] solves the partial differential equations eqns over the region Ω.\nNDSolve[eqns, u, {t, tmin, tmax}, {x, y}∈Ω] solves the time-dependent partial differential equations eqns over the region Ω.\nNDSolve[eqns, {u1, u2, …}, …] solves for the functions ui." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NDSolve)))
(def NDSolveValue "NDSolveValue[eqns, expr, {x, xmin, xmax}] gives the value of expr with functions determined by a numerical solution to the ordinary differential equations eqns with the independent variable x in the range xmin to xmax. \nNDSolveValue[eqns, expr, {x, xmin, xmax}, {y, ymin, ymax}] solves the partial differential equations eqns over a rectangular region.\nNDSolveValue[eqns, expr, {x, y}∈Ω] solves the partial differential equations eqns over the region Ω.\nNDSolveValue[eqns, u, {t, tmin, tmax}, {x, y}∈Ω] solves the time-dependent partial differential equations eqns over the region Ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NDSolveValue)))
(def NExpectation "NExpectation[expr, xdist] gives the numerical expectation of expr under the assumption that x follows the probability distribution dist.\nNExpectation[expr, {x1, x2, …}dist] gives the numerical expectation of expr under the assumption that {x1, x2, …} follows the multivariate distribution dist. \nNExpectation[expr, {x1dist1, x2dist2, …}] gives the numerical expectation of expr under the assumption that x1, x2, … are independent and follow the distributions dist1, dist2, …. \nNExpectation[exprpred, …] gives the numerical conditional expectation of expr given pred." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NExpectation)))
(def NFractionalD "NFractionalD[f, {x, α}, x0] gives a numerical approximation to the Riemann–Liouville fractional derivative 0D_x^αf(x) of order α of the function f at the point x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NFractionalD)))
(def NHoldAll "NHoldAll is an attribute which specifies that none of the arguments to a function should be affected by N." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NHoldAll)))
(def NHoldFirst "NHoldFirst is an attribute which specifies that the first argument to a function should not be affected by N." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NHoldFirst)))
(def NHoldRest "NHoldRest is an attribute which specifies that all but the first argument to a function should not be affected by N." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NHoldRest)))
(def NIntegrate "NIntegrate[f, {x, xmin, xmax}] gives a numerical approximation to the integral ∫_xmin^xmax f dx. \nNIntegrate[f, {x, xmin, xmax}, {y, ymin, ymax}, …] gives a numerical approximation to the multiple integral ∫_xmin^xmaxd x ∫_ymin^ymaxdy … f.\nNIntegrate[f, {x, y, …}∈reg] integrates over the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NIntegrate)))
(def NLineIntegrate "NLineIntegrate[f, {x, y, …}∈curve] computes the numerical scalar line integral of the function f[x, y, …] over the curve.\nNLineIntegrate[{p, q, …}, {x, y, …}∈curve] computes the numerical vector line integral of the vector function {p[x, y, …], q[x, y, …], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NLineIntegrate)))
(def NMaxValue "NMaxValue[f, x] gives the global maximum value of f with respect to x.\nNMaxValue[f, {x, y, …}] gives the global maximum value of f with respect to x, y, …. \nNMaxValue[{f, cons}, {x, y, …}] gives the global maximum value of f subject to the constraints cons. \nNMaxValue[…, x∈reg] constrains x to be in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NMaxValue)))
(def NMaximize "NMaximize[f, x] searches for a global maximum in f numerically with respect to x.\nNMaximize[f, {x, y, …}] searches for a global maximum in f numerically with respect to x, y, …. \nNMaximize[{f, cons}, {x, y, …}] searches for a global maximum in f numerically subject to the constraints cons. \nNMaximize[…, x∈rdom] constrains x to be in the region or domain rdom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NMaximize)))
(def NMinValue "NMinValue[f, x] gives the global minimum value of f with respect to x.\nNMinValue[f, {x, y, …}] gives the global minimum value of f with respect to x, y, …. \nNMinValue[{f, cons}, {x, y, …}] gives the global minimum value of f subject to the constraints cons.\nNMinValue[…, x∈reg] constrains x to be in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NMinValue)))
(def NMinimize "NMinimize[f, x] searches for a global minimum in f numerically with respect to x.\nNMinimize[f, {x, y, …}] searches for a global minimum in f numerically with respect to x, y, ….\nNMinimize[{f, cons}, {x, y, …}] searches for a global minimum in f numerically subject to the constraints cons. \nNMinimize[…, x∈rdom] constrains x to be in the region or domain rdom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NMinimize)))
(def NProbability "NProbability[pred, xdist] gives the numerical probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution dist. \nNProbability[pred, {x1, x2, …}dist] gives the numerical probability that an event satisfies pred under the assumption that {x1, x2, …} follows the multivariate distribution dist. \nNProbability[pred, {x1dist1, x2dist2, …}] gives the numerical probability that an event satisfies pred under the assumption that x1, x2, … are independent and follow the distributions dist1, dist2, …. \nNProbability[pred1pred2, …] gives the numerical conditional probability of pred1 given pred2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NProbability)))
(def NProduct "NProduct[f, {i, imin, imax}] gives a numerical approximation to the product ∏_i=imin^imaxf.\nNProduct[f, {i, imin, imax, di}] uses a step di in the product." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NProduct)))
(def NRoots "NRoots[lhs==rhs, var] yields a disjunction of equations which represent numerical approximations to the roots of a polynomial equation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NRoots)))
(def NSolve "NSolve[expr, vars] attempts to find numerical approximations to the solutions of the system expr of equations or inequalities for the variables vars. \nNSolve[expr, vars, Reals] finds solutions over the domain of real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NSolve)))
(def NSolveValues "NSolveValues[expr, vars] attempts to find numerical approximations to the values of vars determined by the solutions of the system expr.\nNSolveValues[expr, vars, Reals] finds solutions over the domain of real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NSolveValues)))
(def NSum "NSum[f, {i, imin, imax}] gives a numerical approximation to the sum ∑_i=imin^imaxf.\nNSum[f, {i, imin, imax, di}] uses a step di in the sum." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NSum)))
(def NSurfaceIntegrate "NSurfaceIntegrate[f, {x, y, …}∈surface] computes the numerical scalar surface integral of the function f[x, y, …] over the surface.\nNSurfaceIntegrate[{p, q, …}, {x, y, …}∈surface] computes the numerical vector surface integral of the vector field {p[x, y, …], q[x, y, …], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NSurfaceIntegrate)))
(def NakagamiDistribution "NakagamiDistribution[μ, ω] represents a Nakagami distribution with shape parameter μ and spread parameter ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NakagamiDistribution)))
(def NameQ "NameQ[\"string\"] yields True if there are any symbols whose names match the string pattern given, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NameQ)))
(def Names "Names[\"string\"] gives a list of the names of symbols that match the string. \nNames[patt] gives a list of names matching the arbitrary string pattern patt.\nNames[{patt1, patt2, …}] gives a list of names matching any of the patti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Names)))
(def Nand "Nand[e1, e2, …] is the logical NAND function. It evaluates its arguments in order, giving True immediately if any of them are False, and False if they are all True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Nand)))
(def Nearest "Nearest[{elem1, elem2, …}, x] gives the list of elemi to which x is nearest. \nNearest[{elem1v1, elem2v2, …}, x] gives the vi corresponding to the elemi to which x is nearest. \nNearest[{elem1, elem2, …}{v1, v2, …}, x] gives the same result. \nNearest[{elem1, elem2, …}prop, x] gives the property prop for the elemi to which x is nearest.\nNearest[data, {x1, x2, …}] effectively gives {Nearest[data, x1], Nearest[data, x2], …}.\nNearest[data, x, n] gives the n nearest elemi to x. \nNearest[data, x, {n, r}] gives the n or fewer nearest elemi to x that are within radius r of x.\nNearest[data] generates a NearestFunction[…] that can be applied repeatedly to different x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Nearest)))
(def NearestFunction "NearestFunction[data] represents a function whose values give the elements closest to an element that is supplied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NearestFunction)))
(def NearestMeshCells "NearestMeshCells[mr, pt] gives the indices for the cells to which the point pt is nearest in the mesh region mr.\nNearestMeshCells[mr, pt, n] gives the n nearest cell indices to pt.\nNearestMeshCells[mr, pt, {n, r}] gives the n or fewer nearest cell indices to pt that are within radius r of pt.\nNearestMeshCells[{mr, d}, …] gives the indices for the cells of dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NearestMeshCells)))
(def NearestNeighborG "NearestNeighborG[pdata, r] estimates the nearest neighbor function G(r) at radius r in the point data pdata.\nNearestNeighborG[pproc, r] computes G(r) for the point process pproc.\nNearestNeighborG[bdata, r] computes G(r) for binned data bdata. \nNearestNeighborG[pspec] generates the function G that can be applied repeatedly to different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NearestNeighborG)))
(def NearestNeighborGraph "NearestNeighborGraph[{elem1, elem2, …}] gives a graph with vertices elem1, elem2, … and edges connecting each elemi to its nearest neighbors.\nNearestNeighborGraph[{elem1, elem2, …}, k] gives a graph connecting each elemi to its k nearest neighbors.\nNearestNeighborGraph[{elem1, elem2, …}, {k, r}] gives a graph connecting each elemi to at most k nearest vertices within radius r of elemi.\nNearestNeighborGraph[{elem1, elem2, …}, {All, r}] gives a graph connecting each elemi to all vertices within radius r of elemi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NearestNeighborGraph)))
(def NearestTo "NearestTo[x] is an operator form that yields Nearest[elems, x] when applied to a list elems.\nNearestTo[x, n] is an operator form that yields Nearest[elems, x, n] when applied to a list elems.\nNearestTo[x, {n, r}] is an operator form that yields Nearest[elems, x, {n, r}] when applied to a list elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NearestTo)))
(def NebulaData "NebulaData[entity, property] gives the value of the specified property for the nebula entity.\nNebulaData[{entity1, entity2, …}, property] gives a list of property values for the specified nebula entities.\nNebulaData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NebulaData)))
(def NeedlemanWunschSimilarity "NeedlemanWunschSimilarity[u, v] gives a number representing the Needleman–Wunsch similarity between strings or vectors u and v.\nNeedlemanWunschSimilarity[u, v] gives a number representing the Needleman–Wunsch similarity between strings, vectors or biomolecular sequences u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeedlemanWunschSimilarity)))
(def Needs "Needs[\"context`\"] loads an appropriate file if the specified context is not already in $Packages. \nNeeds[\"context`\"->\"alias`\"] loads the given context and establishes alias as a context alias for that context.\nNeeds[\"context`\", \"file\"] loads file if the specified context is not already in $Packages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Needs)))
(def Negative "Negative[x] gives True if x is a negative number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Negative)))
(def NegativeBinomialDistribution "NegativeBinomialDistribution[n, p] represents a negative binomial distribution with parameters n and p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeBinomialDistribution)))
(def NegativeDefiniteMatrixQ "NegativeDefiniteMatrixQ[m] gives True if m is explicitly negative definite, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeDefiniteMatrixQ)))
(def NegativeIntegers "NegativeIntegers represents the domain of strictly negative integers, as in x∈NegativeIntegers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeIntegers)))
(def NegativeMultinomialDistribution "NegativeMultinomialDistribution[n, p] represents a negative multinomial distribution with parameter n and failure probability vector p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeMultinomialDistribution)))
(def NegativeRationals "NegativeRationals represents the domain of strictly negative rational numbers, as in x∈NegativeRationals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeRationals)))
(def NegativeReals "NegativeReals represents the domain of strictly negative real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeReals)))
(def NegativeSemidefiniteMatrixQ "NegativeSemidefiniteMatrixQ[m] gives True if m is explicitly negative semidefinite, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativeSemidefiniteMatrixQ)))
(def NegativelyOrientedPoints "NegativelyOrientedPoints[{p1, p2, p3, …, pn}] tests whether the sequence of points p1, p2, p3, …, pn is negatively oriented." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NegativelyOrientedPoints)))
(def NeighborhoodData "NeighborhoodData[entity, property] gives the value of the specified property for the neighborhood entity.\nNeighborhoodData[{entity1, entity2, …}, property] gives a list of property values for the specified neighborhood entities.\nNeighborhoodData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeighborhoodData)))
(def NeighborhoodGraph "NeighborhoodGraph[g, v] gives the graph neighborhood of a vertex v in the graph g.\nNeighborhoodGraph[g, {a1, a2, …}] gives the graph neighborhood of the ai that can be vertices, edges, or subgraphs of g.\nNeighborhoodGraph[g, patt] gives the graph neighborhood of the vertices and edges that match the pattern patt.\nNeighborhoodGraph[g, …, d] gives the neighborhood up to distance d.\nNeighborhoodGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeighborhoodGraph)))
(def Nest "Nest[f, expr, n] gives an expression with f applied n times to expr.\nNest[f, n] represents an operator form of Nest that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Nest)))
(def NestGraph "NestGraph[f, expr, n] gives the graph obtained by starting with expr and applying f successively n times.\nNestGraph[f, {expr1, expr2, …}, n] gives the graph obtained by applying f to expr1, expr2, ….\nNestGraph[f, graph, n] gives the graph obtained by applying f to the vertices of graph and extending the graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestGraph)))
(def NestList "NestList[f, expr, n] gives a list of the results of applying f to expr 0 through n times.\nNestList[f, n] represents an operator form of NestList that can be applied to expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestList)))
(def NestTree "NestTree[f, tree] adds children to each leaf of tree, with f[expr] giving the list of data for the new children of a leaf with data expr.\nNestTree[f, tree, n] successively applies f to the data of each leaf up to level n, adding at most n levels to each leaf.\nNestTree[f, tree, n, h] additionally applies h to the data of the new subtrees.\nNestTree[f, expr, …] constructs a tree by nesting f on the tree leaf with data expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestTree)))
(def NestWhile "NestWhile[f, expr, test] starts with expr, then repeatedly applies f until applying test to the result no longer yields True. \nNestWhile[f, expr, test, m] supplies the most recent m results as arguments for test at each step. \nNestWhile[f, expr, test, All] supplies all results so far as arguments for test at each step. \nNestWhile[f, expr, test, m, max] applies f at most max times. \nNestWhile[f, expr, test, m, max, n] applies f an extra n times. \nNestWhile[f, expr, test, m, max, -n] returns the result found when f had been applied n fewer times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestWhile)))
(def NestWhileList "NestWhileList[f, expr, test] generates a list of the results of applying f repeatedly, starting with expr, and continuing until applying test to the result no longer yields True. \nNestWhileList[f, expr, test, m] supplies the most recent m results as arguments for test at each step. \nNestWhileList[f, expr, test, All] supplies all results so far as arguments for test at each step. \nNestWhileList[f, expr, test, m, max] applies f at most max times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestWhileList)))
(def NestedGreaterGreater "NestedGreaterGreater[x, y, …] displays as x⪢y⪢…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestedGreaterGreater)))
(def NestedLessLess "NestedLessLess[x, y, …] displays as x⪡y⪡…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NestedLessLess)))
(def NetAppend "NetAppend[net, layer] appends a layer or a net onto a NetChain, a layer or a NetGraph with one output port.\nNetAppend[net, \"name\"->layer] appends a layer with a given name.\nNetAppend[net, {layer1, layer2, …}] appends several layers or nets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetAppend)))
(def NetArray "NetArray[] represents an array in a net.\nNetArray[\"name\"] uses \"name\" as an identifier to share the array in more than one layer.\nNetArray[prop->value] specifies the property prop for the array.\nNetArray[<|\"Name\"->name, \"Array\"->array, …|>] specifies several properties for the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetArray)))
(def NetArrayLayer "NetArrayLayer[] represents a layer that has no input and produces as output a constant array.\nNetArrayLayer[opts] includes options for the initial value of the array or output size." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetArrayLayer)))
(def NetBidirectionalOperator "NetBidirectionalOperator[net] represents a net that applies net to a sequence and to its reverse, concatenating both results into one output sequence.\nNetBidirectionalOperator[{fnet, bnet}] uses fnet on the normal input and bnet on the reversed input.\nNetBidirectionalOperator[nets, agg] aggregates the two output sequences using the specified aggregation function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetBidirectionalOperator)))
(def NetChain "NetChain[{layer1, layer2, …}] specifies a neural net in which the output of layeri is connected to the input of layer i+1.\nNetChain[name1layer1, name2layer2, …] specifies a net consisting of a chain of explicitly named layers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetChain)))
(def NetDecoder "NetDecoder[\"name\"] represents a decoder that takes a net representation and decodes it into an expression of a given form.\nNetDecoder[{\"name\", …}] represents a decoder with additional parameters specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetDecoder)))
(def NetDelete "NetDelete[net, n] deletes the n ^th layer from a NetChain or NetGraph.\nNetDelete[net, \"name\"] deletes a named layer.\nNetDelete[net, {spec1, spec2, …}] deletes several layers simultaneously.\nNetDelete[graph, NetPort[\"name\"]] deletes an output or state-input port from a NetGraph.\nNetDelete[graph, {NetPort[name1], NetPort[name2], …}] deletes several output or state-input ports simultaneously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetDelete)))
(def NetDrop "NetDrop[chain, n] removes the first n layers from a NetChain.\nNetDrop[chain, -n] removes the last n layers from a NetChain.\nNetDrop[chain, {start, end}] drops the layers between start and end in a NetChain." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetDrop)))
(def NetEncoder "NetEncoder[\"name\"] represents an encoder that takes a given form of input and encodes it as an array for use in a net.\nNetEncoder[{\"name\", …}] represents an encoder with additional parameters specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetEncoder)))
(def NetEvaluationMode "NetEvaluationMode is an option that can be given when applying neural net functions to input data, specifying whether the net should use training-specific behavior." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetEvaluationMode)))
(def NetExternalObject "NetExternalObject[…] represents a net model in an external framework format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetExternalObject)))
(def NetExtract "NetExtract[layer, \"param\"] extracts the value of a parameter for the specified net layer.\nNetExtract[net, lspec] extracts the layer identified by lspec from within the NetGraph or NetChain object net.\nNetExtract[net, {lspec, \"param\"}] extracts the value of the parameter param from the layer identified by lspec in net. \nNetExtract[net, NetArray[spec]] extracts the value of a shared array within a network or layer.\nNetExtract[coder, \"param\"] extracts the value of a parameter for the specified NetEncoder or NetDecoder.\nNetExtract[…, {spec1, spec2, …}] extracts a set of elements, where each speci is a list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetExtract)))
(def NetFlatten "NetFlatten[net] collapses nested NetChain and NetGraph objects within net.\nNetFlatten[net, n] collapses up to nesting level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetFlatten)))
(def NetFoldOperator "NetFoldOperator[net] represents a net in which net is folded over a sequence of inputs, maintaining a recurrent state.\nNetFoldOperator[net, {outiin1, …}] represents a net in which net is folded over its inputs, maintaining a recurrent state by feeding the outi of each step back to the ini of the next step.\nNetFoldOperator[net, feedback, {const1, const2, …}] treats the inputs consti to net as being constant instead of mapped over.\nNetFoldOperator[net, feedback, constants, {out1, …}] returns the sequence of values for the specific outputs outi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetFoldOperator)))
(def NetGANOperator "NetGANOperator[{generator, discriminator}] represents a network to perform generative adversarial network (GAN) training with a generative net generator and a classification net discriminator.\nNetGANOperator[{generator, discriminator}, loss] specifies the loss type to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetGANOperator)))
(def NetGraph "NetGraph[{layer1, layer2, …}, {m1n1, m2n2, …}] specifies a neural net defined by a graph in which the output of layer mi is given as input to layer ni.\nNetGraph[name1layer1, name2layer2, …, {namem1namen1, …}] specifies a net with explicitly named layers.\nNetGraph[layer] converts a layer or a NetChain into an equivalent minimal NetGraph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetGraph)))
(def NetInitialize "NetInitialize[net] gives a net in which all uninitialized learnable parameters in net have been given initial values.\nNetInitialize[net, All] gives a net in which all learnable parameters have been given initial values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetInitialize)))
(def NetInsert "NetInsert[chain, layer, i] inserts a layer into a NetChain before the layer at position i.\nNetInsert[chain, \"name\"->layer, \"pos\"] inserts a named layer into a NetChain before the layer at the given position." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetInsert)))
(def NetInsertSharedArrays "NetInsertSharedArrays[net] converts all ordinary arrays in net into NetSharedArray objects.\nNetInsertSharedArrays[net, \"prefix\"] uses a prefix for the names of all newly shared arrays." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetInsertSharedArrays)))
(def NetJoin "NetJoin[net1, net2, …] connects a series of NetChain or NetGraph objects to form a single NetChain or NetGraph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetJoin)))
(def NetMapOperator "NetMapOperator[net] represents a net in which net is mapped over a sequence of inputs to give a sequence of outputs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetMapOperator)))
(def NetMapThreadOperator "NetMapThreadOperator[mapnet] represents a net in which mapnet is mapped over one or more inputs to give one or more outputs.\nNetMapThreadOperator[mapnet, n] represents a net in which mapnet is mapped over its inputs at depth n.\nNetMapThreadOperator[mapnet, input1n1, input2n2, …] represents a net in which mapnet is mapped over the input named inputi at depth ni, and all other inputs are replicated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetMapThreadOperator)))
(def NetMeasurements "NetMeasurements[net, data, measurement] computes the requested measurement for the net evaluated on data.\nNetMeasurements[net, data, {mspec1, mspec2, …}] computes a list of measurements for the net evaluated on data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetMeasurements)))
(def NetModel "NetModel[\"name\"] obtains a neural net model with the specified name from the Neural Net Repository. \nNetModel[{\"name\", param1->setting1, …}] obtains a specified model from a parameterized family of models.\nNetModel[model, \"prop\"] gives property prop of the model.\nNetModel[] gives a dataset of available pre-trained neural net models." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetModel)))
(def NetNestOperator "NetNestOperator[net, n] represents a net in which net is applied n times to the input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetNestOperator)))
(def NetPairEmbeddingOperator "NetPairEmbeddingOperator[net] represents a net that takes a pair of arrays, embeds them into a vector space using net, and outputs the distance under the embedding.\nNetPairEmbeddingOperator[net, opts] includes options for distance function to use and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetPairEmbeddingOperator)))
(def NetPort "NetPort[\"port\"] represents the specified input or output port for a complete net.\nNetPort[{n, \"port\"}] represents the specified port for layer number n in a NetGraph or similar construct.\nNetPort[{\"name\", \"port\"}] represents the specified port for the layer with the specified name.\nNetPort[spec, port] is treated as equivalent to NetPort[{spec, port}].\nNetPort[{spec1, spec2, …, \"port\"}] permits access to the port of nested layers in a NetGraph or a NetChain.\nNetPort[All, \"States\"] represents the set of all states in a net associated with recurrent layers such as LongShortTermMemoryLayer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetPort)))
(def NetPortGradient "NetPortGradient[\"port\"] represents the gradient of the output of a net with respect to the value of the specified input port. \nNetPortGradient[\"param\"] represents the gradient of the output with respect to a learned parameter named param.\nNetPortGradient[{layer1, layer2, …, \"param\"}] represents the gradient with respect to a parameter at a specific position in a net.\nNetPortGradient[All] represents the gradients with respect to all inputs and parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetPortGradient)))
(def NetPrepend "NetPrepend[net, layer] prepends a layer or a net onto a NetChain, a layer or a NetGraph with one input port.\nNetPrepend[net, \"name\"->layer] appends a layer with a given name.\nNetPrepend[net, {layer1, layer2, …}] prepends several layers or nets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetPrepend)))
(def NetRename "NetRename[net, \"old\"->\"new\"] gives a net in which the name old for a layer is replaced with new.\nNetRename[net, NetPort[\"old\"]NetPort[\"new\"]] gives a net in which the name old for an input or output port is replaced with new.\nNetRename[net, {rule1, rule2, …}] performs all renamings specified by the rulei.\nNetRename[net, f] uses a function f to map existing layer names to new names.\nNetRename[net, rules, levelspec] renames layers and ports nested at level levelspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetRename)))
(def NetReplace "NetReplace[net, pattlayer] gives a net in which all layers matching patt are replaced with layer.\nNetReplace[net, {rule1, rule2, …}] performs all replacements specified by the rulei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetReplace)))
(def NetReplacePart "NetReplacePart[layer, \"array\"->value] replaces an array within a layer, returning a new layer.\nNetReplacePart[net, \"port\"->type] returns a new layer or network in which an input or output port has the specified type.\nNetReplacePart[net, \"input\"->encoder] attaches a NetEncoder[…] to a specified input port.\nNetReplacePart[net, \"output\"->decoder] attaches a NetDecoder[…] to a specified output port.\nNetReplacePart[net, lspeclayer] returns a new NetChain or NetGraph in which the layer identified by lspec has been replaced.\nNetReplacePart[net, NetArray[name]value] sets a shared array within a network or layer to a specified value.\nNetReplacePart[coder, \"param\"->value] returns a new NetEncoder[…] or NetDecoder[…] in which a parameter has been replaced.\nNetReplacePart[net, {lspec, pspec}value] makes a replacement of a part pspec of a layer or coder lspec within a NetGraph or NetChain.\nNetReplacePart[…, {spec1val1, spec2val2, …}] makes multiple simultaneous replacements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetReplacePart)))
(def NetStateObject "NetStateObject[net] creates an object derived from net that represents a neural net with additional stored state information that is updated when the net is applied to data.\nNetStateObject[net, seed] creates an object in which additional stored state information is initialized using seed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetStateObject)))
(def NetTake "NetTake[net, end] takes only those layers up to end in a NetChain or NetGraph.\nNetTake[net, {start, end}] takes only those layers between start and end in a NetChain or NetGraph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetTake)))
(def NetTrain "NetTrain[net, {input1output1, input2output2, …}] trains the specified neural net by giving the inputi as input and minimizing the discrepancy between the outputi and the actual output of the net, using an automatically chosen loss function.\nNetTrain[net, port1{data11, data12, …}, port2{…}, …] trains the specified net by supplying training data at the specified ports.\nNetTrain[net, \"dataset\"] trains on a named dataset from the Wolfram Data Repository.\nNetTrain[net, f] calls the function f during training to produce batches of training data.\nNetTrain[net, data, \"prop\"] gives data associated with a specific property prop of the training session.\nNetTrain[net, data, All] gives a NetTrainResultsObject[…] that summarizes information about the training session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetTrain)))
(def NetTrainResultsObject "NetTrainResultsObject[…] represents an object generated by NetTrain that contains the trained net and other information about the training process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetTrainResultsObject)))
(def NetUnfold "NetUnfold[fnet] produces the elementary net of the folded net fnet, exposing the recurrent states." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetUnfold)))
(def NetworkPacketCapture "NetworkPacketCapture[] creates a temporary interactive interface for capturing information on network packets transmitted or received through all network interfaces on your computer.\nNetworkPacketCapture[service] captures only packets associated with the specified network service.\nNetworkPacketCapture[port] captures only packets associated with the specified port.\nNetworkPacketCapture[spec] captures only packets matching the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetworkPacketCapture)))
(def NetworkPacketRecording "NetworkPacketRecording[t] records information on network packets transmitted or received through all network interfaces on your computer for t seconds.\nNetworkPacketRecording[t, service] records only packets associated with the specified network service.\nNetworkPacketRecording[t, port] records only packets associated with the specified port.\nNetworkPacketRecording[t, {port1, port2, …}] records only packets associated with any of the ports porti.\nNetworkPacketRecording[t, spec] records only packets matching the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetworkPacketRecording)))
(def NetworkPacketTrace "NetworkPacketTrace[expr] evaluates expr and returns information on network packets transmitted or received through all network interfaces on your computer during the time of the evaluation, together with the result of the evaluation. \nNetworkPacketTrace[expr, service] records only packets associated with the specified network service.\nNetworkPacketTrace[expr, port] records only packets associated with the specified port.\nNetworkPacketTrace[expr, {port1, port2, …}] records only packets associated with any of the ports porti.\nNetworkPacketTrace[expr, spec] records only packets matching the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NetworkPacketTrace)))
(def NeumannBoundaryUnitNormal "NeumannBoundaryUnitNormal[{x, y, …}] represents an outward-pointing unit normal vector at the point {x, y, …} on the boundary of a filled region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeumannBoundaryUnitNormal)))
(def NeumannValue "NeumannValue[val, pred] represents a Neumann boundary value val, specified on the part of the boundary of the region given to NDSolve and related functions where pred is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeumannValue)))
(def NevilleThetaC "NevilleThetaC[z, m] gives the Neville theta function ϑc (zm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NevilleThetaC)))
(def NevilleThetaD "NevilleThetaD[z, m] gives the Neville theta function ϑd (zm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NevilleThetaD)))
(def NevilleThetaN "NevilleThetaN[z, m] gives the Neville theta function ϑn (zm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NevilleThetaN)))
(def NevilleThetaS "NevilleThetaS[z, m] gives the Neville theta function ϑs (zm)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NevilleThetaS)))
(def NewMoon "NewMoon[] gives the date of the next new moon.\nNewMoon[date] gives the date of the first new moon after the given date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NewMoon)))
(def NextCell "NextCell[] returns the CellObject corresponding to the cell directly below the currently evaluating cell.\nNextCell[cellobj] starts looking from the given cell.\nNextCell[NotebookSelection[nbobj]] starts looking from the bottommost selected item." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NextCell)))
(def NextDate "NextDate[gran] gives the next occurring date of the specified granularity type gran.\nNextDate[daytype] gives the next day corresponding to the specified daytype.\nNextDate[date, gran] gives the next date of the given granularity relative to the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NextDate)))
(def NextPrime "NextPrime[x] gives the smallest prime above x.\nNextPrime[x, k] gives the k ^th-next prime above x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NextPrime)))
(def NeymanScottPointProcess "NeymanScottPointProcess[μ, λ, rdist, d] represents a Neyman–Scott point process with density function μ, cluster mean λ and radial cluster point distribution rdist in ^d. \nNeymanScottPointProcess[μ, λ, mdist, d] uses a multivariate cluster point distribution mdist in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NeymanScottPointProcess)))
(def NicholsGridLines "NicholsGridLines is an option to NicholsPlot that specifies contours of constant magnitude and constant phase of the closed-loop system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NicholsGridLines)))
(def NicholsPlot "NicholsPlot[lsys] generates a Nichols plot of the transfer function for the system lsys.\nNicholsPlot[lsys, {ωmin, ωmax}] plots for the frequency range ωmin to ωmax.\nNicholsPlot[expr, {ω, ωmin, ωmax}] plots expr using the variable ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NicholsPlot)))
(def NightHemisphere "NightHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth currently in darkness.\nNightHemisphere[datespec] represents the night half of the Earth for the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NightHemisphere)))
(def NoWhitespace "NoWhitespace represents the absence of whitespace between elements in a grammar rules pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoWhitespace)))
(def NominalScale "NominalScale[{cat1, cat2, …, catn}] represents a set of unordered categories cati. \nNominalScale[cat1lab1, …, catnlabn|>] also associates the category cati with the labels labi.\nNominalScale[…, catilabi, …|>] uses labi to represent cati in plots.\nNominalScale[Automatic] automatically determines the categories." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NominalScale)))
(def NominalVariables "NominalVariables is an option for statistical functions such as LinearModelFit that specifies which variables should be treated as having discrete values specified by names." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NominalVariables)))
(def NonCommutativeMultiply "a**b**c is a general associative, but non‐commutative, form of multiplication." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonCommutativeMultiply)))
(def NonConstants "NonConstants is an option for D which gives a list of objects to be taken to depend implicitly on the differentiation variables." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonConstants)))
(def NonNegative "NonNegative[x] gives True if x is a non‐negative number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonNegative)))
(def NonNegativeIntegers "NonNegativeIntegers represents the domain of non-negative integers, as in x∈NonNegativeIntegers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonNegativeIntegers)))
(def NonNegativeRationals "NonNegativeRationals represents the domain of non-negative rational numbers, as in x∈NonNegativeRationals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonNegativeRationals)))
(def NonNegativeReals "NonNegativeReals represents the domain of non-negative real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonNegativeReals)))
(def NonPositive "NonPositive[x] gives True if x is a non‐positive number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonPositive)))
(def NonPositiveIntegers "NonPositiveIntegers represents the domain of non-positive integers, as in x∈NonPositiveIntegers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonPositiveIntegers)))
(def NonPositiveRationals "NonPositiveRationals represents the domain of non-positive rational numbers, as in x∈NonPositiveRationals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonPositiveRationals)))
(def NonPositiveReals "NonPositiveReals represents the domain of non-positive real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonPositiveReals)))
(def NonThreadable "NonThreadable is an attribute that can be assigned to a symbol f to indicate that f and f[arg1, arg2, …] should not combine with other list arguments in arithmetic and many other functions that work with lists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonThreadable)))
(def NoncentralBetaDistribution "NoncentralBetaDistribution[α, β, δ] represents a noncentral beta distribution with shape parameters α, β and noncentrality parameter δ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoncentralBetaDistribution)))
(def NoncentralChiSquareDistribution "NoncentralChiSquareDistribution[ν, λ] represents a noncentral χ^2 distribution with ν degrees of freedom and noncentrality parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoncentralChiSquareDistribution)))
(def NoncentralFRatioDistribution "NoncentralFRatioDistribution[n, m, λ] represents a noncentral F-ratio distribution with n numerator degrees of freedom, m denominator degrees of freedom, and numerator noncentrality parameter λ.\nNoncentralFRatioDistribution[n, m, λ, η] represents a doubly noncentral F-ratio distribution with numerator noncentrality parameter λ and denominator noncentrality parameter η." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoncentralFRatioDistribution)))
(def NoncentralStudentTDistribution "NoncentralStudentTDistribution[ν, δ] represents a noncentral Student t distribution with ν degrees of freedom and noncentrality parameter δ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoncentralStudentTDistribution)))
(def NondimensionalizationTransform "NondimensionalizationTransform[eq, ovars, fvars] nondimensionalizes eq, replacing original variables ovars with the variables fvars.\nNondimensionalizationTransform[eq, ovars, fvars, prop] returns a property associated with the nondimensionalization of eq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NondimensionalizationTransform)))
(def None "None is a setting used for certain options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote None)))
(def NoneMatch "NoneMatch[{e1, e2, …}, form] yields True if ei does not match the pattern form for any of the ei.\nNoneMatch[expr, form, level] tests parts of expr at level level.\nNoneMatch[form] represents an operator form of NoneMatch that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoneMatch)))
(def NoneTrue "NoneTrue[{e1, e2, …}, test] yields True if test[ei] is False for all of the ei.\nNoneTrue[expr, test, level] tests parts of expr at level level.\nNoneTrue[test] represents an operator form of NoneTrue that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NoneTrue)))
(def NonlinearModelFit "NonlinearModelFit[{{x1, y1}, {x2, y2}, …}, form, {β1, …}, x] constructs a nonlinear model with formula form that fits the yi for each xi using the free parameters βi.\nNonlinearModelFit[data, form, params, {x1, …}] constructs a nonlinear model where form depends on the variables xk. \nNonlinearModelFit[data, {form, cons}, params, {x1, …}] constructs a nonlinear model subject to the parameter constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonlinearModelFit)))
(def NonlinearStateSpaceModel "NonlinearStateSpaceModel[{f, g}, x, u] represents the model x'(t)f(x(t), u(t)), y(t)g (x(t), u(t)).\nNonlinearStateSpaceModel[sys] gives a state-space representation corresponding to the systems model sys. \nNonlinearStateSpaceModel[eqns, {{x1, x10}, …}, {{u1, u10}, …}, {g1, …}, t] gives the state-space model of the differential equations eqns with dependent variables xi, input variables ui, operating values x i0 and u i0, outputs gi, and independent variable t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonlinearStateSpaceModel)))
(def NonlocalMeansFilter "NonlocalMeansFilter[image, r] applies a nonlocal means filter to image by comparing a range r neighborhood to its nearby neighborhoods.\nNonlocalMeansFilter[image, r, ns] assumes an additive noise power value ns for comparing neighborhoods.\nNonlocalMeansFilter[image, r, ns, w] compares neighborhoods in a range w window." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NonlocalMeansFilter)))
(def Nor "Nor[e1, e2, …] is the logical NOR function. It evaluates its arguments in order, giving False immediately if any of them are True, and True if they are all False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Nor)))
(def NorlundB "NorlundB[n, a] gives Nørlund polynomials B _n^(a) of degree n in a.\nNorlundB[n, a, x] gives generalized Bernoulli polynomials B _n^(a)(x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NorlundB)))
(def Norm "Norm[expr] gives the norm of a number, vector, or matrix. \nNorm[expr, p] gives the p‐norm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Norm)))
(def NormFunction "NormFunction is an option for functions such as FindFit and NDSolve which gives a function to be minimized in generating results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormFunction)))
(def Normal "Normal[expr] converts expr to a normal expression from a variety of special forms. \nNormal[expr, h] converts objects with head h in expr to normal expressions.\nNormal[expr, {h1, h2, …}] converts objects with head hi to normal expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Normal)))
(def NormalDistribution "NormalDistribution[μ, σ] represents a normal (Gaussian) distribution with mean μ and standard deviation σ.\nNormalDistribution[] represents a normal distribution with zero mean and unit standard deviation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormalDistribution)))
(def NormalMatrixQ "NormalMatrixQ[m] gives True if m is an explicitly normal matrix, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormalMatrixQ)))
(def NormalizationLayer "NormalizationLayer[] represents a trainable net layer that normalizes its input data across the second and subsequent dimensions and applies an independent scaling and bias to each component of the first dimension.\nNormalizationLayer[aggregationlevels] normalizes data across the specified aggregation levels and applies a learned scaling and bias on the remaining levels.\nNormalizationLayer[aggregationlevels, scalinglevels] applies a learned scaling and bias at the specified scaling levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormalizationLayer)))
(def Normalize "Normalize[v] gives the normalized form of a vector v. \nNormalize[z] gives the normalized form of a complex number z.\nNormalize[expr, f] normalizes with respect to the norm function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Normalize)))
(def Normalized "Normalized is an option that determines whether to test if matrix columns or rows are normalized." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Normalized)))
(def NormalizedSquaredEuclideanDistance "NormalizedSquaredEuclideanDistance[u, v] gives the normalized squared Euclidean distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormalizedSquaredEuclideanDistance)))
(def NormalsFunction "NormalsFunction is an option for Plot3D and related functions that specifies a function to apply to determine the effective surface normals at every point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NormalsFunction)))
(def Not "!expr is the logical NOT function. It gives False if expr is True, and True if it is False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Not)))
(def NotCongruent "NotCongruent[x, y, …] displays as x≢y≢…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotCongruent)))
(def NotCupCap "NotCupCap[x, y, …] displays as x≭y≭…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotCupCap)))
(def NotDoubleVerticalBar "NotDoubleVerticalBar[x, y, …] displays as x∦y∦…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotDoubleVerticalBar)))
(def NotElement "NotElement[x, dom] or x∉dom asserts that x is not an element of the domain dom.\nNotElement[x1|…|xn, dom] asserts that none of the xi are elements of dom.\nNotElement[patt, dom] asserts that any expression matching the pattern patt is not an element of the domain dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotElement)))
(def NotEqualTilde "NotEqualTilde[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotEqualTilde)))
(def NotExists "NotExists[x, y] displays as ∄xy." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotExists)))
(def NotGreater "NotGreater[x, y, …] displays as x≯y≯…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreater)))
(def NotGreaterEqual "NotGreaterEqual[x, y, …] displays as x≱y≱…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterEqual)))
(def NotGreaterFullEqual "NotGreaterFullEqual[x, y, …] displays as x≩y≩…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterFullEqual)))
(def NotGreaterGreater "NotGreaterGreater[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterGreater)))
(def NotGreaterLess "NotGreaterLess[x, y, …] displays as x≹y≹…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterLess)))
(def NotGreaterSlantEqual "NotGreaterSlantEqual[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterSlantEqual)))
(def NotGreaterTilde "NotGreaterTilde[x, y, …] displays as x≵y≵…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotGreaterTilde)))
(def NotHumpDownHump "NotHumpDownHump[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotHumpDownHump)))
(def NotHumpEqual "NotHumpEqual[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotHumpEqual)))
(def NotLeftTriangle "NotLeftTriangle[x, y, …] displays as x⋪y⋪…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLeftTriangle)))
(def NotLeftTriangleBar "NotLeftTriangleBar[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLeftTriangleBar)))
(def NotLeftTriangleEqual "NotLeftTriangleEqual[x, y, …] displays as x⋬y⋬…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLeftTriangleEqual)))
(def NotLess "NotLess[x, y, …] displays as x≮y≮…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLess)))
(def NotLessEqual "NotLessEqual[x, y, …] displays as x≰y≰…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessEqual)))
(def NotLessFullEqual "NotLessFullEqual[x, y, …] displays as x≨y≨…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessFullEqual)))
(def NotLessGreater "NotLessGreater[x, y, …] displays as x≸y≸…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessGreater)))
(def NotLessLess "NotLessLess[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessLess)))
(def NotLessSlantEqual "NotLessSlantEqual[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessSlantEqual)))
(def NotLessTilde "NotLessTilde[x, y, …] displays as x≴y≴…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotLessTilde)))
(def NotNestedGreaterGreater "NotNestedGreaterGreater[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotNestedGreaterGreater)))
(def NotNestedLessLess "NotNestedLessLess[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotNestedLessLess)))
(def NotPrecedes "NotPrecedes[x, y, …] displays as x⊀y⊀…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotPrecedes)))
(def NotPrecedesEqual "NotPrecedesEqual[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotPrecedesEqual)))
(def NotPrecedesSlantEqual "NotPrecedesSlantEqual[x, y, …] displays as x⋠y⋠…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotPrecedesSlantEqual)))
(def NotPrecedesTilde "NotPrecedesTilde[x, y, …] displays as x⋨y⋨…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotPrecedesTilde)))
(def NotReverseElement "NotReverseElement[x, y, …] displays as x∌y∌…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotReverseElement)))
(def NotRightTriangle "NotRightTriangle[x, y, …] displays as x⋫y⋫…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotRightTriangle)))
(def NotRightTriangleBar "NotRightTriangleBar[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotRightTriangleBar)))
(def NotRightTriangleEqual "NotRightTriangleEqual[x, y, …] displays as x⋭y⋭…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotRightTriangleEqual)))
(def NotSquareSubset "NotSquareSubset[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSquareSubset)))
(def NotSquareSubsetEqual "NotSquareSubsetEqual[x, y, …] displays as x⋢y⋢…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSquareSubsetEqual)))
(def NotSquareSuperset "NotSquareSuperset[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSquareSuperset)))
(def NotSquareSupersetEqual "NotSquareSupersetEqual[x, y, …] displays as x⋣y⋣…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSquareSupersetEqual)))
(def NotSubset "NotSubset[x, y, …] displays as x⊄y⊄…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSubset)))
(def NotSubsetEqual "NotSubsetEqual[x, y, …] displays as x⊈y⊈…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSubsetEqual)))
(def NotSucceeds "NotSucceeds[x, y, …] displays as x⊁y⊁…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSucceeds)))
(def NotSucceedsEqual "NotSucceedsEqual[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSucceedsEqual)))
(def NotSucceedsSlantEqual "NotSucceedsSlantEqual[x, y, …] displays as x⋡y⋡…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSucceedsSlantEqual)))
(def NotSucceedsTilde "NotSucceedsTilde[x, y, …] displays as x⋩y⋩…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSucceedsTilde)))
(def NotSuperset "NotSuperset[x, y, …] displays as x⊅y⊅…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSuperset)))
(def NotSupersetEqual "NotSupersetEqual[x, y, …] displays as x⊉y⊉…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotSupersetEqual)))
(def NotTilde "NotTilde[x, y, …] displays as x≁y≁…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotTilde)))
(def NotTildeEqual "NotTildeEqual[x, y, …] displays as x≄y≄…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotTildeEqual)))
(def NotTildeFullEqual "NotTildeFullEqual[x, y, …] displays as x≇y≇…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotTildeFullEqual)))
(def NotTildeTilde "NotTildeTilde[x, y, …] displays as x≉y≉…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotTildeTilde)))
(def NotVerticalBar "NotVerticalBar[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotVerticalBar)))
(def Notebook "Notebook[{cell1, cell2, …}] is the low‐level construct that represents a notebook manipulated by the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Notebook)))
(def NotebookApply "NotebookApply[notebook, data] writes data into a notebook at the current selection, replacing the first selection placeholder in data by the current selection, and then setting the current selection to be just after the data written. \nNotebookApply[cell, data] writes data into a notebook in place of the specified cell.\nNotebookApply[notebook, data, sel] writes data into a notebook and then sets the current selection to be as specified by sel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookApply)))
(def NotebookAutoSave "NotebookAutoSave is a notebook option that specifies whether the notebook should automatically be saved after each piece of output generated by evaluation in it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookAutoSave)))
(def NotebookCellData "NotebookCellData[] returns data about the cells in the currently selected notebook.\nNotebookCellData[nbobj] returns data about the cells in the given NotebookObject.\nNotebookCellData[{cellobj1, cellobj2, …}] returns data about each given CellObject.\nNotebookCellData[objs, elems] includes the given elements of data.\nNotebookCellData[objs, elems, fmt] returns data in the indicated format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookCellData)))
(def NotebookClose "NotebookClose[notebook] closes the notebook corresponding to the specified notebook object. \nNotebookClose[] closes the current evaluation notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookClose)))
(def NotebookDelete "NotebookDelete[notebook] deletes the current selection in the notebook corresponding to the specified notebook object. \nNotebookDelete[obj] deletes the given cell or box object.\nNotebookDelete[{obj1, obj2, …}] deletes all specified objects.\nNotebookDelete[] deletes the current selection in the current evaluation notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookDelete)))
(def NotebookDirectory "NotebookDirectory[] gives the directory of the current evaluation notebook. \nNotebookDirectory[nb] gives the directory for the notebook specified by nb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookDirectory)))
(def NotebookDynamicExpression "NotebookDynamicExpression is an option for notebooks that specifies an expression to be dynamically updated whenever that notebook is visible." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookDynamicExpression)))
(def NotebookEvaluate "NotebookEvaluate[notebook] evaluates all the evaluatable cells in notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookEvaluate)))
(def NotebookEventActions "NotebookEventActions is a notebook option that gives a list of actions to perform when specified events occur in connection with the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookEventActions)))
(def NotebookFileName "NotebookFileName[] gives the file name of the current evaluation notebook. \nNotebookFileName[nb] gives the file name for the notebook specified by nb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookFileName)))
(def NotebookFind "NotebookFind[obj, data] sets the current selection in the specified notebook object to be the next occurrence of data. \nNotebookFind[obj, data, Previous] sets the current selection to be the previous occurrence. \nNotebookFind[obj, data, All] sets the current selection to be all occurrences. \nNotebookFind[obj, data, dir, elems] sets the current selection to be the occurrence in the direction dir and searches the elements of cells specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookFind)))
(def NotebookGet "NotebookGet[obj] gets the raw expression corresponding to the notebook represented by the notebook object obj. \nNotebookGet[] gets the raw expression corresponding to the currently selected notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookGet)))
(def NotebookImport "NotebookImport[notebook, style] imports cells with the given cell style from the specified notebook.\nNotebookImport[notebook, styleform] imports cells in the form specified by form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookImport)))
(def NotebookInformation "NotebookInformation[] gives a list of properties of the current evaluation notebook.\nNotebookInformation[notebook] gives a list of properties for the specified notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookInformation)))
(def NotebookLocate "NotebookLocate[\"tag\"] locates all cells with the specified tag in your current input notebook, selecting the cells and scrolling to the position of the first one. \nNotebookLocate[{\"file\", \"tag\"}] if necessary opens the notebook stored in file, then locates cells with the specified tag. \nNotebookLocate[{\"file.wl\", line}] if necessary opens the package file \"file.wl\", then navigates to the line number line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookLocate)))
(def NotebookObject "NotebookObject[id] is an object that represents an open notebook in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookObject)))
(def NotebookOpen "NotebookOpen[\"name\"] opens an existing notebook with the specified name, returning the corresponding notebook object. \nNotebookOpen[\"name\", options] opens a notebook using the options given. \nNotebookOpen[\"\\\"https://\\!\\(\\*StyleBox[\\\"url\\\", \\\"TI\\\"]\\)\\\"\", …] opens a notebook from any accessible URL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookOpen)))
(def NotebookPrint "NotebookPrint[expr] sends a notebook containing expr to your default printer.\nNotebookPrint[notebook] sends the specified notebook to your default printer. \nNotebookPrint[notebook, \"file.ext\"] saves a print‐ready form of the notebook to a file in the format indicated by the file extension ext. \nNotebookPrint[] sends the current evaluation notebook to your default printer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookPrint)))
(def NotebookPut "NotebookPut[expr] creates a notebook corresponding to expr and makes it the currently selected notebook in the front end. \nNotebookPut[] creates a new empty notebook.\nNotebookPut[expr, obj] replaces the notebook represented by the notebook object obj with one corresponding to expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookPut)))
(def NotebookRead "NotebookRead[notebook] gives the expression corresponding to the current selection in the specified notebook object. \nNotebookRead[obj] gives the expression corresponding to the given cell or box object.\nNotebookRead[{obj1, obj2, …}] gives a list of expressions corresponding to the obji." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookRead)))
(def NotebookSave "NotebookSave[notebook] saves the current version of the specified notebook. \nNotebookSave[notebook, \"file\"] saves the notebook in the specified file. \nNotebookSave[] saves the current version of the current evaluation notebook in a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookSave)))
(def NotebookSelection "NotebookSelection[] represents the current selection in the current evaluation notebook in the front end.\nNotebookSelection[nb] represents the current selection associated with the open notebook nb." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookSelection)))
(def NotebookTemplate "NotebookTemplate[nb] yields a TemplateObject that represents a notebook template to be applied using functions like GenerateDocument and FileTemplateApply." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookTemplate)))
(def NotebookWrite "NotebookWrite[notebook, data] writes data into a notebook at the current selection, setting the current selection to be just after the data written. \nNotebookWrite[obj, data] replaces the given cell or box object instead of the current selection.\nNotebookWrite[obj, data, sel] writes data into a notebook, setting the current selection to be as specified by sel. \nNotebookWrite[NotebookLocationSpecifier[obj, location], data, sel] writes data into the specified location relative to obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebookWrite)))
(def Notebooks "Notebooks[] gives a list of notebooks currently open in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Notebooks)))
(def NotebooksMenu "NotebooksMenu is a global option that specifies which recently opened notebooks are listed under the File menu." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotebooksMenu)))
(def Nothing "Nothing represents an element of a list that will automatically be removed. \nNothing[…] gives Nothing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Nothing)))
(def NotificationFunction "NotificationFunction is an option that specifies how notifications should be sent from background tasks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NotificationFunction)))
(def Now "Now gives a DateObject representing the current moment in time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Now)))
(def NuclearExplosionData "NuclearExplosionData[entity, property] gives the value of the specified property for the nuclear explosion entity.\nNuclearExplosionData[{entity1, entity2, …}, property] gives a list of property values for the specified nuclear explosion entities.\nNuclearExplosionData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NuclearExplosionData)))
(def NuclearReactorData "NuclearReactorData[entity, property] gives the value of the specified property for the nuclear reactor entity.\nNuclearReactorData[{entity1, entity2, …}, property] gives a list of property values for the specified nuclear reactor entities.\nNuclearReactorData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NuclearReactorData)))
(def Null "Null is a symbol used to indicate the absence of an expression or a result. When it appears as a complete output expression, no output is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Null)))
(def NullRawPointerQ "NullRawPointerQ[ptr] gives True if ptr is a null pointer, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NullRawPointerQ)))
(def NullRecords "NullRecords is an option for Read and related functions which specifies whether null records should be taken to exist between repeated record separators." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NullRecords)))
(def NullSpace "NullSpace[m] gives a list of vectors that forms a basis for the null space of the matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NullSpace)))
(def NullWords "NullWords is an option for Read and related functions which specifies whether null words should be taken to exist between repeated word separators." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NullWords)))
(def Number "Number represents an exact integer or an approximate real number in Read." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Number)))
(def NumberCompose "NumberCompose[{c1, …, cn}, {u1, …, un}] returns the quantity c1 u1+…+cn un." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberCompose)))
(def NumberDecompose "NumberDecompose[x, {u1, …, un}] returns a list of coefficients {c1, …, cn} of a decomposition of the number x in the basis {u1, …, un}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberDecompose)))
(def NumberDigit "NumberDigit[x, n] returns the digit corresponding to 10^n in the real-valued number x.\nNumberDigit[x, n, b] returns the digit corresponding to b ^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberDigit)))
(def NumberExpand "NumberExpand[x] gives a list of the decimal digits of x multiplied by their corresponding powers of 10. \nNumberExpand[x, b] expands x in base b.\nNumberExpand[x, b, len] gives a list of length len." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberExpand)))
(def NumberFieldClassNumber "NumberFieldClassNumber[θ] gives the class number for the algebraic number field [θ] generated by θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldClassNumber)))
(def NumberFieldDiscriminant "NumberFieldDiscriminant[a] gives the discriminant of the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldDiscriminant)))
(def NumberFieldFundamentalUnits "NumberFieldFundamentalUnits[a] gives a list of fundamental units for the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldFundamentalUnits)))
(def NumberFieldIntegralBasis "NumberFieldIntegralBasis[a] gives an integral basis for the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldIntegralBasis)))
(def NumberFieldNormRepresentatives "NumberFieldNormRepresentatives[a, m] gives a list of representatives of classes of algebraic integers of norm ±m in the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldNormRepresentatives)))
(def NumberFieldRegulator "NumberFieldRegulator[a] gives the regulator of the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldRegulator)))
(def NumberFieldRootsOfUnity "NumberFieldRootsOfUnity[a] gives the roots of unity for the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldRootsOfUnity)))
(def NumberFieldSignature "NumberFieldSignature[a] gives the signature of the field [a] generated by the algebraic number a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFieldSignature)))
(def NumberForm "NumberForm[expr, n] prints with approximate real numbers in expr given to n‐digit precision. \nNumberForm[expr, {n, f}] prints with approximate real numbers having n digits, with f digits to the right of the decimal point.\nNumberForm[expr] prints using the default options of NumberForm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberForm)))
(def NumberFormat "NumberFormat is an option for NumberForm and related functions that specifies how the mantissa, base, and exponent should be assembled into a final print form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberFormat)))
(def NumberLinePlot "NumberLinePlot[{v1, v2, …}] plots the values vi on a number line.\nNumberLinePlot[pred, x] plots a number line illustrating the region pred.\nNumberLinePlot[pred, {x, xmin, xmax}] plots the number to extend over the interval from xmin to xmax.\nNumberLinePlot[{spec1, spec2, …}, …] plots several number lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberLinePlot)))
(def NumberMarks "NumberMarks is an option for InputForm and related functions that specifies whether ` marks should be included in the printed forms of approximate numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberMarks)))
(def NumberMultiplier "NumberMultiplier is an option for NumberForm and related functions which gives the string to use as a multiplication sign in scientific notation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberMultiplier)))
(def NumberPadding "NumberPadding is an option for NumberForm and related functions which gives strings to use as padding on the left‐ and right‐hand sides of numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberPadding)))
(def NumberPoint "NumberPoint is an option for NumberForm and related functions that gives the string to use as a decimal point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberPoint)))
(def NumberQ "NumberQ[expr] gives True if expr is a number, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberQ)))
(def NumberSeparator "NumberSeparator is an option for NumberForm and related functions that gives the string to insert at breaks between digits." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberSeparator)))
(def NumberSigns "NumberSigns is an option for NumberForm and related functions which gives strings to use as signs for negative and positive numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberSigns)))
(def NumberString "NumberString represents the characters of a number in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumberString)))
(def Numerator "Numerator[expr] gives the numerator of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Numerator)))
(def NumeratorDenominator "NumeratorDenominator[expr] gives the list {Numerator[expr], Denominator[expr]} of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumeratorDenominator)))
(def NumericArray "NumericArray[array, type] creates a numeric array of the specified type.\nNumericArray[array, type, method] uses method to convert numbers into type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericArray)))
(def NumericArrayQ "NumericArrayQ[expr] gives True if expr is a valid NumericArray object, and False otherwise.\nNumericArrayQ[expr, tpatt] requires additionally that NumericArrayType[expr] match the pattern tpatt.\nNumericArrayQ[expr, tpatt, dpatt] requires additionally that ArrayDepth[expr] match the pattern dpatt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericArrayQ)))
(def NumericArrayType "NumericArrayType[array] gives the underlying type of values used for each element in the NumericArray object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericArrayType)))
(def NumericFunction "NumericFunction is an attribute that can be assigned to a symbol f to indicate that f[arg1, arg2, …] should be considered a numeric quantity whenever all the argi are numeric quantities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericFunction)))
(def NumericQ "NumericQ[expr] gives True if expr is a numeric quantity, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericQ)))
(def NumericalOrder "NumericalOrder[e1, e2] gives 1 if e1<e2, -1 if e1>e2, 0 if e1 and e2 are numerically the same, and orders by type or using canonical order if e1 and e2 are not numerically comparable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericalOrder)))
(def NumericalSort "NumericalSort[list] sorts the elements of list into numerical order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NumericalSort)))
(def NuttallWindow "NuttallWindow[x] represents a Nuttall window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NuttallWindow)))
(def NyquistGridLines "NyquistGridLines is an option to NyquistPlot that specifies contours of constant magnitude and phase of a closed-loop system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NyquistGridLines)))
(def NyquistPlot "NyquistPlot[lsys] generates a Nyquist plot of the transfer function for the system lsys.\nNyquistPlot[lsys, {ωmin, ωmax}] plots for the frequency range ωmin to ωmax.\nNyquistPlot[expr, {ω, ωmin, ωmax}] plots expr using the variable ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote NyquistPlot)))
(def O "O[x]^n represents a term of order x^n. \nO[x]^n is generated to represent omitted higher‐order terms in power series. \nO[x, x0]^n represents a term of order (x-x0)^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote O)))
(def ONanGroupON "ONanGroupON[] represents the sporadic simple O'Nan group O'N." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ONanGroupON)))
(def ObjectTrackingData "ObjectTrackingData[…] is an object representing a list of tracked bounding boxes or other objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ObjectTrackingData)))
(def ObservabilityGramian "ObservabilityGramian[ssm] gives the observability Gramian of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ObservabilityGramian)))
(def ObservabilityMatrix "ObservabilityMatrix[ssm] gives the observability matrix of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ObservabilityMatrix)))
(def ObservableDecomposition "ObservableDecomposition[sys] yields the observable subsystem of the system sys.\nObservableDecomposition[sys, {z1, …}] specifies the new coordinates zi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ObservableDecomposition)))
(def ObservableModelQ "ObservableModelQ[sys] gives True if the system sys is observable, and False otherwise.\nObservableModelQ[{sys, sub}] gives True if the subsystem sub is observable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ObservableModelQ)))
(def OceanData "OceanData[entity, property] gives the value of the specified property for the ocean entity.\nOceanData[{entity1, entity2, …}, property] gives a list of property values for the specified ocean entities.\nOceanData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OceanData)))
(def Octahedron "Octahedron[] represents a regular octahedron centered at the origin with unit edge length.\nOctahedron[l] represents an octahedron with edge length l.\nOctahedron[{θ, ϕ}, …] represents an octahedron rotated by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nOctahedron[{x, y, z}, …] represents an octahedron centered at {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Octahedron)))
(def OddQ "OddQ[expr] gives True if expr is an odd integer, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OddQ)))
(def Off "Off[symbol::tag] switches off a message, so that it is no longer printed. \nOff[\"name\"] switches off a named group of messages.\nOff[s] switches off tracing messages associated with the symbol s. \nOff[m1, m2, …] switches off several messages or message groups." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Off)))
(def Offset "Offset[{dx, dy}, position] gives the position of a graphical object obtained by starting at the specified position and then moving by absolute offset {dx, dy}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Offset)))
(def On "On[symbol::tag] switches on a message, so that it can be printed. \nOn[\"name\"] switches on a named group of messages.\nOn[s] switches on tracing for the symbol s. \nOn[m1, m2, …] switches on several messages or message groups." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote On)))
(def Once "Once[expr] evaluates expr once in each Wolfram Language session, always returning the result from the first evaluation.\nOnce[expr, loc] evaluates expr once and caches the result in persistence location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Once)))
(def OneIdentity "OneIdentity is an attribute that can be assigned to a symbol f to indicate that f[x], f[f[x]], etc. are all equivalent to x for the purpose of pattern matching." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OneIdentity)))
(def Opacity "Opacity[a] is a graphics directive that specifies that graphical objects that follow are to be displayed, if possible, with opacity a. \nOpacity[a, color] uses the specified color with opacity a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Opacity)))
(def OpacityFunction "OpacityFunction is an option for graphics functions that specifies a function to apply to determine opacity of elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpacityFunction)))
(def OpacityFunctionScaling "OpacityFunctionScaling is an option to visualization functions such as DensityPlot3D that specifies whether arguments supplied to OpacityFunction should be scaled to lie between 0 and 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpacityFunctionScaling)))
(def OpaqueRawPointer "OpaqueRawPointer[addr] represents an untyped pointer to the memory address addr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpaqueRawPointer)))
(def OpenAppend "OpenAppend[\"file\"] opens a file to append output to it, and returns an OutputStream object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpenAppend)))
(def OpenRead "OpenRead[\"file\"] opens a file to read data from, and returns an InputStream object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpenRead)))
(def OpenWrite "OpenWrite[\"file\"] opens a file to write output to it, and returns an OutputStream object. \nOpenWrite[] opens a new file in the default area for temporary files on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpenWrite)))
(def Opener "Opener[x] represents an opener with setting x, displayed as  when x is True and  when x is False. \nOpener[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the opener is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Opener)))
(def OpenerView "OpenerView[{expr1, expr2}] represents an object which displays as an opener, together with expr1 if the opener is closed, and both expr1 and expr2 if it is open.\nOpenerView[{expr1, expr2}, state] specifies the state of the opener, with False being closed, and True being open." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OpenerView)))
(def Opening "Opening[image, ker] gives the morphological opening of image with respect to the structuring element ker.\nOpening[image, r] gives the opening with respect to a range-r square.\nOpening[data, …] applies opening to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Opening)))
(def Operate "Operate[p, f[x, y, …]] gives p[f][x, y, …]. \nOperate[p, expr, n] applies p at level n in the head of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Operate)))
(def OperatingSystem "OperatingSystem is an option for file and related operations that specifies the type of operating system to use to determine file name and other conventions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OperatingSystem)))
(def OperationDeclaration "OperationDeclaration[type, op, typedfun] declares a typed function to be used for the operation op of type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OperationDeclaration)))
(def OperatorApplied "OperatorApplied[f, n] represents an operator form of the function f of n arguments so that OperatorApplied[f, n][x1]…[xn] is equivalent to f[x1, …, xn].\nOperatorApplied[f] represents an operator form of the function f of two arguments so that OperatorApplied[f][y][x] is equivalent to f[x, y].\nOperatorApplied[f, {i1, …, in}] represents an operator form of the function f of n arguments so that OperatorApplied[f, {i1, …, in}][x1]…[xn] is equivalent to f[x i1, …, x in].\nOperatorApplied[f, k{i1, …, in}] represents an operator form that takes k arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OperatorApplied)))
(def OptimumFlowData "OptimumFlowData[…] represents flow data such as generated by FindMaximumFlow, FindMinimumCostFlow, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OptimumFlowData)))
(def OptionValue "OptionValue[name] gives the value of name in options matched by OptionsPattern. \nOptionValue[f, name] gives the value of name for options associated with the head f. \nOptionValue[f, opts, name] extracts option values from the explicit list of rules opts.\nOptionValue[…, {name1, name2, …}] extracts several option values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OptionValue)))
(def Optional "patt:def or Optional[patt, def] is a pattern object that represents an expression of the form patt, which, if omitted, should be replaced by the default value def." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Optional)))
(def OptionalElement "OptionalElement[patt] is a grammar rules pattern object that represents 0 or 1 instances of patt.\nOptionalElement[patt, default] uses default if the element is not present." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OptionalElement)))
(def Options "Options[symbol] or Options[\"symbol\"] gives the list of default options assigned to a symbol.\nOptions[expr] gives the options explicitly specified in a particular expression such as a graphics object.\nOptions[stream] gives options associated with a particular stream.\nOptions[object] gives options associated with an external object such as an NotebookObject or CloudObject.\nOptions[obj, name] gives the setting for the option name.\nOptions[obj, {name1, name2, …}] gives a list of the settings for the options namei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Options)))
(def OptionsPattern "OptionsPattern[] is a pattern object that represents a collection of options given as rules, where the values of the options can be accessed using OptionValue.\nOptionsPattern[f] takes default option values from Options[f].\nOptionsPattern[{opt1val1, opt2val2, …}] uses an explicit list of default option values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OptionsPattern)))
(def Or "e1||e2||… is the logical OR function. It evaluates its arguments in order, giving True immediately if any of them are True, and False if they are all False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Or)))
(def Orange "Orange represents the color orange in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Orange)))
(def Order "Order[expr1, expr2] gives 1 if expr1 is before expr2 in canonical order, and -1 if expr1 is after expr2 in canonical order. It gives 0 if expr1 is identical to expr2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Order)))
(def OrderDistribution "OrderDistribution[{dist, n}, k] represents the k ^th-order statistics distribution for n observations from the distribution dist.\nOrderDistribution[{dist, n}, {k1, k2, …}] represents the joint (k1, k2, …)^th-order statistics distribution from n observations from the distribution dist. \nOrderDistribution[{dist1, …, distn}, …] represents the order statistics distribution for independent distributions disti.\nOrderDistribution[mdist, …] represents the order statistics distribution for multivariate distribution mdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrderDistribution)))
(def OrderedQ "OrderedQ[h[e1, e2, …]] gives True if the ei are in canonical order, and False otherwise.\nOrderedQ[h[e1, e2, …], p] uses the ordering function p to determine whether each pair of elements ei, e i+1 is in order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrderedQ)))
(def Ordering "Ordering[list] gives the positions in list at which each successive element of Sort[list] appears. \nOrdering[list, n] gives the positions in list at which the first n elements of Sort[list] appear. \nOrdering[list, -n] gives the positions of the last n elements of Sort[list]. \nOrdering[list, n, p] gives positions in list of elements of Sort[list, p]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ordering)))
(def OrderingBy "OrderingBy[list, f] gives the positions in list at which each successive element of SortBy[list, f] appears.\nOrderingBy[list, f, n] gives the positions in list at which the first n elements of SortBy[list, f] appear.\nOrderingBy[list, f, -n] gives the positions of the last n elements of SortBy[list, f].\nOrderingBy[list, f, n, p] gives positions in list of elements of SortBy[list, f, p].\nOrderingBy[f] represents an operator form of OrderingBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrderingBy)))
(def OrderingLayer "OrderingLayer[] represents a net layer that effectively applies Ordering to its input. \nOrderingLayer[n] gives the first n elements in the ordering of its input.\nOrderingLayer[-n] gives the last n elements in the ordering of its input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrderingLayer)))
(def Orderless "Orderless is an attribute that can be assigned to a symbol f to indicate that the elements ei in expressions of the form f[e1, e2, …] should automatically be sorted into canonical order. This property is accounted for in pattern matching." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Orderless)))
(def OrderlessPatternSequence "OrderlessPatternSequence[p1, p2, …] is a pattern object that represents a sequence of arguments matching p1, p2, … in any order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrderlessPatternSequence)))
(def OrdinalScale "OrdinalScale[{cat1, cat2, …, catn}] represents a set of ordered categories cati with order cat1<cat2<…<catn.\nOrdinalScale[{cat1, …, catn}, {val1, …, valn}] associates the category cati with the numeric value vali.\nOrdinalScale[cat1val1, …, catnvaln|>] also associates the category cati with the numeric value vali.\nOrdinalScale[{cat1, …, catn}, vals, {lab1, …, labn}] displays the category cati as the corresponding labi when used as a label in plots etc.\nOrdinalScale[…, catilabi, …|>] uses labi to represent cati in plots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrdinalScale)))
(def OrnsteinUhlenbeckProcess "OrnsteinUhlenbeckProcess[μ, σ, θ] represents a stationary Ornstein–Uhlenbeck process with long-term mean μ, volatility σ, and mean reversion speed θ. \nOrnsteinUhlenbeckProcess[μ, σ, θ, x0] represents an Ornstein–Uhlenbeck process with initial condition x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrnsteinUhlenbeckProcess)))
(def OrthogonalMatrix "OrthogonalMatrix[omat] converts the orthogonal matrix omat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrthogonalMatrix)))
(def OrthogonalMatrixQ "OrthogonalMatrixQ[m] gives True if m is an explicitly orthogonal matrix, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OrthogonalMatrixQ)))
(def Orthogonalize "Orthogonalize[{v1, v2, …}] gives an orthonormal basis found by orthogonalizing the vectors vi.\nOrthogonalize[{e1, e2, …}, f] gives an orthonormal basis found by orthogonalizing the elements ei with respect to the inner product function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Orthogonalize)))
(def Out "% n or Out[n] is a global object that is assigned to be the value produced on the n ^th output line. \n% gives the last result generated. \n%% gives the result before last. %%… % (k times) gives the k ^th previous result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Out)))
(def Outer "Outer[f, list1, list2, …] gives the generalized outer product of the listi, forming all possible combinations of the lowest‐level elements in each of them, and feeding them as arguments to f. \nOuter[f, list1, list2, …, n] treats as separate elements only sublists at level n in the listi. \nOuter[f, list1, list2, …, n1, n2, …] treats as separate elements only sublists at level ni in the corresponding listi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Outer)))
(def OuterPolygon "OuterPolygon[poly] gives the outer polygon of the polygon poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OuterPolygon)))
(def OuterPolyhedron "OuterPolyhedron[poly] gives the outer polyhedron of the polyhedron poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OuterPolyhedron)))
(def OutputControllabilityMatrix "OutputControllabilityMatrix[ssm] gives the output controllability matrix of the state-space model ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputControllabilityMatrix)))
(def OutputControllableModelQ "OutputControllableModelQ[ssm] gives True if the state-space model ssm is output controllable, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputControllableModelQ)))
(def OutputForm "OutputForm[expr] prints as a two-dimensional representation of expr using only keyboard characters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputForm)))
(def OutputNamePacket "OutputNamePacket[string] is a WSTP packet that contains in string the name assigned to the next output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputNamePacket)))
(def OutputPorts "OutputPorts is an option to specify the number, names or shapes of output ports for some neural net layers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputPorts)))
(def OutputResponse "OutputResponse[sys, u[t], {t, tmin, tmax}] gives the numeric output response of systems model sys to the input u[t] for tmin≤t≤tmax.\nOutputResponse[sys, {u[0], u[1], …}] gives the output response of the discrete-time system sys to the input sequence u[i].\nOutputResponse[sys, u[t], t] gives the symbolic output response of system sys to the input u[t] as a function of time t.\nOutputResponse[sys, {u1[t], …, um[t]}, …] gives the output response for multiple inputs ui[t]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputResponse)))
(def OutputSizeLimit "OutputSizeLimit is an option for notebooks that specifies the maximum size in bytes of expressions that will automatically be output in their entirety." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputSizeLimit)))
(def OutputStream "OutputStream[\"name\", n] is an object that represents an output stream for functions such as Write." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OutputStream)))
(def OverBar "OverBar[expr] displays with a bar over expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverBar)))
(def OverDot "OverDot[expr] displays with a dot over expr.\nOverDot[expr, n] prints with n dots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverDot)))
(def OverHat "OverHat[expr] displays with a hat over expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverHat)))
(def OverTilde "OverTilde[expr] displays with a tilde over expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverTilde)))
(def OverVector "OverVector[expr] displays with a right vector over expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverVector)))
(def Overflow "Overflow[] represents a number too large to represent explicitly on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Overflow)))
(def Overlaps "Overlaps is an option to string and sequence functions that specifies how to treat overlapping substrings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Overlaps)))
(def Overlay "Overlay[{expr1, expr2, …}] displays as an overlay of all the expri.\nOverlay[{expr1, expr2, …}, {i, j, …}] displays as an overlay of expri, exprj, ….\nOverlay[{expr1, expr2, …}, {i, j, …}, s] allows selections to be made and controls to be clicked in exprs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Overlay)))
(def OverlayVideo "OverlayVideo[background, o] gives the result of overlaying o onto a background video or image background. \nOverlayVideo[background, {o1, o2, …}] gives the result of overlaying o1, o2, …. \nOverlayVideo[background, {interval1o1, …}] overlays each oi during the time interval intervali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverlayVideo)))
(def Overscript "Overscript[x, y] is an object that formats as Overscript[x, y]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Overscript)))
(def OverscriptBox "OverscriptBox[x, y] is the low‐level box representation for Overscript[x, y] in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverscriptBox)))
(def OverscriptBoxOptions "OverscriptBoxOptions is an option that specifies the style and display of OverscriptBox constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverscriptBoxOptions)))
(def OverwriteTarget "OverwriteTarget is an option for functions like CopyFile that specifies whether to overwrite if target files already exist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OverwriteTarget)))
(def OwenT "OwenT[x, a] gives Owen's T function T (x, a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OwenT)))
(def OwnValues "OwnValues[x] gives a list of transformation rules corresponding to all ownvalues defined for the symbol x.\nOwnValues[\"symbol\"] gives a list of transformation rules corresponding to all ownvalues defined for the symbol named \"symbol\" if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote OwnValues)))
(def PDF "PDF[dist, x] gives the probability density function for the distribution dist evaluated at x.\nPDF[dist, {x1, x2, …}] gives the multivariate probability density function for a distribution dist evaluated at {x1, x2, …}.\nPDF[dist] gives the PDF as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PDF)))
(def PERTDistribution "PERTDistribution[{min, max}, c] represents a PERT distribution with range min to max and mode at c.\nPERTDistribution[{min, max}, c, λ] represents a modified PERT distribution with shape parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PERTDistribution)))
(def PIDDerivativeFilter "PIDDerivativeFilter is an option to PIDTune that controls the filtering used for derivative terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PIDDerivativeFilter)))
(def PIDFeedforward "PIDFeedforward is an option to PIDTune that controls the reference weights used for the feedforward filter." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PIDFeedforward)))
(def PIDTune "PIDTune[sys] gives a feedback PID controller for the system sys. \nPIDTune[sys, \"carch\"] gives a controller of architecture \"carch\" (\"P\", \"PI\", \"PID\", etc). \nPIDTune[sys, {\"carch\", \"trule\"}] gives a controller using the tuning rule \"trule\". \nPIDTune[sys, …, \"prop\"] returns the value for the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PIDTune)))
(def PacletDataRebuild "PacletDataRebuild[] rescans all the installed paclets to rebuild the internal cache of paclet data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletDataRebuild)))
(def PacletDirectoryLoad "PacletDirectoryLoad[dir] makes paclets in dir visible in the current session.\nPacletDirectoryLoad[{dir1, dir2, …}] makes paclets in all the diri visible in the current session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletDirectoryLoad)))
(def PacletDirectoryUnload "PacletDirectoryUnload[dir] makes paclets in dir no longer visible in the current session.\nPacletDirectoryUnload[{dir1, dir2, …}] makes paclets in all the diri no longer visible in the current session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletDirectoryUnload)))
(def PacletDisable "PacletDisable[paclet] disables an installed paclet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletDisable)))
(def PacletEnable "PacletEnable[paclet] enables a previously disabled paclet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletEnable)))
(def PacletFind "PacletFind[\"name\"] gives a list of installed paclets that match \"name\".\nPacletFind[\"name\"->\"version\"] gives a list of installed paclets that match \"name\" and \"version\".\nPacletFind[\"name\", <|prop1->val1, prop2->val2, …|>] gives a list of installed paclets that match \"name\" and criteria given by the propivali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletFind)))
(def PacletFindRemote "PacletFindRemote[\"name\"] gives a list of paclets that match \"name\" available on known paclet sites.\nPacletFindRemote[\"name\"->\"version\"] gives a list of paclets that match \"name\" and \"version\" available on known paclet sites.\nPacletFindRemote[\"name\", <|prop1->val1, prop2->val2, …|>] gives a list of paclets that match \"name\" and criteria given by the propivali available on known paclet sites." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletFindRemote)))
(def PacletInstall "PacletInstall[paclet] installs or updates paclet.\nPacletInstall[task] waits for completion of the task started by a call to PacletInstallSubmit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletInstall)))
(def PacletInstallSubmit "PacletInstallSubmit[paclet] asynchronously installs or updates paclet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletInstallSubmit)))
(def PacletNewerQ "PacletNewerQ[paclet1, paclet2] returns True if paclet1 has a higher version number than paclet2, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletNewerQ)))
(def PacletObject "PacletObject[assoc] represents a paclet on the local machine or on a remote paclet site.\nPacletObject[\"name\"] represents an installed paclet with the given name.\nPacletObject[\"name\"->\"version\"] represents an installed paclet with the given name and version.\nPacletObject[File[…]] represents a paclet in a given directory or paclet archive file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletObject)))
(def PacletSite "PacletSite is an option for PacletInstall and PacletInstallSubmit that specifies the URL of a paclet site on which to look for the paclet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSite)))
(def PacletSiteObject "PacletSiteObject[assoc] represents a site from which paclets can be automatically downloaded." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSiteObject)))
(def PacletSiteRegister "PacletSiteRegister[url] registers url as a known paclet site.\nPacletSiteRegister[url, name] registers url as a known paclet site with name.\nPacletSiteRegister[PacletSiteObject[…]] registers the given PacletSiteObject as a known paclet site." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSiteRegister)))
(def PacletSiteUnregister "PacletSiteUnregister[url] removes url from the list of registered paclet sites.\nPacletSiteUnregister[name] removes the site named name from the list of registered paclet sites.\nPacletSiteUnregister[PacletSiteObject[…]] removes the given PacletSiteObject from the list of registered paclet sites." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSiteUnregister)))
(def PacletSiteUpdate "PacletSiteUpdate[site] acquires and caches current information about the available paclets on the given paclet site." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSiteUpdate)))
(def PacletSites "PacletSites[] gives the list of all paclet sites known to your system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSites)))
(def PacletSymbol "PacletSymbol[paclet, \"sym\"] gives the symbol named \"sym\" in the primary context of paclet.\nPacletSymbol[paclet, \"sym\", h] wraps the head h around the symbol before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletSymbol)))
(def PacletUninstall "PacletUninstall[paclet] uninstalls a paclet." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PacletUninstall)))
(def PadLeft "PadLeft[list, n] makes a list of length n by padding list with zeros on the left. \nPadLeft[list, n, x] pads by repeating the element x. \nPadLeft[list, n, {x1, x2, …}] pads by cyclically repeating the elements xi. \nPadLeft[list, n, padding, m] leaves a margin of m elements of padding on the right. \nPadLeft[list, {n1, n2, …}] makes a nested list with length ni at level i. \nPadLeft[list] pads a ragged array list with zeros to make it full." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PadLeft)))
(def PadRight "PadRight[list, n] makes a list of length n by padding list with zeros on the right. \nPadRight[list, n, x] pads by repeating the element x. \nPadRight[list, n, {x1, x2, …}] pads by cyclically repeating the elements xi. \nPadRight[list, n, padding, m] leaves a margin of m elements of padding on the left. \nPadRight[list, {n1, n2, …}] makes a nested list with length ni at level i. \nPadRight[list] pads a ragged array list with zeros to make it full." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PadRight)))
(def PaddedForm "PaddedForm[expr, n] prints with all numbers in expr padded to leave room for a total of n digits. \nPaddedForm[expr, {n, f}] prints with approximate real numbers having exactly f digits to the right of the decimal point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaddedForm)))
(def Padding "Padding is an option to various array and image operations that specifies what padding to use when extending beyond the original data specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Padding)))
(def PaddingLayer "PaddingLayer[{{m1, n1}, {m2, n2}, …}] represents a net layer that pads an input array with mi elements at the beginning and ni elements at the end at level i of the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaddingLayer)))
(def PaddingSize "PaddingSize is an option in AudioDelay and other functions that specifies the amount of padding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaddingSize)))
(def PadeApproximant "PadeApproximant[expr, {x, x0, {m, n}}] gives the Padé approximant to expr about the point x=x0, with numerator order m and denominator order n.\nPadeApproximant[expr, {x, x0, n}] gives the diagonal Padé approximant to expr about the point x=x0 of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PadeApproximant)))
(def PageBreakAbove "PageBreakAbove is an option for Cell which specifies whether a page break should be made immediately above the cell if the notebook that contains the cell is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageBreakAbove)))
(def PageBreakBelow "PageBreakBelow is an option for Cell which specifies whether a page break should be made immediately below the cell if the notebook that contains the cell is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageBreakBelow)))
(def PageBreakWithin "PageBreakWithin is an option for Cell which specifies whether a page break should be allowed within the cell if the notebook that contains the cell is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageBreakWithin)))
(def PageFooters "PageFooters is an option for notebooks that specifies what should be inserted as the footer of each page of a notebook when it is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageFooters)))
(def PageHeaders "PageHeaders is an option for notebooks that specifies what should be inserted as the header of each page of a notebook when it is printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageHeaders)))
(def PageRankCentrality "PageRankCentrality[g, α] gives a list of page-rank centralities for the vertices in the graph g and weight α.\nPageRankCentrality[g, α, β] gives a list of page-rank centralities, using weight α and initial centralities β.\nPageRankCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageRankCentrality)))
(def PageTheme "PageTheme is an option for FormObject, GalleryView, and related functions that specifies an overall theme for a webpage and its elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageTheme)))
(def PageWidth "PageWidth is an option for output streams and for cells that specifies how wide each line of text is allowed to be." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PageWidth)))
(def Pagination "Pagination is an option for GalleryView and related functions that specifies how pagination should be done in displayed output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pagination)))
(def PairCorrelationG "PairCorrelationG[pdata, r] estimates the pair correlation function g(r) for point data pdata at radius r.\nPairCorrelationG[pproc, r] computes g(r) for the point process pproc.\nPairCorrelationG[bdata, r] computes g(r) for binned data bdata. \nPairCorrelationG[pspec] generates the function g that can be applied repeatedly to different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairCorrelationG)))
(def PairedBarChart "PairedBarChart[{y1, y2, …}, {z1, z2, …}] makes a paired bar chart with bar lengths y1,  y2, … and z1, z2, …, respectively.\nPairedBarChart[{…, wi[yi, …], …}, {…, wj[zj, …], …}] makes a paired bar chart with bar features defined by the symbolic wrappers wk.\nPairedBarChart[{data11, …}, {data21, …}] makes a paired bar chart from multiple datasets data1 i and data2 j." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairedBarChart)))
(def PairedHistogram "PairedHistogram[{x1, x2, …}, {y1, y2, …}] plots a paired histogram of the values xi and yi.\nPairedHistogram[{x1, x2, …}, {y1, y2, …}, bspec] plots a paired histogram with bin width specification bspec.\nPairedHistogram[{x1, x2, …}, {y1, y2, …}, bspec, hspec] plots a paired histogram with bin heights computed according to the specification hspec.\nPairedHistogram[{data11, …}, {data21, …}, …] plots paired histograms for multiple datasets data 1i and data 2j." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairedHistogram)))
(def PairedSmoothHistogram "PairedSmoothHistogram[{x1, x2, …}, {y1, y2, …}] plots a paired smooth histogram of the values xi and yi.\nPairedSmoothHistogram[{x1, x2, …}, {y1, y2, …}, espec] plots a paired smooth histogram with estimator specification espec.\nPairedSmoothHistogram[{x1, x2, …}, {y1, y2, …}, espec, dfun] plots a paired smooth histogram with distribution function dfun.\nPairedSmoothHistogram[{data11, …}, {data21, …}, …] plots paired smooth histograms for multiple datasets data 1i and data 2j." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairedSmoothHistogram)))
(def PairedTTest "PairedTTest[data] tests whether the mean of data is zero. \nPairedTTest[{data1, data2}] tests whether the mean of data1– data2 is zero.\nPairedTTest[dspec, μ0] tests a location measure against μ0.\nPairedTTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairedTTest)))
(def PairedZTest "PairedZTest[data] tests whether the mean of the data is zero. \nPairedZTest[{data1, data2}] tests whether the means of data1 and data2 are equal.\nPairedZTest[dspec, σ] tests for zero or equal means assuming a population variance σ.\nPairedZTest[dspec, σ, μ0] tests the mean against μ0.\nPairedZTest[dspec, σ, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairedZTest)))
(def PairwiseDensityHistogram "PairwiseDensityHistogram[{{y11, …, y 1n}, …, {y m1, …, ymn}}] creates an array of density histograms by plotting the data columns against each other in pairs.\nPairwiseDensityHistogram[data, bpsec] plots density histograms with bins specified by bspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairwiseDensityHistogram)))
(def PairwiseListPlot "PairwiseListPlot[{{y11, …, y 1n}, …, {y m1, …, ymn}}] creates an array of scatter plots by plotting the data columns against each other in pairs.\nPairwiseListPlot[{data1, data2, …}] plots multiple sets of data in each plot panel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairwiseListPlot)))
(def PairwiseProbabilityPlot "PairwiseProbabilityPlot[{{y11, …, y 1n}, …, {y m1, …, ymn}}] plots a CDF of columns in the data against each other." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairwiseProbabilityPlot)))
(def PairwiseQuantilePlot "PairwiseQuantilePlot[{{y11, …, y 1n}, …, {y m1, …, ymn}}] creates an array of quantile plots by plotting the quantiles of the columns against each other." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairwiseQuantilePlot)))
(def PairwiseSmoothDensityHistogram "PairwiseSmoothDensityHistogram[{{y11, …, y 1n}, …, {y m1, …, ymn}}] creates an array of smooth density histograms by plotting the data columns against each other in pairs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PairwiseSmoothDensityHistogram)))
(def PaletteNotebook "PaletteNotebook[{cell1, cell2, …}] represents a palette notebook that can be manipulated by the Wolfram System front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaletteNotebook)))
(def PalindromeQ "PalindromeQ[list] returns True if the given list is identical to Reverse[list], and False otherwise.\nPalindromeQ[n] returns True if the integer n is identical to IntegerReverse[n], and False otherwise.\nPalindromeQ[string] returns True if the given string is identical to StringReverse[string], and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PalindromeQ)))
(def Pane "Pane[expr] displays as a pane containing expr. \nPane[expr, w] makes the pane be w printer's points wide, linewrapping the contents if necessary.\nPane[expr, {w, h}] makes the pane be w points wide and h points high, shrinking the contents if necessary." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pane)))
(def PaneSelector "PaneSelector[{val1expr1, val2expr2, …}, x] represents an object that displays as a pane containing the expri for which vali is equal to x. \nPaneSelector[{val1expr1, val2expr2, …}, Dynamic[x]] takes the setting to be the dynamically updated current value of x \nPaneSelector[{val1expr1, …}, x, default] displays default if x is none of the vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaneSelector)))
(def Panel "Panel[expr] displays as a panel containing expr. \nPanel[expr, title] gives the panel the specified title. \nPanel[expr, title, pos] places title at a position specified by pos. \nPanel[expr, {title1, title2, …}, {pos1, …}] places titlei at position posi. \nPanel[] displays an empty panel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Panel)))
(def Paneled "Paneled is an option for Manipulate and related functions that specifies whether to give the output inside a panel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Paneled)))
(def ParabolicCylinderD "ParabolicCylinderD[ν, z] gives the parabolic cylinder function Dν (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParabolicCylinderD)))
(def ParagraphIndent "ParagraphIndent is an option for Cell which specifies how far in printer's points to indent the first line of each paragraph of text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParagraphIndent)))
(def ParagraphSpacing "ParagraphSpacing is an option for Cell, StyleBox, and Style that specifies how much extra space to leave between successive paragraphs of text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParagraphSpacing)))
(def ParallelArray "ParallelArray[f, n] generates in parallel a list of length n, with elements f[i], evaluated.\nParallelArray[f, {n1, n2, …}] generates in parallel an n1n2… array of nested lists, with elements f[i1, i2, …]. \nParallelArray[f, {n1, n2, …}, {r1, r2, …}] generates in parallel a list using the index origins ri (default 1). \nParallelArray[f, dims, origin, h] uses head h, rather than List, for each level of the array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelArray)))
(def ParallelAxisPlot "ParallelAxisPlot[{{y11, …, y 1n}, …, {y m1, …, ymn}}] generates a parallel axis plot for the points {y i1, …, yin} using equally spaced axes.\nParallelAxisPlot[{data1, data2, …}] plots several sets of points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelAxisPlot)))
(def ParallelCases "ParallelCases[{e1, e2, …}, pattern] gives a list of the ei that match the pattern, in parallel.\nParallelCases[expr, pattern, levelspec] gives a list of all parts of expr on levels specified by levelspec that match the pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelCases)))
(def ParallelCombine "ParallelCombine[f, h[e1, e2, …], comb] evaluates f[h[e1, e2, …]] in parallel by distributing parts of the computation to all parallel kernels and combining the partial results with comb.\nParallelCombine[f, h[e1, e2, …]] is equivalent to ParallelCombine[f, h[e1, e2, …], h] if h has attribute Flat, and ParallelCombine[f, h[e1, e2, …], Join] otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelCombine)))
(def ParallelDo "ParallelDo[expr, {imax}] evaluates expr in parallel imax times. \nParallelDo[expr, {i, imax}] evaluates expr in parallel with the variable i successively taking on the values 1 through imax (in steps of 1). \nParallelDo[expr, {i, imin, imax}] starts with i=imin. \nParallelDo[expr, {i, imin, imax, di}] uses steps di. \nParallelDo[expr, {i, {i1, i2, …}}] uses the successive values i1, i2, ….\nParallelDo[expr, {i, imin, imax}, {j, jmin, jmax}, …] evaluates expr looping in parallel over different values of j, etc. for each i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelDo)))
(def ParallelEvaluate "ParallelEvaluate[expr] evaluates the expression expr on all available parallel kernels and returns the list of results obtained.\nParallelEvaluate[expr, kernel] evaluates expr on the parallel kernel specified. \nParallelEvaluate[expr, {ker1, ker2, …}] evaluates expr on the parallel kernels keri.\nParallelEvaluate[expr, kernels, h] wraps the head h around the results before returning them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelEvaluate)))
(def ParallelKernels "ParallelKernels[] gives the list of running kernels available for parallel computing.\nParallelKernels[\"prop\"] gives those running kernels that satisfy the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelKernels)))
(def ParallelMap "ParallelMap[f, expr] applies f in parallel to each element on the first level in expr.\nParallelMap[f, expr, levelspec] applies f in parallel to parts of expr specified by levelspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelMap)))
(def ParallelNeeds "ParallelNeeds[\"context`\"] evaluates Needs[\"context`\"] on all available parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelNeeds)))
(def ParallelProduct "ParallelProduct[expr, {i, imax}] evaluates the product \nUnderoverscriptBox[\"∏\", \nRowBox[{\"i\", \"=\", \"1\"}], \"imax\", \nLimitsPositioning->True]expr\\ in\\ parallel . \\nParallelProduct[expr, {i, imin, imax}]\\ starts\\ with\\ i=imin.\nParallelProduct[expr, {i, imin, imax, di}] uses steps di.\nParallelProduct[expr, {i, {i1, i2, …}}] uses successive values i1, i2, ….\nParallelProduct[expr, {i, imin, imax}, {j, jmin, jmax}, …] evaluates the multiple product \nUnderoverscriptBox[\"∏\", \nRowBox[{\"i\", \"=\", \"imin\"}], \"imax\", \nLimitsPositioning->True]\nUnderoverscriptBox[\"∏\", \nRowBox[{\"j\", \"=\", \"jmin\"}], \"jmax\", \nLimitsPositioning->True]…\\ expr\\ in\\ parallel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelProduct)))
(def ParallelSelect "ParallelSelect[data, crit] picks out all elements ei of data for which crit[ei] is True, in parallel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelSelect)))
(def ParallelSubmit "ParallelSubmit[expr] submits expr for evaluation on the next available parallel kernel and returns an EvaluationObject expression representing the submitted evaluation.\nParallelSubmit[{var1, var2, …}, expr] builds a closure for the variables given before submitting expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelSubmit)))
(def ParallelSum "ParallelSum[expr, {i, imax}] evaluates in parallel the sum \nUnderoverscriptBox[\"∑\", \nRowBox[{\"i\", \"=\", \"1\"}], \"imax\", \nLimitsPositioning->True]expr . \\nParallelSum[expr, {i, imin, imax}]\\ starts\\ with\\ i=imin.\nParallelSum[expr, {i, imin, imax, di}] uses steps di.\nParallelSum[expr, {i, {i1, i2, …}}] uses successive values i1, i2, ….\nParallelSum[expr, {i, imin, imax}, {j, jmin, jmax}, …] evaluates in parallel the multiple sum \nUnderoverscriptBox[\"∑\", \nRowBox[{\"i\", \"=\", \"imin\"}], \"imax\", \nLimitsPositioning->True]\nUnderoverscriptBox[\"∑\", \nRowBox[{\"j\", \"=\", \"jmin\"}], \"jmax\", \nLimitsPositioning->True]…\\ expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelSum)))
(def ParallelTable "ParallelTable[expr, {imax}] generates in parallel a list of imax copies of expr.\nParallelTable[expr, {i, imax}] generates in parallel a list of the values of expr when i runs from 1 to imax. \nParallelTable[expr, {i, imin, imax}] starts with i=imin. \nParallelTable[expr, {i, imin, imax, di}] uses steps di. \nParallelTable[expr, {i, {i1, i2, …}}] uses the successive values i1, i2, ….\nParallelTable[expr, {i, imin, imax}, {j, jmin, jmax}, …] gives a nested list. The list associated with i is outermost." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelTable)))
(def ParallelTry "ParallelTry[f, {arg1, arg2, …}] evaluates f[argi] in parallel, returning the first result received.\nParallelTry[f, {arg1, arg2, …}, k] returns a list of the first k results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParallelTry)))
(def Parallelepiped "Parallelepiped[p, {v1, …, vk}] represents a parallelepiped with origin p and directions vi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Parallelepiped)))
(def Parallelization "Parallelization is an option for Compile that specifies whether it should create a compiled function that could run in parallel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Parallelization)))
(def Parallelize "Parallelize[expr] evaluates expr using automatic parallelization." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Parallelize)))
(def Parallelogram "Parallelogram[p, {v1, v2}] represents a parallelogram with origin p and directions v1 and v2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Parallelogram)))
(def ParameterEstimator "ParameterEstimator is an option to EstimatedDistribution and FindDistributionParameters that specifies what parameter estimator to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParameterEstimator)))
(def ParameterMixtureDistribution "ParameterMixtureDistribution[dist[θ], θwdist] represents a parameter mixture distribution where the parameter θ is distributed according to the weight distribution wdist. \nParameterMixtureDistribution[dist[θ1, θ2, …], {θ1wdist1, θ2wdist2, …}] represents a parameter mixture distribution where the parameter θ1 has weight distribution wdist1, θ2 has weight distribution wdist2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParameterMixtureDistribution)))
(def ParametricConvexOptimization "ParametricConvexOptimization[f, cons, vars, pars] gives a ParametricFunction object that finds values of variables vars that minimize the convex objective function f subject to convex constraints cons with parameters pars.\nParametricConvexOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned by the ParametricFunction object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricConvexOptimization)))
(def ParametricFunction "ParametricFunction[pars, …] represents a function that computes a solution when evaluated with numerical values for the parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricFunction)))
(def ParametricNDSolve "ParametricNDSolve[eqns, u, {x, xmin, xmax}, pars] finds a numerical solution to the ordinary differential equations eqns for the function u with the independent variable x in the range xmin to xmax with parameters pars.\nParametricNDSolve[eqns, u, {x, xmin, xmax}, {y, ymin, ymax}, pars] solves the partial differential equations eqns over a rectangular region.\nParametricNDSolve[eqns, u, {x, y}∈Ω, pars] solves the partial differential equations eqns over the region Ω.\nParametricNDSolve[eqns, u, {t, tmin, tmax}, {x, y}∈Ω, pars] solves the time-dependent partial differential equations eqns over the region Ω.\nParametricNDSolve[eqns, {u1, u2, …}, …] solves for the functions ui." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricNDSolve)))
(def ParametricNDSolveValue "ParametricNDSolveValue[eqns, expr, {x, xmin, xmax}, pars] gives the value of expr with functions determined by a numerical solution to the ordinary differential equations eqns with the independent variable x in the range xmin to xmax with parameters pars.\nParametricNDSolveValue[eqns, expr, {x, xmin, xmax}, {y, ymin, ymax}, pars] solves the partial differential equations eqns over a rectangular region.\nParametricNDSolveValue[eqns, expr, {x, y}∈Ω, pars] solves the partial differential equations eqns over the region Ω.\nParametricNDSolveValue[eqns, expr, {t, tmin, tmax}, {x, y}∈Ω, pars] solves the time-dependent partial differential equations eqns over the region Ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricNDSolveValue)))
(def ParametricPlot "ParametricPlot[{fx, fy}, {u, umin, umax}] generates a parametric plot of a curve with x and y coordinates fx and fy as a function of u. \nParametricPlot[{{fx, fy}, {gx, gy}, …}, {u, umin, umax}] plots several parametric curves. \nParametricPlot[{fx, fy}, {u, umin, umax}, {v, vmin, vmax}] plots a parametric region. \nParametricPlot[{{fx, fy}, {gx, gy}, …}, {u, umin, umax}, {v, vmin, vmax}] plots several parametric regions. \nParametricPlot[{…, w[{fx, fy}], …}, …] plots the curve {fx, fy} with features defined by the symbolic wrapper w.\nParametricPlot[…, {u, v}∈reg] takes parameters {u, v} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricPlot)))
(def ParametricPlot3D "ParametricPlot3D[{fx, fy, fz}, {u, umin, umax}] produces a three-dimensional space curve parametrized by a variable u which runs from umin to umax. \nParametricPlot3D[{fx, fy, fz}, {u, umin, umax}, {v, vmin, vmax}] produces a three-dimensional surface parametrized by u and v. \nParametricPlot3D[{{fx, fy, fz}, {gx, gy, gz}, …}, …] plots several objects together. \nParametricPlot3D[…, {u, v}∈reg] takes parameters {u, v} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricPlot3D)))
(def ParametricRampLayer "ParametricRampLayer[] represents a net layer that computes a leaky ReLU activation with a slope that can be learned.\nParametricRampLayer[levels] specifies the levels on which each dimension has a specific slope." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricRampLayer)))
(def ParametricRegion "ParametricRegion[{f1, …, fn}, {u1, …, um}] represents a region in ^n given by the points {f1, …, fn} for parameters ui∈.\nParametricRegion[{f1, …, fn}, {{u1, a1, b1}, …}] constrains parameters to an interval a1≤u1≤b1 etc. \nParametricRegion[{{f1, …, fn}, cond}, …] constrains parameters to satisfy the condition cond." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParametricRegion)))
(def ParentBox "ParentBox[obj] returns the BoxObject that contains obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentBox)))
(def ParentCell "ParentCell[obj] returns the CellObject that contains obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentCell)))
(def ParentDirectory "ParentDirectory[] gives the parent of the current working directory. \nParentDirectory[\"dir\"] gives the parent of the directory dir. \nParentDirectory[\"dir\", n] gives the directory n levels up from dir." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentDirectory)))
(def ParentEdgeLabel "ParentEdgeLabel is an option for Tree and related functions that specifies what labels should be used for edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeLabel)))
(def ParentEdgeLabelFunction "ParentEdgeLabelFunction is an option for Tree and related functions that specifies functions to use to generate edge labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeLabelFunction)))
(def ParentEdgeLabelStyle "ParentEdgeLabelStyle is an option for Tree and related functions that specifies what styles should be used for edge labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeLabelStyle)))
(def ParentEdgeShapeFunction "ParentEdgeShapeFunction is an option for Tree and related functions that specifies a function to use to generate primitives for rendering edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeShapeFunction)))
(def ParentEdgeStyle "ParentEdgeStyle is an option for Tree and related functions that specifies what styles should be used for edges." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeStyle)))
(def ParentEdgeStyleFunction "ParentEdgeStyleFunction is an option for Tree and related functions that specifies functions to use to generate edge styles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentEdgeStyleFunction)))
(def ParentNotebook "ParentNotebook[obj] returns the NotebookObject that contains obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParentNotebook)))
(def ParetoDistribution "ParetoDistribution[k, α] represents a Pareto distribution with minimum value parameter k and shape parameter α.\nParetoDistribution[k, α, μ] represents a Pareto type II distribution with location parameter μ.\nParetoDistribution[k, α, γ, μ] represents a Pareto type IV distribution with shape parameter γ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParetoDistribution)))
(def ParetoPickandsDistribution "ParetoPickandsDistribution[μ, σ, ξ] gives a Pareto–Pickands distribution with location parameter μ, scale parameter σ and shape parameter ξ.\nParetoPickandsDistribution[ξ] gives the standard Pareto–Pickands distribution with zero location and unit scale parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParetoPickandsDistribution)))
(def ParkData "ParkData[entity, property] gives the value of the specified property for the park entity.\nParkData[{entity1, entity2, …}, property] gives a list of property values for the specified park entities.\nParkData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParkData)))
(def Part "expr[[i]] or Part[expr, i] gives the i ^th part of expr. \nexpr[[-i]] counts from the end. \nexpr[[i, j, …]] or Part[expr, i, j, …] is equivalent to expr[[i]][[j]]…. \nexpr[[{i1, i2, …}]] gives a list of the parts i1, i2, … of expr. \nexpr[[m;;n]] gives parts m through n.\nexpr[[m;;n;;s]] gives parts m through n in steps of s.\nexpr[[\"key\"]] gives the value associated with the key \"key\" in an association expr.\nexpr[[Key[k]]] gives the value associated with an arbitrary key k in the association expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Part)))
(def PartBehavior "PartBehavior is an option to Query and related functions that specifies how nonexistent parts should be resolved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartBehavior)))
(def PartLayer "PartLayer[i] represents a net layer that gives the i ^th part of the input.\nPartLayer[i;;j] gives parts i through j.\nPartLayer[i;;j;;k] gives parts i through j in steps of k.\nPartLayer[{spec1, spec2, …}] takes part speci at level i in the input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartLayer)))
(def PartOfSpeech "PartOfSpeech[\"word\"] returns the possible parts of speech for the specified word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartOfSpeech)))
(def PartProtection "PartProtection is an option for cloud expressions that controls which parts of their structure can be changed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartProtection)))
(def PartialCorrelationFunction "PartialCorrelationFunction[data, hspec] estimates the partial correlation function at lags hspec from data.\nPartialCorrelationFunction[tproc, hspec] represents the partial correlation function at lags hspec for the time series process tproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartialCorrelationFunction)))
(def ParticleAcceleratorData "ParticleAcceleratorData[entity, property] gives the value of the specified property for the particle accelerator entity.\nParticleAcceleratorData[{entity1, entity2, …}, property] gives a list of property values for the specified particle accelerator entities.\nParticleAcceleratorData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParticleAcceleratorData)))
(def ParticleData "ParticleData[name, \"property\"] gives the specified property for a subatomic particle or family of particles with the specified name. \nParticleData[{name, q}, \"property\"] gives the specified property for a version of the particle with charge q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParticleData)))
(def Partition "Partition[list, n] partitions list into nonoverlapping sublists of length n. \nPartition[list, n, d] generates sublists with offset d. \nPartition[list, {n1, n2, …}] partitions a nested list into blocks of size n1×n2×….\nPartition[list, {n1, n2, …}, {d1, d2, …}] uses offset di at level i in list. \nPartition[list, n, d, {kL, kR}] specifies that the first element of list should appear at position kL in the first sublist, and the last element of list should appear at or after position kR in the last sublist. If additional elements are needed, Partition fills them in by treating list as cyclic. \nPartition[list, n, d, {kL, kR}, x] pads if necessary by repeating the element x. \nPartition[list, n, d, {kL, kR}, {x1, x2, …}] pads if necessary by cyclically repeating the elements xi. \nPartition[list, n, d, {kL, kR}, {}] uses no padding, and so can yield sublists of different lengths. \nPartition[list, nlist, dlist, {klistL, klistR}, padlist] specifies alignments and padding in a nested list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Partition)))
(def PartitionGranularity "PartitionGranularity is an option for audio analysis functions that specifies the partitioning of the audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartitionGranularity)))
(def PartitionsP "PartitionsP[n] gives the number p(n) of unrestricted partitions of the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartitionsP)))
(def PartitionsQ "PartitionsQ[n] gives the number q(n) of partitions of the integer n into distinct parts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PartitionsQ)))
(def ParzenWindow "ParzenWindow[x] represents a Parzen window function of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ParzenWindow)))
(def PascalBinomial "PascalBinomial[n, m] gives the binomial coefficient (n\nm\n\n) that preserves Pascal's identity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PascalBinomial)))
(def PascalDistribution "PascalDistribution[n, p] represents a Pascal distribution with parameters n and p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PascalDistribution)))
(def PassEventsDown "PassEventsDown is an option to EventHandler which specifies whether events handled by a particular event handler should be passed down to event handlers nested inside." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PassEventsDown)))
(def PassEventsUp "PassEventsUp is an option to EventHandler that specifies whether events handled by a particular event handler should be passed up to event handlers in outer expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PassEventsUp)))
(def Paste "Paste[expr] pastes expr at the current insertion point in the input notebook. \nPaste[notebook, expr] pastes expr to the specified notebook.\nPaste[] pastes the contents of the system clipboard in the input notebook. \nPaste[notebook, Automatic] pastes the contents of the system clipboard to notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Paste)))
(def PasteButton "PasteButton[expr] represents a button that pastes expr whenever it is pressed. \nPasteButton[label, expr] displays with label on the button." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PasteButton)))
(def Path "Path is an option for Get and related functions which gives a list of directories to search in attempting to find an external file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Path)))
(def PathGraph "PathGraph[{v1, v2, …}] yields a path with vertices vi and edges between vi and v i+ 1 .\nPathGraph[{e1, e2, …}] yields a path with edges ej.\nPathGraph[{v1, v2, …}, {e1, e2, …}] yields a path with vertices vi and edges ej.\nPathGraph[{…, wi[vi, …], …}, {…, wj[ej, …], …}] yields a path with vertex and edge properties defined by the symbolic wrappers wk.\nPathGraph[{vivj, …}] uses rules vi->vj to specify a path." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PathGraph)))
(def PathGraphQ "PathGraphQ[g] yields True if the graph g is a path and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PathGraphQ)))
(def Pattern "sym:obj or Pattern[sym, obj] represents the pattern object obj, assigned the name sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pattern)))
(def PatternFilling "PatternFilling[obj] is a two-dimensional graphics directive specifying that obj should be used to fill faces of polygons and other filled graphics objects.\nPatternFilling[\"name\"] uses the specified pattern \"name\".\nPatternFilling[obj, size] specifies the size of the object obj.\nPatternFilling[obj, size, {dx, dy}] moves the object obj by the offset {dx, dy}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PatternFilling)))
(def PatternReaction "PatternReaction[reactantsproducts] represents a templated reaction between molecule patterns in reactants and products.\nPatternReaction[reactantsproducts, mapping] represents a reaction with a specified mapping between atoms in reactants and products.\nPatternReaction[\"smarts\"] represents a reaction defined by the given reaction SMARTS string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PatternReaction)))
(def PatternSequence "PatternSequence[p1, p2, …] is a pattern object that represents a sequence of arguments matching p1, p2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PatternSequence)))
(def PatternTest "p?test is a pattern object that stands for any expression that matches p, and on which the application of test gives True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PatternTest)))
(def PaulWavelet "PaulWavelet[] represents a Paul wavelet of order 4.\nPaulWavelet[n] represents a Paul wavelet of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PaulWavelet)))
(def PauliMatrix "PauliMatrix[k] gives the k ^th Pauli spin matrix σk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PauliMatrix)))
(def Pause "Pause[n] pauses for at least n seconds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pause)))
(def PeakDetect "PeakDetect[list] gives a binary list in which 1s correspond to peak positions in list.\nPeakDetect[list, σ] detects peaks that survive Gaussian blurring up to scale σ.\nPeakDetect[list, σ, s] detects peaks with minimum sharpness s.\nPeakDetect[list, σ, s, t] detects only peaks with values greater than t.\nPeakDetect[list, σ, {s, σs}, {t, σt}] uses different scales for thresholding sharpness and value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PeakDetect)))
(def PeanoCurve "PeanoCurve[n] gives the line segments representing the n ^th-step Peano curve." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PeanoCurve)))
(def PearsonChiSquareTest "PearsonChiSquareTest[data] tests whether data is normally distributed using the Pearson χ^2 test.\nPearsonChiSquareTest[data, dist] tests whether data is distributed according to dist using the Pearson χ^2 test.\nPearsonChiSquareTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PearsonChiSquareTest)))
(def PearsonCorrelationTest "PearsonCorrelationTest[v1, v2] tests whether the vectors v1 and v2 are linearly independent.\nPearsonCorrelationTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PearsonCorrelationTest)))
(def PearsonDistribution "PearsonDistribution[a1, a0, b2, b1, b0] represents a distribution of the Pearson family with parameters a1, a0, b2, b1, and b0.\nPearsonDistribution[type, a1, a0, b2, b1, b0] represents a Pearson distribution of given type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PearsonDistribution)))
(def PenttinenPointProcess "PenttinenPointProcess[μ, γ, rp, d] represents a Penttinen point process with constant intensity μ, interaction parameter γ and interaction radius rp in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PenttinenPointProcess)))
(def PercentForm "PercentForm[expr] prints with numbers in expr given as percentages.\nPercentForm[expr, n] prints with approximate real numbers in expr given as percentages to n-digit precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PercentForm)))
(def PerfectNumber "PerfectNumber[n] gives the n ^th perfect number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PerfectNumber)))
(def PerfectNumberQ "PerfectNumberQ[n] returns True if n is a perfect number, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PerfectNumberQ)))
(def PerformanceGoal "PerformanceGoal is an option for various algorithmic and presentational functions that specifies what aspect of performance to try to optimize with Automatic settings for options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PerformanceGoal)))
(def Perimeter "Perimeter[reg] gives the perimeter of the two-dimensional region reg.\nPerimeter[{x1, x2}, {s, smin, smax}, {t, tmin, tmax}] gives the perimeter of the parametrized region whose Cartesian coordinates xi are functions of s and t.\nPerimeter[{x1, x2}, {s, smin, smax}, {t, tmin, tmax}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Perimeter)))
(def PeriodicBoundaryCondition "PeriodicBoundaryCondition[u[x1, …], pred, f] represents a periodic boundary condition =u(xtarget)=u(f(xtarget)) for all xtarget on the boundary of the region given to NDSolve where pred is True.\nPeriodicBoundaryCondition[a+b u[x1, …], pred, f] represents a generalized periodic boundary condition a+b u(xtarget)=u (f(xtarget))." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PeriodicBoundaryCondition)))
(def Periodogram "Periodogram[list] plots the squared magnitude of the discrete Fourier transform (power spectrum) of list.\nPeriodogram[list, n] plots the mean of power spectra of non-overlapping partitions of length n.\nPeriodogram[list, n, d] uses partitions with offset d.\nPeriodogram[list, n, d, wfun] applies a smoothing window wfun to each partition.\nPeriodogram[list, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform.\nPeriodogram[{list1, list2, …}, n, d, wfun, m] plots power spectra of several lists.\nPeriodogram[audio, …] plots the power spectrum of audio.\nPeriodogram[video, …] plots the power spectrum of the first audio track in video.\nPeriodogram[{input1, input2, …}, …] plots the power spectra of all inputi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Periodogram)))
(def PeriodogramArray "PeriodogramArray[list] returns the squared magnitude of the discrete Fourier transform (power spectrum) of list.\nPeriodogramArray[list, n] averages the power spectra of non-overlapping partitions of length n.\nPeriodogramArray[list, n, d] uses partitions with offset d.\nPeriodogramArray[list, n, d, wfun] applies a smoothing window wfun to each partition.\nPeriodogramArray[list, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform.\nPeriodogramArray[image, …] returns the squared power spectrum of image.\nPeriodogramArray[audio, …] returns the squared power spectrum of audio.\nPeriodogramArray[video, …] returns the squared power spectrum of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PeriodogramArray)))
(def Permanent "Permanent[m] gives the permanent of the square matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Permanent)))
(def Permissions "Permissions is an option for CloudObject and related cloud functions that specifies permissions for classes of users to access or perform operations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Permissions)))
(def PermissionsGroup "PermissionsGroup[\"name\"] represents a permissions group with the specified name, owned by the current user.\nPermissionsGroup[user, \"name\"] represents a permissions group owned by the specified user." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermissionsGroup)))
(def PermissionsGroupMemberQ "PermissionsGroupMemberQ[group, user] returns True if user is a member of the permissions group group, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermissionsGroupMemberQ)))
(def PermissionsGroups "PermissionsGroups[] gives a list of permissions groups belonging to the current user." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermissionsGroups)))
(def PermissionsKey "PermissionsKey[\"key\"] represents a permissions key that can be used to authorize access to cloud resources." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermissionsKey)))
(def PermissionsKeys "PermissionsKeys[] gives a list of all valid permissions keys created by the currently authenticated user." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermissionsKeys)))
(def PermutationCycles "PermutationCycles[perm] gives a disjoint cycle representation of permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationCycles)))
(def PermutationCyclesQ "PermutationCyclesQ[expr] returns True if expr is a permutation in disjoint cyclic form, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationCyclesQ)))
(def PermutationGroup "PermutationGroup[{perm1, …, permn}] represents the group generated by multiplication of the permutations perm1, …, permn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationGroup)))
(def PermutationLength "PermutationLength[perm] returns the number of integers moved by the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationLength)))
(def PermutationList "PermutationList[perm] returns a permutation list representation of permutation perm.\nPermutationList[perm, len] returns a permutation list of length len." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationList)))
(def PermutationListQ "PermutationListQ[expr] returns True if expr is a valid permutation list and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationListQ)))
(def PermutationMatrix "PermutationMatrix[permv] represents the permutation matrix given by permutation vector permv as a structured array.\nPermutationMatrix[pmat] converts a permutation matrix pmat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationMatrix)))
(def PermutationMax "PermutationMax[perm] returns the largest integer moved by the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationMax)))
(def PermutationMin "PermutationMin[perm] returns the smallest integer moved by the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationMin)))
(def PermutationOrder "PermutationOrder[perm] gives the order of permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationOrder)))
(def PermutationPower "PermutationPower[perm, n] gives the n ^th permutation power of the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationPower)))
(def PermutationProduct "PermutationProduct[a, b, c] gives the product of permutations a, b, c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationProduct)))
(def PermutationReplace "PermutationReplace[expr, perm] replaces each part in expr by its image under the permutation perm.\nPermutationReplace[expr, gr] returns the list of images of expr under all elements of the permutation group gr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationReplace)))
(def PermutationSupport "PermutationSupport[perm] returns the support of the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PermutationSupport)))
(def Permutations "Permutations[list] generates a list of all possible permutations of the elements in list. \nPermutations[list, n] gives all permutations containing at most n elements.\nPermutations[list, {n}] gives all permutations containing exactly n elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Permutations)))
(def Permute "Permute[expr, perm] permutes the positions of the elements of expr according to the permutation perm.\nPermute[expr, gr] returns the list of permuted forms of expr under the elements of the permutation group gr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Permute)))
(def PeronaMalikFilter "PeronaMalikFilter[image] applies a Perona–Malik diffusion filter to image.\nPeronaMalikFilter[image, t] specifies the amount of diffusion time t to be applied. \nPeronaMalikFilter[image, t, k] uses a conductance parameter k.\nPeronaMalikFilter[image, t, k, σ] applies a Gaussian regularization of width σ to the image gradient in the conductance function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PeronaMalikFilter)))
(def PerpendicularBisector "PerpendicularBisector[{p1, p2}] gives the perpendicular bisector of the line segment connecting p1 and p2.\nPerpendicularBisector[Line[{p1, p2}]] gives the perpendicular bisector of a line segment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PerpendicularBisector)))
(def PersistenceLocation "PersistenceLocation[\"type\"] represents a persistence location of the given type.\nPersistenceLocation[\"type\", base] includes the base address for a location type that allows multiple locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersistenceLocation)))
(def PersistenceTime "PersistenceTime is an option for various functions that specifies when a persistent value should be treated as expired." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersistenceTime)))
(def PersistentObject "PersistentObject[\"name\", loc] represents a persistent object stored at persistence location loc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersistentObject)))
(def PersistentObjects "PersistentObjects[] gives all persistent objects in all locations in $PersistencePath.\nPersistentObjects[patt] gives all persistent objects whose names match the string pattern patt.\nPersistentObjects[patt, loc] gives all matching persistent objects in persistence location loc.\nPersistentObjects[patt, {loc1, …}] gives all matching persistent objects in all the loci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersistentObjects)))
(def PersistentSymbol "PersistentSymbol[\"name\"] represents the persistent symbol associated with the key \"name\".\nPersistentSymbol[\"name\", loc] represents the persistent symbol associated with name stored in persistence location loc. \nPersistentSymbol[\"name\", {loc1, …}] represents the persistent symbol associated with name at the first of the locations loci at which it occurs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersistentSymbol)))
(def PersonData "PersonData[entity, property] gives the value of the specified property for the person entity.\nPersonData[{entity1, entity2, …}, property] gives a list of property values for the specified person entities.\nPersonData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PersonData)))
(def PetersenGraph "PetersenGraph[n, k] gives the generalized Petersen graph P n, k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PetersenGraph)))
(def PhaseMargins "PhaseMargins[lsys] gives the phase margins of the linear time-invariant system lsys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PhaseMargins)))
(def PhaseRange "PhaseRange is an option to BodePlot and NicholsPlot that specifies the phase range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PhaseRange)))
(def PhongShading "PhongShading[] is a three‐dimensional graphics directive that specifies that faces of polygons and other filled graphics objects are to be drawn to reflect as a smooth surface using a normal‐vector interpolation shading.\nPhongShading[d] uses the attenuation factor d for the diffuse light.\nPhongShading[d, s] uses the attenuation factor s for the specular light.\nPhongShading[d, s, a] uses the attenuation factor a for the ambient light." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PhongShading)))
(def PhysicalSystemData "PhysicalSystemData[entity, property] gives the value of the specified property for the physical system entity.\nPhysicalSystemData[{entity1, entity2, …}, property] gives a list of property values for the specified physical system entities.\nPhysicalSystemData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PhysicalSystemData)))
(def Pi "Pi is π, with numerical value ≃3.14159." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pi)))
(def Pick "Pick[list, sel] picks out those elements of list for which the corresponding element of sel is True. \nPick[list, sel, patt] picks out those elements of list for which the corresponding element of sel matches patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pick)))
(def PieChart "PieChart[{y1, y2, …, yn}] makes a pie chart with sector angle proportional to y1, y2, ….\nPieChart[{…, wi[yi, …], …, wj[yj, …], …}] makes a pie chart with sector features defined by the symbolic wrappers wk.\nPieChart[{data1, data2, …}] makes a pie chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PieChart)))
(def PieChart3D "PieChart3D[{y1, y2, …}] makes a 3D pie chart with sector angle proportional to y1, y2, … .\nPieChart3D[{…, wi[yi, …], …, wj[yj, …], …}] makes a 3D pie chart with sector features defined by the symbolic wrappers wk.\nPieChart3D[{data1, data2, …}] makes a 3D pie chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PieChart3D)))
(def Piecewise "Piecewise[{{val1, cond1}, {val2, cond2}, …}] represents a piecewise function with values vali in the regions defined by the conditions condi. \nPiecewise[{{val1, cond1}, …}, val] uses default value val if none of the condi apply. The default for val is 0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Piecewise)))
(def PiecewiseExpand "PiecewiseExpand[expr] expands nested piecewise functions in expr to give a single piecewise function. \nPiecewiseExpand[expr, assum] expands piecewise functions using assumptions. \nPiecewiseExpand[expr, assum, dom] does the expansion over the domain dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PiecewiseExpand)))
(def PillaiTrace "PillaiTrace[m1, m2] gives Pillai's trace for the matrices m1 and m2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PillaiTrace)))
(def PillaiTraceTest "PillaiTraceTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nPillaiTraceTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PillaiTraceTest)))
(def PingTime "PingTime[host] gives the round-trip ping time for the specified network host.\nPingTime[host, n] gives a list of times for n successive pings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PingTime)))
(def Pink "Pink represents the color pink in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pink)))
(def PitchRecognize "PitchRecognize[audio] recognizes the main pitch in audio, returning it as a TimeSeries object. \nPitchRecognize[audio, spec] returns the main pitch processed according to the specified spec.\nPitchRecognize[video, …] recognizes the main pitch in the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PitchRecognize)))
(def PivotFromColumns "PivotFromColumns[tab, cols{vars, vals}] pivots to make a longer table with the columns cols replaced by two columns, vars containing the column names and vals containing the values from cols.\nPivotFromColumns[tab, {prule1, prule2, …}] pivots on multiple sets of columns specified by the pivot rules prulei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PivotFromColumns)))
(def PivotTable "PivotTable[tab, f, rowcol, colcol] constructs a table where the value at the position with keys {row, col} is given by applying the function f to the subtabulars corresponding to the rows of tab where rowcol has value row and colcol has value col.\nPivotTable[tab, {key1f1, …}, rowcols, colcols] uses multiple aggregation functions fi denoted by keyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PivotTable)))
(def PivotToColumns "PivotToColumns[tab, varcol->valcol] pivots the tabular object tab to another table with new column keys taken from the column varcol and values taken from the column valcol.\nPivotToColumns[tab, varcol{valcol1, valcol2, …}] creates columns with values from all valcoli for each value from varcol.\nPivotToColumns[tab, {prule1, prule2, …}] pivots tab using several pivot rules prulei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PivotToColumns)))
(def PixelValue "PixelValue[image, ppos] gives the pixel value of image at position pos.\nPixelValue[image, ppos, \"type\"] gives the pixel value converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PixelValue)))
(def PixelValuePositions "PixelValuePositions[image, val] returns a list of pixel positions in image that exactly match the value val.\nPixelValuePositions[image, val, d] returns all pixel positions that have values within a distance d from val." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PixelValuePositions)))
(def Placed "Placed[expr, pos] represents an expression expr placed at relative position pos in a chart or other display. \nPlaced[{e1, e2, …}, pos] places each of the ei at a relative position specified by pos.\nPlaced[{e1, e2, …}, pos, f] applies the function f to each of the ei before displaying it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Placed)))
(def Placeholder "Placeholder[name] represents a placeholder labeled with name that indicates a place to type.\nPlaceholder[] gives the empty placeholder ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Placeholder)))
(def PlaceholderLayer "PlaceholderLayer[] represents a net layer whose operation is undefined.\nPlaceholderLayer[\"tag\", assoc] indicates a tag and information given by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlaceholderLayer)))
(def PlaceholderReplace "PlaceholderReplace is an option to Paste that determines whether to replace a selection placeholder with the selected contents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlaceholderReplace)))
(def Plain "Plain represents a font that is not bold, italic, or underlined." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Plain)))
(def PlanarAngle "PlanarAngle[p{q1, q2}] gives the angle between the half‐lines from p through q1 and q2.\nPlanarAngle[{q1, p, q2}] gives the angle at p formed by the triangle with vertex points p, q1 and q2.\nPlanarAngle[…, \"spec\"] gives the angle specified by \"spec\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanarAngle)))
(def PlanarFaceList "PlanarFaceList[g] gives the list of faces of the planar graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanarFaceList)))
(def PlanarGraph "PlanarGraph[{e1, e2, …}] yields a planar graph with edges ej.\nPlanarGraph[{v1, v2, …}, {e1, e2, …}] yields a planar graph with vertices vi and edges ej.\nPlanarGraph[{…, wi[vi], …}, {…, wj[ej], …}] yields a planar graph with vertex and edge properties defined by the symbolic wrappers wk.\nPlanarGraph[{vivj, …}] uses rules vivj to specify a planar graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanarGraph)))
(def PlanarGraphQ "PlanarGraphQ[g] yields True if g is a planar graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanarGraphQ)))
(def PlanckRadiationLaw "PlanckRadiationLaw[temperature, λ] returns the spectral radiance for the specified temperature and wavelength λ.\nPlanckRadiationLaw[temperature, f] returns the spectral radiance for the specified temperature and frequency f.\nPlanckRadiationLaw[temperature, property] returns the value of the property for the specified temperature.\nPlanckRadiationLaw[temperature, {λ1, λ2}] returns the integrated result of the spectral radiance over the wavelength range λ1 to λ2.\nPlanckRadiationLaw[temperature, {f1, f2}] returns the integrated result of the spectral radiance over the frequency range f1 to f2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanckRadiationLaw)))
(def PlaneCurveData "PlaneCurveData[entity, property] gives the value of the specified property for the plane curve entity.\nPlaneCurveData[{entity1, entity2, …}, property] gives a list of property values for the specified plane curve entities.\nPlaneCurveData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlaneCurveData)))
(def PlanetData "PlanetData[entity, property] gives the value of the specified property for the planet entity.\nPlanetData[{entity1, entity2, …}, property] gives a list of property values for the specified planet entities.\nPlanetData[entity, property, annotation] gives the specified annotation associated with the property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanetData)))
(def PlanetaryMoonData "PlanetaryMoonData[entity, property] gives the value of the specified property for the moon entity of a planet or minor planet.\nPlanetaryMoonData[{entity1, entity2, …}, property] gives a list of property values for the specified moon entities.\nPlanetaryMoonData[entity, property, annotation] gives the specified annotation associated with the property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlanetaryMoonData)))
(def PlantData "PlantData[entity, property] gives the value of the specified property for the plant entity.\nPlantData[{entity1, entity2, …}, property] gives a list of property values for the specified plant entities.\nPlantData[entity, property, annotation] gives the specified annotation associated with the property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlantData)))
(def Play "Play[f, {t, tmin, tmax}] creates an object that plays as a sound whose amplitude is given by f as a function of time t in seconds between tmin and tmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Play)))
(def PlayRange "PlayRange is an option for Play and related functions which specifies what range of sound amplitude levels should be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlayRange)))
(def PlaybackSettings "PlaybackSettings is an option for Video and similar objects that specifies settings used for playback, such as position." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlaybackSettings)))
(def Plot "Plot[f, {x, xmin, xmax}] generates a plot of f as a function of x from xmin to xmax. \nPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions fi. \nPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Plot)))
(def Plot3D "Plot3D[f, {x, xmin, xmax}, {y, ymin, ymax}] generates a three-dimensional plot of f as a function of x and y. \nPlot3D[{f1, f2, …}, {x, xmin, xmax}, {y, ymin, ymax}] plots several functions. \nPlot3D[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nPlot3D[…, {x, y}∈reg] takes variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Plot3D)))
(def PlotHighlighting "PlotHighlighting is an option to Plot, ListPlot and related visualization functions that specifies how points and curves should be highlighted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotHighlighting)))
(def PlotLabel "PlotLabel is an option for graphics functions that specifies an overall label for a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotLabel)))
(def PlotLabels "PlotLabels is an option for visualization functions that specifies what labels to use for each data source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotLabels)))
(def PlotLayout "PlotLayout is an option for plotting functions that specifies the layout of multiple components in a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotLayout)))
(def PlotLegends "PlotLegends is an option for plot functions that specifies what legends to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotLegends)))
(def PlotMarkers "PlotMarkers is an option for graphics functions like ListPlot and ListLinePlot that specifies what markers to draw at the points plotted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotMarkers)))
(def PlotPoints "PlotPoints is an option for plotting functions that specifies how many initial sample points to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotPoints)))
(def PlotRange "PlotRange is an option for graphics functions that specifies what range of coordinates to include in a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotRange)))
(def PlotRangeClipping "PlotRangeClipping is an option for graphics functions that specifies whether graphics objects should be clipped at the edge of the region defined by PlotRange, or should be allowed to extend to the actual edge of the image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotRangeClipping)))
(def PlotRangePadding "PlotRangePadding is an option for graphics functions that specifies how much further axes etc. should extend beyond the range of coordinates specified by PlotRange." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotRangePadding)))
(def PlotRegion "PlotRegion is an option for graphics functions that specifies what region of the final display area a plot should fill." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotRegion)))
(def PlotStyle "PlotStyle is an option for plotting and related functions that specifies styles in which objects are to be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotStyle)))
(def PlotTheme "PlotTheme is an option for plotting and related functions that specifies an overall theme for visualization elements and styles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlotTheme)))
(def Pluralize "Pluralize[\"noun\"] gives the plural form of the English word \"noun\".\nPluralize[\"noun\", n] gives the inflected form of \"noun\" for n instances. \nPluralize[{\"singular\", \"plural\"}, n] inflects using the specified forms.\nPluralize[spec, list] uses the length of list to determine the inflection to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pluralize)))
(def Plus "x+y+z represents a sum of terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Plus)))
(def PlusMinus "PlusMinus[x] displays as ±x.\nPlusMinus[x, y, …] displays as x±y±…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PlusMinus)))
(def Pochhammer "Pochhammer[a, n] gives the Pochhammer symbol (a)n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pochhammer)))
(def PodStates "PodStates is an option for WolframAlpha that determines information about the states of the pods." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PodStates)))
(def PodWidth "PodWidth is an option for WolframAlpha that determines the width parameters of the content returned by the Wolfram|Alpha API." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PodWidth)))
(def Point "Point[p] is a graphics and geometry primitive that represents a point at p. \nPoint[{p1, p2, …}] represents a collection of points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Point)))
(def PointCountDistribution "PointCountDistribution[pproc, reg] represents the distribution of point counts for the point process pproc in the region reg.\nPointCountDistribution[pproc, {reg1, …, regn}] represents the joint distribution of point counts in regions regi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointCountDistribution)))
(def PointDensity "PointDensity[pdata] estimates the point density function μ(x) from point data pdata.\nPointDensity[pdata, pmethod] estimates the point density function μ(x) with the partition method pmethod.\nPointDensity[bdata, …] estimates the point density function μ(x) from binned data bdata.\nPointDensity[pproc, …] computes the density function μ(x) for point process pproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointDensity)))
(def PointDensityFunction "PointDensityFunction[…] represents a function whose values give the density at a given location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointDensityFunction)))
(def PointFigureChart "PointFigureChart[{{date1, p1}, {date2, p2}, …}] makes a point and figure chart with prices pi at date datei.\nPointFigureChart[{\"name\", daterange}] makes a point and figure chart of closing prices for the financial entity \"name\" over the date range daterange.\nPointFigureChart[{…}, s, n] makes a point and figure chart with point and figure height s and n reversals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointFigureChart)))
(def PointLegend "PointLegend[{col1, …}, {lbl1, …}] generates a legend that associates points of colors coli with labels lbli.\nPointLegend[{col1, …}, Automatic] generates a legend with placeholder labels for the colors coli.\nPointLegend[{lbl1, …}] represents a legend with inherited colors within visualization functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointLegend)))
(def PointLight "PointLight[col, pt] is a three-dimensional graphics directive that specifies the point light of color col at position pt to use in coloring 3D surfaces.\nPointLight[col, pt, att] uses the point light with geometric attenuation att." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointLight)))
(def PointProcessEstimator "PointProcessEstimator[] is an option to EstimatedPointProcess and FindPointProcessParameters that specifies what point process parameter estimator to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointProcessEstimator)))
(def PointProcessFitTest "PointProcessFitTest[pdata] tests whether the point collection pdata could be modeled by a Poisson point process.\nPointProcessFitTest[pdata, pproc] tests whether the point collection could be modeled by the point process pproc.\nPointProcessFitTest[pdata, pproc, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointProcessFitTest)))
(def PointProcessParameterAssumptions "PointProcessParameterAssumptions[proc] gives a logical expression for assumptions on parameters in the point process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointProcessParameterAssumptions)))
(def PointProcessParameterQ "PointProcessParameterQ[proc] yields True if proc is a valid random point process, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointProcessParameterQ)))
(def PointSize "PointSize[d] is a graphics directive which specifies that points which follow are to be shown if possible as circular regions with diameter d. The diameter d is given as a fraction of the total width of the plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointSize)))
(def PointStatisticFunction "PointStatisticFunction[…] represents a function whose values give the statistic of a points collection pdata at a supplied radius." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointStatisticFunction)))
(def PointValuePlot "PointValuePlot[{pt1val1, pt2val2, …}] plots the points pti styled according to the values vali.\nPointValuePlot[ptsvals] uses a collection of points pti from pts with corresponding values vali from val.\nPointValuePlot[…, enc] uses the visual encoding enc to represent the values vali in the plot.\nPointValuePlot[data, …] plots the locations and values from data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PointValuePlot)))
(def PoissonConsulDistribution "PoissonConsulDistribution[μ, λ] represents a Poisson–Consul distribution with parameters μ and λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonConsulDistribution)))
(def PoissonDistribution "PoissonDistribution[μ] represents a Poisson distribution with mean μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonDistribution)))
(def PoissonPDEComponent "PoissonPDEComponent[vars, pars] yields a Poisson PDE term ∇^2{x1, …, xn}u-f with model variables vars and model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonPDEComponent)))
(def PoissonPointProcess "PoissonPointProcess[μ, d] represents a homogeneous Poisson point process with constant intensity μ in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonPointProcess)))
(def PoissonProcess "PoissonProcess[μ] represents a Poisson process with rate μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonProcess)))
(def PoissonWindow "PoissonWindow[x] represents a Poisson window function of x.\nPoissonWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoissonWindow)))
(def PolarAxes "PolarAxes is an option for sector charts and polar plots that specifies whether polar axes should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarAxes)))
(def PolarAxesOrigin "PolarAxesOrigin is an option for sector charts and polar plots that specifies where polar axes should be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarAxesOrigin)))
(def PolarCurve "PolarCurve[r, {θ, θmin, θmax}] gives a polar curve with radius r as a function of angle θ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarCurve)))
(def PolarGridLines "PolarGridLines is an option for sector charts and polar plots that specifies polar grid lines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarGridLines)))
(def PolarPlot "PolarPlot[r, {θ, θmin, θmax}] generates a polar plot of a curve with radius r as a function of angle θ.\nPolarPlot[{r1, r2, …}, {θ, θmin, θmax}] makes a polar plot of curves with radius functions r1, r2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarPlot)))
(def PolarTicks "PolarTicks is an option for sector charts and polar plots that specifies tick marks for polar axes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolarTicks)))
(def PoleZeroMarkers "PoleZeroMarkers is an option for RootLocusPlot that specifies the markers to be drawn on the complex plane at the open-loop poles, closed-loop poles, and open-loop zeros." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoleZeroMarkers)))
(def PolyGamma "PolyGamma[z] gives the digamma function ψ (z). \nPolyGamma[n, z] gives the n ^th derivative of the digamma function ψ^(n) (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyGamma)))
(def PolyLog "PolyLog[n, z] gives the polylogarithm function Lin (z).\nPolyLog[n, p, z] gives the Nielsen generalized polylogarithm function S n, p(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyLog)))
(def PolyaAeppliDistribution "PolyaAeppliDistribution[θ, p] represents a Pólya–Aeppli distribution with shape parameters θ and p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyaAeppliDistribution)))
(def Polygon "Polygon[{p1, …, pn}] represents a filled polygon with points pi.\nPolygon[{p1, …, pn}{{q1, …, qm}, …}] represents a polygon with holes {q1, …, qm}, ….\nPolygon[{poly1, poly2, …}] represents a collection of polygons polyi.\nPolygon[{p1, …, pn}, data] represents a polygon in which coordinates given as integers i in data are taken to be pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Polygon)))
(def PolygonAngle "PolygonAngle[poly] gives a list of angles at the vertex points of poly.\nPolygonAngle[poly, p] gives the angle at the vertex point p of a polygon poly.\nPolygonAngle[poly, i] gives the angle at the point pi of poly in canonical form Polygon[{p1, …, pn}, data].\nPolygonAngle[…, \"spec\"] gives the angle specified by \"spec\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolygonAngle)))
(def PolygonCoordinates "PolygonCoordinates[poly] gives a list of coordinates in the polygon poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolygonCoordinates)))
(def PolygonDecomposition "PolygonDecomposition[poly] decomposes the polygon poly into a disjoint union of simpler polygons.\nPolygonDecomposition[poly, \"type\"] decomposes into polygons of the specified \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolygonDecomposition)))
(def PolygonalNumber "PolygonalNumber[n] gives the n ^th triangular number Tn.\nPolygonalNumber[r, n] gives the n ^th r-gonal number P _n^ r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolygonalNumber)))
(def Polyhedron "Polyhedron[{f1, …, fn}] represents a filled polyhedron inside the closed surfaces with polygon faces fi.\nPolyhedron[{f1, …, fn}{{g1, …, gm}, …}] represents a polyhedron with voids {g1, …, gm}, ….\nPolyhedron[{poly1, poly2, …}] represents a collection of polyhedra polyi.\nPolyhedron[{p1, …, pn}, data] represents a polyhedron in which coordinates given as integers i in data are taken to be pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Polyhedron)))
(def PolyhedronAngle "PolyhedronAngle[poly, p] gives the solid angle at the point p and spanned by edges with common point p.\nPolyhedronAngle[poly, e] gives the dihedral angle between the two faces with common edge e." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyhedronAngle)))
(def PolyhedronCoordinates "PolyhedronCoordinates[poly] gives a list of coordinates in the polyhedron poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyhedronCoordinates)))
(def PolyhedronData "PolyhedronData[poly, \"property\"] gives the value of the specified property for the polyhedron named poly.\nPolyhedronData[poly] gives an image of the polyhedron named poly.\nPolyhedronData[\"class\"] gives a list of the polyhedra in the specified class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyhedronData)))
(def PolyhedronDecomposition "PolyhedronDecomposition[poly] decomposes the polyhedron poly into a union of simpler polyhedra." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyhedronDecomposition)))
(def PolyhedronGenus "PolyhedronGenus[poly] gives the genus of the polyhedron poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolyhedronGenus)))
(def PolynomialExpressionQ "PolynomialExpressionQ[expr, x] gives True if expr is structurally a polynomial expression in x, and False otherwise.\nPolynomialExpressionQ[expr, {x, y, …}] gives True if expr is structurally a polynomial expression in x, y, …, and False otherwise.\nPolynomialExpressionQ[expr, {x, y, …}, test] gives True if expr is structurally a polynomial expression in x, y, … with coefficients satisfying test, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialExpressionQ)))
(def PolynomialExtendedGCD "PolynomialExtendedGCD[poly1, poly2, x] gives the extended GCD of poly1 and poly2 treated as univariate polynomials in x.\nPolynomialExtendedGCD[poly1, poly2, x, Modulusp] gives the extended GCD over the integers modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialExtendedGCD)))
(def PolynomialGCD "PolynomialGCD[poly1, poly2, …] gives the greatest common divisor of the polynomials polyi. \nPolynomialGCD[poly1, poly2, …, Modulusp] evaluates the GCD modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialGCD)))
(def PolynomialLCM "PolynomialLCM[poly1, poly2, …] gives the least common multiple of the polynomials polyi. \nPolynomialLCM[poly1, poly2, …, Modulusp] evaluates the LCM modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialLCM)))
(def PolynomialMod "PolynomialMod[poly, m] gives the polynomial poly reduced modulo m. \nPolynomialMod[poly, {m1, m2, …}] reduces modulo all of the mi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialMod)))
(def PolynomialQ "PolynomialQ[expr, var] yields True if expr is a polynomial in var, and yields False otherwise. \nPolynomialQ[expr, {var1, …}] tests whether expr is a polynomial in the vari." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialQ)))
(def PolynomialQuotient "PolynomialQuotient[p, q, x] gives the quotient of p and q, treated as polynomials in x, with any remainder dropped." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialQuotient)))
(def PolynomialQuotientRemainder "PolynomialQuotientRemainder[p, q, x] gives a list of the quotient and remainder of p and q, treated as polynomials in x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialQuotientRemainder)))
(def PolynomialReduce "PolynomialReduce[poly, {poly1, poly2, …}, {x1, x2, …}] yields a list representing a reduction of poly in terms of the polyi. The list has the form {{a1, a2, …}, b}, where b is minimal and a1 poly1+a2 poly2+…+b is exactly poly." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialReduce)))
(def PolynomialRemainder "PolynomialRemainder[p, q, x] gives the remainder from dividing p by q, treated as polynomials in x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialRemainder)))
(def PolynomialSumOfSquaresList "PolynomialSumOfSquaresList[f, vars] attempts to find polynomials with real coefficients {f1, …, fn} such that f==f1^2+…+fn^2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PolynomialSumOfSquaresList)))
(def PoolingLayer "PoolingLayer[sz] represents a pooling net layer using kernels of size sz.\nPoolingLayer[{w}] represents a layer performing one-dimensional pooling with kernels of size w.\nPoolingLayer[{h, w}] represents a layer performing two-dimensional pooling with kernels of size h×w.\nPoolingLayer[{h, w, d}] represents a layer performing three-dimensional pooling with kernels of size h×w×d.\nPoolingLayer[kernel, stride] represents a layer that uses stride as the step size between kernel applications.\nPoolingLayer[kernel, opts] includes options for other pooling methods, padding and other parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PoolingLayer)))
(def PopupMenu "PopupMenu[x, {val1, val2, …}] represents a popup menu with setting x and possible values vali. \nPopupMenu[Dynamic[x], {val1, …}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time an item is selected from the menu. \nPopupMenu[x, {val1lbl1, val2lbl2, …}] represents a popup menu in which possible value vali is indicated by lbli. \nPopupMenu[x, {val1lbl1, …}, dlbl] displays the menu item as dlbl if x is none of the vali. \nPopupMenu[x, {…}, dlbl, base] displays as base when it is not being clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PopupMenu)))
(def PopupView "PopupView[{expr1, expr2, …}] represents an object which displays as a popup menu whose items are the expri.\nPopupView[{expr1, expr2, …}, i] makes the i ^th entry be the one currently chosen.\nPopupView[{expr1, expr2, …}, i, base] displays as base if it is not being clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PopupView)))
(def PopupWindow "PopupWindow[expr, contents] displays as expr, but pops up a window containing contents when clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PopupWindow)))
(def Position "Position[expr, pattern] gives a list of the positions at which objects matching pattern appear in expr. \nPosition[expr, pattern, levelspec] finds only objects that appear on levels specified by levelspec. \nPosition[expr, pattern, levelspec, n] gives the positions of the first n objects found. \nPosition[pattern] represents an operator form of Position that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Position)))
(def PositionIndex "PositionIndex[list] gives an association between unique elements in list and the positions at which they occur.\nPositionIndex[assoc] gives an association whose keys are the distinct values in assoc, and whose values are lists of the keys with which they are associated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositionIndex)))
(def PositionLargest "PositionLargest[list] gives the positions of the numerically largest value in list.\nPositionLargest[list, n] gives the positions of the first n largest values.\nPositionLargest[list, n, orderfun] gives the positions of the n largest values in list as determined by orderfun." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositionLargest)))
(def PositionSmallest "PositionSmallest[list] gives the positions of the numerically smallest value in list.\nPositionSmallest[list, n] gives the positions of the first n smallest values.\nPositionSmallest[list, n, orderfun] gives the positions of the n smallest values in list as determined by orderfun." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositionSmallest)))
(def Positive "Positive[x] gives True if x is a positive number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Positive)))
(def PositiveDefiniteMatrixQ "PositiveDefiniteMatrixQ[m] gives True if m is explicitly positive definite, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositiveDefiniteMatrixQ)))
(def PositiveIntegers "PositiveIntegers represents the domain of strictly positive integers, as in x∈PositiveIntegers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositiveIntegers)))
(def PositiveRationals "PositiveRationals represents the domain of strictly positive rational numbers, as in x∈PositiveRationals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositiveRationals)))
(def PositiveReals "PositiveReals represents the domain of strictly positive real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositiveReals)))
(def PositiveSemidefiniteMatrixQ "PositiveSemidefiniteMatrixQ[m] gives True if m is explicitly positive semidefinite, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositiveSemidefiniteMatrixQ)))
(def PositivelyOrientedPoints "PositivelyOrientedPoints[{p1, p2, p3, …, p d+1}] tests whether the sequence of points p1, p2, p3, …, p d+1 is positively oriented." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PositivelyOrientedPoints)))
(def PossibleZeroQ "PossibleZeroQ[expr] gives True if basic symbolic and numerical methods suggest that expr has value zero, and gives False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PossibleZeroQ)))
(def Postfix "Postfix[f[expr]] prints with f[expr] given in default postfix form: expr//f. \nPostfix[f[expr], h] prints as exprh." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Postfix)))
(def Power "x^y gives x to the power y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Power)))
(def PowerDistribution "PowerDistribution[k, a] represents a power distribution with domain parameter k and shape parameter a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerDistribution)))
(def PowerExpand "PowerExpand[expr] expands all powers of products and powers. \nPowerExpand[expr, {x1, x2, …}] expands only with respect to the variables xi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerExpand)))
(def PowerMod "PowerMod[a, b, m] gives a^b mod m. \nPowerMod[a, -1, m] finds the modular inverse of a modulo m.\nPowerMod[a, 1/r, m] finds a modular r ^th root of a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerMod)))
(def PowerModList "PowerModList[a, s/r, m] gives a list of all x modulo m for which x^r≡a^s mod m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerModList)))
(def PowerRange "PowerRange[b] generates the list {1, 10, 100, …, max}, where max is the largest power of 10 that does not exceed b.\nPowerRange[a, b] generates the list {a, 10a, 100a, …, max}, with successive elements increasing by factors of 10. \nPowerRange[a, b, r] uses factors of r instead of 10." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerRange)))
(def PowerSpectralDensity "PowerSpectralDensity[data, ω] estimates the power spectral density for data.\nPowerSpectralDensity[data, ω, sspec] estimates the power spectral density for data with smoothing specification sspec.\nPowerSpectralDensity[tproc, ω] represents the power spectral density of a time series process tproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerSpectralDensity)))
(def PowerSymmetricPolynomial "PowerSymmetricPolynomial[r] represents a formal power symmetric polynomial with exponent r.\nPowerSymmetricPolynomial[{r1, r2, …}] represents a multivariate formal power symmetric polynomial with exponents r1, r2, ….\nPowerSymmetricPolynomial[rspec, data] gives the power symmetric polynomial in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowerSymmetricPolynomial)))
(def PowersRepresentations "PowersRepresentations[n, k, p] gives the distinct representations of the integer n as a sum of k non-negative p ^th integer powers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PowersRepresentations)))
(def PreDecrement "--x decreases the value of x by 1, returning the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreDecrement)))
(def PreIncrement "++x increases the value of x by 1, returning the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreIncrement)))
(def PrecedenceForm "PrecedenceForm[expr, prec] prints with expr parenthesized as it would be if it contained an operator with precedence prec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrecedenceForm)))
(def Precedes "Precedes[x, y, …] displays as x≺y≺…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Precedes)))
(def PrecedesEqual "PrecedesEqual[x, y, …] displays as x⪯y⪯…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrecedesEqual)))
(def PrecedesSlantEqual "PrecedesSlantEqual[x, y, …] displays as x≼y≼…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrecedesSlantEqual)))
(def PrecedesTilde "PrecedesTilde[x, y, …] displays as x≾y≾…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrecedesTilde)))
(def Precision "Precision[x] gives the effective number of digits of precision in the number x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Precision)))
(def PrecisionGoal "PrecisionGoal is an option for various numerical operations which specifies how many effective digits of precision should be sought in the final result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrecisionGoal)))
(def Predict "Predict[{in1out1, in2out2, …}] generates a PredictorFunction that attempts to predict outi from the example ini.\nPredict[data, input] attempts to predict the output associated with input from the training examples given.\nPredict[data, input, prop] computes the specified property prop relative to the prediction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Predict)))
(def PredictorFunction "PredictorFunction[…] represents a function generated by Predict that predicts numerical values from data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PredictorFunction)))
(def PredictorMeasurements "PredictorMeasurements[predictor, testset, prop] gives measurements associated with the property prop when predictor is evaluated on testset.\nPredictorMeasurements[predictor, testset] yields a measurement report that can be applied to any property.\nPredictorMeasurements[data, …] use predictions data instead of a predictor.\nPredictorMeasurements[…, {prop1, prop2, …}] gives properties prop1, prop2, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PredictorMeasurements)))
(def PredictorMeasurementsObject "PredictorMeasurementsObject[…] represents an object generated by PredictorMeasurements that can be applied to properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PredictorMeasurementsObject)))
(def PreemptProtect "PreemptProtect[expr] evaluates expr, without any interruption from preemptive evaluations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreemptProtect)))
(def Prefix "Prefix[f[expr]] prints with f[expr] given in default prefix form: f@expr. \nPrefix[f[expr], h] prints as hexpr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Prefix)))
(def Prepend "Prepend[expr, elem] gives expr with elem prepended. \nPrepend[elem] represents an operator form of Prepend that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Prepend)))
(def PrependLayer "PrependLayer[] represents a net layer that takes an input array and prepends another array to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrependLayer)))
(def PrependTo "PrependTo[x, elem] prepends elem to the value of x, and resets x to the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrependTo)))
(def PreprocessingRules "PreprocessingRules is an option that specifies how the input should be preprocessed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreprocessingRules)))
(def PreserveColor "PreserveColor is an option for ImageRestyle and related functions that specifies whether to preserve colors in the original image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreserveColor)))
(def PreserveImageOptions "PreserveImageOptions is an option to graphics and related functions that specifies whether image size and certain other options should be preserved from the previous version of a graphic if the graphic is replaced by a new one in output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreserveImageOptions)))
(def PreviousCell "PreviousCell[] returns the CellObject corresponding to the cell directly above the currently evaluating cell.\nPreviousCell[cellobj] starts looking from the given cell.\nPreviousCell[NotebookSelection[nbobj]] starts looking from the topmost selected item." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreviousCell)))
(def PreviousDate "PreviousDate[gran] gives the previously occurring date of the specified granularity type gran.\nPreviousDate[daytype] gives the previous day corresponding to the specified daytype.\nPreviousDate[date, gran] gives the previous date of the given granularity relative to the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PreviousDate)))
(def PriceGraphDistribution "PriceGraphDistribution[n, k, a] represents a de Solla Price graph distribution for n-vertex graphs where a new vertex with k edges is added at each step, using attractiveness parameter a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PriceGraphDistribution)))
(def Prime "Prime[n] gives the n ^th prime number pn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Prime)))
(def PrimeNu "PrimeNu[n] gives the number of distinct primes ν(n) in n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimeNu)))
(def PrimeOmega "PrimeOmega[n] gives the number of prime factors counting multiplicities Ω(n) in n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimeOmega)))
(def PrimePi "PrimePi[x] gives the number of primes π(x) less than or equal to x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimePi)))
(def PrimePowerQ "PrimePowerQ[expr] yields True if expr is a power of a prime number, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimePowerQ)))
(def PrimeQ "PrimeQ[n] yields True if n is a prime number, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimeQ)))
(def PrimeZetaP "PrimeZetaP[s] gives prime zeta function P (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimeZetaP)))
(def Primes "Primes represents the domain of prime numbers, as in x∈Primes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Primes)))
(def PrimitivePolynomialQ "PrimitivePolynomialQ[poly, p] tests whether poly is a primitive polynomial modulo a prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimitivePolynomialQ)))
(def PrimitiveRoot "PrimitiveRoot[n] gives a primitive root of n.\nPrimitiveRoot[n, k] gives the smallest primitive root of n greater than or equal to k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimitiveRoot)))
(def PrimitiveRootList "PrimitiveRootList[n] gives a list of primitive roots of n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrimitiveRootList)))
(def PrincipalComponents "PrincipalComponents[matrix] transforms elements of matrix into unscaled principal components." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrincipalComponents)))
(def PrincipalValue "PrincipalValue is an option for Integrate that specifies whether the Cauchy principal value should be found for a definite integral." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrincipalValue)))
(def Print "Print[expr] prints expr as output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Print)))
(def PrintTemporary "PrintTemporary[expr] prints expr as a temporary cell in a notebook, removing it when the evaluation of the current input line is complete." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrintTemporary)))
(def PrintableASCIIQ "PrintableASCIIQ[string] yields True if the string contains only printable ASCII characters, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrintableASCIIQ)))
(def PrintingStyleEnvironment "PrintingStyleEnvironment is an option for notebooks that specifies the style environment to be used in printing the notebook on paper." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrintingStyleEnvironment)))
(def Printout3D "Printout3D[model] prints out the 3D model using a 3D print previewer.\nPrintout3D[model, service] prints out the 3D model using the specified 3D printing service.\nPrintout3D[model, \"file.ext\"] saves a print-ready form of the model to a file in the format indicated by the file extension ext." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Printout3D)))
(def Printout3DPreviewer "Printout3DPreviewer is an option for Printout3D that specifies a previewer for generating outputs to print." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Printout3DPreviewer)))
(def Prism "Prism[{p1, …, p6}] represents a filled prism connecting the triangles {p1, p2, p3} and {p4, p5, p6}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Prism)))
(def PrivateCellOptions "PrivateCellOptions is an option for cells that specifies various low-level cell settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrivateCellOptions)))
(def PrivateFontOptions "PrivateFontOptions is an option for selections that specifies settings for various font suboptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrivateFontOptions)))
(def PrivateKey "PrivateKey[assoc] represents the private part of a key pair for a public-key cryptographic system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrivateKey)))
(def PrivateNotebookOptions "PrivateNotebookOptions is an option for notebooks that specifies various low-level notebook settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PrivateNotebookOptions)))
(def Probability "Probability[pred, xdist] gives the probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution dist.\nProbability[pred, xdata] gives the probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution given by data.\nProbability[pred, {x1, x2, …}dist] gives the probability that an event satisfies pred under the assumption that {x1, x2, …} follows the multivariate distribution dist.\nProbability[pred, {x1dist1, x2dist2, …}] gives the probability that an event satisfies pred under the assumption that x1, x2, … are independent and follow the distributions dist1, dist2, ….\nProbability[pred1pred2, …] gives the conditional probability of pred1 given pred2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Probability)))
(def ProbabilityDistribution "ProbabilityDistribution[pdf, {x, xmin, xmax}] represents the continuous distribution with PDF pdf in the variable x where the pdf is taken to be zero for x<xmin and x>xmax.\nProbabilityDistribution[pdf, {x, xmin, xmax, 1}] represents the discrete distribution with PDF pdf in the variable x where the pdf is taken to be zero for x<xmin and x>xmax.\nProbabilityDistribution[pdf, {x, …}, {y, …}, …] represents a multivariate distribution with PDF pdf in the variables x, y, …, etc. \nProbabilityDistribution[{\"CDF\", cdf}, …] represents a probability distribution with CDF given by cdf. \nProbabilityDistribution[{\"SF\", sf}, …] represents a probability distribution with survival function given by sf. \nProbabilityDistribution[{\"HF\", hf}, …] represents a probability distribution with hazard function given by hf." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProbabilityDistribution)))
(def ProbabilityPlot "ProbabilityPlot[list] generates a plot of the CDF of list against the CDF of a normal distribution.\nProbabilityPlot[dist] generates a plot of the CDF of the distribution dist against the CDF of a normal distribution.\nProbabilityPlot[data, rdata] generates a plot of the CDF of data against the CDF of rdata.\nProbabilityPlot[data, rdist] generates a plot of the CDF of data against the CDF of symbolic distribution rdist.\nProbabilityPlot[{data1, data2, …}, ref] generates a plot of the CDF of datai against the CDF of a reference distribution ref." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProbabilityPlot)))
(def ProbabilityScalePlot "ProbabilityScalePlot[{x1, x2, …}] generates a normal probability plot of the samples xi. \nProbabilityScalePlot[{x1, x2, …}, \"dist\"] generates a probability plot scaled for the distribution \"dist\".\nProbabilityScalePlot[{data1, data2, …}, \"dist\"] generates several scaled probability plots for data1, data2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProbabilityScalePlot)))
(def ProbitModelFit "ProbitModelFit[{{x1, y1}, {x2, y2}, …}, {f1, f2, …}, x] constructs a binomial probit regression model of the form 1/2 (1+erf((β0+β1 f1 +β2 f2 +⋯)/Sqrt[2])) that fits the yi for each xi.\nProbitModelFit[data, {f1, f2, …}, {x1, x2, …}] constructs a binomial probit regression model of the form 1/2 (1+erf((β0+β1 f1 +β2 f2 +⋯)/Sqrt[2])) where the fi depend on the variables xk.\nProbitModelFit[{m, v}] constructs a binomial probit regression model from the design matrix m and response vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProbitModelFit)))
(def ProcessConnection "ProcessConnection[proc, \"stream\"] returns the stream object for a given stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessConnection)))
(def ProcessDirectory "ProcessDirectory is an option specifying the initial working directory to use when executing a process in functions like StartProcess and RunProcess." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessDirectory)))
(def ProcessEnvironment "ProcessEnvironment is an option specifying the initial settings of environment variables to use when executing a process in functions like StartProcess and RunProcess." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessEnvironment)))
(def ProcessEstimator "ProcessEstimator is an option to EstimatedProcess and FindProcessParameters that specifies what process parameter estimator to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessEstimator)))
(def ProcessInformation "ProcessInformation[proc] gives information about an external process proc.\nProcessInformation[proc, \"prop\"] gives information about the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessInformation)))
(def ProcessObject "ProcessObject[…] is an object that represents a runnable external process. \nProcessObject[pid] represents the running external process with PID pid on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessObject)))
(def ProcessParameterAssumptions "ProcessParameterAssumptions[proc] gives a logical expression for assumptions on parameters in the random process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessParameterAssumptions)))
(def ProcessParameterQ "ProcessParameterQ[proc] yields True if proc is a valid random process, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessParameterQ)))
(def ProcessStatus "ProcessStatus[proc] gives the current status of the external process represented by the ProcessObject proc.\nProcessStatus[proc, \"status\"] returns True if the process has the status given and returns False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProcessStatus)))
(def Processes "Processes[] returns a list of currently running external processes started in this Wolfram Language session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Processes)))
(def Product "Product[f, {i, imax}] evaluates the product ∏_i=1^imaxf. \nProduct[f, {i, imin, imax}] starts with i=imin. \nProduct[f, {i, imin, imax, di}] uses steps di. \nProduct[f, {i, {i1, i2, …}}] uses successive values i1, i2, ….\nProduct[f, {i, imin, imax}, {j, jmin, jmax}, …] evaluates the multiple product ∏_i=imin^imax∏_j=jmin^jmax… f. \nProduct[f, i] gives the indefinite product ∏_if." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Product)))
(def ProductDistribution "ProductDistribution[dist1, dist2, …] represents the joint distribution with independent component distributions dist1, dist2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProductDistribution)))
(def ProductLog "ProductLog[z] gives the principal solution for w in zwe^w. \nProductLog[k, z] gives the k ^th solution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProductLog)))
(def ProgressIndicator "ProgressIndicator[x] represents a progress indicator with setting x in the range 0 to 1. \nProgressIndicator[Dynamic[x]] takes the setting to be the dynamically updated current value of x. \nProgressIndicator[x, {xmin, xmax}] represents a progress indicator with range xmin to xmax. \nProgressIndicator[x, Indeterminate] represents a progress indicator with indeterminate range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProgressIndicator)))
(def ProgressReporting "ProgressReporting is an option for various algorithmic functions that specifies whether to report the progress of the computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProgressReporting)))
(def Projection "Projection[u, v] finds the projection of the vector u onto the vector v.\nProjection[u, v, f] finds projections with respect to the inner product function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Projection)))
(def Prolog "Prolog is an option for graphics functions which gives a list of graphics primitives to be rendered before the main part of the graphics is rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Prolog)))
(def ProofObject "ProofObject[…] represents a proof object generated by FindEquationalProof." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProofObject)))
(def PropagateAborts "PropagateAborts is an option to CheckAbort to control whether a handled abort propagates to the enclosing function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PropagateAborts)))
(def Proportion "Proportion[x, y, …] displays as x∷y∷…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Proportion)))
(def Proportional "Proportional[x, y, …] displays as x∝y∝…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Proportional)))
(def Protect "Protect[s1, s2, …] sets the attribute Protected for the symbols si.\nProtect[patt1, patt2, …] protects all symbols whose names textually match any of the arbitrary string patterns patti.\nProtect[{spec1, spec2, …}] protects any symbols that are equal to or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Protect)))
(def Protected "Protected is an attribute that prevents any values associated with a symbol from being modified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Protected)))
(def ProteinData "ProteinData[entity] gives the reference amino acid sequence for the protein entity.\nProteinData[entity, property] gives the value of the specified property for the protein entity.\nProteinData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ProteinData)))
(def Pruning "Pruning[image] removes the outermost branches of thin objects in image by setting their values to black.\nPruning[image, n] removes branches that are at most n pixels long.\nPruning[image, {n}] removes n pixels from each branch.\nPruning[image, n, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pruning)))
(def PseudoInverse "PseudoInverse[m] finds the pseudoinverse of a rectangular matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PseudoInverse)))
(def PsychrometricPropertyData "PsychrometricPropertyData[spec] returns the psychrometric properties of moist air for the specified parameters.\nPsychrometricPropertyData[spec, property] returns the specified property for the given parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PsychrometricPropertyData)))
(def PublicKey "PublicKey[assoc] represents the public part of a key pair for a public-key cryptographic system.\nPublicKey[PrivateKey[…]] creates a matching public key for the given private key." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PublicKey)))
(def PublisherID "PublisherID is an option for ResourceSubmit that specifies the ID used to submit a resource for publication in the resource system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PublisherID)))
(def PulsarData "PulsarData[entity, property] gives the value of the specified property for the pulsar entity.\nPulsarData[{entity1, entity2, …}, property] gives a list of property values for the specified pulsar entities.\nPulsarData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PulsarData)))
(def PunctuationCharacter "PunctuationCharacter represents a punctuation character in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PunctuationCharacter)))
(def Purple "Purple represents the color purple in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Purple)))
(def Put "expr>>filename writes expr to a file. \nPut[expr1, expr2, …, \"filename\"] writes a sequence of expressions expri to a file. \nPut[\"filename\"] creates an empty file with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Put)))
(def PutAppend "expr>>>filename appends expr to a file. \nPutAppend[expr1, expr2, …, \"filename\"] appends a sequence of expressions expri to a file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote PutAppend)))
(def Pyramid "Pyramid[{p1, …, p5}] represents a filled pyramid with base {p1, …, p4} and top p5." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Pyramid)))
(def QBinomial "QBinomial[n, m, q] gives the q-binomial coefficient (n\nm\n\n)q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QBinomial)))
(def QFactorial "QFactorial[n, q] gives the q-factorial [n]q!." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QFactorial)))
(def QGamma "QGamma[z, q] gives the q-gamma function Γq (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QGamma)))
(def QHypergeometricPFQ "QHypergeometricPFQ[{a1, …, ar}, {b1, …, bs}, q, z] gives the basic hypergeometric series rϕs (a;b;q;z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QHypergeometricPFQ)))
(def QPochhammer "QPochhammer[a, q, n] gives the q-Pochhammer symbol (a;q)n.\nQPochhammer[a, q] gives the q-Pochhammer symbol (a;q)∞.\nQPochhammer[q] gives the q-Pochhammer symbol (q;q)∞." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QPochhammer)))
(def QPolyGamma "QPolyGamma[z, q] gives the q-digamma function ψq (z).\nQPolyGamma[n, z, q] gives the n ^th derivative of the q-digamma function ψ _q^(n)(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QPolyGamma)))
(def QRDecomposition "QRDecomposition[m] yields the QR decomposition for a numerical matrix m. The result is a list {q, r}, where q is a unitary matrix and r is an upper‐triangular matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QRDecomposition)))
(def QnDispersion "QnDispersion[list] gives the Qn statistic of the elements in list.\nQnDispersion[list, c] gives the Qn statistic with a scaling factor c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QnDispersion)))
(def QuadraticIrrationalQ "QuadraticIrrationalQ[x] gives True if x is a quadratic irrational and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuadraticIrrationalQ)))
(def QuadraticOptimization "QuadraticOptimization[f, cons, vars] finds values of variables vars that minimize the quadratic objective f subject to linear constraints cons.\nQuadraticOptimization[{q, c}, {a, b}] finds a vector x that minimizes the quadratic objective 1/2x.q.x+c.x subject to the linear inequality constraints a.x+b⪰0. \nQuadraticOptimization[{q, c}, {a, b}, {aeq, beq}] includes the linear equality constraints aeq.x+beq0.\nQuadraticOptimization[{q, c}, …, {dom1, dom2, …}] takes xi to be in the domain domi, where domi is Integers or Reals.\nQuadraticOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuadraticOptimization)))
(def Quantile "Quantile[data, p] gives the estimate of the p ^th quantile Overscript[q, ^]p of data. \nQuantile[data, {p1, p2, …}] gives a list of quantiles p1, p2, …. \nQuantile[data, p, {{a, b}, {c, d}}] uses the quantile definition specified by parameters a, b, c, d. \nQuantile[dist, p] gives a quantile of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quantile)))
(def QuantilePlot "QuantilePlot[list] generates a plot of quantiles of list against the quantiles of a normal distribution.\nQuantilePlot[dist] generates a plot of quantiles of the distribution dist against the quantiles of a normal distribution.\nQuantilePlot[data, rdata] generates a plot of the quantiles of data against the quantiles of rdata.\nQuantilePlot[data, rdist] generates a plot of the quantiles of data against the quantiles of a symbolic distribution rdist.\nQuantilePlot[{data1, data2, …}, ref] generates a plot of quantiles of datai against the quantiles of a reference distribution ref." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantilePlot)))
(def Quantity "Quantity[magnitude, unit] represents a quantity with size magnitude and unit specified by unit.\nQuantity[unit] assumes the magnitude of the specified unit to be 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quantity)))
(def QuantityArray "QuantityArray[mags, unit] represents an array of quantities with magnitudes mags and common unit.\nQuantityArray[mags, {unit1, unit2, …}] represents an array of lists of quantities with units {unit1, unit2, …}.\nQuantityArray[quants] converts an array of Quantity objects into a single QuantityArray object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityArray)))
(def QuantityDistribution "QuantityDistribution[dist, unit] represents a distribution dist of quantities with unit specified by unit.\nQuantityDistribution[dist, {unit1, unit2, …}] represents a multivariate distribution with units {unit1, unit2, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityDistribution)))
(def QuantityForm "QuantityForm[expr, form] prints expr with all Quantity expressions using the specified unit display form form.\nQuantityForm[expr, {forms}] prints expr using the appropriate combination of the specified unit display forms forms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityForm)))
(def QuantityMagnitude "QuantityMagnitude[quantity] gives the amount of the specified quantity.\nQuantityMagnitude[quantity, unit] gives the value corresponding to quantity when converted to unit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityMagnitude)))
(def QuantityQ "QuantityQ[expr] gives True if expr is a Quantity with valid arguments, and False otherwise.\nQuantityQ[expr, dims] gives True if expr is a Quantity with physical dimensions dims, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityQ)))
(def QuantityUnit "QuantityUnit[quantity] returns the unit associated with the specified quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityUnit)))
(def QuantityVariable "QuantityVariable[var, \"pq\"] represents a variable with the label var and the corresponding physical quantity \"pq\".\nQuantityVariable[\"pq\"] represents the unlabeled physical quantity \"pq\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityVariable)))
(def QuantityVariableCanonicalUnit "QuantityVariableCanonicalUnit[quantityvariable] returns the canonical unit associated with the specified quantityvariable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityVariableCanonicalUnit)))
(def QuantityVariableDimensions "QuantityVariableDimensions[quantityvariable] returns a list of base dimensions associated with the specified quantityvariable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityVariableDimensions)))
(def QuantityVariableIdentifier "QuantityVariableIdentifier[quantityvariable] returns the identifier associated with the specified quantityvariable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityVariableIdentifier)))
(def QuantityVariablePhysicalQuantity "QuantityVariablePhysicalQuantity[var] returns the physical quantity associated with the quantity variable var.\nQuantityVariablePhysicalQuantity[var, type] returns the physical quantity using the format type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuantityVariablePhysicalQuantity)))
(def Quartics "Quartics is an option for functions that involve solving algebraic equations that specifies whether explicit forms for solutions to quartic equations should be given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quartics)))
(def QuartileDeviation "QuartileDeviation[data] gives the quartile deviation or semi-interquartile range of the elements in data. \nQuartileDeviation[data, {{a, b}, {c, d}}] uses the quantile definition specified by parameters a, b, c, d.\nQuartileDeviation[dist] gives the quartile deviation or semi-interquartile range of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuartileDeviation)))
(def QuartileSkewness "QuartileSkewness[data] gives the coefficient of quartile skewness for the elements in list.\nQuartileSkewness[data, {{a, b}, {c, d}}] uses the quantile definition specified by parameters a, b, c, d.\nQuartileSkewness[dist] gives the coefficient of quartile skewness for the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuartileSkewness)))
(def Quartiles "Quartiles[data] gives the {Overscript[q, ^]1/4, Overscript[q, ^]2/4, Overscript[q, ^]3/4} quantile estimates of the elements in data.\nQuartiles[data, {{a, b}, {c, d}}] uses the quantile definition specified by parameters a, b, c, d. \nQuartiles[dist] gives the {q 1/4, q 2/4, q 3/4} quantiles of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quartiles)))
(def Query "Query[operator1, operator2, …] represents a query that can be applied to a Dataset object, in which the successive operatori are applied at successively deeper levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Query)))
(def QuestionGenerator "QuestionGenerator[<|name1:>val1, name2:>val2, …|>, genfunc] represents a QuestionObject generated by applying genfunc to name1:>val1, name1:>val2, ….\nQuestionGenerator[CloudObject[…]] represents a cloud-deployed question generator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuestionGenerator)))
(def QuestionInterface "QuestionInterface[type, p1s1, p2s2, …|>] defines an interface for a QuestionObject using the given type and properties pi with settings si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuestionInterface)))
(def QuestionObject "QuestionObject[q, assess] represents the question q and the corresponding assessment assess.\nQuestionObject[assess] derives a question from the assessment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuestionObject)))
(def QuestionSelector "QuestionSelector[{qo1, qo2, …}] represents a list of questions from which one of the question objects qoi can be randomly selected.\nQuestionSelector[CloudObject[…]] represents a cloud-deployed question selector." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuestionSelector)))
(def QueueProperties "QueueProperties[qproc] gives a summary of properties for the queueing process qproc.\nQueueProperties[{qproc, i}] gives a summary of properties for the i ^th node in the queueing network process qproc.\nQueueProperties[data] gives a summary of properties for queueing simulation data. \nQueueProperties[…, \"property\"] gives the specified \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QueueProperties)))
(def QueueingNetworkProcess "QueueingNetworkProcess[γ, r, μ, c] represents an open (Jackson) queueing network process with arrival vector γ, routing probability matrix r, service vector μ, and service channel vector c. \nQueueingNetworkProcess[γ, r, μ, c, k] represents a closed (Gordon–Newell) queueing network process with k jobs in the system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QueueingNetworkProcess)))
(def QueueingProcess "QueueingProcess[λ, μ] represents an M/M/1 queue with arrival rate λ and service rate μ.\nQueueingProcess[λ, sdist] represents an M/G/1 queue with arrival rate λ and service distribution sdist.\nQueueingProcess[adist, μ] represents a G/M/1 queue with arrival distribution adist and service rate μ.\nQueueingProcess[adist, sdist] represents a G/G/1 queue with arrival distribution adist and service distribution sdist.\nQueueingProcess[…, …, c] represents a queueing process with c service channels.\nQueueingProcess[…, …, c, k] represents a queueing process with system capacity k.\nQueueingProcess[…, …, c, k, x0] represents a queueing process with initial state x0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QueueingProcess)))
(def Quiet "Quiet[expr] evaluates expr \"quietly\", without actually outputting any messages generated.\nQuiet[expr, {s1::t1, s2::t2, …}] quietens only the specified messages during the evaluation of expr.\nQuiet[expr, \"name\"] quietens only the named group of messages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quiet)))
(def QuietEcho "QuietEcho[expr] evaluates expr without letting Echo and related functions inside expr print any result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuietEcho)))
(def Quit "Quit[] terminates a Wolfram Language kernel session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quit)))
(def Quotient "Quotient[m, n] gives the integer quotient of m and n. \nQuotient[m, n, d] uses an offset d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Quotient)))
(def QuotientRemainder "QuotientRemainder[m, n] gives a list of the quotient and remainder from division of m by n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote QuotientRemainder)))
(def RFixedPoints "RFixedPoints[eqn, a[n], n] gives the fixed points for a recurrence equation.\nRFixedPoints[{eqn1, eqn2, …}, {a1[n], a2[n], …}, n] gives the fixed points for a system of recurrence equations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RFixedPoints)))
(def RGBColor "RGBColor[r, g, b] represents a color in the RGB color space, using red, blue and green components. \nRGBColor[r, g, b, a] specifies opacity a. \nRGBColor[\"string\"] returns a color from a hex color or an HTML color name.\nRGBColor[color] returns the RGB representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RGBColor)))
(def RSolve "RSolve[eqn, a[n], n] solves a recurrence equation for a[n]. \nRSolve[{eqn1, eqn2, …}, {a1[n], a2[n], …}, n] solves a system of recurrence equations. \nRSolve[eqn, a[n1, n2, …], {n1, n2, …}] solves a partial recurrence equation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RSolve)))
(def RSolveValue "RSolveValue[eqn, expr, n] gives the value of expr determined by a symbolic solution to the ordinary difference equation eqn with independent variable n. \nRSolveValue[{eqn1, eqn2, …}, expr, …] uses a symbolic solution for a list of difference equations. \nRSolveValue[eqn, expr, {n1, n2, …}] uses a solution for the partial recurrence equation eqn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RSolveValue)))
(def RStabilityConditions "RStabilityConditions[eqn, a[n], n] gives the fixed points and stability conditions for a recurrence equation.\nRStabilityConditions[{eqn1, eqn2, …}, {a1[n], a2[n], …}, n] gives the fixed points and stability conditions for a system of recurrence equations.\nRStabilityConditions[{eqn1, eqn2, …}, {a1[n], a2[n], …}, n, {pnt1, pnt2, …}] gives stability conditions only for the given fixed points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RStabilityConditions)))
(def RadialAxisPlot "RadialAxisPlot[{y1, y2, …, yn}] generates a radial axis plot where the yi are displayed on radial axes equally spaced around the origin.\nRadialAxisPlot[{data1, data2, …}] plots several datasets datai on the axes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadialAxisPlot)))
(def RadialGradientFilling "RadialGradientFilling[{col1, col2, …, coln}] is a two-dimensional graphics directive specifying that faces of polygons and other filled graphics objects are to be drawn using concentric circles of colors coli.\nRadialGradientFilling[{r1, r2, …, rn}{col1, col2, …, coln}] uses the colors coli at radii ri.\nRadialGradientFilling[{r1, r2, …, rn}{col1, col2, …, coln}, {x, y}] radiates from the center point {x, y}.\nRadialGradientFilling[{r1, r2, …, rn}{col1, col2, …, coln}, {{x, y}, {r1, r2}}] radiates from the center point {x, y} in concentric axis-aligned ellipsoids with semiaxes length proportional to ri.\nRadialGradientFilling[{r1, r2, …, rn}{col1, col2, …, coln}, {{x, y}, {r1, r2}}, padding] uses the specified padding when drawing beyond the boundary radii r1 and rn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadialGradientFilling)))
(def RadialGradientImage "RadialGradientImage[gcol] returns an image with values radially changing from center to corners based on gradient color gcol.\nRadialGradientImage[{pos1, pos2}gcol] returns an image where the gradient starts at pos1 and ends at pos2.\nRadialGradientImage[…, size] returns a radial gradient image of the specified size.\nRadialGradientImage[…, size, \"type\"] gives an image converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadialGradientImage)))
(def RadialityCentrality "RadialityCentrality[g] gives a list of radiality centralities for the vertices in the graph g.\nRadialityCentrality[g, \"In\"] gives a list of in-centralities for a directed graph g.\nRadialityCentrality[g, \"Out\"] gives a list of out-centralities for a directed graph g.\nRadialityCentrality[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadialityCentrality)))
(def RadicalBox "RadicalBox[x, n] is a low-level box construct that represents the displayed object Power[x, (n)^-1] in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadicalBox)))
(def RadicalBoxOptions "RadicalBoxOptions is an option for selections that specifies settings for RadicalBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadicalBoxOptions)))
(def RadioButton "RadioButton[x, val] represents a radio button whose setting x is set to val when the button is clicked. \nRadioButton[x, val] is displayed as  when x is val, and as  otherwise. \nRadioButton[Dynamic[x], val] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the button is clicked." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadioButton)))
(def RadioButtonBar "RadioButtonBar[x, {val1, val2, …}] represents a radio button bar with setting x and with labeled radio buttons for values vali.\nRadioButtonBar[Dynamic[x], {val1, val2, …}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time a radio button is pressed.\nRadioButtonBar[x, {val1lbl1, val2lbl2, …}] represents a radio button bar in which the radio button giving value vali is given label lbli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadioButtonBar)))
(def Radon "Radon[image] gives an image representing the discrete Radon transform of image.\nRadon[image, {w, h}] specifies the width w and the height h of the resulting image.\nRadon[image, {w, h}, {θ1, θ2}] computes the Radon transform only for angles from θ1 to θ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Radon)))
(def RadonTransform "RadonTransform[expr, {x, y}, {p, ϕ}] gives the Radon transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RadonTransform)))
(def RamanujanTau "RamanujanTau[n] gives the Ramanujan τ function τ (n)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RamanujanTau)))
(def RamanujanTauL "RamanujanTauL[s] gives the Ramanujan tau Dirichlet L-function L (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RamanujanTauL)))
(def RamanujanTauTheta "RamanujanTauTheta[t] gives the Ramanujan tau theta function θ (t)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RamanujanTauTheta)))
(def RamanujanTauZ "RamanujanTauZ[t] gives the Ramanujan tau Z-function Z (t)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RamanujanTauZ)))
(def Ramp "Ramp[x] gives x if x≥0 and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ramp)))
(def RandomArrayLayer "RandomArrayLayer[dist] represents a net layer that has no input and produces a random array from the univariate distribution dist.\nRandomArrayLayer[dfunc] uses the univariate distribution dfunc[input] for each input value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomArrayLayer)))
(def RandomChoice "RandomChoice[{e1, e2, …}] gives a pseudorandom choice of one of the ei. \nRandomChoice[list, n] gives a list of n pseudorandom choices. \nRandomChoice[list, {n1, n2, …}] gives an n1×n2×… array of pseudorandom choices. \nRandomChoice[{w1, w2, …}{e1, e2, …}] gives a pseudorandom choice weighted by the wi. \nRandomChoice[wlistelist, n] gives a list of n weighted choices.\nRandomChoice[wlistelist, {n1, n2, …}] gives an n1×n2×… array of weighted choices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomChoice)))
(def RandomColor "RandomColor[] gives a pseudorandom color directive in the RGBColor space.\nRandomColor[n] gives n pseudorandom colors.\nRandomColor[model] gives a color from the specified model.\nRandomColor[model, n] gives n colors.\nRandomColor[model, {n1, n2, …}] gives an array of colors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomColor)))
(def RandomComplex "RandomComplex[] gives a pseudorandom complex number with real and imaginary parts in the range 0 to 1.\nRandomComplex[{zmin, zmax}] gives a pseudorandom complex number in the rectangle with corners given by the complex numbers zmin and zmax.\nRandomComplex[zmax] gives a pseudorandom complex number in the rectangle whose corners are the origin and zmax.\nRandomComplex[range, n] gives a list of n pseudorandom complex numbers.\nRandomComplex[range, {n1, n2, …}] gives an n1×n2×… array of pseudorandom complex numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomComplex)))
(def RandomDate "RandomDate[] gives a pseudorandom date in the current calendar year.\nRandomDate[{datemin, datemax}] gives a pseudorandom date between the dates datemin and datemax.\nRandomDate[date] gives a pseudorandom date between the start and end of the calendar period date.\nRandomDate[quantity] gives a pseudorandom date between now and the time quantity duration from now.\nRandomDate[range, n] gives a list of n pseudorandom dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomDate)))
(def RandomEntity "RandomEntity[spec] gives a pseudorandom entity with a type determined by the specification spec.\nRandomEntity[spec, n] gives a list of n pseudorandom entities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomEntity)))
(def RandomFunction "RandomFunction[proc, {tmin, tmax}] generates a pseudorandom function from the process proc from tmin to tmax. \nRandomFunction[proc, {tmin, tmax, dt}] generates a pseudorandom function from tmin to tmax in steps of dt.\nRandomFunction[proc, …, n] generates an ensemble of n pseudorandom functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomFunction)))
(def RandomGeneratorState "RandomGeneratorState[…] gives a representation of the internal state of a pseudorandom generator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomGeneratorState)))
(def RandomGeoPosition "RandomGeoPosition[] gives a pseudorandom geo position uniformly distributed on the surface of the Earth.\nRandomGeoPosition[{{latmin, lonmin}, {latmax, lonmax}}] gives a pseudorandom geo position uniformly distributed in the given geo bounding box. \nRandomGeoPosition[g] gives a pseudorandom geo position uniformly distributed in the geo region g.\nRandomGeoPosition[g, n] gives a list of n pseudorandom geo positions uniformly distributed in the geo region g.\nRandomGeoPosition[g, {n1, n2, …}] gives an n1× n2×… pseudorandom geo position array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomGeoPosition)))
(def RandomGraph "RandomGraph[{n, m}] gives a pseudorandom graph with n vertices and m edges.\nRandomGraph[{n, m}, k] gives a list of k pseudorandom graphs.\nRandomGraph[gdist, …] samples from the random graph distribution gdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomGraph)))
(def RandomImage "RandomImage[max] gives an image with pseudorandom pixel values in the range 0 to max.\nRandomImage[{min, max}] generates pseudorandom pixel values in the range min to max.\nRandomImage[dist] generates pixel values using a symbolic distribution dist.\nRandomImage[…, size] generates a random image of the specified size.\nRandomImage[…, size, \"type\"] gives an image converted to the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomImage)))
(def RandomInstance "RandomInstance[expr] finds a random instance of an expression such as a geometric scene.\nRandomInstance[expr] finds a random instance of an expression such as a geometric scene or biomolecular sequence.\nRandomInstance[expr, n] finds n instances." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomInstance)))
(def RandomInteger "RandomInteger[{imin, imax}] gives a pseudorandom integer in the range {imin, imax}. \nRandomInteger[imax] gives a pseudorandom integer in the range {0, …, imax}. \nRandomInteger[] pseudorandomly gives 0 or 1. \nRandomInteger[range, n] gives a list of n pseudorandom integers. \nRandomInteger[range, {n1, n2, …}] gives an n1×n2×… array of pseudorandom integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomInteger)))
(def RandomPermutation "RandomPermutation[gr] gives a pseudorandom permutation in the permutation group gr.\nRandomPermutation[gr, n] gives a list of n pseudorandom permutations in the permutation group gr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPermutation)))
(def RandomPoint "RandomPoint[reg] gives a pseudorandom point uniformly distributed in the region reg.\nRandomPoint[reg, n] gives a list of n pseudorandom points uniformly distributed in the region reg.\nRandomPoint[reg, {n1, n2, …}] gives an n1× n2×… array of pseudorandom points.\nRandomPoint[reg, …, {{xmin, xmax}, …}] restricts to the bounds [xmin, xmax]×⋯." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPoint)))
(def RandomPointConfiguration "RandomPointConfiguration[pproc, reg] generates a pseudorandom spatial point configuration from the spatial point process pproc in the observation region reg. \nRandomPointConfiguration[pproc, reg, n] generates an ensemble of n spatial point configurations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPointConfiguration)))
(def RandomPolygon "RandomPolygon[n] gives a pseudorandom simple polygon with n vertex points.\nRandomPolygon[spec] gives a pseudorandom polygon with the specified specification spec.\nRandomPolygon[spec, k] gives a list of k pseudorandom polygons.\nRandomPolygon[dspec, …] gives a pseudorandom polygon in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPolygon)))
(def RandomPolyhedron "RandomPolyhedron[spec] gives a pseudorandom polyhedron with the specified specification spec.\nRandomPolyhedron[spec, k] gives a list of k pseudorandom polyhedra." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPolyhedron)))
(def RandomPrime "RandomPrime[{imin, imax}] gives a pseudorandom prime number in the range imin to imax.\nRandomPrime[imax] gives a pseudorandom prime number in the range 2 to imax.\nRandomPrime[range, n] gives a list of n pseudorandom primes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomPrime)))
(def RandomReal "RandomReal[] gives a pseudorandom real number in the range 0 to 1. \nRandomReal[{xmin, xmax}] gives a pseudorandom real number in the range xmin to xmax. \nRandomReal[xmax] gives a pseudorandom real number in the range 0 to xmax.\nRandomReal[range, n] gives a list of n pseudorandom reals. \nRandomReal[range, {n1, n2, …}] gives an n1×n2×… array of pseudorandom reals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomReal)))
(def RandomSample "RandomSample[{e1, e2, …}, n] gives a pseudorandom sample of n of the ei.\nRandomSample[{w1, w2, …}{e1, e2, …}, n] gives a pseudorandom sample of n of the ei chosen using weights wi.\nRandomSample[{e1, e2, …}] gives a pseudorandom permutation of the ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomSample)))
(def RandomSeeding "RandomSeeding is an option that specifies what seeding of pseudorandom generators should be done inside the operation of a function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomSeeding)))
(def RandomTime "RandomTime[] gives a pseudorandom time of day.\nRandomTime[{timemin, timemax}] gives a pseudorandom time between the times timemin and timemax.\nRandomTime[time] gives a pseudorandom times between the start and end of the time period time.\nRandomTime[quantity] gives a pseudorandom time between now and the time quantity duration from now.\nRandomTime[range, n] gives a list of n pseudorandom times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomTime)))
(def RandomTree "RandomTree[n] gives a pseudorandom tree with n nodes.\nRandomTree[n, k] gives a list of k pseudorandom trees.\nRandomTree[n, {k1, k2, …}] gives a k1× k2×… array of trees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomTree)))
(def RandomVariate "RandomVariate[dist] gives a pseudorandom variate from the symbolic distribution dist.\nRandomVariate[dist, n] gives a list of n pseudorandom variates from the symbolic distribution dist.\nRandomVariate[dist, {n1, n2, …}] gives an n1× n2×… array of pseudorandom variates from the symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomVariate)))
(def RandomWalkProcess "RandomWalkProcess[p] represents a random walk on a line with the probability of a positive unit step p and the probability of a negative unit step 1-p.\nRandomWalkProcess[p, q] represents a random walk with the probability of a positive unit step p, the probability of a negative unit step q, and the probability of a zero step 1-p-q." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomWalkProcess)))
(def RandomWord "RandomWord[] gives a pseudorandom commonly used word.\nRandomWord[n] gives a list of n pseudorandom words.\nRandomWord[type] gives a pseudorandom word of the specified type.\nRandomWord[type, n] gives a list of n pseudorandom words of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RandomWord)))
(def Range "Range[imax] generates the list {1, 2, …, imax}. \nRange[imin, imax] generates the list {imin, …, imax}. \nRange[imin, imax, di] uses step di." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Range)))
(def RangeFilter "RangeFilter[data, r] filters data by replacing every value by the difference of the maximum and minimum in its range-r neighborhood.\nRangeFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RangeFilter)))
(def RankedMax "RankedMax[list, n] gives the n ^th largest element in list.\nRankedMax[list, -n] gives the n ^th smallest element in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RankedMax)))
(def RankedMin "RankedMin[list, n] gives the n ^th smallest element in list.\nRankedMin[list, -n] gives the n ^th largest element in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RankedMin)))
(def RarerProbability "RarerProbability[dist, example] computes the probability for distribution dist to generate a sample that has a lower or equal PDF than example.\nRarerProbability[dist, {ex1, ex2, …}] computes the rarer probability for each exi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RarerProbability)))
(def Raster "Raster[{{a11, a12, …}, …}] is a two-dimensional graphics primitive which represents a rectangular array of gray cells. \nRaster[{{{r11, g11, b11}, …}, …}] represents an array of RGB color cells. \nRaster[{{{r11, g11, b11, α11}, …}, …}] represents an array of color cells with opacity αij. \nRaster[{{{a11, α11}, …}, …}] represents an array of gray cells with the specified opacities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Raster)))
(def Raster3D "Raster3D[{{{a11, a12, …}, …}, …}] is a three-dimensional graphics primitive that represents a cubical array of gray cells. \nRaster3D[{{{{r11, g11, b11}, …}, …}, …}] represents an array of RGB color cells. \nRaster3D[{{{{r11, g11, b11, α11}, …}, …}, …}] represents an array of color cells with opacity αij.\nRaster3D[array, {{xmin, ymin, zmin}, {xmax, ymax, zmax}}] represents a three-dimensional graphics primitive by giving the coordinates of opposite corners.\nRaster3D[array, coordinates, {amin, amax}] represents a three-dimensional graphics primitive whose voxel values should be scaled so that amin corresponds to 0 and amax corresponds to 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Raster3D)))
(def RasterSize "RasterSize is an option for Rasterize and related functions that determines the absolute pixel size of the raster generated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RasterSize)))
(def Rasterize "Rasterize[expr] returns a rasterized version of the displayed form of expr.\nRasterize[expr, elem] gives the element elem associated with the rasterized form of expr. \nRasterize[expr, {elem1, elem2, …}] gives a list of the specified elemi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rasterize)))
(def Rational "Rational is the head used for rational numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rational)))
(def RationalExpressionQ "RationalExpressionQ[expr, x] gives True if expr is structurally a rational expression in x, and False otherwise.\nRationalExpressionQ[expr, {x, y, …}] gives True if expr is structurally a rational expression in x, y, …, and False otherwise.\nRationalExpressionQ[expr, {x, y, …}, test] gives True if expr is structurally a rational expression in x, y, … with coefficients satisfying test, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RationalExpressionQ)))
(def Rationalize "Rationalize[x] converts an approximate number x to a nearby rational with small denominator. \nRationalize[x, dx] yields the rational number with smallest denominator that lies within dx of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rationalize)))
(def Rationals "Rationals represents the domain of rational numbers, as in x∈Rationals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rationals)))
(def Ratios "Ratios[list] gives the successive ratios of elements in list. \nRatios[list, n] gives the n ^th iterated ratios of list. \nRatios[list, {n1, n2, …}] gives the successive nk ^th ratios at level k in a nested list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ratios)))
(def RawBoxes "RawBoxes[boxes] is a low-level construct which is formatted as boxes without further interpretation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawBoxes)))
(def RawData "RawData[data] is a low-level representation of the contents of a cell in which Show Cell Expression has been toggled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawData)))
(def RawMemoryAllocate "RawMemoryAllocate[type] allocates enough raw memory to store a binary representation of the specified type.\nRawMemoryAllocate[type, len] allocates memory for len objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryAllocate)))
(def RawMemoryExport "RawMemoryExport[expr] exports a raw memory representation of expr.\nRawMemoryExport[expr, type] uses the specified element type when returning an array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryExport)))
(def RawMemoryFree "RawMemoryFree[ptr] frees the raw memory at a pointer ptr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryFree)))
(def RawMemoryImport "RawMemoryImport[ptr, format] imports raw memory from the pointer ptr with the specified format.\nRawMemoryImport[format] represents an operator form of RawMemoryImport that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryImport)))
(def RawMemoryRead "RawMemoryRead[ptr] reads raw memory from the pointer ptr.\nRawMemoryRead[ptr, offset] reads from an offset pointer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryRead)))
(def RawMemoryWrite "RawMemoryWrite[ptr, val] writes a binary representation of val to the raw memory at the pointer ptr.\nRawMemoryWrite[ptr, val, offset] writes to an offset pointer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawMemoryWrite)))
(def RawPointer "RawPointer[addr, type] represents a raw pointer to the specified type at the memory address addr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RawPointer)))
(def RayleighDistribution "RayleighDistribution[σ] represents the Rayleigh distribution with scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RayleighDistribution)))
(def Re "Re[z] gives the real part of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Re)))
(def ReIm "ReIm[z] gives the list {Re[z], Im[z]} of the number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReIm)))
(def ReImLabels "ReImLabels is an option for ReImPlot that specifies labels to use for the real and imaginary components." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReImLabels)))
(def ReImPlot "ReImPlot[f, {x, xmin, xmax}] generates a plot of Re[f] and Im[f] as functions of x∈ from xmin to xmax.\nReImPlot[{f1, f2, …}, {x, xmin, xmax}] plots several functions.\nReImPlot[{…, w[fi], …}, …] plots fi with features defined by the symbolic wrapper w.\nReImPlot[…, {x}∈reg] takes the variable x to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReImPlot)))
(def ReImStyle "ReImStyle is an option for ReImPlot that specifies styles to use for the real and imaginary components." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReImStyle)))
(def ReactionBalance "ReactionBalance[rxn] returns a version of the reaction rxn in which the stoichiometric coefficients for elements in the reactants and products are balanced." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReactionBalance)))
(def ReactionBalancedQ "ReactionBalancedQ[rxn] returns True if the given chemical reaction is balanced, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReactionBalancedQ)))
(def ReactionPDETerm "ReactionPDETerm[vars, a] represents a reaction term a u with reaction coefficient a and with model variables vars.\nReactionPDETerm[{u, {x1, …, xn}}, a, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReactionPDETerm)))
(def Read "Read[stream] reads one expression from an input stream and returns the expression. \nRead[stream, type] reads one object of the specified type. \nRead[stream, {type1, type2, …}] reads a sequence of objects of the specified types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Read)))
(def ReadByteArray "ReadByteArray[src] gives the contents of src as a ByteArray object.\nReadByteArray[src, n] reads the first n bytes from src.\nReadByteArray[src, term] reads until the termination condition term is satisfied." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReadByteArray)))
(def ReadLine "ReadLine[\"file\"] reads a line of text from a file and returns it as a string.\nReadLine[stream] reads a line of text from a stream and returns it as a string.\nReadLine[proc] reads a line of text generated by an external process and returns it as a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReadLine)))
(def ReadList "ReadList[\"file\"] reads all the remaining expressions in a file and returns a list of them. \nReadList[\"file\", type] reads objects of the specified type from a file, until the end of the file is reached. The list of objects read is returned. \nReadList[\"file\", {type1, type2, …}] reads objects with a sequence of types, until the end of the file is reached. \nReadList[\"file\", types, n] reads only the first n objects of the specified types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReadList)))
(def ReadProtected "ReadProtected is an attribute that prevents values associated with a symbol from being seen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReadProtected)))
(def ReadString "ReadString[\"file\"] reads the complete contents of a file and returns it as a string.\nReadString[stream] reads everything from a stream and returns it as a string.\nReadString[proc] reads everything generated by an external process and returns it as a string.\nReadString[src, term] reads until the terminator term is encountered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReadString)))
(def Real "Real is the head used for real (floating‐point) numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Real)))
(def RealAbs "RealAbs[x] gives the absolute value of the real number x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealAbs)))
(def RealBlockDiagonalForm "RealBlockDiagonalForm is an option for SchurDecomposition and related functions which specifies whether 2×2 blocks of real values should be used on matrix diagonals in place of complex values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealBlockDiagonalForm)))
(def RealDigits "RealDigits[x] gives a list of the digits in the approximate real number x, together with the number of digits that are to the left of the decimal point. \nRealDigits[x, b] gives a list of base‐b digits in x. \nRealDigits[x, b, len] gives a list of len digits. \nRealDigits[x, b, len, n] gives len digits starting with the coefficient of b^n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealDigits)))
(def RealExponent "RealExponent[x] gives log10 (x).\nRealExponent[x, b] gives logb (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealExponent)))
(def RealSign "RealSign[x] gives -1, 0 or 1 depending on whether x is negative, zero or positive." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealSign)))
(def RealValuedNumberQ "RealValuedNumberQ[expr] returns True if expr is a number with a real value and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealValuedNumberQ)))
(def RealValuedNumericQ "RealValuedNumericQ[expr] gives True if expr is a real-valued numeric quantity, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RealValuedNumericQ)))
(def Reals "Reals represents the domain of real numbers, as in x∈Reals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Reals)))
(def Reap "Reap[expr] gives the value of expr together with all expressions to which Sow has been applied during its evaluation. Expressions sown using Sow[e] or Sow[e, tagi] with different tags are given in different lists. \nReap[expr, patt] reaps only expressions sown with tags that match patt. \nReap[expr, {patt1, patt2, …}] puts expressions associated with each of the patti in a separate list. \nReap[expr, patt, f] returns {expr, {f[tag1, {e11, e12, …}], …}}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Reap)))
(def ReapVideo "ReapVideo[expr] gives a video whose frames are the expressions to which SowVideo has been applied during its evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReapVideo)))
(def RecalibrationFunction "RecalibrationFunction is an option for Classify, Predict and related functions that specifies how to post-process model predictions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecalibrationFunction)))
(def RecognitionPrior "RecognitionPrior is an option for recognition functions that specifies the prior probability or class for recognition." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecognitionPrior)))
(def ReconstructionMesh "ReconstructionMesh[{pt1, pt2, …}] reconstructs a mesh from a set of points pt1, pt2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReconstructionMesh)))
(def Record "Record represents a record in Read, Find, and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Record)))
(def RecordLists "RecordLists is an option for ReadList that specifies whether objects from separate records should be returned in separate sublists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecordLists)))
(def RecordSeparators "RecordSeparators is an option for Read, Find, and related functions that specifies the list of strings to be taken as delimiters for records." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecordSeparators)))
(def Rectangle "Rectangle[{xmin, ymin}, {xmax, ymax}] represents an axis-aligned filled rectangle from {xmin, ymin} to {xmax, ymax}.\nRectangle[{xmin, ymin}] corresponds to a unit square with its bottom-left corner at {xmin, ymin}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rectangle)))
(def RectangleChart "RectangleChart[{{x1, y1}, {x2, y2}, …}] makes a rectangle chart with bars of width xi and height yi. \nRectangleChart[{…, wi[{xi, yi}, …], …, wj[{xi, yj}, …], …}] makes a rectangle chart with bar features defined by the symbolic wrappers wk.\nRectangleChart[{data1, data2, …}] makes a rectangle chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RectangleChart)))
(def RectangleChart3D "RectangleChart3D[{{x1, y1, z1}, {x2, y2, z2}, …}] makes a 3D rectangle chart with bars of width xi, depth yi, and height zi.\nRectangleChart3D[{…, wi[{xi, yi, zi}, …], …, wj[{xi, yj, zj}, …], …}] makes a 3D rectangle chart with bar features defined by the symbolic wrappers wk.\nRectangleChart3D[{data1, data2, …}] makes a 3D rectangle chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RectangleChart3D)))
(def RectangularRepeatingElement "RectangularRepeatingElement[elem] represents a rectangular array of elements of type spec in an interpreter, API or form specification.\nRectangularRepeatingElement[elem, {maxrows, maxcolumns}] represents a rectangular array of elements of maximum size maxrows×maxcolums.\nRectangularRepeatingElement[elem, {{minrows, maxrows}, {mincolumns, maxcolumns}}] represents a rectangular array of elements of dimensions between minrows×mincolumns and maxrows×maxcolums." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RectangularRepeatingElement)))
(def RecurrenceFilter "RecurrenceFilter[{α, β}, x] filters x using a linear recurrence equation with coefficients α and β.\nRecurrenceFilter[tf, x] uses a discrete-time filter defined by the TransferFunctionModel tf.\nRecurrenceFilter[…, x, {y0, y -1, …}] uses a specified list {y0, y -1, …} as the initial condition.\nRecurrenceFilter[…, image] filters image.\nRecurrenceFilter[…, sound] filters sampled sound object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecurrenceFilter)))
(def RecurrenceTable "RecurrenceTable[eqns, expr, {n, nmax}] generates a list of values of expr for successive n based on solving the recurrence equations eqns.\nRecurrenceTable[eqns, expr, nspec] generates a list of values of expr over the range of n values specified by nspec.\nRecurrenceTable[eqns, expr, {n1, …}, {n2, …}, …] generates an array of values of expr for successive n1, n2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RecurrenceTable)))
(def Red "Red represents the color red in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Red)))
(def Reduce "Reduce[expr, vars] reduces the statement expr by solving equations or inequalities for vars and eliminating quantifiers. \nReduce[expr, vars, dom] does the reduction over the domain dom. Common choices of dom are Reals, Integers, and Complexes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Reduce)))
(def ReferenceAltitude "ReferenceAltitude is an option of Sunrise, AstroRiseSet and related functions that specifies how to define the instant of rise or set of an astronomical body or point on the celestial sphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReferenceAltitude)))
(def ReferenceLineStyle "ReferenceLineStyle is an option for QuantilePlot and similar functions that specifies the style used for the reference line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReferenceLineStyle)))
(def Refine "Refine[expr, assum] gives the form of expr that would be obtained if symbols in it were replaced by explicit numerical expressions satisfying the assumptions assum. \nRefine[expr] uses default assumptions specified by any enclosing Assuming constructs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Refine)))
(def ReflectionMatrix "ReflectionMatrix[v] gives the matrix that represents reflection of points in a mirror normal to the vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReflectionMatrix)))
(def ReflectionTransform "ReflectionTransform[v] gives a TransformationFunction that represents a reflection in a mirror through the origin, normal to the vector v.\nReflectionTransform[v, p] gives a reflection in a mirror through the point p, normal to the vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReflectionTransform)))
(def Refresh "Refresh[expr, opts] represents an object whose value in a Dynamic should be refreshed at times specified by the options opts. \nRefresh[expr, None] specifies that the value of expr should never automatically be refreshed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Refresh)))
(def RefreshRate "RefreshRate is an option to Animate and related functions which specifies the refresh rate for frames in animations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RefreshRate)))
(def Region "Region[reg] represents a geometric region.\nRegion[reg, options] gives a region that uses the specified options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Region)))
(def RegionBinarize "RegionBinarize[image, marker, d] gives a binary version of image that includes the foreground pixels of marker and also connected regions whose pixel values are within a distance d.\nRegionBinarize[image, marker, d, {t1, t2}] grows regions in marker by adding pixels whose average intensity is also constrained within an interval {t1, t2}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionBinarize)))
(def RegionBoundary "RegionBoundary[reg] represents the boundary of the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionBoundary)))
(def RegionBoundaryStyle "RegionBoundaryStyle is an option for plotting functions that specifies the boundary style for the region over which the plot is being drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionBoundaryStyle)))
(def RegionBounds "RegionBounds[reg] gives the bounds for the region reg.\nRegionBounds[reg, \"type\"] gives region bounds of the specified \"type\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionBounds)))
(def RegionCentroid "RegionCentroid[reg] gives the centroid of the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionCentroid)))
(def RegionCongruent "RegionCongruent[reg1, reg2] tests whether the regions reg1 and reg2 are congruent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionCongruent)))
(def RegionConvert "RegionConvert[reg, form] converts the region representation reg to the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionConvert)))
(def RegionDifference "RegionDifference[reg1, reg2] gives the difference of the regions reg1 and reg2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDifference)))
(def RegionDilation "RegionDilation[reg, r] gives the dilation of the region reg by a disk of radius r centered at the origin.\nRegionDilation[reg1, reg2] gives the dilation of the region reg1 by the region reg2.\nRegionDilation[reg1, reg2, {u, v}] gives the dilation of reg1 scaled by a factor u and reg2 scaled by a factor v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDilation)))
(def RegionDimension "RegionDimension[reg] gives the geometric dimension of the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDimension)))
(def RegionDisjoint "RegionDisjoint[reg1, reg2] returns True if the regions reg1 and reg2 are disjoint. \nRegionDisjoint[reg1, reg2, reg3, …] returns True if the regions reg1, reg2, reg3, … are pairwise disjoint." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDisjoint)))
(def RegionDistance "RegionDistance[reg, p] gives the minimum distance from the point p to the region reg.\nRegionDistance[reg1, reg2] gives the minimum distance between points in the regions reg1 and reg2.\nRegionDistance[reg] gives a RegionDistanceFunction[…] that can be applied repeatedly to different points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDistance)))
(def RegionDistanceFunction "RegionDistanceFunction[reg, …]  represents a function whose values give the distance from a point to the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionDistanceFunction)))
(def RegionEmbeddingDimension "RegionEmbeddingDimension[reg] gives the dimension of the space in which the region reg is embedded." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionEmbeddingDimension)))
(def RegionEqual "RegionEqual[reg1, reg2] returns True if the regions reg1 and reg2 are equal.\nRegionEqual[reg1, reg2, reg3, …] returns True if the regions reg1, reg2, reg3, … are all equal." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionEqual)))
(def RegionErosion "RegionErosion[reg, r] gives the erosion of the region reg by a disk of radius r centered at the origin.\nRegionErosion[reg1, reg2] gives the erosion of the region reg1 by the region reg2.\nRegionErosion[reg1, reg2, {u, v}] gives the erosion of reg1 scaled by a factor u and reg2 scaled by a factor v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionErosion)))
(def RegionFarthestDistance "RegionFarthestDistance[reg1, reg2] gives the farthest distance between points in the regions reg1 and reg2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionFarthestDistance)))
(def RegionFillingStyle "RegionFillingStyle is an option for plotting functions that specifies the style for the filled region over which the plot is being drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionFillingStyle)))
(def RegionFit "RegionFit[{p1, p2, …}, \"model\"] finds a geometric region \"model\" that best fits the points p1, p2, ….\nRegionFit[{p1, p2, …}, \"model\", \"prop\"] specifies what fit property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionFit)))
(def RegionFunction "RegionFunction is an option for plotting functions that specifies the region to include in the plot drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionFunction)))
(def RegionHausdorffDistance "RegionHausdorffDistance[reg1, reg2] gives the Hausdorff distance between the regions reg1 and reg2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionHausdorffDistance)))
(def RegionImage "RegionImage[reg] returns a rasterized grayscale 2D or 3D image of reg.\nRegionImage[reg, {{xmin, xmax}, …}] restricts to the bounds [xmin, xmax]×⋯." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionImage)))
(def RegionIntersection "RegionIntersection[reg1, reg2, …] gives the intersection of the regions reg1, reg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionIntersection)))
(def RegionMeasure "RegionMeasure[reg] gives the measure of the region reg.\nRegionMeasure[reg, d] gives the d-dimensional measure of the region reg.\nRegionMeasure[{x1, …, xn}, {{t1, a1, b1}, …, {tk, ak, bk}}] gives the k-measure of the parametric formula whose Cartesian coordinates xi are functions of tj.\nRegionMeasure[{x1, …, xn}, {{t1, a1, b1}, …, {tk, ak, bk}}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionMeasure)))
(def RegionMember "RegionMember[reg, {x, y, …}] gives True if the numeric point {x, y, …} is a member of the constant region reg and False otherwise.\nRegionMember[reg, {x, y, …}] gives conditions for the point {x, y, …} to be a member of reg.\nRegionMember[reg] returns a RegionMemberFunction[…] that can be applied repeatedly to different points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionMember)))
(def RegionMemberFunction "RegionMemberFunction[reg, …]  represents a function whose values give whether a point is in a region reg or not." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionMemberFunction)))
(def RegionMoment "RegionMoment[reg, {i1, i2, …, in}] computes the polynomial moment ∫x∈regx _1^i1 x _2^i2 ⋯ x _n^in for the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionMoment)))
(def RegionNearest "RegionNearest[reg, p] gives a point in the region reg that is nearest the point p. \nRegionNearest[reg] gives a RegionNearestFunction[…] that can be repeatedly applied to points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionNearest)))
(def RegionNearestFunction "RegionNearestFunction[reg, …]  represents a function whose values give the nearest point in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionNearestFunction)))
(def RegionPlot "RegionPlot[pred, {x, xmin, xmax}, {y, ymin, ymax}] makes a plot showing the region in which pred is True. \nRegionPlot[{pred1, pred2, …}, …] plots several regions corresponding to the predi.\nRegionPlot[{…, w[predi, …], …}, …] plots predi with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionPlot)))
(def RegionPlot3D "RegionPlot3D[pred, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] makes a plot showing the three-dimensional region in which pred is True. \nRegionPlot3D[{pred1, pred2, …}, …] plots several regions corresponding to the predi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionPlot3D)))
(def RegionProduct "RegionProduct[reg1, reg2] represents the Cartesian product of the regions reg1 and reg2.\nRegionProduct[reg1, reg2, …] represents the Cartesian product of the regions reg1, reg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionProduct)))
(def RegionQ "RegionQ[reg] gives True if reg is a valid region and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionQ)))
(def RegionResize "RegionResize[reg, l] resize the region reg to have the first side length l preserving side length ratios. \nRegionResize[reg, {lmax}] resize into a box with maximum side length lmax preserving side length ratios.\nRegionResize[reg, {l1, l2, …}] resize into a box with side lengths li. \nRegionResize[reg, {{x 1, min, x 1, max}, {x 2, min, x 2, max}, …}] resize into a box with corners {x 1, min, x 2, min, …} and {x 1, max, x 2, max, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionResize)))
(def RegionSimilar "RegionSimilar[reg1, reg2] tests whether the regions reg1 and reg2 are similar." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionSimilar)))
(def RegionSize "RegionSize is an option used by Printout3D to specify the overall size of an object to print for a region." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionSize)))
(def RegionSymmetricDifference "RegionSymmetricDifference[reg1, reg2, …] represents the symmetric difference of the regions reg1, reg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionSymmetricDifference)))
(def RegionUnion "RegionUnion[reg1, reg2, …] gives the union of the regions reg1, reg2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionUnion)))
(def RegionWithin "RegionWithin[reg1, reg2] returns True if reg2 is contained within reg1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegionWithin)))
(def RegisterExternalEvaluator "RegisterExternalEvaluator[sys, evaluator] registers the evaluator for use as an external evaluator with the language or system sys.\nRegisterExternalEvaluator[sys, evaluator, name] registers the evaluator using the assigned name name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegisterExternalEvaluator)))
(def RegularExpression "RegularExpression[\"regex\"] represents the generalized regular expression specified by the string \"regex\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegularExpression)))
(def RegularPolygon "RegularPolygon[n] gives the regular polygon with n vertices equally spaced around the unit circle.\nRegularPolygon[r, n] gives the regular polygon of radius r.\nRegularPolygon[{r, θ}, n] starts at angle θ with respect to the x axis.\nRegularPolygon[{x, y}, rspec, n] centers the polygon at {x, y}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegularPolygon)))
(def Regularization "Regularization is an option for Sum and Product that specifies what type of regularization to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Regularization)))
(def RegularlySampledQ "RegularlySampledQ[tseries] gives True if tseries is a regular time series, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RegularlySampledQ)))
(def RelationGraph "RelationGraph[f, {v1, v2, …}] gives the graph with vertices vi and edges from vi to vj whenever f[vi, vj] is True.\nRelationGraph[f, {v1, v2, …}, {w1, w2, …}] gives the graph with vertices vi, wj and edges from vi to wj whenever f[vi, wj] is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RelationGraph)))
(def RelationalDatabase "RelationalDatabase[…] represents schema information about a relational database.\nRelationalDatabase[db] gives the complete schema of the database referenced by db.\nRelationalDatabase[{table1 table2, …}, db] gives schema information related to the tables tablei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RelationalDatabase)))
(def ReleaseHold "ReleaseHold[expr] removes Hold, HoldForm, HoldPattern, HoldComplete and HoldCompleteForm in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReleaseHold)))
(def ReliabilityDistribution "ReliabilityDistribution[bexpr, {{x1, dist1}, {x2, dist2}, …}] represents the reliability distribution for a system with components xi having reliability distribution disti, where the whole system is working when the Boolean expression bexpr is True, and component xi is working when xi is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReliabilityDistribution)))
(def ReliefImage "ReliefImage[array] generates a relief image of an array of height values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReliefImage)))
(def ReliefPlot "ReliefPlot[array] generates a relief plot of an array of height values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReliefPlot)))
(def RemoteAuthorizationCaching "RemoteAuthorizationCaching is an option for RemoteConnect and related functions that determines whether caching of authorization information on remote hosts should be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteAuthorizationCaching)))
(def RemoteBatchJobAbort "RemoteBatchJobAbort[job] aborts a remote batch job." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchJobAbort)))
(def RemoteBatchJobObject "RemoteBatchJobObject[…] represents a remote batch job submitted by RemoteBatchSubmit or RemoteBatchMapSubmit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchJobObject)))
(def RemoteBatchJobs "RemoteBatchJobs[env] gives a list of RemoteBatchJobObject expressions representing batch jobs submitted using env.\nRemoteBatchJobs[env, type] returns only jobs of given type.\nRemoteBatchJobs[] gives a list of jobs submitted using $DefaultRemoteBatchSubmissionEnvironment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchJobs)))
(def RemoteBatchMapSubmit "RemoteBatchMapSubmit[env, f, list] submits an array batch job in which f is applied to each element on the first level of list, using the remote batch submission environment env.\nRemoteBatchMapSubmit[f, list] submits an array job using $DefaultRemoteBatchSubmissionEnvironment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchMapSubmit)))
(def RemoteBatchSubmissionEnvironment "RemoteBatchSubmissionEnvironment[\"provider\", assoc] represents a remote batch job submission environment for provider with properties assoc.\nRemoteBatchSubmissionEnvironment[\"provider\"] represents a submission environment for provider with default optional properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchSubmissionEnvironment)))
(def RemoteBatchSubmit "RemoteBatchSubmit[env, expr] submits expr for evaluation using the remote batch submission environment env.\nRemoteBatchSubmit[expr] submits expr for evaluation using $DefaultRemoteBatchSubmissionEnvironment." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteBatchSubmit)))
(def RemoteConnect "RemoteConnect[\"host\"] connects to the specified remote host.\nRemoteConnect[IPAddress[\"address\"]] connects to the machine with the specified IP address.\nRemoteConnect[\"host\", username] connects using the specified username for the remote host.\nRemoteConnect[\"host\", username, password] connects using the specified username and password." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteConnect)))
(def RemoteConnectionObject "RemoteConnectionObject[…] is an object that represents a remote connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteConnectionObject)))
(def RemoteEvaluate "RemoteEvaluate[expr] gives the result of evaluating expr using your current default remote Wolfram Language kernel.\nRemoteEvaluate[ker, expr] gives the result of evaluating expr using the kernel specified by ker.\nRemoteEvaluate[{ker1, ker2, …}, expr] gives a list of the results of evaluating expr using each of the kernels keri.\nRemoteEvaluate[ker, expr, h] wraps the head h around the result produced before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteEvaluate)))
(def RemoteFile "RemoteFile[URL[\"uri\"]] is a symbolic representation of a file on a remote machine." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteFile)))
(def RemoteInputFiles "RemoteInputFiles is an option for RemoteBatchSubmit and RemoteBatchMapSubmit that specifies local files to be uploaded and made available within remote jobs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteInputFiles)))
(def RemoteProviderSettings "RemoteProviderSettings is an option for RemoteBatchSubmit and RemoteBatchMapSubmit that specifies provider-specific settings for a batch job." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteProviderSettings)))
(def RemoteRun "RemoteRun[\"host\", \"command\"] runs the specified operating system command on the remote host, returning the exit code obtained.\nRemoteRun[IPAddress[\"address\"], \"command\"] runs the command on the machine with the specified IP address.\nRemoteRun[obj, \"command\"] run the command on the remote host specified by the RemoteConnectionObject obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteRun)))
(def RemoteRunProcess "RemoteRunProcess[\"host\", \"command\"] runs the specified system command on the remote host, returning information on the outcome.\nRemoteRunProcess[IPAddress[\"address\"], \"command\"] runs the command on the machine with the specified IP address.\nRemoteRunProcess[obj, \"command\"] run the command on the remote host specified by the RemoteConnectionObject obj.\nRemoteRunProcess[\"host\", {\"command\", arg1, arg2, …}] runs the specified command, with command-line arguments argi.\nRemoteRunProcess[\"host\", command, \"prop\"] returns only the specified property.\nRemoteRunProcess[\"host\", command, prop, input] feeds the specified initial input to the command." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoteRunProcess)))
(def RemovalConditions "RemovalConditions is an option for AttachCell that specifies conditions under which to remove the attached cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemovalConditions)))
(def Remove "Remove[s1, s2, …] removes the symbols si completely, so that their names are no longer recognized by the Wolfram Language.\nRemove[patt1, patt2, …] removes all symbols whose names textually match any of the arbitrary string patterns patti.\nRemove[{spec1, spec2, …}] removes any symbols that are equal to or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Remove)))
(def RemoveAlphaChannel "RemoveAlphaChannel[color] removes opacity from color.\nRemoveAlphaChannel[color, bg] removes opacity by blending color with the background color bg.\nRemoveAlphaChannel[image, …] removes opacity from all pixels in image.\nRemoveAlphaChannel[video, …] removes opacity from frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveAlphaChannel)))
(def RemoveAudioStream "RemoveAudioStream[] deletes all AudioStream objects.\nRemoveAudioStream[stream] deletes the AudioStream object stream.\nRemoveAudioStream[audio] deletes all the AudioStream objects stemming from audio." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveAudioStream)))
(def RemoveBackground "RemoveBackground[image] returns an image with an alpha channel where the background is transparent. \nRemoveBackground[image, model] uses foreground or background model specification.\nRemoveBackground[video, …] performs background removal on frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveBackground)))
(def RemoveChannelListener "RemoveChannelListener[obj] removes obj from the list of currently active channel listeners.\nRemoveChannelListener[{obj1, obj2, …}] removes all the obji.\nRemoveChannelListener[] removes all currently active channel listeners." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveChannelListener)))
(def RemoveChannelSubscribers "RemoveChannelSubscribers[channel] removes all subscribers from the specified channel.\nRemoveChannelSubscribers[channel, user] removes the specified user from the subscriber list.\nRemoveChannelSubscribers[channel, {user1, user2, …}] removes the specified subscribers useri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveChannelSubscribers)))
(def RemoveDiacritics "RemoveDiacritics[string] replaces characters in string that have diacritics by their base ASCII characters, when possible." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveDiacritics)))
(def RemoveInputStreamMethod "RemoveInputStreamMethod[\"name\"] removes a custom input stream method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveInputStreamMethod)))
(def RemoveOutputStreamMethod "RemoveOutputStreamMethod[\"name\"] removes a custom output stream method." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveOutputStreamMethod)))
(def RemoveUsers "RemoveUsers[group, {user1, …}] removes the users useri from the permissions group group." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveUsers)))
(def RemoveVideoStream "RemoveVideoStream[] deletes all VideoStream objects.\nRemoveVideoStream[stream] deletes the VideoStream object stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RemoveVideoStream)))
(def RenameColumns "RenameColumns[tab, {col1newcol1, …}] renames column coli to newcoli in a Tabular object tab.\nRenameColumns[tab, {newcol1, newcol2, …}] renames column i to newcoli in tab.\nRenameColumns[renamings] represents an operator form of RenameColumns that can be applied to a Tabular object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenameColumns)))
(def RenameDirectory "RenameDirectory[dir1, dir2] renames the directory dir1 to dir2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenameDirectory)))
(def RenameFile "RenameFile[file1, file2] renames file1 to file2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenameFile)))
(def RenderingOptions "RenderingOptions is an option for Style, Cell and related constructs that specifies options related to 3D rendering." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenderingOptions)))
(def RenewalProcess "RenewalProcess[rdist] represents a renewal process with interarrival times distributed according to rdist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenewalProcess)))
(def RenkoChart "RenkoChart[{{date1, p1}, {date2, p2}, …}] makes a Renko chart with prices pi at date datei.\nRenkoChart[{\"name\", daterange}] makes a Renko chart of closing prices for the financial entity \"name\" over the date range daterange.\nRenkoChart[{…}, s] makes a Renko chart with brick height of fraction s of the average price." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RenkoChart)))
(def RepairMesh "RepairMesh[mreg] repairs defects in the mesh region mreg.\nRepairMesh[mreg, {def1, …}] repairs only the specified defects def1, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RepairMesh)))
(def Repeated "p.. or Repeated[p] is a pattern object that represents a sequence of one or more expressions, each matching p. \nRepeated[p, max] represents from 1 to max expressions matching p.\nRepeated[p, {min, max}] represents between min and max expressions matching p.\nRepeated[p, {n}] represents exactly n expressions matching p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Repeated)))
(def RepeatedNull "p... or RepeatedNull[p] is a pattern object that represents a sequence of zero or more expressions, each matching p. \nRepeatedNull[p, max] represents from 0 to max expressions matching p.\nRepeatedNull[p, {min, max}] represents between min and max expressions matching p.\nRepeatedNull[p, {n}] represents exactly n expressions matching p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RepeatedNull)))
(def RepeatedTiming "RepeatedTiming[expr] evaluates expr repeatedly and returns a list of the average time in seconds used, together with the result obtained.\nRepeatedTiming[expr, t] does repeated evaluation for at least t seconds." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RepeatedTiming)))
(def RepeatingElement "RepeatingElement[spec] represents an arbitrarily repeated type of element in an interpreter, API or form specification.\nRepeatingElement[spec, max] represents an element that can appear at most max times.\nRepeatingElement[spec, {min, max}] represents an element that can appear between min and max times.\nRepeatingElement[spec, {n, {min, max}}] represents an element that initially appears n times in a form.\nRepeatingElement[spec, {{i, n}, {min, max}}] represents an element where i takes successive values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RepeatingElement)))
(def Replace "Replace[expr, rules] applies a rule or list of rules in an attempt to transform the entire expression expr. \nReplace[expr, rules, levelspec] applies rules to parts of expr specified by levelspec. \nReplace[rules] represents an operator form of Replace that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Replace)))
(def ReplaceAll "expr/.rules or ReplaceAll[expr, rules] applies a rule or list of rules in an attempt to transform each subpart of an expression expr. \nReplaceAll[rules] represents an operator form of ReplaceAll that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplaceAll)))
(def ReplaceAt "ReplaceAt[expr, rules, n] transforms expr by replacing the n^th element using rules.\nReplaceAt[expr, rules, {i, j, …}] replaces the part of expr at position {i, j, …}.\nReplaceAt[expr, rules, {{i1, j1, …}, {i2, j2, …}, …}] replaces parts at several positions.\nReplaceAt[rules, pos] represents an operator form of ReplaceAt that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplaceAt)))
(def ReplaceImageValue "ReplaceImageValue[image, posval] changes the pixel values at position pos in image to val.\nReplaceImageValue[image, posval, \"type\"] assumes val to be of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplaceImageValue)))
(def ReplaceList "ReplaceList[expr, rules] attempts to transform the entire expression expr by applying a rule or list of rules in all possible ways, and returns a list of the results obtained. \nReplaceList[expr, rules, n] gives a list of at most n results. \nReplaceList[rules] is an operator form of ReplaceList that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplaceList)))
(def ReplacePart "ReplacePart[expr, inew] yields an expression in which the i ^th part of expr is replaced by new. \nReplacePart[expr, {i1new1, i2new2, …}] replaces parts at positions in by newn. \nReplacePart[expr, {i, j, …}new] replaces the part at position {i, j, …}. \nReplacePart[expr, {{i1, j1, …}new1, …}] replaces parts at positions {in, jn, …} by newn. \nReplacePart[expr, {{i1, j1, …}, …}new] replaces all parts at positions {in, jn, …} by new. \nReplacePart[inew] represents an operator form of ReplacePart that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplacePart)))
(def ReplacePixelValue "ReplacePixelValue[image, pposval] changes the pixel values at pixel position ppos in image to val.\nReplacePixelValue[image, pposval, \"type\"] assumes val to be of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplacePixelValue)))
(def ReplaceRepeated "expr//.rules repeatedly performs replacements until expr no longer changes. \nReplaceRepeated[rules] represents an operator form of ReplaceRepeated that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplaceRepeated)))
(def ReplicateLayer "ReplicateLayer[n] represents a net layer that takes an input of dimensions {d1, d2, …} and replicates it n times to produce an output of dimensions {n, d1, d2, …}.\nReplicateLayer[{n1, n2, …, nm}] represents a net layer that takes an input of dimensions {d1, d2, …} and replicates it to produce an output of dimensions {n1, n2, …, nm, d1, d2, …}.\nReplicateLayer[dims, m] replicates so that dims appears at position m in the list of output dimensions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReplicateLayer)))
(def RequiredPhysicalQuantities "RequiredPhysicalQuantities is an option for FormulaLookup that specifies physical quantities that must be used by the formulas returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RequiredPhysicalQuantities)))
(def Resampling "Resampling is an option that specifies the method to be used for resampling images or arrays." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Resampling)))
(def ResamplingAlgorithmData "ResamplingAlgorithmData[rs, \"prop\"] gives the specified property \"prop\" for the resampling rs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResamplingAlgorithmData)))
(def ResamplingMethod "ResamplingMethod is an option for functions such as TemporalData and MovingMap that specifies how values in between given times should be computed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResamplingMethod)))
(def Rescale "Rescale[x, {min, max}] gives x rescaled to run from 0 to 1 over the range min to max. \nRescale[x, {min, max}, {ymin, ymax}] gives x rescaled to run from ymin to ymax over the range min to max. \nRescale[list] rescales each element of list to run from 0 to 1 over the range Min[list] to Max[list]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rescale)))
(def RescalingTransform "RescalingTransform[{{xmin, xmax}, {ymin, ymax}, …}, {{xpmin, xpmax}, …}] gives a TransformationFunction that rescales the region with coordinate ranges xmin to xmax, etc. to the region with coordinate ranges xpmin to xpmax, etc.\nRescalingTransform[{{xmin, xmax}, {ymin, ymax}, …}] gives a TransformationFunction that rescales to the unit square, cube, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RescalingTransform)))
(def ResetDirectory "ResetDirectory[] resets the current working directory to its previous value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResetDirectory)))
(def ReshapeLayer "ReshapeLayer[spec] represents a net layer that reshapes the input array according to the specification spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReshapeLayer)))
(def Residue "Residue[expr, {z, z0}] finds the residue of expr at the point z=z0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Residue)))
(def ResidueSum "ResidueSum[f, z] finds the sum of residues of the meromorphic function f with the variable z.\nResidueSum[{f, cons}, z] finds the sum of residues of f within the solution set of the constraints cons." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResidueSum)))
(def ResizeLayer "ResizeLayer[{d}] represents a layer performing one-dimensional resizing of a two-dimensional array.\nResizeLayer[{d1, …, dn}] represents a layer performing n-dimensional resizing of a (n+1)-dimensional array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResizeLayer)))
(def Resolve "Resolve[expr] attempts to resolve expr into a form that eliminates ForAll and Exists quantifiers. \nResolve[expr, dom] works over the domain dom. Common choices of dom are Complexes, Reals, and Booleans." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Resolve)))
(def ResolveContextAliases "ResolveContextAliases is an option for Names, Contexts and related functions to control whether to resolve aliases when searching for symbols that match a string pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResolveContextAliases)))
(def ResourceData "ResourceData[resource] gives the primary content of the specified resource.\nResourceData[resource, elem] gives element elem of the content of the resource." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceData)))
(def ResourceFunction "ResourceFunction[resource] represents the function associated with the specified resource.\nResourceFunction[resource, prop] gives the specified property of the resource." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceFunction)))
(def ResourceObject "ResourceObject[\"name\"] represents a resource with the specified name.\nResourceObject[\"uuid\"] represents a resource with the specified UUID.\nResourceObject[loc] imports a resource from the specified location.\nResourceObject[assoc] gives a resource with content and metadata specified by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceObject)))
(def ResourceRegister "ResourceRegister[resource] creates a persistent cache of a resource object that can be referenced by name.\nResourceRegister[resource, loc] stores the resource in persistence location loc.\nResourceRegister[resource, {loc1, …}] stores the resource in multiple persistence locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceRegister)))
(def ResourceRemove "ResourceRemove[resource] removes the specified resource from the system on which it is run." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceRemove)))
(def ResourceSearch "ResourceSearch[form] gives a dataset of resources that contain text matching form.\nResourceSearch[form, prop] returns the property prop of the search results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceSearch)))
(def ResourceSubmit "ResourceSubmit[resource] submits the specified resource object to be reviewed for publication.\nResourceSubmit[new, old] submits the resource new as the updated version of the resource old." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceSubmit)))
(def ResourceSystemBase "ResourceSystemBase is an option for ResourceObject, ResourceSearch and related functions specifying the location of the public resource system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceSystemBase)))
(def ResourceSystemPath "ResourceSystemPath is an option for ResourceObject, ResourceSearch and related functions for specifying locations at which to look for resources." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceSystemPath)))
(def ResourceUpdate "ResourceUpdate[resource] updates to the latest version of the specified resource object.\nResourceUpdate[\"name\"] updates the resource with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceUpdate)))
(def ResourceVersion "ResourceVersion is an option for ResourceObject, ResourceFunction and related functions for specifying the version of a resource." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResourceVersion)))
(def ResponseForm "ResponseForm[expr, \"fmt\"] represents a response record to be given in a specified format when requested during the execution of a function specified by APIFunction, FormFunction, etc.\nResponseForm[expr, \"fmt\", {elem1, elem2, …}] includes only the response record elements elemi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ResponseForm)))
(def Rest "Rest[expr] gives expr with the first element removed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rest)))
(def RestartInterval "RestartInterval is an option controlling the restart behavior of functions such as ContinuousTask." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RestartInterval)))
(def Restricted "Restricted[form, cond, …] represents a form for Interpreter and related functions restricted according to the conditions cond." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Restricted)))
(def Resultant "Resultant[poly1, poly2, var] computes the resultant of the polynomials poly1 and poly2 with respect to the variable var. \nResultant[poly1, poly2, var, Modulusp] computes the resultant modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Resultant)))
(def Return "Return[expr] returns the value expr from a function. \nReturn[] returns the value Null." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Return)))
(def ReturnExpressionPacket "ReturnExpressionPacket[expr] is a WSTP packet that contains the expression expr, the result of an EnterExpressionPacket evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReturnExpressionPacket)))
(def ReturnPacket "ReturnPacket[expr] is a WSTP packet that contains the expression expr, the result of an EvaluatePacket evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReturnPacket)))
(def ReturnReceiptFunction "ReturnReceiptFunction is an option for MailReceiverFunction that specifies what function to apply if a return receipt is requested for mail received by a MailReceiverFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReturnReceiptFunction)))
(def ReturnTextPacket "ReturnTextPacket[string] is a WSTP packet containing string, the result of an EnterTextPacket evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReturnTextPacket)))
(def Reverse "Reverse[expr] reverses the order of the elements in expr. \nReverse[expr, n] reverses elements at level n in expr.\nReverse[expr, {n1, n2, …}] reverses elements at levels n1, n2, … in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Reverse)))
(def ReverseApplied "ReverseApplied[f] represents a form of f that takes arguments in reverse order so that ReverseApplied[f][x1, …, xn] is equivalent to f[xn, …, x1].\nReverseApplied[f, n] represents a form of f that reverses the first n arguments before evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseApplied)))
(def ReverseBiorthogonalSplineWavelet "ReverseBiorthogonalSplineWavelet[] represents a reverse biorthogonal spline wavelet of order 4 and dual order 2.\nReverseBiorthogonalSplineWavelet[n, m] represents a reverse biorthogonal spline wavelet of order n and dual order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseBiorthogonalSplineWavelet)))
(def ReverseElement "ReverseElement[x, y, …] displays as x∋y∋…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseElement)))
(def ReverseEquilibrium "ReverseEquilibrium[x, y, …] displays as x⇋y⇋…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseEquilibrium)))
(def ReverseGraph "ReverseGraph[g] gives the reverse graph of the directed graph g.\nReverseGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseGraph)))
(def ReverseSort "ReverseSort[list] sorts the elements of list into reverse canonical order. \nReverseSort[list, p] sorts using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseSort)))
(def ReverseSortBy "ReverseSortBy[list, f] sorts the elements of list using the reverse canonical order defined by applying f to each of them.\nReverseSortBy[list, f, p] sorts the elements of list using the function p to compare pairs of results of applying f to each element.\nReverseSortBy[f] represents an operator form of ReverseSortBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseSortBy)))
(def ReverseUpEquilibrium "ReverseUpEquilibrium[x, y, …] displays as x⥯y⥯…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ReverseUpEquilibrium)))
(def RevolutionAxis "RevolutionAxis is an option for RevolutionPlot3D which specifies the revolution axis around which the curve should be rotated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RevolutionAxis)))
(def RevolutionPlot3D "RevolutionPlot3D[fz, {t, tmin, tmax}] generates a plot of the surface of revolution with height fz at radius t.\nRevolutionPlot3D[fz, {t, tmin, tmax}, {θ, θmin, θmax}] takes the azimuthal angle θ to vary between θmin and θmax.\nRevolutionPlot3D[{fx, fz}, {t, tmin, tmax}] generates a plot of the surface obtained by rotating the parametric curve with x, z coordinates {fx, fz} around the z axis.\nRevolutionPlot3D[{fx, fz}, {t, tmin, tmax}, {θ, θmin, θmax}] takes the azimuthal angle θ to vary from θmin to θmax.\nRevolutionPlot3D[{fx, fy, fz}, {t, tmin, tmax}, …] plots the surface obtained by rotating the parametric curve with x, y, z coordinates {fx, fy, fz}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RevolutionPlot3D)))
(def RiccatiSolve "RiccatiSolve[{a, b}, {q, r}] gives the matrix x that is the stabilizing solution of the continuous algebraic Riccati equation a^†.x+x.a-x.b.r^-1.b^†.x+q0.\nRiccatiSolve[{a, b}, {q, r, p}] solves the equation a^†.x+x.a-(x.b+p).r^-1.(b^†.x+p^†)+q0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiccatiSolve)))
(def RiceDistribution "RiceDistribution[α, β] represents a Rice distribution with shape parameters α and β.\nRiceDistribution[m, α, β] represents a Norton–Rice distribution with parameters m, α, and β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiceDistribution)))
(def RidgeFilter "RidgeFilter[data] computes a measure for the presence of a ridge at every position of data.\nRidgeFilter[data, σ] uses the specified ridge scale σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RidgeFilter)))
(def RiemannR "RiemannR[x] gives the Riemann prime counting function R (x)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiemannR)))
(def RiemannSiegelTheta "RiemannSiegelTheta[t] gives the Riemann–Siegel function ϑ (t)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiemannSiegelTheta)))
(def RiemannSiegelZ "RiemannSiegelZ[t] gives the Riemann–Siegel function Z (t)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiemannSiegelZ)))
(def RiemannXi "RiemannXi[s] gives the Riemann xi function ξ (s)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiemannXi)))
(def Riffle "Riffle[{e1, e2, …}, x] gives {e1, x, e2, x, …}. \nRiffle[{e1, e2, …}, {x1, x2, …}] gives {e1, x1, e2, x2, …}. \nRiffle[list, x, n] yields a list in which every n ^th element is x. \nRiffle[list, x, {imin, imax, n}] yields a list in which x appears if possible at positions imin, imin+n, imin+2n, … , imax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Riffle)))
(def Right "Right is a symbol that represents the right-hand side for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Right)))
(def RightArrow "RightArrow[x, y, …] displays as x→y→…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightArrow)))
(def RightArrowBar "RightArrowBar[x, y, …] displays as x⇥y⇥…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightArrowBar)))
(def RightArrowLeftArrow "RightArrowLeftArrow[x, y, …] displays as x⇄y⇄…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightArrowLeftArrow)))
(def RightComposition "RightComposition[f1, f2, f3, …] represents a composition on the right of the functions f1, f2, f3, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightComposition)))
(def RightCosetRepresentative "RightCosetRepresentative[group, g] returns the smallest element in the right coset of products of the elements of group by g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightCosetRepresentative)))
(def RightDownTeeVector "RightDownTeeVector[x, y, …] displays as x⥝y⥝…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightDownTeeVector)))
(def RightDownVector "RightDownVector[x, y, …] displays as x⇂y⇂…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightDownVector)))
(def RightDownVectorBar "RightDownVectorBar[x, y, …] displays as x⥕y⥕…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightDownVectorBar)))
(def RightTee "RightTee[x, y] displays as x⊢y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTee)))
(def RightTeeArrow "RightTeeArrow[x, y, …] displays as x↦y↦…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTeeArrow)))
(def RightTeeVector "RightTeeVector[x, y, …] displays as x⥛y⥛…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTeeVector)))
(def RightTriangle "RightTriangle[x, y, …] displays as x⊳y⊳…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTriangle)))
(def RightTriangleBar "RightTriangleBar[x, y, …] displays as x⧐y⧐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTriangleBar)))
(def RightTriangleEqual "RightTriangleEqual[x, y, …] displays as x⊵y⊵…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightTriangleEqual)))
(def RightUpDownVector "RightUpDownVector[x, y, …] displays as x⥏y⥏…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightUpDownVector)))
(def RightUpTeeVector "RightUpTeeVector[x, y, …] displays as x⥜y⥜…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightUpTeeVector)))
(def RightUpVector "RightUpVector[x, y, …] displays as x↾y↾…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightUpVector)))
(def RightUpVectorBar "RightUpVectorBar[x, y, …] displays as x⥔y⥔…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightUpVectorBar)))
(def RightVector "RightVector[x, y, …] displays as x⇀y⇀…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightVector)))
(def RightVectorBar "RightVectorBar[x, y, …] displays as x⥓y⥓…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RightVectorBar)))
(def RipleyK "RipleyK[pdata, r] estimates Ripley's K function K(r) at radius r for point data pdata.\nRipleyK[pproc, r] computes K(r) for the point process pproc.\nRipleyK[bdata, r] computes K(r) for binned data bdata. \nRipleyK[pspec] generates the function K that can be applied repeatedly at different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RipleyK)))
(def RipleyRassonRegion "RipleyRassonRegion[pdata] gives an estimated observation based on the point data pdata." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RipleyRassonRegion)))
(def RiskAchievementImportance "RiskAchievementImportance[rdist, t] gives the risk achievement importances for all components in the ReliabilityDistribution rdist at time t.\nRiskAchievementImportance[fdist, t] gives the risk achievement importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiskAchievementImportance)))
(def RiskReductionImportance "RiskReductionImportance[rdist, t] gives the risk reduction importances for all components in the ReliabilityDistribution rdist at time t.\nRiskReductionImportance[fdist, t] gives the risk reduction importances for all components in the FailureDistribution fdist at time t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RiskReductionImportance)))
(def RobustConvexOptimization "RobustConvexOptimization[f, ForAll[pars, pcons, vcons], vars] finds values of vars that give the minimum value of f for vars that satisfy the constraints vcons for all possible values of the parameters pars that satisfy the parametric constraints pcons.\nRobustConvexOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RobustConvexOptimization)))
(def RogersTanimotoDissimilarity "RogersTanimotoDissimilarity[u, v] gives the Rogers–Tanimoto dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RogersTanimotoDissimilarity)))
(def RollPitchYawAngles "RollPitchYawAngles[r] gives the roll-pitch-yaw angles {α, β, γ} corresponding to the rotation matrix r.\nRollPitchYawAngles[r, {a, b, c}] gives the roll-pitch-yaw angles {α, β, γ} corresponding to rotation order {a, b, c}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RollPitchYawAngles)))
(def RollPitchYawMatrix "RollPitchYawMatrix[{α, β, γ}] gives the 3D rotation matrix formed by rotating by α around the initial z axis, then by β around the initial y axis, and then by γ around the initial x axis. \nRollPitchYawMatrix[{α, β, γ}, {a, b, c}] gives the 3D rotation matrix formed by rotating by α around the fixed a axis, then by β around the fixed b axis, and then by γ around the fixed c axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RollPitchYawMatrix)))
(def RomanNumeral "RomanNumeral[n] gives a string corresponding to the Roman numeral form of the integer n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RomanNumeral)))
(def Root "Root[{f, c}] represents the exact root of the general equation f[x]0 near x=c.\nRoot[{{f1, …, fn}, {c1, …, cn}}, j] represents the j ^th coordinate of the exact root of the system of equations {f1[x1, …, xn]0, …, fn[x1, …, xn]0} near {x1, …, xn}={c1, …, cn}.\nRoot[f, k] represents the exact k ^th root of the polynomial equation f[x]0. \nRoot[{f1, f2, …}, {k1, k2, …}] represents the last coordinate of the exact vector {a1, a2, …} such that ai is the ki ^th root of the polynomial equation fi[a1, …, a i-1, x]0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Root)))
(def RootApproximant "RootApproximant[x] converts the number x to one of the \"simplest\" algebraic numbers that approximates it well.\nRootApproximant[x, n] finds an algebraic number of degree at most n that approximates x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootApproximant)))
(def RootIntervals "RootIntervals[{poly1, poly2, …}] gives a list of isolating intervals for the real roots of any of the polyi, together with a list of which polynomials actually have each successive root.\nRootIntervals[poly] gives isolating intervals for real roots of a single polynomial. \nRootIntervals[polys, Complexes] gives bounding rectangles for complex roots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootIntervals)))
(def RootLocusPlot "RootLocusPlot[lsys, {k, kmin, kmax}] generates a root locus plot of a linear time-invariant system lsys as the parameter k ranges from kmin to kmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootLocusPlot)))
(def RootMeanSquare "RootMeanSquare[list] gives the root mean square of values in list.\nRootMeanSquare[dist] gives the root mean square of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootMeanSquare)))
(def RootOfUnityQ "RootOfUnityQ[a] yields True if a is a root of unity, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootOfUnityQ)))
(def RootReduce "RootReduce[expr] attempts to reduce expr to a single Root object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootReduce)))
(def RootSum "RootSum[f, form] represents the sum of form[x] for all x that satisfy the polynomial equation f[x]==0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootSum)))
(def RootTree "RootTree[tree] returns the root node of tree as a Tree object.\nRootTree[tree, n] returns a Tree object containing the nodes of tree down to level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RootTree)))
(def Roots "Roots[lhs==rhs, var] yields a disjunction of equations which represent the roots of a polynomial equation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Roots)))
(def Rotate "Rotate[g, θ] represents 2D graphics primitives or any other objects g rotated counterclockwise by θ radians about the center of their bounding box. \nRotate[g, θ, {x, y}] rotates about the point {x, y}. \nRotate[g, {u, v}] rotates around the origin, transforming the 2D or 3D vector u to v.\nRotate[g, θ, w] rotates 3D graphics primitives by θ radians around the 3D vector w anchored at the origin.\nRotate[g, θ, w, p] rotates around the 3D vector w anchored at p.\nRotate[g, θ, {u, v}] rotates by angle θ in the plane spanned by 3D vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rotate)))
(def RotateLabel "RotateLabel is an option for graphics and related functions that specifies whether labels on vertical frame axes should be rotated to be vertical." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotateLabel)))
(def RotateLeft "RotateLeft[expr, n] cycles the elements in expr n positions to the left. \nRotateLeft[expr] cycles one position to the left. \nRotateLeft[expr, {n1, n2, …}] cycles elements at successive levels ni positions to the left." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotateLeft)))
(def RotateRight "RotateRight[expr, n] cycles the elements in expr n positions to the right. \nRotateRight[expr] cycles one position to the right. \nRotateRight[expr, {n1, n2, …}] cycles elements at successive levels ni positions to the right." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotateRight)))
(def RotationAction "RotationAction is an option for three-dimensional graphics functions that specifies how to render 3D objects when they are interactively rotated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotationAction)))
(def RotationMatrix "RotationMatrix[θ] gives the 2D rotation matrix that rotates 2D vectors counterclockwise by θ radians.\nRotationMatrix[θ, w] gives the 3D rotation matrix for a counterclockwise rotation around the 3D vector w.\nRotationMatrix[{u, v}] gives the matrix that rotates the vector u to the direction of the vector v in any dimension.\nRotationMatrix[θ, {u, v}] gives the matrix that rotates by θ radians in the plane spanned by u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotationMatrix)))
(def RotationTransform "RotationTransform[θ] gives a TransformationFunction that represents a rotation in 2D by θ radians about the origin.\nRotationTransform[θ, p] gives a 2D rotation about the 2D point p.\nRotationTransform[θ, w] gives a 3D rotation around the direction of the 3D vector w.\nRotationTransform[θ, w, p] gives a 3D rotation around the axis w anchored at the point p.\nRotationTransform[{u, v}] gives a rotation about the origin that transforms the vector u to the direction of the vector v.\nRotationTransform[{u, v}, p] gives a rotation about the point p that transforms u to the direction of v.\nRotationTransform[θ, {u, v}, …] gives a rotation by θ radians in the plane spanned by u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RotationTransform)))
(def Round "Round[x] gives the integer closest to x. \nRound[x, a] rounds to the nearest multiple of a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Round)))
(def RoundingRadius "RoundingRadius is an option for Rectangle, Framed and related functions that specifies the radius of the circle to use in rendering rounded corners." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RoundingRadius)))
(def Row "Row[{expr1, expr2, …}] is an object that formats with the expri arranged in a row, potentially extending over several lines. \nRow[list, s] inserts s as a separator between successive elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Row)))
(def RowAlignments "RowAlignments is an option for the low-level function GridBox that specifies how entries in each row should be aligned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowAlignments)))
(def RowBox "RowBox[{box1, box2, …}] is a low-level box construct that represents a row of boxes or strings in a notebook expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowBox)))
(def RowKey "RowKey[{key1, key2, …}] represents a key that can be used to extract the row of a Tabular object for which the key columns have values keyi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowKey)))
(def RowLines "RowLines is an option for the low-level function GridBox that specifies whether lines should be drawn between adjacent rows." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowLines)))
(def RowMinHeight "RowMinHeight is an option for the low-level function GridBox that specifies the minimum total height in units of font size that should be allowed for each row." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowMinHeight)))
(def RowReduce "RowReduce[m] gives the row‐reduced form of the matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowReduce)))
(def RowSpacings "RowSpacings is an option for the low-level function GridBox that specifies the spaces in x heights that should be inserted between successive rows." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowSpacings)))
(def RowsEqual "RowsEqual is an option for the low-level function GridBox that specifies whether all rows in the grid should be assigned equal total height." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RowsEqual)))
(def RudinShapiro "RudinShapiro[n] gives the n ^th term in the Rudin–Shapiro sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RudinShapiro)))
(def RudvalisGroupRu "RudvalisGroupRu[] represents the sporadic simple Rudvalis group Ru." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RudvalisGroupRu)))
(def Rule "lhs->rhs or lhsrhs represents a rule that transforms lhs to rhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Rule)))
(def RuleDelayed "lhs:>rhs or lhsrhs represents a rule that transforms lhs to rhs, evaluating rhs only after the rule is used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RuleDelayed)))
(def RulePlot "RulePlot[sys] generates a plot representing the rule for the computational system sys.\nRulePlot[sys, init, t] generates a plot of the evolution of the system sys from initial condition init for t steps.\nRulePlot[sys, evol] generates a plot of the evolution evol assuming it is derived from a system of the form sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RulePlot)))
(def RulerUnits "RulerUnits is an option for notebooks that specifies the units in the ruler toolbar." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RulerUnits)))
(def RulesTree "RulesTree[data{rule1, rule2, …}] gives a tree whose root contains data and that has children specified by the rulei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RulesTree)))
(def Run "Run[\"command\"] runs command as an external operating system command, returning the exit code obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Run)))
(def RunProcess "RunProcess[\"command\"] runs the specified external command, returning information on the outcome.\nRunProcess[{\"command\", arg1, arg2, …}] runs the specified command, with command-line arguments argi.\nRunProcess[command, \"prop\"] returns only the specified property.\nRunProcess[command, prop, input] feeds the specified initial input to the command." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RunProcess)))
(def RunThrough "RunThrough[\"command\", expr] executes an external command, giving the printed form of expr as input and taking the output, reading it as Wolfram Language input, and returning the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RunThrough)))
(def RuntimeAttributes "RuntimeAttributes is an option for Compile that specifies attributes for the compiled function it creates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RuntimeAttributes)))
(def RuntimeOptions "RuntimeOptions is an option for Compile that specifies runtime settings for the compiled function it creates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RuntimeOptions)))
(def RussellRaoDissimilarity "RussellRaoDissimilarity[u, v] gives the Russell–Rao dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote RussellRaoDissimilarity)))
(def SARIMAProcess "SARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, {s, {α1, …, αm}, δ, {β1, …, βr}}, v] represents a seasonal integrated autoregressive moving-average process with ARIMA coefficients ai, d, and bj; seasonal order s; seasonal ARIMA coefficients αi, δ, and βj; seasonal integration order δ; and normal white noise with variance v.\nSARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, {s, {α1, …, αm}, δ, {β1, …, βr}}, Σ] represents a vector SARIMA process with coefficient matrices ai, bj, αi, and βj and covariance matrix Σ. \nSARIMAProcess[{a1, …}, {d1, …}, {b1, …}, {{s1, …}, {α1, …}, {δ1, …}, {β1, …}}, Σ] represents a vector SARIMA process with multiple integration orders di, seasonal orders sj, and seasonal integration orders δk. \nSARIMAProcess[{a1, …, ap}, d, {b1, …, bq}, {s, {α1, …, αm}, δ, {β1, …, βr}}, v, init] represents a SARIMA process with initial data init. \nSARIMAProcess[c, …] represents a SARIMA process with constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SARIMAProcess)))
(def SARMAProcess "SARMAProcess[{a1, …, ap}, {b1, …, bq}, {s, {α1, …, αm}, {β1, …, βr}}, v] represents a weakly stationary seasonal autoregressive moving-average process with ARMA coefficients ai and bj, seasonal order s, seasonal ARMA coefficients αi and βj, and normal white noise with variance v.\nSARMAProcess[{a1, …, ap}, {b1, …, bq}, {s, {α1, …, αm}, {β1, …, βr}}, Σ]  represents a weakly stationary vector SARMA process driven by normal white noise, with covariance matrix Σ.\nSARMAProcess[{a1, …, ap}, {b1, …, bq}, {{s1, …}, {α1, …, αm}, {β1, …, βr}}, Σ] represents a weakly stationary vector SARMA process with multiple seasonal orders si.\nSARMAProcess[{a1, …, ap}, {b1, …, bq}, {s, {α1, …, αm}, {β1, …, βr}}, v, init]  represents a SARMA process with initial data init. \nSARMAProcess[c, …] represents a SARMA process with a constant c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SARMAProcess)))
(def SASTriangle "SASTriangle[a, γ, b] returns a filled triangle with sides of length a and b and angle γ between them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SASTriangle)))
(def SSSTriangle "SSSTriangle[a, b, c] returns a filled triangle with sides of lengths a, b, and c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SSSTriangle)))
(def SameAs "SameAs[y] is an operator form that yields x===y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SameAs)))
(def SameQ "lhs===rhs yields True if the expression lhs is identical to rhs, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SameQ)))
(def SameTest "SameTest is an option whose setting gives a pairwise comparison function to determine whether expressions should be considered the same." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SameTest)))
(def SameTestProperties "SameTestProperties is an option for set operations on entity classes whose setting gives the properties that are used to decide whether two given entities are the same." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SameTestProperties)))
(def SampleDepth "SampleDepth is an option for sound primitives that specifies how many bits should be used to encode sound amplitude levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SampleDepth)))
(def SampleRate "SampleRate is an option that specifies the number of samples per second for sound and signal processing functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SampleRate)))
(def SampledEntityClass "SampledEntityClass[class, n] represents an entity class containing n entities from class.\nSampledEntityClass[class, {m, n}] represents an entity class containing entities m through n of class." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SampledEntityClass)))
(def SampledSoundFunction "SampledSoundFunction[f, n, r] is a sound primitive that represents a sound whose amplitude sampled r times a second is generated by applying the function f to successive integers from 1 to n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SampledSoundFunction)))
(def SampledSoundList "SampledSoundList[{a1, a2, …}, r] is a sound primitive that represents a sound whose amplitude has levels ai sampled r times a second." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SampledSoundList)))
(def SamplerModel "SamplerModel[] represents the single-input, single-output model of a sampler.\nSamplerModel[specs] represents a sampler with specification specs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SamplerModel)))
(def SamplingPeriod "SamplingPeriod is an option to StateSpaceModel etc. that specifies the sampling period." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SamplingPeriod)))
(def SatelliteData "SatelliteData[entity, property] gives the value of the specified property for the satellite entity.\nSatelliteData[{entity1, entity2, …}, property] gives a list of property values for the specified satellite entities.\nSatelliteData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SatelliteData)))
(def SatisfiabilityCount "SatisfiabilityCount[bf] counts the number of possible combinations of variable values that yield True when supplied as arguments to the Boolean function bf.\nSatisfiabilityCount[expr, {a1, a2, …}] counts the number of possible combinations of the ai that make the Boolean expression expr be true." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SatisfiabilityCount)))
(def SatisfiabilityInstances "SatisfiabilityInstances[bf] attempts to find a choice of variables that makes the Boolean function bf yield True.\nSatisfiabilityInstances[expr, {a1, a2, …}] attempts to find a choice of the ai that makes the Boolean expression expr be True.\nSatisfiabilityInstances[…, …, m] attempts to find m choices of variables that yield True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SatisfiabilityInstances)))
(def SatisfiableQ "SatisfiableQ[bf] gives True if a combination of values of variables exists that makes the Boolean function bf yield True.\nSatisfiableQ[expr, {a1, a2, …}] gives True if a combination of values of the ai exists that makes the Boolean expression expr yield True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SatisfiableQ)))
(def Saturday "Saturday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Saturday)))
(def Save "Save[\"filename\", symbol] appends definitions associated with the specified symbol to a file. \nSave[\"filename\", \"patt\"] appends definitions associated with all symbols whose names match the string pattern \"patt\". \nSave[\"filename\", \"context`\"] appends definitions associated with all symbols in the specified context. \nSave[\"filename\", {object1, object2, …}] appends definitions associated with several objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Save)))
(def SaveConnection "SaveConnection is an option for ServiceConnect that determines whether the connection should be saved in the authenticated user's account." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SaveConnection)))
(def SaveDefinitions "SaveDefinitions is an option to Manipulate and related functions that specifies whether current definitions relevant for the evaluation of the expression being manipulated should automatically be saved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SaveDefinitions)))
(def SavitzkyGolayMatrix "SavitzkyGolayMatrix[r, k] gives a matrix corresponding to a smoothing kernel of radius r for performing polynomial regression of degree k. \nSavitzkyGolayMatrix[{r1, r2}, {k1, k2}] gives a matrix for performing polynomial regression of degree k1 over a window of radius r1 along rows, and degree k2 over a window of radius r2 along columns.\nSavitzkyGolayMatrix[r, k, n] gives a matrix for performing the n ^th derivative of a polynomial regression of degree k.\nSavitzkyGolayMatrix[{r1, r2 … }, {k1, k2, …}, …] gives an array using the specified parameters for each direction i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SavitzkyGolayMatrix)))
(def SawtoothWave "SawtoothWave[x] gives a sawtooth wave that varies from 0 to 1 with unit period.\nSawtoothWave[{min, max}, x] gives a sawtooth wave that varies from min to max with unit period." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SawtoothWave)))
(def Scale "Scale[g, s] represents graphics primitives g scaled by a factor s. \nScale[g, s, {x, y, …}] scales with the point {x, y, …} kept fixed. \nScale[g, {sx, sy, …}, …] scales by different factors along different axes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Scale)))
(def ScaleDivisions "ScaleDivisions is an option for gauge functions that specifies how many tick marks should be drawn on the scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScaleDivisions)))
(def ScaleOrigin "ScaleOrigin is an option for gauge functions that describes how to position the scale on the gauge." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScaleOrigin)))
(def ScalePadding "ScalePadding is an option for gauge functions that specifies how much space to leave around the scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScalePadding)))
(def ScaleRangeStyle "ScaleRangeStyle is an option for gauge functions to describe how to style different sections of the scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScaleRangeStyle)))
(def ScaleRanges "ScaleRanges is an option for gauge functions that describes how to draw sections of the scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScaleRanges)))
(def Scaled "Scaled[{x, y, …}] gives the position of a graphical object in terms of coordinates scaled to run from 0 to 1 across the whole plot range in each direction. \nScaled[{dx, dy, …}, {x0, y0, …}] gives a position obtained by starting at ordinary coordinates {x0, y0, …}, then moving by a scaled offset {dx, dy, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Scaled)))
(def ScalingFunctions "ScalingFunctions is an option for ListPlot, BarChart, Histogram, and other plotting functions that specifies what scaling functions should be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScalingFunctions)))
(def ScalingMatrix "ScalingMatrix[{sx, sy, …}] gives the matrix corresponding to scaling by a factor si along each coordinate axis.\nScalingMatrix[s, v] gives the matrix corresponding to scaling by a factor s along the direction of the vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScalingMatrix)))
(def ScalingTransform "ScalingTransform[{sx, sy, …}] gives a TransformationFunction that represents scaling by a factor si along each coordinate axis from the origin.\nScalingTransform[{sx, sy, …}, p] gives scaling centered at the point p.\nScalingTransform[s, v] gives scaling by a factor s along the direction of the vector v.\nScalingTransform[s, v, p] gives scaling along the direction of v, centered at the point p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScalingTransform)))
(def Scan "Scan[f, expr] evaluates f applied to each element of expr in turn. \nScan[f, expr, levelspec] applies f to parts of expr specified by levelspec. \nScan[f] represents an operator form of Scan that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Scan)))
(def ScheduledTask "ScheduledTask[expr, timespec] represents a scheduled task to be evaluated on the schedule defined by timespec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScheduledTask)))
(def SchrodingerPDEComponent "SchrodingerPDEComponent[vars, pars] yields a Schrödinger PDE term with model variables vars and model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SchrodingerPDEComponent)))
(def SchurDecomposition "SchurDecomposition[m] yields the Schur decomposition for a numerical matrix m, given as a list {q, t} where q is an orthonormal matrix and t is a block upper‐triangular matrix. \nSchurDecomposition[{m, a}] gives the generalized Schur decomposition of m with respect to a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SchurDecomposition)))
(def ScientificForm "ScientificForm[expr] prints with all real numbers in expr given in scientific notation. \nScientificForm[expr, n] prints with numbers given to n‐digit precision." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScientificForm)))
(def ScientificNotationThreshold "ScientificNotationThreshold is an option for NumberForm and related functions that specifies the threshold between the use of decimal notation and scientific notation to represent real numbers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScientificNotationThreshold)))
(def ScorerGi "ScorerGi[z] gives the Scorer function Gi (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScorerGi)))
(def ScorerGiPrime "ScorerGiPrime[z] gives the derivative of the Scorer function Gi^′ (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScorerGiPrime)))
(def ScorerHi "ScorerHi[z] gives the Scorer function Hi (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScorerHi)))
(def ScorerHiPrime "ScorerHiPrime[z] gives the derivative of the Scorer function Hi^′ (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScorerHiPrime)))
(def ScreenStyleEnvironment "ScreenStyleEnvironment is an option for notebooks that specifies the style environment to be used in displaying a notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScreenStyleEnvironment)))
(def ScriptBaselineShifts "ScriptBaselineShifts is an option for Style that specifies the minimum distance in x‐heights to shift subscripts and superscripts." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScriptBaselineShifts)))
(def ScriptMinSize "ScriptMinSize is an option for Style which specifies the minimum font size to use in rendering subscripts, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScriptMinSize)))
(def ScriptSizeMultipliers "ScriptSizeMultipliers is an option for Style that specifies how much smaller to render each successive level of subscripts, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScriptSizeMultipliers)))
(def ScrollPosition "ScrollPosition is an option for Pane that specifies the scroll position of the contents of the pane." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScrollPosition)))
(def Scrollbars "Scrollbars is an option for Pane that specifies whether scrollbars should be displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Scrollbars)))
(def ScrollingOptions "ScrollingOptions is an option for notebooks that specifies settings for scrolling." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ScrollingOptions)))
(def SearchAdjustment "SearchAdjustment[query, w] represents a component of a search query that is to be treated as having weight w.\nSearchAdjustment[query, …, opts] represents a component of a search query with certain options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SearchAdjustment)))
(def SearchIndexObject "SearchIndexObject[loc] represents a search index object, as created by CreateSearchIndex.\nSearchIndexObject[\"name\"] represents the search index with the specified name in the SearchIndices[] list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SearchIndexObject)))
(def SearchIndices "SearchIndices[] returns a list with all the locally stored instances of SearchIndexObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SearchIndices)))
(def SearchQueryString "SearchQueryString[\"query\"] represents a search engine-style query in TextSearch and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SearchQueryString)))
(def SearchResultObject "SearchResultObject[…] represents a result from TextSearch[…] and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SearchResultObject)))
(def Sec "Sec[z] gives the secant of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sec)))
(def SecDegrees "SecDegrees[θ] gives the secant of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SecDegrees)))
(def Sech "Sech[z] gives the hyperbolic secant of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sech)))
(def SechDistribution "SechDistribution[μ, σ] represents the hyperbolic secant distribution with location parameter μ and scale parameter σ.\nSechDistribution[] represents the hyperbolic secant distribution with location parameter 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SechDistribution)))
(def SecondOrderConeOptimization "SecondOrderConeOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective f subject to second-order cone and/or linear constraints cons.\nSecondOrderConeOptimization[c, {{a1, b1, α1, β1}, …, {ak, bk, αk, βk}}] finds a vector x that minimizes c.x subject to the constraints ai.x+bi≤αi.x+βi.\nSecondOrderConeOptimization[c, …, {dom1, dom2, …}] takes xi to be in the domain domi, where domi is Integers or Reals. \nSecondOrderConeOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SecondOrderConeOptimization)))
(def SectorChart "SectorChart[{{x1, y1}, {x1, y2}, …}] makes a sector chart with sector angles proportional to xi and radii yi.\nSectorChart[{…, wi[{xi, yi}, …], …, wj[{xj, yj}, …], …}] makes a sector chart with sector features defined by the symbolic wrappers wk.\nSectorChart[{data1, data2, …}] makes a sector chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SectorChart)))
(def SectorChart3D "SectorChart3D[{{x1, y1, z1}, {x2, y2, z2}, …}] makes a 3D sector chart with sector angle proportional to xi, radius yi, and height zi.\nSectorChart3D[{…, wi[{xi, yi, zi}, …], …, wj[{xj, yj, zj}, …], …}] makes a 3D sector chart with sector features defined by the symbolic wrappers wk.\nSectorChart3D[{data1, data2, …}] makes a 3D sector chart from multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SectorChart3D)))
(def SectorOrigin "SectorOrigin is an option to PieChart and related functions that specifies where sectors should start." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SectorOrigin)))
(def SectorSpacing "SectorSpacing is an option to PieChart and related functions that specifies radial spacing of sectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SectorSpacing)))
(def SecuredAuthenticationKey "SecuredAuthenticationKey[assoc] represents a secured authentication key with credentials and details specified by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SecuredAuthenticationKey)))
(def SecuredAuthenticationKeys "SecuredAuthenticationKeys[] retrieves a list of all instances of SecuredAuthenticationKey owned by the currently connected user. \nSecuredAuthenticationKeys[\"name\"] retrieves a SecuredAuthenticationKey identified by \"name\" owned by the currently connected user, if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SecuredAuthenticationKeys)))
(def SecurityCertificate "SecurityCertificate[assoc] represents the security certificate issued for a public key." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SecurityCertificate)))
(def SeedRandom "SeedRandom[s] resets the pseudorandom generator, using s as a seed. \nSeedRandom[] resets the generator, using as a seed the time of day and certain attributes of the current Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SeedRandom)))
(def Select "Select[data, crit] picks out all elements ei of data for which crit[ei] is True. \nSelect[data, critprop] returns the property prop of the selected elements.\nSelect[data, crit, n] picks out the first n elements for which crit[ei] is True. \nSelect[crit] represents an operator form of Select that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Select)))
(def SelectComponents "SelectComponents[{image, lmat}, crit] selects components of image indicated by the label matrix lmat that satisfy crit, replacing other parts with black.\nSelectComponents[image, crit] selects connected components of image.\nSelectComponents[…, \"prop\", n] computes the property \"prop\" and selects the first n in sorted order.\nSelectComponents[…, \"prop\", n, p] sorts computed properties using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectComponents)))
(def SelectFirst "SelectFirst[data, crit] gives the first ei of data for which crit[ei] is True, or Missing[\"NotFound\"] if none is found.\nSelectFirst[data, critprop] returns the property prop of the selected elements.\nSelectFirst[data, crit, default] gives default if there is no ei of data such that crit[ei] is True.\nSelectFirst[crit] represents an operator form of SelectFirst that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectFirst)))
(def Selectable "Selectable is an option for displayed objects, cells, and notebooks that specifies whether their contents can be selected interactively using the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Selectable)))
(def SelectedCells "SelectedCells[notebook] returns a list of CellObject expressions corresponding to the currently selected cells in notebook.\nSelectedCells[] returns the currently selected cells in the notebook in which this function is being evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectedCells)))
(def SelectedNotebook "SelectedNotebook[] gives the currently selected notebook in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectedNotebook)))
(def SelectionCreateCell "SelectionCreateCell[notebook] copies the contents of the current selection in a notebook into a new cell. \nSelectionCreateCell[notebook, sel] sets the current selection after the copy to be as specified by sel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectionCreateCell)))
(def SelectionEvaluate "SelectionEvaluate[notebook] replaces the current selection in a notebook with the result obtained by evaluating the contents of the selection in the kernel. \nSelectionEvaluate[notebook, sel] sets the current selection after the evaluation to be as specified by sel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectionEvaluate)))
(def SelectionEvaluateCreateCell "SelectionEvaluateCreateCell[notebook] takes the current selection in a notebook and creates a new cell containing the result obtained by evaluating the contents of the selection using the kernel. \nSelectionEvaluateCreateCell[notebook, sel] sets the current selection after the evaluation to be as specified by sel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectionEvaluateCreateCell)))
(def SelectionMove "SelectionMove[obj, dir, unit] moves the current selection in an open notebook in the front end in the direction dir by the specified unit. \nSelectionMove[obj, dir, unit, n] repeats the move n times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelectionMove)))
(def SelfLoopStyle "SelfLoopStyle is an option for GraphPlot and related functions that specifies how to draw self-loops that connect a vertex to itself." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SelfLoopStyle)))
(def SemanticImport "SemanticImport[file] attempts to import a file semantically to give a Dataset object.\nSemanticImport[file, type] attempts to interpret all elements in the file as being of the specified type.\nSemanticImport[file, {type1, type2, …}] attempts to interpret elements in successive columns as being of the specified types. \nSemanticImport[file, col1->type1, col2->type2, …] keeps only the columns coli specified by their positions or names.\nSemanticImport[file, typespec, form] puts the result in the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticImport)))
(def SemanticImportString "SemanticImportString[\"string\"] attempts to import a string semantically to give a Dataset object.\nSemanticImportString[\"string\", type] attempts to interpret all elements in the string as being of the specified type.\nSemanticImportString[\"string\", {type1, type2, …}] attempts to interpret elements in successive columns as being of the specified types. \nSemanticImportString[\"string\", <|col1->type1, col2->type2, …|>] attempts to interpret elements in the named columns as being of the specified types.\nSemanticImportString[\"string\", typespec, form] puts the result in the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticImportString)))
(def SemanticInterpretation "SemanticInterpretation[\"string\"] attempts to give the best semantic interpretation of the specified free-form string as a Wolfram Language expression.\nSemanticInterpretation[\"string\", pattern] filters possible semantic interpretations, returning the best one that matches the specified pattern.\nSemanticInterpretation[\"string\", pattern, head] returns the semantic interpretation wrapped with the specified head." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticInterpretation)))
(def SemanticSearch "SemanticSearch[index, query] finds the items similar to query inside index.\nSemanticSearch[index, query->f] filters the results using the function f.\nSemanticSearch[index, query, prop] returns the specified property prop." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticSearch)))
(def SemanticSearchIndex "SemanticSearchIndex[…] represents a semantic search index object.\nSemanticSearchIndex[source] attempts to recreate a SemanticSearchIndex from source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticSearchIndex)))
(def SemanticSearchIndices "SemanticSearchIndices[] returns a list with all the known instances of SemanticSearchIndex.\nSemanticSearchIndices[patt] returns a list of indices with the name matching the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemanticSearchIndices)))
(def SemialgebraicComponentInstances "SemialgebraicComponentInstances[ineqs, {x1, x2, …}] gives at least one sample point in each connected component of the semialgebraic set defined by the inequalities ineqs in the variables x1, x2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemialgebraicComponentInstances)))
(def SemidefiniteOptimization "SemidefiniteOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective f subject to semidefinite constraints cons.\nSemidefiniteOptimization[c, {a0, a1, …, ak}] finds a vector x that minimizes the quantity c.x subject to the linear matrix inequality constraint a0+a1 x1+…+ak xk⪰_+^n0.\nSemidefiniteOptimization[…, \"prop\"] specifies what solution property \"prop\" should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SemidefiniteOptimization)))
(def SendMail "SendMail[body] sends mail consisting of body to the address specified by $CloudUserID.\nSendMail[{\"subject\"}] sends mail with the specified subject and no body.\nSendMail[{\"subject\", body}] sends mail with the specified subject and body.\nSendMail[{\"subject\", body, att}] sends mail with the attachment or attachments att.\nSendMail[\"to\", content] sends mail to the specified To: address.\nSendMail[{to1, to2, …}, content] sends mail to multiple To: addresses.\nSendMail[{{to1, …}, {cc1, …}}, content] includes the cci as Cc: addresses.\nSendMail[{{to1, …}, {cc1, …}, {bcc1, …}}, content] also includes the bcci as Bcc: addresses.\nSendMail[assoc] sends mail with elements specified in the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SendMail)))
(def SendMessage "SendMessage[channel, message] sends a message to the specified channel.\nSendMessage[channeldest, message] sends a message to the destination dest through the specified channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SendMessage)))
(def Sequence "Sequence[expr1, expr2, …] represents a sequence of arguments to be spliced automatically into any function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sequence)))
(def SequenceAlignment "SequenceAlignment[s1, s2] finds an optimal alignment of sequences of elements in the strings, lists or biomolecular sequences s1 and s2, and yields a list of successive matching and differing sequences." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceAlignment)))
(def SequenceCases "SequenceCases[list, patt] gives a list of the sublists in list that match the sequence pattern patt.\nSequenceCases[list, pattrhs] gives a list of the values of rhs corresponding to sublists that match patt.\nSequenceCases[list, patt, n] includes only the first n matches." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceCases)))
(def SequenceCount "SequenceCount[list, sub] gives a count of the number of times sub appears as a sublist of list.\nSequenceCount[list, patt] gives the number of sublists in list that match the general sequence pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceCount)))
(def SequenceFold "SequenceFold[f, {x1, …, xn}, {a1, a2, …}] gives the last element of SequenceFoldList[f, {x1, …, xn}, {a1, a2, …}].\nSequenceFold[f, {x1, …, xn}, {a1, a2, …}, k] applies f to k arguments at each step, with the first n coming from the xi or previous results, and the last k-n coming from the ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceFold)))
(def SequenceFoldList "SequenceFoldList[f, {x1, …, xn}, {a1, a2, …}] gives {x1, …, xn, f[x1, …, xn, a1], f[x2, …, xn, f[x1, …, xn, a1], a2], …}.\nSequenceFoldList[f, {x1, …, xn}, {a1, a2, …}, k] applies f to k arguments at each step, with the first n coming from the xi or previous results, and the last k-n coming from the ai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceFoldList)))
(def SequenceHold "SequenceHold is an attribute that specifies that Sequence objects appearing in the arguments of a function should not automatically be flattened out." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceHold)))
(def SequenceIndicesLayer "SequenceIndicesLayer[] represents a net layer that produces a list of indices for an input sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceIndicesLayer)))
(def SequenceLastLayer "SequenceLastLayer[] represents a net that takes a sequence of inputs and returns the last element of the sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceLastLayer)))
(def SequenceMostLayer "SequenceMostLayer[] represents a net that takes a sequence of inputs and removes its last element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceMostLayer)))
(def SequencePosition "SequencePosition[list, sublist] gives a list of the starting and ending positions at which sublist appears in list.\nSequencePosition[list, patt] gives all positions at which sequences matching patt occur in list.\nSequencePosition[list, patt, n] includes only the first n occurrences of patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequencePosition)))
(def SequencePredict "SequencePredict[{seq1, seq2, …}] generates a SequencePredictorFunction[…] based on the sequences given.\nSequencePredict[training, seq] attempts to predict the next element in the sequence seq from the training sequences given.\nSequencePredict[training, {seq1, seq2, …}] gives predictions for each of the sequences seqi.\nSequencePredict[\"name\", seq] uses the built-in sequence predictor represented by \"name\".\nSequencePredict[…, seq, prop] give the specified property of the prediction associated with seq." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequencePredict)))
(def SequencePredictorFunction "SequencePredictorFunction[…] represents a function generated by SequencePredict that predicts the next elements from a sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequencePredictorFunction)))
(def SequenceReplace "SequenceReplace[list, rules] replaces sequences in list according to the specified rule or list of rules. \nSequenceReplace[list, rules, n] does only the first n replacements.\nSequenceReplace[rules] represents an operator form of SequenceReplace that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceReplace)))
(def SequenceRestLayer "SequenceRestLayer[] represents a net that takes a sequence of inputs and removes its first element." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceRestLayer)))
(def SequenceReverseLayer "SequenceReverseLayer[] represents a net that reverses the order of an input sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceReverseLayer)))
(def SequenceSplit "SequenceSplit[list, patt] splits list into sublists separated by sequences that match the sequence pattern patt. \nSequenceSplit[list, pattrhs] inserts rhs at the position of each matched sequence.\nSequenceSplit[list, {patt1rhs1, …}] inserts rhsi at the position of each patti.\nSequenceSplit[list, patt, n] splits into at most n sublists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceSplit)))
(def SequenceType "SequenceType[var] represents a type parameterized by var that refers to a sequence of zero or more types." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SequenceType)))
(def Series "Series[f, {x, x0, n}] generates a power series expansion for f about the point x=x0 to order (x-x0)^n, where n is an explicit integer. \nSeries[f, xx0] generates the leading term of a power series expansion for f about the point x=x0. \nSeries[f, {x, x0, nx}, {y, y0, ny}, …] successively finds series expansions with respect to x, then y, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Series)))
(def SeriesCoefficient "SeriesCoefficient[series, n] finds the coefficient of the n ^th-order term in a power series in the form generated by Series. \nSeriesCoefficient[f, {x, x0, n}] finds the coefficient of (x-x0)^n in the expansion of f about the point x=x0.\nSeriesCoefficient[f, {x, x0, nx}, {y, y0, ny}, …] finds a coefficient in a multivariate series." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SeriesCoefficient)))
(def SeriesData "SeriesData[x, x0, {a0, a1, …}, nmin, nmax, den] represents a power series in the variable x about the point x0. The ai are the coefficients in the power series. The powers of (x-x0) that appear are nmin/den, (nmin+1)/den, …, nmax/den." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SeriesData)))
(def SeriesTermGoal "SeriesTermGoal is an option for Asymptotic, DiscreteAsymptotic and similar functions that specifies the number of desired terms in an asymptotic approximation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SeriesTermGoal)))
(def ServiceConnect "ServiceConnect[\"service\"] creates a connection to an external service.\nServiceConnect[\"service\", id] uses the specified connection identifier." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceConnect)))
(def ServiceDeploy "ServiceDeploy[service, expr] deploys expr to an anonymous service deployment.\nServiceDeploy[service, expr, location] deploys expr to the specified location.\nServiceDeploy[service, expr, assoc] deploys expr to the location specified by assoc" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceDeploy)))
(def ServiceDeployment "ServiceDeployment[assoc] represents a service deployment with specification given by assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceDeployment)))
(def ServiceDisconnect "ServiceDisconnect[service] disconnects from an external service specified by a ServiceObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceDisconnect)))
(def ServiceExecute "ServiceExecute[service, \"req\"] executes \"req\" on an external service.\nServiceExecute[service, \"req\", {par1->val1, …}] executes \"req\" with the specified settings for parameters.\nServiceExecute[req] executes ServiceRequest req on an external service." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceExecute)))
(def ServiceObject "ServiceObject[\"service\", …] represents an open connection to an external service." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceObject)))
(def ServiceRequest "ServiceRequest[service, \"req\"] represents a service request built from service, which might be a connected ServiceObject or a valid service name, and request \"req\".\nServiceRequest[service, \"req\", param] represents a service request, built from the service service, request \"req\" and parameters param.\nServiceRequest[assoc] represents a service request, built from association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceRequest)))
(def ServiceSubmit "ServiceSubmit[ServiceRequest[assoc]] submits a request to be executed by an external service specified by assoc.\nServiceSubmit[ScheduledTask[req, spec]] submits a task to evaluate ServiceRequest req on an external service following the schedule defined by spec.\nServiceSubmit[ContinuousTask[req, spec]] submits a task to evaluate ServiceRequest req on an external service; the result of the request is updated whenever available." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ServiceSubmit)))
(def SessionSubmit "SessionSubmit[expr] submits an asynchronous task to evaluate expr in the current session.\nSessionSubmit[ScheduledTask[expr, spec]] submits a task to evaluate expr in the current session on the schedule defined by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SessionSubmit)))
(def SessionTime "SessionTime[] gives the total number of seconds of real time that have elapsed since the beginning of your Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SessionTime)))
(def Set "lhs=rhs evaluates rhs and assigns the result to be the value of lhs. From then on, lhs is replaced by rhs whenever it appears. \n{l1, l2, …}={r1, r2, …} evaluates the ri, and assigns the results to be the values of the corresponding li." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Set)))
(def SetAccuracy "SetAccuracy[expr, a] yields a version of expr in which all numbers have been set to have accuracy a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetAccuracy)))
(def SetAlphaChannel "SetAlphaChannel[color] adds full opacity to color.\nSetAlphaChannel[color, a] adds opacity a to color.\nSetAlphaChannel[image, …] adds an alpha channel to image.\nSetAlphaChannel[video, …] adds an alpha channel to the frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetAlphaChannel)))
(def SetAttributes "SetAttributes[symbol, attr] adds attr to the list of attributes of the symbol symbol. \nSetAttributes[\"symbol\", attr] adds attr to the attributes of the symbol named \"symbol\" if it exists.\nSetAttributes[s, {attr1, attr2, …}] sets several attributes at a time.\nSetAttributes[{s1, s2, …}, attrs] sets attributes of several symbols at a time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetAttributes)))
(def SetCloudDirectory "SetCloudDirectory[dir] sets the current working directory used for cloud objects to dir.\nSetCloudDirectory[] sets the current working directory for cloud objects to $CloudRootDirectory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetCloudDirectory)))
(def SetCookies "SetCookies[assoc] sets cookies with attributes specified by the association assoc, to be used by functions such as URLExecute.\nSetCookies[{assoc1, assoc2, …}] sets a list of cookies." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetCookies)))
(def SetDelayed "lhs:=rhs assigns rhs to be the delayed value of lhs. rhs is maintained in an unevaluated form. When lhs appears, it is replaced by rhs, evaluated afresh each time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetDelayed)))
(def SetDirectory "SetDirectory[\"dir\"] sets the current working directory to dir. \nSetDirectory[] sets the current working directory to your \"home\" directory." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetDirectory)))
(def SetEnvironment "SetEnvironment[\"var\"->value] sets the value of an operating system environment variable.\nSetEnvironment[{\"var\"->value, …}] sets values for several environment variables." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetEnvironment)))
(def SetFileDate "SetFileDate[\"file\"] sets the modification and access dates for a file to be the current date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetFileDate)))
(def SetFileFormatProperties "SetFileFormatProperties[\"fmt\", \"prop\"->val] sets the value of a property \"prop\" for the specified format \"fmt\".\nSetFileFormatProperties[\"fmt\", {prop1->val1, prop2->val2, …}] sets the value of multiple properties \"propi\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetFileFormatProperties)))
(def SetOptions "SetOptions[s, name1value1, name2value2, …] sets the specified default options for a symbol s. \nSetOptions[stream, …] or SetOptions[\"name\", …] sets options associated with a particular stream. \nSetOptions[object, …] sets options associated with an external object such as a NotebookObject or CloudObject." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetOptions)))
(def SetPermissions "SetPermissions[obj, \"pstring\"] sets permissions for the cloud object obj to be as specified by the string pstring.\nSetPermissions[obj, classper] sets permissions for the specified class of users to be per.\nSetPermissions[pers] sets permissions as specified by pers for the cloud object corresponding to the current document." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetPermissions)))
(def SetPrecision "SetPrecision[expr, p] yields a version of expr in which all numbers have been set to have precision p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetPrecision)))
(def SetSelectedNotebook "SetSelectedNotebook[obj] makes the notebook corresponding to obj be the currently selected one in the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetSelectedNotebook)))
(def SetSharedFunction "SetSharedFunction[f1, f2, …] declares the symbols fi as shared functions that are synchronized among all parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetSharedFunction)))
(def SetSharedVariable "SetSharedVariable[s1, s2, …] declares the symbols si as shared variables whose values are synchronized among all parallel kernels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetSharedVariable)))
(def SetStreamPosition "SetStreamPosition[stream, n] sets the current point in an open stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetStreamPosition)))
(def SetSystemModel "SetSystemModel[model, spec] changes model parameters, initializations or other properties in place." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetSystemModel)))
(def SetSystemOptions "SetSystemOptions[\"name\"->value] resets the value for the internal system option with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetSystemOptions)))
(def SetUsers "SetUsers[group, {user1, …}] sets the members of the permissions group group to be {user1, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetUsers)))
(def Setter "Setter[x, val] represents a setter button whose setting x is set to val when the button is clicked. The button is labeled with val, and appears pressed if the value of x is val, and unpressed otherwise.\nSetter[Dynamic[x], val] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the button is clicked.\nSetter[x, val, label] labels the setter button with label.\nSetter[x, {val1, val2, …}, label] represents a setter button that sets x to valn if multiclicked n times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Setter)))
(def SetterBar "SetterBar[x, {val1, val2, …}] represents a setter bar with setting x and with setter buttons for values vali.\nSetterBar[Dynamic[x], {val1, val2, …}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time a setter button is clicked.\nSetterBar[x, {val1lbl1, val2lbl2, …}] represents a setter bar in which the setter button giving value vali has label lbli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SetterBar)))
(def Setting "Setting[expr] replaces forms and control objects such as sliders or popup menus in expr by their settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Setting)))
(def Shallow "Shallow[expr] prints as a shallow form of expr. \nShallow[expr, depth] prints with all parts of expr below the specified depth given in skeleton form. \nShallow[expr, {depth, length}] also gives parts whose lengths are above the specified limit in skeleton form. \nShallow[expr, {depth, length}, form] uses skeleton form for any parts that match the pattern form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Shallow)))
(def ShannonWavelet "ShannonWavelet[] represents the Shannon wavelet evaluated on the equally spaced interval {-10, 10}. \nShannonWavelet[lim] represents the Shannon wavelet evaluated on the equally spaced interval {-lim, lim}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShannonWavelet)))
(def ShapiroWilkTest "ShapiroWilkTest[data] tests whether data is normally distributed using the Shapiro–Wilk test.\nShapiroWilkTest[data, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShapiroWilkTest)))
(def Share "Share[expr] changes the way expr is stored internally, to try and minimize the amount of memory used. \nShare[] tries to minimize the memory used to store all expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Share)))
(def SharingList "SharingList is an option for CloudObject and related constructs that specifies with whom the object has been shared." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SharingList)))
(def Sharpen "Sharpen[image] gives a sharpened version of image.\nSharpen[image, r] gives a version of image sharpened over pixel radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sharpen)))
(def ShearingMatrix "ShearingMatrix[θ, v, n] gives the matrix corresponding to shearing by θ radians along the direction of the vector v, and normal to the vector n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShearingMatrix)))
(def ShearingTransform "ShearingTransform[θ, v, n] gives a TransformationFunction that represents a shear by θ radians along the direction of the vector v, normal to the vector n, and keeping the origin fixed.\nShearingTransform[θ, v, n, p] gives a shear that keeps the point p fixed, rather than the origin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShearingTransform)))
(def ShellRegion "ShellRegion[reg] gives a solid shell of a 3D region reg.\nShellRegion[reg, t] gives a solid shell of reg with minimal thickness t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShellRegion)))
(def ShenCastanMatrix "ShenCastanMatrix[r] gives a matrix that corresponds to an exponential kernel of radius r. \nShenCastanMatrix[{r, σ}] gives a matrix corresponding to an exponential kernel with radius r and region of support specified by σ.\nShenCastanMatrix[r, {n1, n2}] gives a matrix formed from the n1 ^th derivative of the exponential with respect to rows and the n2 ^th derivative with respect to columns.\nShenCastanMatrix[r, {{n11, n12}, {n21, n22}, …}] gives a matrix formed from the sums of the n i1 and n i2 derivatives.\nShenCastanMatrix[{{r1, r2, …}, σ}, …] gives an array corresponding to an exponential kernel with radius ri in the i ^th index direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShenCastanMatrix)))
(def ShiftRegisterSequence "ShiftRegisterSequence[n] gives a complete maximum-length sequence for a size n linear-feedback shift register.\nShiftRegisterSequence[{n, {tap1, tap2, …}}] gives the complete sequence for a linear-feedback shift register with size n and taps at positions tapi.\nShiftRegisterSequence[poly] gives the sequence for a linear-feedback shift register with feedback polynomial poly.\nShiftRegisterSequence[{n, {tap1, tap2, …}, f}] gives the sequence for a shift register with feedback function f.\nShiftRegisterSequence[spec, s] gives the first s elements of the shift register sequence.\nShiftRegisterSequence[spec, init, s] gives the shift register sequence starting from state init." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShiftRegisterSequence)))
(def ShiftedGompertzDistribution "ShiftedGompertzDistribution[λ, ξ] represents a shifted Gompertz distribution with scale parameter λ and shape parameter ξ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShiftedGompertzDistribution)))
(def Short "Short[expr] prints as a short form of expr, less than about one line long. \nShort[expr, n] prints as a form of expr about n lines long." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Short)))
(def ShortDownArrow "ShortDownArrow[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortDownArrow)))
(def ShortLeftArrow "ShortLeftArrow[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortLeftArrow)))
(def ShortRightArrow "ShortRightArrow[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortRightArrow)))
(def ShortTimeFourier "ShortTimeFourier[data] returns the short-time Fourier transform (STFT) of data as a ShortTimeFourierData object.\nShortTimeFourier[data, n] uses partitions of length n.\nShortTimeFourier[data, n, d] uses partitions with offset d.\nShortTimeFourier[data, n, d, wfun] applies a smoothing window wfun to each partition.\nShortTimeFourier[data, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortTimeFourier)))
(def ShortTimeFourierData "ShortTimeFourierData[assoc] represents the result and properties of a short-time Fourier transform (STFT) of a signal." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortTimeFourierData)))
(def ShortUpArrow "ShortUpArrow[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortUpArrow)))
(def Shortest "Shortest[p] is a pattern object that matches the shortest sequence consistent with the pattern p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Shortest)))
(def ShortestPathFunction "ShortestPathFunction[type, data] represents a function that gives the shortest path from a source vertex s to target vertex t in a graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShortestPathFunction)))
(def Show "Show[graphics, options] shows graphics with the specified options added. \nShow[g1, g2, …] shows several graphics combined." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Show)))
(def ShowAutoSpellCheck "ShowAutoSpellCheck is an option for Cell that specifies whether to highlight misspelled words." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowAutoSpellCheck)))
(def ShowAutoStyles "ShowAutoStyles is an option for Cell that specifies whether styles that are specified to be automatically used for various syntactic and other constructs should be shown." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowAutoStyles)))
(def ShowCellBracket "ShowCellBracket is an option for Cell that specifies whether to display the bracket that indicates the extent of the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowCellBracket)))
(def ShowCellLabel "ShowCellLabel is an option for Cell that specifies whether to display the label for a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowCellLabel)))
(def ShowCellTags "ShowCellTags is an option for Cell that specifies whether to display tags for a cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowCellTags)))
(def ShowCursorTracker "ShowCursorTracker is an option for Cell that specifies whether an elliptical spot should appear momentarily to guide the eye if the cursor position jumps." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowCursorTracker)))
(def ShowGroupOpener "ShowGroupOpener is an option for cells that specifies whether an opener icon is displayed next to the leading cell in a cell group to indicate whether the cell group is open or closed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowGroupOpener)))
(def ShowPageBreaks "ShowPageBreaks is a notebook option that specifies whether to indicate in the on‐screen display of a notebook where page breaks would occur if the notebook were printed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowPageBreaks)))
(def ShowSelection "ShowSelection is an option to Notebook, Cell, and Style that specifies whether to show the current selection highlighted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowSelection)))
(def ShowSpecialCharacters "ShowSpecialCharacters is an option for Style and Cell that specifies whether to replace \\[Name], \\:nnnn, etc. by explicit special characters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowSpecialCharacters)))
(def ShowStringCharacters "ShowStringCharacters is an option for Cell that specifies whether to display\" when a string is entered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowStringCharacters)))
(def ShowSubtitles "ShowSubtitles is an option for Video and other functions that specifies whether to display the subtitle tracks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShowSubtitles)))
(def ShrinkingDelay "ShrinkingDelay is an option for dynamic objects that specifies how long to delay before shrinking the size of the region in which the object is displayed to the actual size of the object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ShrinkingDelay)))
(def SiderealTime "SiderealTime[] gives the right ascension of the local meridian for the current date and location.\nSiderealTime[date] gives the right ascension of the local meridian for the specified date.\nSiderealTime[loc] gives the right ascension of the local meridian for the specified location.\nSiderealTime[loc, date] gives the right ascension of the local meridian for the specified date and location.\nSiderealTime[{{loc1, date1}, {loc2, date2}, …}] gives the right ascensions of the local meridians for all specified locations on the specified dates.\nSiderealTime[loc, date, func] uses func to determine what to return for extended locations.\nSiderealTime[\"MeanTime\", loc, date, func] gives the mean sidereal time for the specified date, location and aggregation function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SiderealTime)))
(def SiegelTheta "SiegelTheta[Ω, s] gives the Siegel theta function Θ (Ω, s) with Riemann modular matrix Ω and vector s.\nSiegelTheta[{ν1, ν2}, Ω, s] gives the Siegel theta function Θ [ν1, ν2]( Ω, s) with characteristics ν1 and ν2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SiegelTheta)))
(def SiegelTukeyTest "SiegelTukeyTest[{data1, data2}] tests whether the variances of data1 and data2 are equal.\nSiegelTukeyTest[dspec, σ_0^2] tests a dispersion measure against σ_0^2.\nSiegelTukeyTest[dspec, σ_0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SiegelTukeyTest)))
(def SierpinskiCurve "SierpinskiCurve[n] gives the line segments representing the n ^th-step Sierpiński curve." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SierpinskiCurve)))
(def SierpinskiMesh "SierpinskiMesh[n] gives a mesh region representing the n ^th-step Sierpiński triangle. \nSierpinskiMesh[n, d] gives the n ^th-step Sierpiński sponge in dimension d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SierpinskiMesh)))
(def Sign "Sign[x] gives -1, 0, or 1 depending on whether x is negative, zero, or positive." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sign)))
(def SignPadding "SignPadding is an option for NumberForm and related functions that specifies whether padding should be inserted after signs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SignPadding)))
(def SignTest "SignTest[data] tests whether the median of data is zero. \nSignTest[{data1, data2}] tests whether the median of data1– data2 is zero.\nSignTest[dspec, μ0] tests a location measure against μ0.\nSignTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SignTest)))
(def Signature "Signature[list] gives the signature of the permutation needed to place the elements of list in canonical order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Signature)))
(def SignedRankTest "SignedRankTest[data] tests whether the median of data is zero. \nSignedRankTest[{data1, data2}] tests whether the median of data1-data2 is zero.\nSignedRankTest[dspec, μ0] tests a location measure against μ0.\nSignedRankTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SignedRankTest)))
(def SignedRegionDistance "SignedRegionDistance[reg, p] gives the minimum distance from the point p to the region reg if p is outside the region and the minimum distance to the complement of reg if p is inside the region.\nSignedRegionDistance[reg] gives a RegionDistanceFunction[…] that can be applied repeatedly to different points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SignedRegionDistance)))
(def SignificanceLevel "SignificanceLevel is an option to VarianceTest and similar functions that controls cutoffs for diagnostic tests as well as test conclusions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SignificanceLevel)))
(def SimilarityRules "SimilarityRules is an option for functions such as SequenceAlignment that gives a list of rules for similarity scores to assume between pairs of elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SimilarityRules)))
(def SimpleGraph "SimpleGraph[g] gives the underlying simple graph from the graph g.\nSimpleGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SimpleGraph)))
(def SimpleGraphQ "SimpleGraphQ[g] yields True if the graph g is a simple graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SimpleGraphQ)))
(def SimplePolygonQ "SimplePolygonQ[poly] gives True if the polygon poly is simple and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SimplePolygonQ)))
(def SimplePolyhedronQ "SimplePolyhedronQ[poly] gives True if the polyhedron poly is simple and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SimplePolyhedronQ)))
(def Simplex "Simplex[{p1, …, pk}] represents the simplex spanned by points pi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Simplex)))
(def Simplify "Simplify[expr] performs a sequence of algebraic and other transformations on expr and returns the simplest form it finds. \nSimplify[expr, assum] does simplification using assumptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Simplify)))
(def Sin "Sin[z] gives the sine of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sin)))
(def SinDegrees "SinDegrees[θ] gives the sine of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SinDegrees)))
(def SinIntegral "SinIntegral[z] gives the sine integral function Si(z)=∫_0^zsin (t)/t dt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SinIntegral)))
(def Sinc "Sinc[z] gives sinc (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sinc)))
(def SinghMaddalaDistribution "SinghMaddalaDistribution[q, a, b] represents the Singh–Maddala distribution with shape parameters q and a and scale parameter b." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SinghMaddalaDistribution)))
(def SingleLetterItalics "SingleLetterItalics is an option for Cell that specifies whether single‐letter names should be displayed in italics." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SingleLetterItalics)))
(def SingularValueDecomposition "SingularValueDecomposition[m] gives the singular value decomposition for a numerical matrix m as a list of matrices {u, σ, v}, where σ is a diagonal matrix and m can be written as u.σ.ConjugateTranspose[v].\nSingularValueDecomposition[{m, a}] gives the generalized singular value decomposition of m with respect to a. \nSingularValueDecomposition[m, k] gives the singular value decomposition associated with the k largest singular values of m. \nSingularValueDecomposition[m, UpTo[k]] gives the decomposition for the k largest singular values, or as many as are available." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SingularValueDecomposition)))
(def SingularValueList "SingularValueList[m] gives a list of the nonzero singular values of a matrix m. \nSingularValueList[{m, a}] gives the generalized singular values of m with respect to a. \nSingularValueList[m, k] gives the k largest singular values of m. \nSingularValueList[{m, a}, k] gives the k largest generalized singular values of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SingularValueList)))
(def SingularValuePlot "SingularValuePlot[lsys] generates a plot of the singular values of the transfer function for the system lsys. \nSingularValuePlot[lsys, {ωmin, ωmax}] plots for the frequency range ωmin to ωmax.\nSingularValuePlot[expr, {ω, ωmin, ωmax}] plots expr using the variable ω." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SingularValuePlot)))
(def Sinh "Sinh[z] gives the hyperbolic sine of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sinh)))
(def SinhIntegral "SinhIntegral[z] gives the hyperbolic sine integral function Shi (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SinhIntegral)))
(def SixJSymbol "SixJSymbol[{j1, j2, j3}, {j4, j5, j6}] gives the values of the Wigner 6‐j symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SixJSymbol)))
(def Skeleton "Skeleton[n] represents a sequence of n omitted elements in an expression printed with Short or Shallow. The standard print form for Skeleton is n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Skeleton)))
(def SkeletonTransform "SkeletonTransform[image] gives the skeleton transform of image, in which the value of each skeleton pixel is its distance to the nearest background pixel.\nSkeletonTransform[image, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SkeletonTransform)))
(def SkellamDistribution "SkellamDistribution[μ1, μ2] represents a Skellam distribution with shape parameters μ1 and μ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SkellamDistribution)))
(def SkewNormalDistribution "SkewNormalDistribution[μ, σ, α] represents a skew-normal distribution with shape parameter α, location parameter μ, and scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SkewNormalDistribution)))
(def Skewness "Skewness[data] gives the coefficient of skewness estimate for the elements in data.\nSkewness[dist] gives the coefficient of skewness for the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Skewness)))
(def Skip "Skip[stream, type] skips one object of the specified type in an input stream. \nSkip[stream, type, n] skips n objects of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Skip)))
(def SliceContourPlot3D "SliceContourPlot3D[f, surf, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a contour plot of f over the slice surface surf as a function of x, y, and z.\nSliceContourPlot3D[f, surf, {x, y, z}∈reg] restricts the surface to be within region reg.\nSliceContourPlot3D[f, {surf1, surf2, …}, …] generates contour plots over several slices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliceContourPlot3D)))
(def SliceDensityPlot3D "SliceDensityPlot3D[f, surf, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a density plot of f over the slice surface surf as a function of x, y, and z.\nSliceDensityPlot3D[f, surf, {x, y, z}∈reg] restricts the surface to be within region reg.\nSliceDensityPlot3D[f, {surf1, surf2, …}, …] generates density plots over several slices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliceDensityPlot3D)))
(def SliceDistribution "SliceDistribution[proc, t] represents the distribution of the process state at time t.\nSliceDistribution[proc, {t1, …, tk}] represents the joint distribution of process states at times t1<⋯<tk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliceDistribution)))
(def SliceVectorPlot3D "SliceVectorPlot3D[{vx, vy, vz}, surf, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a vector plot of the field {vx, vy, vz} over the slice surface surf. \nSliceVectorPlot3D[{vx, vy, vz}, surf, {x, y, z}∈reg] restricts the surface surf to be within the region reg.\nSliceVectorPlot3D[{vx, vy, vz}, {surf1, surf2, …}, …] generates vector plots over several slice surfaces surfi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliceVectorPlot3D)))
(def SlideShowVideo "SlideShowVideo[{image1, image2, …}] generates a video iterating through all imagei.\nSlideShowVideo[{image1, image2, …}dt] shows each of the imagei for the duration dt.\nSlideShowVideo[{{image1, dt1}, {image2, dt2}, …}] shows each of the imagei for the duration dti.\nSlideShowVideo[{image1, image2, …}{dt1, dt2, …}] also shows each of the imagei for the duration dti.\nSlideShowVideo[tseries] shows values of the time series tseries at their corresponding times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SlideShowVideo)))
(def SlideView "SlideView[{expr1, expr2, …}] represents an object in which the expri are set up to be displayed on successive slides. \nSlideView[{expr1, expr2, …}, i] makes the i ^th slide be the one currently displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SlideView)))
(def Slider "Slider[x] represents a slider with setting x in the range 0 to 1. \nSlider[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the slider is moved. \nSlider[x, {xmin, xmax}] represents a slider with range xmin to xmax. \nSlider[x, {xmin, xmax, dx}] represents a slider that jumps in steps dx. \nSlider[x, {{e1, e2, …}}] represents a slider in which equally spaced intervals correspond to successive settings ei. \nSlider[x, {{{e1, w1}, {e2, w2}, …}}] uses intervals of relative widths wi for the ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Slider)))
(def Slider2D "Slider2D[{x, y}] represents a 2D slider with settings x and y in the range 0 to 1. \nSlider2D[Dynamic[pt]] takes the setting to be the dynamically updated current value of pt, with the value of pt being reset if the slider is moved. \nSlider2D[pt, {min, max}] represents a 2D slider with range min to max in each direction. \nSlider2D[pt, {min, max, d}] represents a 2D slider that jumps in steps d in each direction. \nSlider2D[pt, {{xmin, ymin}, {xmax, ymax}}] specifies different ranges in x and y directions. \nSlider2D[pt, {{xmin, ymin}, {xmax, ymax}, {dx, dy}}] uses jumps dx, dy." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Slider2D)))
(def SliderBox "SliderBox[x] is a low-level box construct that represents a slider with setting x in the range 0 to 1. \nSliderBox[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the slider is moved. \nSliderBox[x, {xmin, xmax}] represents a slider with range xmin to xmax. \nSliderBox[x, {xmin, xmax, dx}] represents a slider that jumps in steps dx. \nSliderBox[x, {{e1, e2, …}}] represents a slider in which equally spaced intervals correspond to successive settings ei. \nSliderBox[x, {{{e1, w1}, {e2, w2}, …}}] uses intervals of relative widths wi for the ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliderBox)))
(def SliderBoxOptions "SliderBoxOptions is an option that specifies settings for SliderBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SliderBoxOptions)))
(def Slot "# represents the first argument supplied to a pure function. \n#n represents the n ^th argument. \n#name represents the value associated with key \"name\" in an association in the first argument." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Slot)))
(def SlotSequence "## represents the sequence of arguments supplied to a pure function. \n##n represents the sequence of arguments supplied to a pure function, starting with the n ^th argument." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SlotSequence)))
(def Small "Small is a style or option setting that specifies that objects should be small." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Small)))
(def SmallCircle "SmallCircle[x, y, …] displays as x∘y∘…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmallCircle)))
(def Smaller "Smaller is a style or option setting that specifies that objects should be smaller." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Smaller)))
(def SmithDecomposition "SmithDecomposition[m] gives the Smith normal form decomposition of an integer matrix m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmithDecomposition)))
(def SmithDelayCompensator "SmithDelayCompensator[sys, con] gives the Smith compensator for the time-delay system sys and the delay-free controller con." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmithDelayCompensator)))
(def SmithWatermanSimilarity "SmithWatermanSimilarity[u, v] gives a number representing the Smith–Waterman similarity between strings or vectors u and v.\nSmithWatermanSimilarity[u, v] gives a number representing the Smith–Waterman similarity between strings, vectors or bio sequences u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmithWatermanSimilarity)))
(def SmoothDensityHistogram "SmoothDensityHistogram[{{x1, y1}, {x2, y2}, …}] plots a smooth kernel histogram of the values {xi, yi}.\nSmoothDensityHistogram[{{x1, y1}, {x2, y2}, …}, espec] plots a smooth kernel histogram with estimator specification espec.\nSmoothDensityHistogram[{{x1, y1}, {x2, y2}, …}, espec, dfun] plots the distribution function dfun." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmoothDensityHistogram)))
(def SmoothHistogram "SmoothHistogram[{x1, x2, …}] plots a smooth kernel histogram for the PDF of the values xi.\nSmoothHistogram[{x1, x2, …}, espec] plots a smooth kernel histogram with estimator specification espec.\nSmoothHistogram[{x1, x2, …}, espec, dfun] plots the distribution function dfun. \nSmoothHistogram[{data1, data2, …}, …] plots smooth kernel histograms for multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmoothHistogram)))
(def SmoothHistogram3D "SmoothHistogram3D[{{x1, y1}, {x2, y2}, …}] plots a 3D smooth kernel histogram of the values {xi, yi}.\nSmoothHistogram3D[{{x1, y1}, {x2, y2}, …}, espec] plots a 3D smooth kernel histogram with estimator specification espec.\nSmoothHistogram3D[{{x1, y1}, {x2, y2}, …}, espec, dfun] plots the distribution function dfun.\nSmoothHistogram3D[{data1, data2, …}, …] plots smooth kernel histograms for multiple datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmoothHistogram3D)))
(def SmoothKernelDistribution "SmoothKernelDistribution[{x1, x2, …}] represents a smooth kernel distribution based on the data values xi.\nSmoothKernelDistribution[{{x1, y1, …}, {x2, y2, …}, …}] represents a multivariate smooth kernel distribution based on the data values {xi, yi, …}.\nSmoothKernelDistribution[…, bw] represents a smooth kernel distribution with bandwidth bw.\nSmoothKernelDistribution[…, bw, ker] represents a smooth kernel distribution with bandwidth bw and smoothing kernel ker." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmoothKernelDistribution)))
(def SmoothPointDensity "SmoothPointDensity[pdata] estimates the point density function μ(x) for point data pdata.\nSmoothPointDensity[pdata, bw] estimates the density for point data pdata with bandwidth bw.\nSmoothPointDensity[pdata, bw, ker] estimates the density for point data pdata with bandwidth bw and smoothing kernel ker.\nSmoothPointDensity[bdata, …] estimates the point density function μ(x) for binned data bdata. \nSmoothPointDensity[pproc, …] computes the density function μ(x) for point process pproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SmoothPointDensity)))
(def SnDispersion "SnDispersion[list] gives the Sn statistic of the elements in list.\nSnDispersion[list, c] gives the Sn statistic with scaling factor c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SnDispersion)))
(def Snippet "Snippet[doc] gives a snippet of text from a document or other content object.\nSnippet[doc, n] gives about n lines from the beginning. \nSnippet[doc, -n] gives about n lines from the end.\nSnippet[doc, n1;;n2] gives a span from lines n1 to n2\nSnippet[doc, n1;;n2;;n3] gives a span from lines n1 to n2 in steps of n3.\nSnippet[ContentObject[…], SearchResultObject[…]] gives contextual snippets from a content object based on search results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Snippet)))
(def SnippetsVideo "SnippetsVideo[video, n] returns a summary video based on n snippets from video.\nSnippetsVideo[video, timespec] returns a summary video based on snippets taken at times specified by timespec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SnippetsVideo)))
(def SnubPolyhedron "SnubPolyhedron[poly] gives the snub polyhedron of poly by truncating some corners." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SnubPolyhedron)))
(def SocketConnect "SocketConnect[address] makes a socket connection to the TCP host at the specified address and returns a SocketObject representing the connection.\nSocketConnect[address, \"protocol\"] makes a connection to the host at address with the specified protocol.\nSocketConnect[socket] makes a connection to a local socket opened in the current session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketConnect)))
(def SocketListen "SocketListen[socket, fun] starts listening on the specified socket, asynchronously applying fun whenever data is received on the socket.\nSocketListen[port, fun] starts listening for active connections on the specified port of 127.0.0.1.\nSocketListen[address, fun] starts listening for active connections on the specified address address on the local machine.\nSocketListen[spec, opts] starts listening for active connections defined by spec using the options opts.\nSocketListen[spec] starts listening for active connections defined by spec, but does not set up handler functions, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketListen)))
(def SocketListener "SocketListener[…] represents a socket listener created by SocketListen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketListener)))
(def SocketObject "SocketObject[…] represents a network socket connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketObject)))
(def SocketOpen "SocketOpen[port] opens a socket that accepts TCP connections to localhost:port and returns a SocketObject representing the socket.\nSocketOpen[address] opens a socket that accepts TCP connections to the specified local address. \nSocketOpen[address, \"protocol\"] opens a socket that accepts connections with the specified protocol.\nSocketOpen[address, {\"protocol\", \"type\"}] opens a socket that accepts connections of the specified protocol and type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketOpen)))
(def SocketReadMessage "SocketReadMessage[socket] reads the next available message on the specified socket, returning it as a byte array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketReadMessage)))
(def SocketReadyQ "SocketReadyQ[socket] tests if there is any data immediately available to read from the specified socket. \nSocketReadyQ[socket, t] waits for up to t seconds to see if data becomes available to read." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketReadyQ)))
(def SocketWaitAll "SocketWaitAll[{socket1, socket2, …}] waits until there is data ready to read on all of the socketi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketWaitAll)))
(def SocketWaitNext "SocketWaitNext[{socket1, socket2, …}] waits until there is data ready to read on any of the socketi, then returns that socket." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SocketWaitNext)))
(def Sockets "Sockets[] returns all active socket connections initiated by your current Wolfram Language session.\nSockets[All] returns all sockets connected to your current session, including remote sockets originating outside your current session.\nSockets[spec] returns only sockets specified by spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sockets)))
(def SoftmaxLayer "SoftmaxLayer[] represents a softmax net layer.\nSoftmaxLayer[n] represents a softmax net layer that uses level n as the normalization dimension." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SoftmaxLayer)))
(def SokalSneathDissimilarity "SokalSneathDissimilarity[u, v] gives the Sokal–Sneath dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SokalSneathDissimilarity)))
(def SolarEclipse "SolarEclipse[] gives the date of the next solar eclipse.\nSolarEclipse[date] gives the date of the next solar eclipse after the specified date.\nSolarEclipse[prop] gives the value of property prop for the next solar eclipse.\nSolarEclipse[date, prop] gives the value of property prop for the next solar eclipse after date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolarEclipse)))
(def SolarSystemFeatureData "SolarSystemFeatureData[entity, property] gives the value of the specified property for the solar system feature entity.\nSolarSystemFeatureData[{entity1, entity2, …}, property] gives a list of property values for the specified feature entities.\nSolarSystemFeatureData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolarSystemFeatureData)))
(def SolarTime "SolarTime[] gives the angle on the celestial equator between the Sun and the local antimeridian for the current location and date.\nSolarTime[loc] gives the solar time angle for the specified location and current date.\nSolarTime[date] gives the solar time angle for the specified date and current location.\nSolarTime[loc, date] gives the solar time for the specified location and date.\nSolarTime[\"MeanTime\", loc, date] gives the mean solar time for the specified location and date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolarTime)))
(def SolidAngle "SolidAngle[p, {u1, …, ud}] gives the solid angle at the point p and spanned by the vectors u1, …, ud.\nSolidAngle[p, reg] gives the solid angle subtended by the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidAngle)))
(def SolidBoundaryLoadValue "SolidBoundaryLoadValue[pred, vars, pars] represents a boundary load condition for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nSolidBoundaryLoadValue[pred, vars, pars, lkeys] represents a boundary load condition with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidBoundaryLoadValue)))
(def SolidData "SolidData[entity, property] gives the value of the specified property for the solid entity.\nSolidData[{entity1, entity2, …}, property] gives a list of property values for the specified solid entities.\nSolidData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidData)))
(def SolidDisplacementCondition "SolidDisplacementCondition[pred, vars, pars] represents a prescribed displacement on a solid boundary for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars.\nSolidDisplacementCondition[pred, vars, pars, lkeys] represents a prescribed displacement with local parameters specified in pars[lkey]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidDisplacementCondition)))
(def SolidFixedCondition "SolidFixedCondition[pred, vars, pars] represents a fully constrained solid boundary for PDEs with predicate pred indicating where it applies, with model variables vars and global parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidFixedCondition)))
(def SolidMechanicsPDEComponent "SolidMechanicsPDEComponent[vars, pars] yields solid mechanics PDE terms with variables vars and parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidMechanicsPDEComponent)))
(def SolidMechanicsStrain "SolidMechanicsStrain[vars, pars, displ] yields a solid mechanics total strain with variables vars, parameters pars and displacements displ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidMechanicsStrain)))
(def SolidMechanicsStress "SolidMechanicsStress[vars, pars, strain] yields solid mechanics internal stress with variables vars, parameters pars and total strain strain.\nSolidMechanicsStress[vars, pars, strain, displacement] yields solid mechanics stress for nonlinear material laws." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidMechanicsStress)))
(def SolidRegionQ "SolidRegionQ[reg] gives True if the 3D region reg is a solid region and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolidRegionQ)))
(def Solve "Solve[expr, vars] attempts to solve the system expr of equations or inequalities for the variables vars. \nSolve[expr, vars, dom] solves over the domain dom. Common choices of dom are Reals, Integers, and Complexes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Solve)))
(def SolveAlways "SolveAlways[eqns, vars] gives the values of parameters that make the equations eqns valid for all values of the variables vars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolveAlways)))
(def SolveValues "SolveValues[expr, vars] gives the values of vars determined by the solutions of the system expr.\nSolveValues[expr, vars, dom] uses solutions over the domain dom. Common choices of dom are Reals, Integers and Complexes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SolveValues)))
(def Sort "Sort[list] sorts the elements of list into canonical order. \nSort[list, p] sorts using the ordering function p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sort)))
(def SortBy "SortBy[list, f] sorts the elements of list in the order defined by applying f to each of them. \nSortBy[list, {f1, f2, …}] breaks ties by successively using the values obtained from the fi.\nSortBy[list, f, p] sorts the elements of list using the function p to compare the results of applying f to each element.\nSortBy[f] represents an operator form of SortBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SortBy)))
(def SortedBy "SortedBy is an option that specifies a function by which to sort the results of a computation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SortedBy)))
(def SortedEntityClass "SortedEntityClass[class, prop] represents an entity class derived from class by sorting according to the values of the property prop. \nSortedEntityClass[class, prop\"order\"] sorts according to prop in the order specified.\nSortedEntityClass[class, {prop1, prop2, …}] breaks ties by successively using the values of the property specifications propi.\nSortedEntityClass[class, sortspec, n] represents the first n entities of class when sorted by sortspec.\nSortedEntityClass[class, sortspec, {m, n}] represents the entities m through n of class when sorted by sortspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SortedEntityClass)))
(def Sound "Sound[primitives] represents a sound. \nSound[primitives, t] specifies that the sound should have duration t.\nSound[primitives, {tmin, tmax}] specifies that the sound should extend from time tmin to time tmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sound)))
(def SoundNote "SoundNote[pitch] represents a music-like sound note with the specified pitch.\nSoundNote[pitch, t] takes the note to have duration t.\nSoundNote[pitch, {tmin, tmax}] takes the note to occupy the time interval tmin to tmax.\nSoundNote[pitch, tspec, \"style\"] takes the note to be in the specified style.\nSoundNote[pitch, tspec, \"style\", opts] uses the specified rendering options for the note." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SoundNote)))
(def SoundVolume "SoundVolume is an option to Sound and SoundNote and related functions that specifies the relative volume of the sound produced." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SoundVolume)))
(def SourceLink "SourceLink is an option for CloudObject and related cloud functions that specifies the source of the content given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SourceLink)))
(def SourcePDETerm "SourcePDETerm[vars, f] represents a source term f with source coefficient f and model variables vars.\nSourcePDETerm[vars, f, pars] uses model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SourcePDETerm)))
(def Sow "Sow[e] specifies that e should be collected by the nearest enclosing Reap. \nSow[e, tag] specifies that e should be collected by the nearest enclosing Reap whose pattern matches tag. \nSow[e, {tag1, tag2, …}] specifies that e should be collected once for each pattern that matches a tagi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sow)))
(def SowVideo "SowVideo[frame] specifies that frame should be collected by the nearest enclosing ReapVideo.\nSowVideo[frame, n] repeats frame n times when reaped." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SowVideo)))
(def SpaceCurveData "SpaceCurveData[entity, property] gives the value of the specified property for the space curve entity.\nSpaceCurveData[{entity1, entity2, …}, property] gives a list of property values for the specified space curve entities.\nSpaceCurveData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpaceCurveData)))
(def Spacer "Spacer[w] displays as a spacer w printer's points wide.\nSpacer[{w, h}] displays as a spacer w points wide and a total of h points high.\nSpacer[{w, h, dh}] makes the spacer extend dh points below the baseline." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Spacer)))
(def Spacings "Spacings is an option to Grid and related constructs that specifies the spacings to leave between successive objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Spacings)))
(def Span "i;;j represents a span of elements i through j.\ni;; represents a span from i to the end.\n;;j represents a span from the beginning to j.\n;; represents a span that includes all elements.\ni;;j;;k represents a span from i through j in steps of k.\ni;;;;k represents a span from i to the end in steps of k.\n;;j;;k represents a span from the beginning to j in steps of k.\n;;;;k represents a span from the beginning to the end in steps of k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Span)))
(def SpanFromAbove "SpanFromAbove is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears above it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpanFromAbove)))
(def SpanFromBoth "SpanFromBoth is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears above and to its left." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpanFromBoth)))
(def SpanFromLeft "SpanFromLeft is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears to its left." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpanFromLeft)))
(def SpanMaxSize "SpanMaxSize is an option for selections that specifies the maximum size of spanning characters such as parentheses and brackets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpanMaxSize)))
(def SparseArray "SparseArray[{pos1v1, pos2v2, …}] yields a sparse array with all elements zero except for values vi at positions posi.\nSparseArray[list] yields a sparse array version of list. \nSparseArray[data, {d1, d2, …}] yields a sparse array representing a d1×d2×… array. \nSparseArray[data, dims, val] yields a sparse array in which unspecified elements are taken to have value val." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SparseArray)))
(def SparseArrayQ "SparseArrayQ[s] yields True if s is a valid SparseArray object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SparseArrayQ)))
(def SpatialBinnedPointData "SpatialBinnedPointData[{reg1val1, reg2val2, …}] represents values vali associated with disjoint regions regi. \nSpatialBinnedPointData[{reg1, reg2, …}{val1, val2, …}] gives the same result. \nSpatialBinnedPointData[…, reg] gives the overall observation region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialBinnedPointData)))
(def SpatialBoundaryCorrection "SpatialBoundaryCorrection is an option to various spatial statistics functions that control how to correct for boundary effects of observation regions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialBoundaryCorrection)))
(def SpatialEstimate "SpatialEstimate[{loc1val1, loc2val2, …}] creates a spatial prediction from values vali given at locations loci. \nSpatialEstimate[{loc1, loc2, …}{val1, val2, …}] generates the same result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialEstimate)))
(def SpatialEstimatorFunction "SpatialEstimatorFunction[] represents a function generated by SpatialEstimate and predicts spatial field values from locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialEstimatorFunction)))
(def SpatialGraphDistribution "SpatialGraphDistribution[n, r] represents a spatial distribution for graphs with n vertices uniformly distributed over the unit square and edges between vertices that are at distance at most r.\nSpatialGraphDistribution[n, r, d] represents a spatial distribution for graphs with vertices uniformly distributed over the d-dimensional unit square.\nSpatialGraphDistribution[n, r, dist] represents a spatial distribution for graphs with vertices distributed according to the probability distribution dist.\nSpatialGraphDistribution[n, r, reg] represents a spatial distribution for graphs with vertices uniformly distributed in the region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialGraphDistribution)))
(def SpatialJ "SpatialJ[pdata, r] estimates the J function J(r) for point data pdata at radius r.\nSpatialJ[pproc, r] computes J(r) for the point process pproc.\nSpatialJ[bdata, r] computes J(r) for binned data bdata. \nSpatialJ[pspec] generates the function J that can be applied repeatedly to different radii r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialJ)))
(def SpatialMedian "SpatialMedian[{x1, x2, …}] gives the spatial median of the elements xi.\nSpatialMedian[data] gives the spatial median for several different forms of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialMedian)))
(def SpatialNoiseLevel "SpatialNoiseLevel is an option to SpatialEstimate and other spatial functions that gives the noise variance level in the data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialNoiseLevel)))
(def SpatialObservationRegionQ "SpatialObservationRegionQ[reg] tests whether the geometric or geographic region reg can be an observation in spatial statistics." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialObservationRegionQ)))
(def SpatialPointData "SpatialPointData[points] represents a collection of spatial locations points.\nSpatialPointData[points, reg] represents a collection of points within the region reg.\nSpatialPointData[pointsvals, …] associates the values vals with the location points.\nSpatialPointData[points<|key1vals1, …|>, …] associates the key-value annotations keyivalsi.\nSpatialPointData[{p1data1, p2data2, …}, …] represents the spatial point collection {p1, p2, …} with associated values {data1, data2, …}.\nSpatialPointData[{points1, points2, …}, …] represents multiple collections of spatial points.\nSpatialPointData[{points1anns1, points2anns2, …}, …] represents multiple collections of spatial points with annotations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialPointData)))
(def SpatialPointSelect "SpatialPointSelect[spdata, crit] selects a subset of the SpatialPointData spdata according to crit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialPointSelect)))
(def SpatialRandomnessTest "SpatialRandomnessTest[pdata] tests whether the point collection pdata is distributed uniformly over the observation region.\nSpatialRandomnessTest[pdata, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialRandomnessTest)))
(def SpatialTransformationLayer "SpatialTransformationLayer[{h, w}] represents a net layer that applies an affine transformation to an input of size c×h0×w0 and returns an output of size c×h×w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialTransformationLayer)))
(def SpatialTrendFunction "SpatialTrendFunction is an option to SpatialEstimate that specifies what global trend model to use for data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpatialTrendFunction)))
(def Speak "Speak[expr] speaks a spoken representation of the expression expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Speak)))
(def SpeakerMatchQ "SpeakerMatchQ[audio, ref] gives True if speaker features in audio match the one from reference ref and returns False otherwise.\nSpeakerMatchQ[{audio1, audio2, …}, ref] gives a list of results for each of audioi.\nSpeakerMatchQ[ref] represents an operator form of SpeakerMatchQ that can be applied to an audio object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeakerMatchQ)))
(def SpearmanRankTest "SpearmanRankTest[v1, v2] tests whether the vectors v1 and v2 are independent.\nSpearmanRankTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nSpearmanRankTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpearmanRankTest)))
(def SpearmanRho "SpearmanRho[v1, v2] gives Spearman's rank correlation coefficient ρ for the vectors v1 and v2.\nSpearmanRho[m] gives Spearman's rank correlation coefficient ρ for the matrix m.\nSpearmanRho[m1, m2] gives Spearman's rank correlation coefficient ρ for the matrices m1 and m2.\nSpearmanRho[dist] gives Spearman's rank correlation matrix for the multivariate symbolic distribution dist.\nSpearmanRho[dist, i, j] gives the (i, j)^th Spearman rank correlation for the multivariate symbolic distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpearmanRho)))
(def SpeciesData "SpeciesData[name, property] gives the value of the specified property for the species entity.\nSpeciesData[{entity1, entity2, …}, property] gives a list of property values for the specified species entities.\nSpeciesData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeciesData)))
(def SpecificityGoal "SpecificityGoal is an option for ImageIdentify and related functions that defines what specificity of object to seek to identify." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpecificityGoal)))
(def SpectralLineData "SpectralLineData[entity] gives the values of all known properties for an atomic state or state transition.\nSpectralLineData[entity, property] gives the value of the specified property for the given entity.\nSpectralLineData[quantity] returns the state transition with the closest wavelength or frequency specified.\nSpectralLineData[class, quantity] returns the entity in the specified entity class with the closest wavelength or energy to the specified quantity.\nSpectralLineData[spec, {quantity1, quantity2}] returns the entities in spec that fall within the range specified between quantity1 and quantity2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpectralLineData)))
(def Spectrogram "Spectrogram[list] plots the spectrogram of list.\nSpectrogram[list, n] uses partitions of length n.\nSpectrogram[list, n, d] uses partitions with offset d.\nSpectrogram[list, n, d, wfun] applies a smoothing window wfun to each partition.\nSpectrogram[list, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform.\nSpectrogram[audio, …] plots the spectrogram of audio.\nSpectrogram[video] plots the spectrogram of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Spectrogram)))
(def SpectrogramArray "SpectrogramArray[list] returns the spectrogram data of list.\nSpectrogramArray[list, n] uses partitions of length n.\nSpectrogramArray[list, n, d] uses partitions with offset d.\nSpectrogramArray[list, n, d, wfun] applies a smoothing window wfun to each partition.\nSpectrogramArray[list, n, d, wfun, m] pads partitions with zeros to length m prior to the computation of the transform.\nSpectrogramArray[audio, …] returns spectrogram data of audio.\nSpectrogramArray[video] returns the spectrogram data of the first audio track in video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpectrogramArray)))
(def Specularity "Specularity[s] is a graphics directive which specifies that surfaces of 3D graphics objects which follow are to be taken to have specularity s. \nSpecularity[s, n] uses specular exponent n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Specularity)))
(def SpeechCases "SpeechCases[audio, form] gives a list of cases of text identified as being of type form that appear in the transcription of audio.\nSpeechCases[audio, {form1, form2, …}] gives an association of results for all the types formi. \nSpeechCases[audio, formspecprop] gives the specified property for each result found.\nSpeechCases[audio, formspec{prop1, prop2, …}] gives a list of properties for each result found.\nSpeechCases[audio, spec, n] gives the first n cases found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeechCases)))
(def SpeechInterpreter "SpeechInterpreter[form] represents an interpreter object that can be applied to a speech input to try to interpret it as an object of the specified form. \nSpeechInterpreter[form, test] returns the interpreted object only if applying test to it yields True; otherwise, it returns a Failure object.\nSpeechInterpreter[form, test, fail] returns the result of applying the function fail if the test fails." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeechInterpreter)))
(def SpeechRecognize "SpeechRecognize[audio] recognizes speech in audio and returns it as a string.\nSpeechRecognize[audio, level] returns a list of strings at the specified structural level.\nSpeechRecognize[audio, level, prop] returns prop for text at the given level." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeechRecognize)))
(def SpeechSynthesize "SpeechSynthesize[expr] synthesizes the contents of expr as an Audio object. \nSpeechSynthesize[expr, voice] uses the specified voice to synthesize the speech signal." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpeechSynthesize)))
(def SpellingCorrection "SpellingCorrection is an option for StringMatchQ, Names, and related functions that specifies whether strings should be considered to match even when a small fraction of the characters in them are different." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpellingCorrection)))
(def SpellingCorrectionList "SpellingCorrectionList[\"word\"] gives a list of possible spelling corrections for \"word\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpellingCorrectionList)))
(def SpellingOptions "SpellingOptions is an option for notebooks that specifies settings for spellchecking." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpellingOptions)))
(def Sphere "Sphere[p] represents a unit sphere centered at the point p.\nSphere[p, r] represents a sphere of radius r centered at the point p.\nSphere[{p1, p2, …}, r] represents a collection of spheres of radius r." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sphere)))
(def SpherePoints "SpherePoints[n] gives the positions of n uniformly distributed points on the surface of a unit sphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpherePoints)))
(def SphericalAngle "SphericalAngle[{θ0, ϕ0}{{θ1, ϕ1}, {θ2, ϕ2}}] gives the signed angle in radians between the great circles through point {θ0, ϕ0} and points {θ1, ϕ1} and {θ2, ϕ2}.\nSphericalAngle[p{q, r}] gives the unsigned angle for points p, q, r of the form {θ1, θ2, …, θ n-1, ϕ} on an n-dimensional hypersphere.\nSphericalAngle[p{{q1, r1}, …, {qn, rn}}] gives a list of angles between the great circles from point p through points qi and ri.\nSphericalAngle[{p1, …, pn}{{q1, r1}, …, {qn, rn}}] gives a list of angles between the great circles from point pi through points qi and ri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalAngle)))
(def SphericalBesselJ "SphericalBesselJ[n, z] gives the spherical Bessel function of the first kind jn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalBesselJ)))
(def SphericalBesselY "SphericalBesselY[n, z] gives the spherical Bessel function of the second kind yn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalBesselY)))
(def SphericalDistance "SphericalDistance[{θ1, ϕ1}, {θ2, ϕ2}] returns the great-circle distance between points {θ1, ϕ1} and {θ2, ϕ2} on the surface of a unit sphere. \nSphericalDistance[{θ 1, 1, θ 1, 2, …, ϕ1}, {θ 2, 1, θ 2, 2, …, ϕ2}] returns the geodesic distance between arbitrary-dimensional points on the surface of a unit hypersphere." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalDistance)))
(def SphericalHankelH1 "SphericalHankelH1[n, z] gives the spherical Hankel function of the first kind h _n^(1)(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalHankelH1)))
(def SphericalHankelH2 "SphericalHankelH2[n, z] gives the spherical Hankel function of the second kind h _n^(2)(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalHankelH2)))
(def SphericalHarmonicY "SphericalHarmonicY[l, m, θ, ϕ] gives the spherical harmonic Y_l^m(θ, ϕ)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalHarmonicY)))
(def SphericalPlot3D "SphericalPlot3D[r, θ, ϕ] generates a 3D plot with a spherical radius r as a function of spherical coordinates θ and ϕ.\nSphericalPlot3D[r, {θ, θmin, θmax}, {ϕ, ϕmin, ϕmax}] generates a 3D spherical plot over the specified ranges of spherical coordinates.\nSphericalPlot3D[{r1, r2, …}, {θ, θmin, θmax}, {ϕ, ϕmin, ϕmax}] generates a 3D spherical plot with multiple surfaces." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalPlot3D)))
(def SphericalRegion "SphericalRegion is an option for three-dimensional graphics functions that specifies whether the final image should be scaled so that a sphere drawn around the three‐dimensional bounding box would fit in the display area specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalRegion)))
(def SphericalShell "SphericalShell[c, {rinner, router}] represents a filled spherical shell centered at c with inner radius rinner and outer radius router." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SphericalShell)))
(def SpheroidalEigenvalue "SpheroidalEigenvalue[n, m, γ] gives the spheroidal eigenvalue with degree n and order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalEigenvalue)))
(def SpheroidalJoiningFactor "SpheroidalJoiningFactor[n, m, γ] gives the spheroidal joining factor with degree n and order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalJoiningFactor)))
(def SpheroidalPS "SpheroidalPS[n, m, γ, z] gives the angular spheroidal function PS n, m(γ, z) of the first kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalPS)))
(def SpheroidalPSPrime "SpheroidalPSPrime[n, m, γ, z] gives the derivative with respect to z of the angular spheroidal function PS n, m(γ, z) of the first kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalPSPrime)))
(def SpheroidalQS "SpheroidalQS[n, m, γ, z] gives the angular spheroidal function QS n, m(γ, z) of the second kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalQS)))
(def SpheroidalQSPrime "SpheroidalQSPrime[n, m, γ, z] gives the derivative with respect to z of the angular spheroidal function QS n, m(γ, z) of the second kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalQSPrime)))
(def SpheroidalRadialFactor "SpheroidalRadialFactor[n, m, c] gives the spheroidal radial factor with degree n and order m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalRadialFactor)))
(def SpheroidalS1 "SpheroidalS1[n, m, γ, z] gives the radial spheroidal function S _n, m^(1)(γ, z) of the first kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalS1)))
(def SpheroidalS1Prime "SpheroidalS1Prime[n, m, γ, z] gives the derivative with respect to z of the radial spheroidal function S _n, m^(1)(γ, z) of the first kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalS1Prime)))
(def SpheroidalS2 "SpheroidalS2[n, m, γ, z] gives the radial spheroidal function S _n, m^(2)(γ, z) of the second kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalS2)))
(def SpheroidalS2Prime "SpheroidalS2Prime[n, m, γ, z] gives the derivative with respect to z of the radial spheroidal function S _n, m^(2)(γ, z) of the second kind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpheroidalS2Prime)))
(def Splice "Splice[{e1, e2, …}] represents an expression that will automatically be spliced into any list in which it appears as the sequence of elements ei. \nSplice[{e1, e2, …}, hpatt] represents an expression that will automatically be spliced into any expression whose head matches the pattern hpatt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Splice)))
(def SplicedDistribution "SplicedDistribution[{w1, w2, …, wn}, {c0, c1, …, cn}, {dist 1, dist2, …, distn}] represents the distribution obtained by splicing the distributions dist1, dist2, … truncated on the intervals {c0, c1}, {c1, c2}, … with weights w1, w2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplicedDistribution)))
(def SplineClosed "SplineClosed is an option for B-spline functions and graphics primitives that specifies whether spline curves or surfaces should be closed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplineClosed)))
(def SplineDegree "SplineDegree is an option for spline functions and graphics primitives that specifies the degree of polynomial basis to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplineDegree)))
(def SplineKnots "SplineKnots is an option for B-spline functions and graphics primitives that specifies the positions of knots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplineKnots)))
(def SplineWeights "SplineWeights is an option for B-spline functions and graphics primitives that specifies weights of control points." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplineWeights)))
(def Split "Split[list] splits list into sublists consisting of runs of identical elements. \nSplit[list, test] treats pairs of adjacent elements as identical whenever applying the function test to them yields True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Split)))
(def SplitBy "SplitBy[list, f] splits list into sublists consisting of runs of successive elements that give the same value when f is applied.\nSplitBy[list, {f1, f2, …}] recursively splits list into sublists by testing elements successively with each of the fi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SplitBy)))
(def SpokenString "SpokenString[expr] gives a string of text corresponding to a spoken representation of the expression expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpokenString)))
(def SpotLight "SpotLight[col, pt, α] is a three-dimensional graphics directive to use in coloring 3D surfaces that specifies the spotlight of color col at position pt aimed at the center with half-angle α.\nSpotLight[col, {pt1, pt2}, α] uses the spotlight at position pt1 aimed at pt2 with half-angle α.\nSpotLight[col, {pt, tar}, {α, s}, att] uses the spotlight with spot exponent s and attenuation att." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SpotLight)))
(def Sqrt "Sqrt[z] or Sqrt[z] gives the square root of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sqrt)))
(def SqrtBox "SqrtBox[x] is a low-level box construct that represents the displayed object Sqrt[x] in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SqrtBox)))
(def SqrtBoxOptions "SqrtBoxOptions is an option that specifies settings for SqrtBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SqrtBoxOptions)))
(def Square "Square[x] displays as x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Square)))
(def SquareFreeQ "SquareFreeQ[expr] gives True if expr is a square-free polynomial or number, and False otherwise.\nSquareFreeQ[expr, vars] gives True if expr is square free with respect to the variables vars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareFreeQ)))
(def SquareIntersection "SquareIntersection[x, y, …] displays as x⊓y⊓…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareIntersection)))
(def SquareMatrixQ "SquareMatrixQ[m] gives True if m is a square matrix, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareMatrixQ)))
(def SquareRepeatingElement "SquareRepeatingElement[spec] represents a square array of elements of type spec in an interpreter, API or form specification.\nSquareRepeatingElement[spec, max] represents a square array of elements of maximum size max×max.\nSquareRepeatingElement[spec, {min, max}] represents a square array of elements of size between min and max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareRepeatingElement)))
(def SquareSubset "SquareSubset[x, y, …] displays as x⊏y⊏…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareSubset)))
(def SquareSubsetEqual "SquareSubsetEqual[x, y, …] displays as x⊑y⊑…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareSubsetEqual)))
(def SquareSuperset "SquareSuperset[x, y, …] displays as x⊐y⊐…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareSuperset)))
(def SquareSupersetEqual "SquareSupersetEqual[x, y, …] displays as x⊒y⊒…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareSupersetEqual)))
(def SquareUnion "SquareUnion[x, y, …] displays as x⊔y⊔…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareUnion)))
(def SquareWave "SquareWave[x] gives a square wave that alternates between +1 and -1 with unit period.\nSquareWave[{y1, y2}, x] gives a square wave that alternates between y1 and y2 with unit period." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquareWave)))
(def SquaredEuclideanDistance "SquaredEuclideanDistance[u, v] gives the squared Euclidean distance between vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquaredEuclideanDistance)))
(def SquaresR "SquaresR[d, n] gives the number of ways rd(n) to represent the integer n as a sum of d squares." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SquaresR)))
(def Squiggled "Squiggled[expr] displays expr with text underlined with a squiggly red underline.\nSquiggled[expr, color] displays squiggly using the specified color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Squiggled)))
(def StabilityMargins "StabilityMargins is an option to frequency response plots such as BodePlot, NyquistPlot, and NicholsPlot that specifies the gain and phase margins to be shown on the plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StabilityMargins)))
(def StabilityMarginsStyle "StabilityMarginsStyle is an option to frequency response plots such as BodePlot, NyquistPlot, and NicholsPlot that specifies the styles in which the gain and phase margins are to be drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StabilityMarginsStyle)))
(def StableDistribution "StableDistribution[type, α, β, μ, σ] represents the stable distribution Stype with index of stability α, skewness parameter β, location parameter μ, and scale parameter σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StableDistribution)))
(def Stack "Stack[] shows the current evaluation stack, giving a list of the tags associated with evaluations that are currently being done. \nStack[pattern] gives a list of expressions currently being evaluated which match the pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Stack)))
(def StackBegin "StackBegin[expr] evaluates expr, starting a fresh evaluation stack." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StackBegin)))
(def StackComplete "StackComplete[expr] evaluates expr with intermediate expressions in evaluation chains included on the stack." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StackComplete)))
(def StackInhibit "StackInhibit[expr] evaluates expr without modifying the evaluation stack." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StackInhibit)))
(def StackedDateListPlot "StackedDateListPlot[{{date1, y1}, {date2, y2}, …}] plots points with values yi at a sequence of dates.\nStackedDateListPlot[{y1, y2, …}, datespec] plots points with dates at equal intervals specified by datespec.\nStackedDateListPlot[tseries] plots the time series tseries.\nStackedDateListPlot[{data1, data2, …}] plots data from all the datai.\nStackedDateListPlot[{…, w[datai], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StackedDateListPlot)))
(def StackedListPlot "StackedListPlot[{data1, data2, …}] plots lines for each of the datai, with the i ^th curve being the accumulation of values in data1 through datai.\nStackedListPlot[{…, w[datai], …}] plots datai with features defined by the symbolic wrapper w." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StackedListPlot)))
(def StadiumShape "StadiumShape[{{x1, y1}, {x2, y2}}, r] represents a stadium of radius r between the points {x1, y1} and {x2, y2}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StadiumShape)))
(def StandardAtmosphereData "StandardAtmosphereData[altitude, property] returns the value of the property at the specified geometrical altitude for the chosen model of the standard Earth atmosphere.\nStandardAtmosphereData[layer, property] returns a piecewise symbolic approximation with the range of an atmospheric layer for the property.\nStandardAtmosphereData[\"SymbolicApproximation\", property] returns the full piecewise symbolic approximation for the property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandardAtmosphereData)))
(def StandardDeviation "StandardDeviation[data] gives the standard deviation estimate of the elements in data. \nStandardDeviation[dist] gives the standard deviation of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandardDeviation)))
(def StandardDeviationFilter "StandardDeviationFilter[data, r] filters data by replacing every value by the standard deviations of the values in its range-r neighborhood.\nStandardDeviationFilter[data, {r1, r2, …}] uses ri for filtering the i ^th dimension in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandardDeviationFilter)))
(def StandardForm "StandardForm[expr] prints as the standard Wolfram Language two-dimensional representation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandardForm)))
(def StandardOceanData "StandardOceanData[spec] returns the thermodynamic properties of seawater for the specified parameters.\nStandardOceanData[spec, property] returns the specified property for the given parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandardOceanData)))
(def Standardize "Standardize[list] shifts and rescales the elements of list to have zero mean and unit sample variance.\nStandardize[list, f1] shifts the elements in list by f1[list] and rescales them to have unit sample variance.\nStandardize[list, f1, f2] shifts by f1[list] and scales by f2[list]." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Standardize)))
(def Standardized "Standardized is an option that determines whether to standardize the data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Standardized)))
(def StandbyDistribution "StandbyDistribution[dist1, {dist2, …, distn}] represents a standby distribution with component lifetime distributions disti. When component i fails, component i+1 will become active. \nStandbyDistribution[dist1, {dist2, …, distn}, p] represents a standby distribution where switching from component i to component i+1 succeeds with probability p.\nStandbyDistribution[dist1, {dist2, …, distn}, sdist] represents a standby distribution where the switch component has lifetime distribution sdist.\nStandbyDistribution[dist1, {…, {dist i, inactive, dist i, active}, …}, …] represents a standby distribution where the i ^th component lifetime distribution follows dist i, inactive in inactive mode and dist i, active in active mode." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StandbyDistribution)))
(def Star "Star[x, y, …] displays as x⋆y⋆…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Star)))
(def StarClusterData "StarClusterData[entity, property] gives the value of the specified property for the star cluster entity.\nStarClusterData[{entity1, entity2, …}, property] gives a list of property values for the specified star cluster entities.\nStarClusterData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StarClusterData)))
(def StarData "StarData[entity, property] gives the value of the specified property for the star entity.\nStarData[{entity1, entity2, …}, property] gives a list of property values for the specified star entities.\nStarData[entity, property, annotation] gives the specified annotation associated with the property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StarData)))
(def StarGraph "StarGraph[n] gives the star graph with n vertices Sn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StarGraph)))
(def StartExternalSession "StartExternalSession[\"sys\"] starts an external session using the external evaluator sys, returning an external session object.\nStartExternalSession[assoc] starts the external evaluator specified by assoc.\nStartExternalSession[{\"sys\", opts}] uses the options opts for the external evaluator.\nStartExternalSession[systype] specifies that output from the external evaluator should be converted to the specified type.\nStartExternalSession[DatabaseReference[ref]] uses the database specified by ref to start a database session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartExternalSession)))
(def StartOfLine "StartOfLine represents the start of a line in a string for purposes of matching in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartOfLine)))
(def StartOfString "StartOfString represents the start of a string for purposes of matching in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartOfString)))
(def StartProcess "StartProcess[\"executable\"] executes an external program, yielding a ProcessObject to represent the resulting subprocess.\nStartProcess[{\"executable\", arg1, arg2, …}] executes an external program, passing it the specified arguments argi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartProcess)))
(def StartWebSession "StartWebSession[] starts a web session and returns a web session object.\nStartWebSession[\"browser\"] starts a web session using the specified browser." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartWebSession)))
(def StartingStepSize "StartingStepSize is an option to NDSolve and related functions that specifies the initial step size to use in trying to generate results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StartingStepSize)))
(def StateFeedbackGains "StateFeedbackGains[sspec, {p1, …, pn}] gives the state feedback gains for the system specification sspec to place its closed-loop poles at pi.\nStateFeedbackGains[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateFeedbackGains)))
(def StateOutputEstimator "StateOutputEstimator[ssm, l] constructs an estimator for the StateSpaceModel ssm, with estimator gain matrix l.\nStateOutputEstimator[{ssm, sensors}, l] uses only sensors as the measurements of ssm.\nStateOutputEstimator[{ssm, sensors, dinputs}, l] specifies dinputs as the deterministic inputs of ssm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateOutputEstimator)))
(def StateResponse "StateResponse[sys, u, {t, tmin, tmax}] gives the numeric state response of the state-space model sys to input u for tmin≤t≤tmax. \nStateResponse[sys, {u[0], u[1], …}] gives the response of the discrete-time state-space model sys to the input sequence u[i].\nStateResponse[sys, u, t] gives the symbolic state response as a function of time t.\nStateResponse[sys, {u1, …, um}, …] gives the state response for multiple inputs ui. \nStateResponse[{sys, {x10, x20, …, xn 0}}, …, …] gives the response with initial states xi 0." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateResponse)))
(def StateSpaceModel "StateSpaceModel[{a, b, c, d}] represents the standard state-space model with state matrix a, input matrix b, output matrix c, and transmission matrix d.\nStateSpaceModel[{a, b, c, d, e}] represents a descriptor state-space model with descriptor matrix e.\nStateSpaceModel[sys] gives a state-space model corresponding to the systems model sys.\nStateSpaceModel[eqns, {{x1, x10}, …}, {{u1, u10}, …}, {g1, …}, τ] gives the state-space model obtained by Taylor linearization about the point (xi 0, ui 0) of the differential or difference equations eqns with outputs gi and independent variable τ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateSpaceModel)))
(def StateSpaceRealization "StateSpaceRealization is an option to StateSpaceModel that specifies its canonical representation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateSpaceRealization)))
(def StateSpaceTransform "StateSpaceTransform[sys, {p, q}] transforms the state-space model sys using the matrices p and q. \nStateSpaceTransform[sys, {{x1p1[z], …}, {z1q1[x], …}}] transforms using the variable transformations {x1p1[z], …} and {z1q1[x], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateSpaceTransform)))
(def StateTransformationLinearize "StateTransformationLinearize[asys] linearizes the AffineStateSpaceModel asys by state transformation.\nStateTransformationLinearize[asys, {z, lform}] specifies the new states z and form of linearization lform. \nStateTransformationLinearize[asys, …, \"prop\"] computes the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StateTransformationLinearize)))
(def StationaryDistribution "StationaryDistribution[proc] represents the stationary distribution of the process proc, when it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StationaryDistribution)))
(def StationaryWaveletPacketTransform "StationaryWaveletPacketTransform[data] gives the stationary wavelet packet transform (SWPT) of an array of data.\nStationaryWaveletPacketTransform[data, wave] gives the stationary wavelet packet transform using the wavelet wave.\nStationaryWaveletPacketTransform[data, wave, r] gives the stationary wavelet packet transform using r levels of refinement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StationaryWaveletPacketTransform)))
(def StationaryWaveletTransform "StationaryWaveletTransform[data] gives the stationary wavelet transform (SWT) of an array of data.\nStationaryWaveletTransform[data, wave] gives the stationary wavelet transform using the wavelet wave.\nStationaryWaveletTransform[data, wave, r] gives the stationary wavelet transform using r levels of refinement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StationaryWaveletTransform)))
(def StatusArea "StatusArea[expr, string] displays string in the status area of the current notebook when the mouse pointer is in the region where expr appears." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StatusArea)))
(def StatusCentrality "StatusCentrality[g] gives a list of status centralities for the vertices in the graph g.\nStatusCentrality[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StatusCentrality)))
(def StepMonitor "StepMonitor is an option for iterative numerical computation functions that gives an expression to evaluate whenever a step is taken by the numerical method used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StepMonitor)))
(def StereochemistryElements "StereochemistryElements is an option for Molecule that specifies the local stereochemical arrangement of atoms in a molecule." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StereochemistryElements)))
(def StieltjesGamma "StieltjesGamma[n] gives the Stieltjes constant γn. \nStieltjesGamma[n, a] gives the generalized Stieltjes constant γn (a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StieltjesGamma)))
(def StippleShading "StippleShading[] is a three-dimensional graphics directive specifying that objects that follow are to be drawn using small dots.\nStippleShading[d] uses the density d of shading.\nStippleShading[col] uses dots with the specified color col.\nStippleShading[d, col] uses dots of color col with the density d of shading." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StippleShading)))
(def StirlingS1 "StirlingS1[n, m] gives the Stirling number of the first kind S _n^(m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StirlingS1)))
(def StirlingS2 "StirlingS2[n, m] gives the Stirling number of the second kind  _n^(m)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StirlingS2)))
(def StoppingPowerData "StoppingPowerData[entity, {\"Particle\"particle, \"Energy\"quantity}, property] gives the value of the specific property for the substance for the specified particle and the energy of that particle." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StoppingPowerData)))
(def StrataVariables "StrataVariables is an option for fitting functions such as CoxModelFit that specify the variables on which the model should be stratified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StrataVariables)))
(def StratonovichProcess "StratonovichProcess[{a, b}, x, t] represents a Stratonovich process x(t), where x(t)a(t, x(t))t+b(t, x(t))◦ w(t) .\nStratonovichProcess[{a, b, c}, x, t] represents a Stratonovich process y(t)c(t, x(t)), where x(t)a(t, x(t))t+b(t, x(t))◦ w(t) .\nStratonovichProcess[…, …, {x, x0}, {t, t0}] represents a Stratonovich process with initial condition x(t0)x0.\nStratonovichProcess[…, …, …, Σ] uses a Wiener process w(t), with covariance Σ.\nStratonovichProcess[proc] converts proc to a standard Stratonovich process whenever possible.\nStratonovichProcess[sdeqns, expr, x, t, wdproc] represents a Stratonovich process specified by a stochastic differential equation sdeqns, output expression expr, with state x and time t, driven by w following the process dproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StratonovichProcess)))
(def StraussHardcorePointProcess "StraussHardcorePointProcess[μ, γ, rh, rs, d] represents a Strauss hardcore point process with constant intensity μ, interaction parameter γ, hard-core interaction radius rh and Strauss interaction radius rs in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StraussHardcorePointProcess)))
(def StraussPointProcess "StraussPointProcess[μ, γ, rs, d] represents a Strauss point process with constant intensity μ, interaction parameter γ and interaction radius rs in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StraussPointProcess)))
(def StreamColorFunction "StreamColorFunction is an option for StreamPlot and related functions that specifies a function to apply to determine colors along streamlines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamColorFunction)))
(def StreamColorFunctionScaling "StreamColorFunctionScaling is an option for graphics functions that specifies whether arguments supplied to a stream color function should be scaled to lie between 0 and 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamColorFunctionScaling)))
(def StreamDensityPlot "StreamDensityPlot[{{vx, vy}, r}, {x, xmin, xmax}, {y, ymin, ymax}] generates a stream plot of the vector field {vx, vy} as a function of x and y, superimposed on a background density plot of the scalar field r. \nStreamDensityPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] takes the scalar field to be the norm of the vector field.\nStreamDensityPlot[{{vx, vy}, {wx, wy}, …, r}, {x, xmin, xmax}, {y, ymin, ymax}] generates plots of several vector fields. \nStreamDensityPlot[…, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamDensityPlot)))
(def StreamMarkers "StreamMarkers is an option for StreamPlot, ListStreamPlot and related functions that specifies what markers to draw at the field points plotted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamMarkers)))
(def StreamPlot "StreamPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] generates a stream plot of the vector field {vx, vy} as a function of x and y. \nStreamPlot[{{vx, vy}, {wx, wy}, …}, {x, xmin, xmax}, {y, ymin, ymax}] generates plots of several vector fields. \nStreamPlot[…, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamPlot)))
(def StreamPlot3D "StreamPlot3D[{vx, vy, vz}, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] plots streamlines for the vector field {vx, vy, vz} as functions of x, y and z.\nStreamPlot3D[{vx, vy, vz}, {x, y, z}∈reg] takes the variables {x, y, z} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamPlot3D)))
(def StreamPoints "StreamPoints is an option to StreamPlot, ListStreamPlot, and related functions that determines how many streamlines to draw." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamPoints)))
(def StreamPosition "StreamPosition[stream] returns an integer that specifies the position of the current point in an open stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamPosition)))
(def StreamScale "StreamScale is an option to StreamPlot, ListStreamPlot, and related functions that determines the length and arrowhead size of streamlines that are drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamScale)))
(def StreamStyle "StreamStyle is an option to StreamPlot, StreamDensityPlot, and related functions that determines the style to use for drawing streamlines." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StreamStyle)))
(def Streams "Streams[] gives a list of all streams that are currently open. \nStreams[\"name\"] lists only streams with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Streams)))
(def StrictInequalities "StrictInequalities is an option to FunctionSign and FunctionMonotonicity, etc. that determines whether strict inequalities should be used in definitions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StrictInequalities)))
(def String "String is the head of a character string \"text\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote String)))
(def StringApply "StringApply[f, string] applies f to the code points in string.\nStringApply[f] represents an operator form of StringApply that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringApply)))
(def StringCases "StringCases[\"string\", patt] gives a list of the substrings in \"string\" that match the string expression patt. \nStringCases[\"string\", lhs->rhs] gives a list of the values of rhs corresponding to the substrings that match the string expression lhs. \nStringCases[\"string\", p, n] includes only the first n substrings that match. \nStringCases[\"string\", {p1, p2, …}] gives substrings that match any of the pi. \nStringCases[{s1, s2, …}, p] gives the list of results for each of the si. \nStringCases[patt] represents an operator form of StringCases that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringCases)))
(def StringContainsQ "StringContainsQ[\"string\", patt] yields True if any substring in \"string\" matches the string expression patt, and yields False otherwise.\nStringContainsQ[\"string\", {patt1, patt2, …}] yields True if any substring matches any of the patti.\nStringContainsQ[{string1, string2, …}, patt] gives a list of the results for each of the \"stringi\".\nStringContainsQ[patt] represents an operator form of StringContainsQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringContainsQ)))
(def StringCount "StringCount[\"string\", \"sub\"] gives a count of the number of times \"sub\" appears as a substring of \"string\". \nStringCount[\"string\", patt] gives the number of substrings in \"string\" that match the general string expression patt. \nStringCount[\"string\", {patt1, patt2, …}] counts the number of occurrences of any of the patti. \nStringCount[{s1, s2, …}, p] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringCount)))
(def StringDelete "StringDelete[\"string\", patt] yields the string obtained by deleting from string all occurrences of anything matching the string pattern patt.\nStringDelete[patt] represents an operator form of StringDelete that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringDelete)))
(def StringDrop "StringDrop[\"string\", n] gives \"string\" with its first n characters dropped. \nStringDrop[\"string\", -n] gives \"string\" with its last n characters dropped. \nStringDrop[\"string\", {n}] gives \"string\" with its n ^th character dropped. \nStringDrop[\"string\", {m, n}] gives \"string\" with characters m through n dropped. \nStringDrop[{s1, s2, …}, spec] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringDrop)))
(def StringEndsQ "StringEndsQ[\"string\", patt] yields True if the end of \"string\" matches the string expression patt, and yields False otherwise.\nStringEndsQ[\"string\", {patt1, patt2, …}] yields True if the end of \"string\" matches any of the patti.\nStringEndsQ[{string1, string2, …}, patt] gives a list of the results for each of the \"stringi\".\nStringEndsQ[patt] represents an operator form of StringEndsQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringEndsQ)))
(def StringExpression "s1~~s2~~… or StringExpression[s1, s2, …] represents a sequence of strings and symbolic string objects si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringExpression)))
(def StringExtract "StringExtract[\"string\", n] extracts the n ^th block of characters in string, where blocks of characters are defined as delimited by whitespace.\nStringExtract[\"string\", {pos1, pos2, …}] extracts blocks at several positions in string.\nStringExtract[\"string\", sep->pos] takes blocks to be delimited by separators that match sep.\nStringExtract[\"string\", pos1, pos2, …] extracts blocks at positions posi, delimiting with whitespace for the lowest level, newlines for the next level, and a successively increasing number of newlines thereafter.\nStringExtract[\"string\", sep1->pos1, sep2->pos2, …] gives a nested list of blocks, with the sepi used as separators for successive levels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringExtract)))
(def StringForm "StringForm[\"controlstring\", expr1, …] prints as the text of the controlstring, with the printed forms of the expri embedded." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringForm)))
(def StringFormat "StringFormat[\"string\"] attempts to determine what ImportString format could be used to import the string \"string\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringFormat)))
(def StringFormatQ "StringFormatQ[\"string\", \"fmt\"] gives True if the string \"string\" might be imported as format \"fmt\" and gives False otherwise.\nStringFormatQ[\"string\", {fmt1, fmt2, …}] gives True if \"string\" might be imported as one of \"fmti\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringFormatQ)))
(def StringFreeQ "StringFreeQ[\"string\", patt] yields True if no substring in \"string\" matches the string expression patt, and yields False otherwise.\nStringFreeQ[\"string\", {patt1, patt2, …}] yields True if no substring matches any of the patti.\nStringFreeQ[{string1, string2, …}, patt] gives a list of the results for each of the \"stringi\".\nStringFreeQ[patt] represents an operator form of StringFreeQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringFreeQ)))
(def StringInsert "StringInsert[\"string\", \"snew\", n] yields a string with \"snew\" inserted starting at position n in \"string\". \nStringInsert[\"string\", \"snew\", -n] inserts at position n from the end of \"string\". \nStringInsert[\"string\", \"snew\", {n1, n2, …}] inserts a copy of \"snew\" at each of the positions ni. \nStringInsert[{s1, s2, …}, \"snew\", n] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringInsert)))
(def StringJoin "\"s1 \"<>\"s2 \"<>…, StringJoin[\"s1\", \"s2\", …], or StringJoin[{\"s1\", \"s2\", …}] yields a string consisting of a concatenation of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringJoin)))
(def StringLength "StringLength[\"string\"] gives the number of characters in a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringLength)))
(def StringMatchQ "StringMatchQ[\"string\", patt] tests whether \"string\" matches the string pattern patt. \nStringMatchQ[\"string\", RegularExpression[\"regex\"]] tests whether \"string\" matches the specified regular expression. \nStringMatchQ[\"string\", {patt1, patt2, …}] test whether \"string\" matches any of the patti.\nStringMatchQ[{string1, string2, …}, patt] gives the list of the results for each of the \"stringi\". \nStringMatchQ[patt] represents an operator form of StringMatchQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringMatchQ)))
(def StringPadLeft "StringPadLeft[\"string\", n] makes string be of length n, padding it on the left with spaces or truncating it if necessary. \nStringPadLeft[\"string\", n, \"padding\"] pads by repeating copies of the string padding.\nStringPadLeft[{s1, s2, …}] pads strings with spaces on the left to make them all the same length.\nStringPadLeft[{s1, s2, …}, n, …] pads or truncates to make all strings of length n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringPadLeft)))
(def StringPadRight "StringPadRight[\"string\", n] makes string be of length n, padding it on the right with spaces or truncating it if necessary. \nStringPadRight[\"string\", n, \"padding\"] pads by repeating copies of the string padding.\nStringPadRight[{s1, s2, …}] pads strings with spaces on the right to make them all the same length.\nStringPadRight[{s1, s2, …}, n, …] pads or truncates to make all strings of length n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringPadRight)))
(def StringPart "StringPart[\"string\", n] gives the n ^th character in \"string\".\nStringPart[\"string\", {n1, n2, …}] gives a list of the ni ^th characters in \"string\".\nStringPart[\"string\", m;;n;;s] gives a list of the characters in \"string\" from the m ^th through the n ^th in steps of s.\nStringPart[{s1, s2, …}, spec] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringPart)))
(def StringPartition "StringPartition[\"string\", n] partitions string into nonoverlapping substrings of length n.\nStringPartition[\"string\", n, d] generates substrings with offset d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringPartition)))
(def StringPosition "StringPosition[\"string\", \"sub\"] gives a list of the starting and ending character positions at which \"sub\" appears as a substring of \"string\". \nStringPosition[\"string\", patt] gives all positions at which substrings matching the general string expression patt appear in \"string\". \nStringPosition[\"string\", patt, n] includes only the first n occurrences of patt. \nStringPosition[\"string\", {patt1, patt2, …}] gives positions of all the patti. \nStringPosition[{s1, s2, …}, p] gives the list of results for each of the si. \nStringPosition[patt] represents an operator form of StringPosition that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringPosition)))
(def StringQ "StringQ[expr] gives True if expr is a string, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringQ)))
(def StringRepeat "StringRepeat[\"str\", n] creates a string consisting of \"str\" repeated n times.\nStringRepeat[\"str\", n, max] creates a string consisting of up to n copies of \"str\", truncated to be of maximum total length at most max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringRepeat)))
(def StringReplace "StringReplace[\"string\", s->sp] replaces the string expression s by sp wherever it appears in \"string\". \nStringReplace[\"string\", {s1->sp1, s2->sp2, …}] replaces the string expressions si by spi whenever they appear as substrings of \"string\".\nStringReplace[\"string\", srules, n] does only the first n replacements. \nStringReplace[{s1, s2, …}, srules] gives the list of results for each of the si. \nStringReplace[srules] represents an operator form of StringReplace that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringReplace)))
(def StringReplaceList "StringReplaceList[\"string\", s->sp] or StringReplaceList[\"string\", {s1->sp1, s2->sp2, …}] gives a list of the strings obtained by replacing each individual occurrence of substrings in \"string\" matching the string expressions si. \nStringReplaceList[\"string\", srules, n] gives a list of the first n results obtained. \nStringReplaceList[{s1, s2, …}, srules] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringReplaceList)))
(def StringReplacePart "StringReplacePart[\"string\", \"snew\", {m, n}] replaces the characters at positions m through n in \"string\" by \"snew\". \nStringReplacePart[\"string\", \"snew\", {{m1, n1}, {m2, n2}, …}] inserts copies of \"snew\" at several positions. \nStringReplacePart[\"string\", {\"snew1\", \"snew2\", …}, {{m1, n1}, {m2, n2}, …}] replaces characters at positions mi through ni in \"string\" by \"snewi\". \nStringReplacePart[\"snew\", {m, n}] represents an operator form of StringReplacePart that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringReplacePart)))
(def StringReverse "StringReverse[\"string\"] reverses the order of the characters in \"string\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringReverse)))
(def StringRiffle "StringRiffle[{s1, s2, s3, …}] creates a string by concatenating all the si, with spaces inserted between them.\nStringRiffle[{{s11, s12, …}, {s21, s22, …}, …}] creates a string by concatenating the sij, and inserting spaces at the lowest level and newlines at the higher level.\nStringRiffle[list, sep] inserts the separator sep between all elements in list.\nStringRiffle[list, {\"left\", \"sep\", \"right\"}] use left and right as delimiters after concatenation.\nStringRiffle[list, sep1, sep2, …] inserts separator sepi between elements of list at level i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringRiffle)))
(def StringRotateLeft "StringRotateLeft[string, n] cycles the characters in string n positions to the left.\nStringRotateLeft[string] cycles one position to the left." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringRotateLeft)))
(def StringRotateRight "StringRotateRight[string, n] cycles the characters in string n positions to the right.\nStringRotateRight[string] cycles one position to the right." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringRotateRight)))
(def StringSkeleton "StringSkeleton[n] represents a sequence of n omitted characters in a string printed with Short. The standard print form for StringSkeleton is an ellipsis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringSkeleton)))
(def StringSplit "StringSplit[\"string\"] splits \"string\" into a list of substrings separated by whitespace. \nStringSplit[\"string\", patt] splits into substrings separated by delimiters matching the string expression patt. \nStringSplit[\"string\", {p1, p2, …}] splits at any of the pi. \nStringSplit[\"string\", patt->val] inserts val at the position of each delimiter. \nStringSplit[\"string\", {p1->v1, …}] inserts vi at the position of each delimiter pi. \nStringSplit[\"string\", patt, n] splits into at most n substrings. \nStringSplit[{s1, s2, …}, p] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringSplit)))
(def StringStartsQ "StringStartsQ[\"string\", patt] yields True if the beginning of \"string\" matches the string expression patt, and yields False otherwise.\nStringStartsQ[\"string\", {patt1, patt2, …}] yields True if the beginning of \"string\" matches any of the patti.\nStringStartsQ[{string1, string2, …}, patt] gives a list of the results for each of the \"stringi\".\nStringStartsQ[patt] represents an operator form of StringStartsQ that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringStartsQ)))
(def StringTake "StringTake[\"string\", n] gives a string containing the first n characters in \"string\". \nStringTake[\"string\", -n] gives the last n characters in \"string\". \nStringTake[\"string\", {n}] gives the n ^th character in \"string\". \nStringTake[\"string\", {m, n}] gives characters m through n in \"string\". \nStringTake[\"string\", {spec1, spec2, …}] gives a list of the substrings specified by the speci.\nStringTake[{s1, s2, …}, spec] gives the list of results for each of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringTake)))
(def StringTakeDrop "StringTakeDrop[\"string\", n] gives a pair of strings containing the first n characters in \"string\" and the remaining characters.\nStringTakeDrop[\"string\", seq] gives the pair {StringTake[\"string\", seq], StringDrop[\"string\", seq]}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringTakeDrop)))
(def StringTemplate "StringTemplate[\"string\"] yields a TemplateObject expression that represents a string template to be applied to arguments. \nStringTemplate[src] uses File[…], URL[…] or CloudObject[…] as the source for the string template.\nStringTemplate[form, args] yields a TemplateObject with arguments, suitable for cloud deployment or other evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringTemplate)))
(def StringToByteArray "StringToByteArray[\"string\"] returns a byte array corresponding to the UTF-8 encoding of the specified string.\nStringToByteArray[\"string\", \"encoding\"] uses the specified character encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringToByteArray)))
(def StringToStream "StringToStream[\"string\"] opens an input stream for reading from a string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringToStream)))
(def StringTrim "StringTrim[\"string\"] trims whitespace from the beginning and end of \"string\".\nStringTrim[\"string\", patt] trims substrings matching patt from the beginning and end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StringTrim)))
(def StripBoxes "StripBoxes[expr] will strip out unnecessary boxes, spaces, and styles from a format expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StripBoxes)))
(def StripCellGrouping "StripCellGrouping is an option for functions importing or reading cells that specifies whether to strip cell group information." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StripCellGrouping)))
(def StripOnInput "StripOnInput is an option for certain boxes that determines whether the box should be stripped on evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StripOnInput)))
(def StripWrapperBoxes "StripWrapperBoxes is an option to TagBox that controls how boxes are stripped upon evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StripWrapperBoxes)))
(def Struckthrough "Struckthrough represents a font with a strike-through line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Struckthrough)))
(def StructuralImportance "StructuralImportance[rdist] gives the structural importances for all components in the ReliabilityDistribution rdist.\nStructuralImportance[fdist] gives the structural importances for all components in the FailureDistribution fdist.\nStructuralImportance[bexpr, {x1, x2, …}] gives the structural importance for the components x1, x2, … in the Boolean expression bexpr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StructuralImportance)))
(def StructuredSelection "StructuredSelection is an option for Cell that specifies whether to allow only complete subexpressions in the cell to be selected interactively using the front end." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StructuredSelection)))
(def StruveH "StruveH[n, z] gives the Struve function Hn (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StruveH)))
(def StruveL "StruveL[n, z] gives the modified Struve function Ln (z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StruveL)))
(def Stub "Stub is an attribute which specifies that if a symbol is ever used, Needs should automatically be called on the context of the symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Stub)))
(def StudentTDistribution "StudentTDistribution[ν] represents a standard Student t distribution with ν degrees of freedom.\nStudentTDistribution[μ, σ, ν] represents a Student t distribution with location parameter μ, scale parameter σ, and ν degrees of freedom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StudentTDistribution)))
(def Style "Style[expr, options] displays with expr formatted using the specified option settings. \nStyle[expr, \"style\"] uses the option settings for the specified style in the current notebook. \nStyle[expr, color] displays using the specified color. \nStyle[expr, Bold] displays with fonts made bold. \nStyle[expr, Italic] displays with fonts made italic. \nStyle[expr, Underlined] displays with fonts underlined. \nStyle[expr, Larger] displays with fonts made larger. \nStyle[expr, Smaller] displays with fonts made smaller. \nStyle[expr, n] displays with font size n. \nStyle[expr, Tiny], Style[expr, Small], etc. display with fonts that are tiny, small, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Style)))
(def StyleBox "StyleBox[boxes, options] is a low-level representation of boxes to be shown with the specified option settings. \nStyleBox[boxes, \"style\"] uses the option setting for the specified style in the current notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StyleBox)))
(def StyleData "StyleData[\"style\"] is a low-level representation of the contents of a style definition cell.\nStyleData[\"style\", \"environment\"] represents the contents of a style definition cell in the style environment \"environment\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StyleData)))
(def StyleDefinitions "StyleDefinitions is an option for notebooks that gives definitions for the styles that can be used in a notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StyleDefinitions)))
(def StyleHints "StyleHints is an option for cells and notebooks that specifies an association containing hints used to control stylesheet behaviors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote StyleHints)))
(def SubMinus "SubMinus[expr] displays as expr-." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubMinus)))
(def SubPlus "SubPlus[expr] displays as expr+." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubPlus)))
(def SubStar "SubStar[expr] displays as expr*." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubStar)))
(def SubValues "SubValues[f] gives a list of transformation rules corresponding to all subvalues (values for f[…][…]…) defined for the symbol f.\nSubValues[\"symbol\"] gives a list of transformation rules corresponding to all subvalues defined for the symbol named \"symbol\" if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubValues)))
(def Subdivide "Subdivide[n] generates the list {0, 1/n, 2/n, …, 1}.\nSubdivide[xmax, n] generates the list of values obtained by subdividing the interval 0 to xmax into n equal parts.\nSubdivide[xmin, xmax, n] generates the list of values from subdividing the interval xmin to xmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subdivide)))
(def Subfactorial "Subfactorial[n] gives the number of permutations of n objects that leave no object fixed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subfactorial)))
(def Subgraph "Subgraph[g, {v1, v2, …}] gives the subgraph of the graph g generated by the vertices vi.\nSubgraph[g, {e1, e2, …}] gives the subgraph generated by the edges ej.\nSubgraph[g, patt] gives the subgraph generated by the vertices and edges that match the pattern patt.\nSubgraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subgraph)))
(def SubresultantPolynomialRemainders "SubresultantPolynomialRemainders[poly1, poly2, var] gives the subresultant polynomial remainder sequence of the polynomials poly1 and poly2 with respect to the variable var.\nSubresultantPolynomialRemainders[poly1, poly2, var, Modulusp] computes the subresultant polynomial remainder sequence modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubresultantPolynomialRemainders)))
(def SubresultantPolynomials "SubresultantPolynomials[poly1, poly2, var] generates a list of subresultant polynomials of the polynomials poly1 and poly2 with respect to the variable var.\nSubresultantPolynomials[poly1, poly2, var, Modulusp] computes the subresultant polynomials modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubresultantPolynomials)))
(def Subresultants "Subresultants[poly1, poly2, var] generates a list of the principal subresultant coefficients of the polynomials poly1 and poly2 with respect to the variable var.\nSubresultants[poly1, poly2, var, Modulusp] computes the principal subresultant coefficients modulo the prime p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subresultants)))
(def Subscript "Subscript[x, y] is an object that formats as xy. \nSubscript[x, y1, y2, …] formats as x y1, y2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subscript)))
(def SubscriptBox "SubscriptBox[x, y] is the low‐level box representation for xy in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubscriptBox)))
(def SubscriptBoxOptions "SubscriptBoxOptions is an option for selections that specifies settings for SubscriptBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubscriptBoxOptions)))
(def Subsequences "Subsequences[list] gives the list of all possible subsequences of list. \nSubsequences[list, n] gives all subsequences containing at most n elements. \nSubsequences[list, {n}] gives all subsequences containing exactly n elements.\nSubsequences[list, {nmin, nmax}] gives all subsequences containing between nmin and nmax elements. \nSubsequences[list, nspec, s] limits the result to the first s subsequences. \nSubsequences[list, nspec, {s}] gives if possible the s ^th subsequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subsequences)))
(def Subset "Subset[x, y, …] displays as x⊂y⊂…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subset)))
(def SubsetCases "SubsetCases[list, patt] gives a list of the sublists in list that match the pattern patt in any order.\nSubsetCases[list, pattrhs] gives a list of the values of rhs corresponding to matching sublists.\nSubsetCases[list, patt, n] includes only the first n matches." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetCases)))
(def SubsetCount "SubsetCount[list, sub] gives a count of the number of times sub appears in any order as a sublist of list.\nSubsetCount[list, patt] gives the number of sublists in list that match the general pattern patt in any order." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetCount)))
(def SubsetEqual "SubsetEqual[x, y, …] displays as x⊆y⊆…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetEqual)))
(def SubsetMap "SubsetMap[f, {e1, e2, …}, {i, j, …}] yields an expression in which the elements ei, ej, … in the list {e1, e2, …} are replaced with the corresponding elements of the list obtained by evaluating f[{ei, ej, …}].\nSubsetMap[f, expr, {pos1, pos2, …}] replaces elements of expr at positions pos1, pos2, ….\nSubsetMap[f, {pos1, pos2, …}] represents an operator form of SubsetMap that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetMap)))
(def SubsetPosition "SubsetPosition[list, sublist] gives a list of positions at which sublist appears in list in any order.\nSubsetPosition[list, patt] gives all positions at which sublists matching patt in any order appear in list.\nSubsetPosition[list, patt, n] includes only the first n positions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetPosition)))
(def SubsetQ "SubsetQ[list1, list2] yields True if list2 is a subset of list1, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetQ)))
(def SubsetReplace "SubsetReplace[list, rules] replaces sublists in list according to the specified rule or list of rules.\nSubsetReplace[list, rules, n] does only the first n replacements.\nSubsetReplace[rules] represents an operator form of SubsetReplace that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsetReplace)))
(def Subsets "Subsets[list] gives a list of all possible subsets of list. \nSubsets[list, n] gives all subsets containing at most n elements. \nSubsets[list, {n}] gives all subsets containing exactly n elements. \nSubsets[list, {nmin, nmax}] gives all subsets containing between nmin and nmax elements. \nSubsets[list, nspec, s] limits the result to the first s subsets. \nSubsets[list, nspec, {s}] gives if possible the s ^th subset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subsets)))
(def SubstitutionSystem "SubstitutionSystem[rule, init, t] generates a list representing the evolution of the substitution system with the specified rule from initial condition init for t steps.\nSubstitutionSystem[rule, init] gives the result of evolving init for one step.\nSubstitutionSystem[rule] is an operator form of SubstitutionSystem that corresponds to one step of evolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubstitutionSystem)))
(def Subsuperscript "Subsuperscript[x, y, z] is an object that formats as x_y^z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subsuperscript)))
(def SubsuperscriptBox "SubsuperscriptBox[x, y, z] is the low‐level box representation for x_y^z in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsuperscriptBox)))
(def SubsuperscriptBoxOptions "SubsuperscriptBoxOptions is an option for selections that specifies settings for SubsuperscriptBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubsuperscriptBoxOptions)))
(def SubtitleEncoding "SubtitleEncoding is an option for Export and other functions that specifies the subtitle encoding to use when creating a video file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubtitleEncoding)))
(def SubtitleStyle "SubtitleStyle is an option for video functions that specifies styles of subtitles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubtitleStyle)))
(def SubtitleTrackSelection "SubtitleTrackSelection is an option that specifies the subtitle tracks of interest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubtitleTrackSelection)))
(def Subtract "x-y is equivalent to x+(-1*y)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Subtract)))
(def SubtractFrom "x-=dx subtracts dx from x and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubtractFrom)))
(def SubtractSides "SubtractSides[rel, x] subtracts x from each side of the equation or inequality rel.\nSubtractSides[rel1, rel2] subtracts the corresponding sides of two equations or inequalities.\nSubtractSides[rel] subtracts the right-hand side of rel from each side, producing a zero right-hand side." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SubtractSides)))
(def Succeeds "Succeeds[x, y, …] displays as x≻y≻…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Succeeds)))
(def SucceedsEqual "SucceedsEqual[x, y, …] displays as x⪰y⪰…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SucceedsEqual)))
(def SucceedsSlantEqual "SucceedsSlantEqual[x, y, …] displays as x≽y≽…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SucceedsSlantEqual)))
(def SucceedsTilde "SucceedsTilde[x, y, …] displays as x≿y≿…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SucceedsTilde)))
(def Success "Success[\"tag\", assoc] represents a success of a type indicated by tag, with details given by the association assoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Success)))
(def SuchThat "SuchThat[x, y] displays as x∍y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuchThat)))
(def Sum "Sum[f, {i, imax}] evaluates the sum \nUnderoverscriptBox[\"∑\", \nRowBox[{\"i\", \"=\", \"1\"}], \"imax\", \nLimitsPositioning->True]f . \\ \\nSum[f, {i, imin, imax}]\\ starts\\ with\\ i=imin. \nSum[f, {i, imin, imax, di}] uses steps di. \nSum[f, {i, {i1, i2, …}}] uses successive values i1, i2, ….\nSum[f, {i, imin, imax}, {j, jmin, jmax}, …] evaluates the multiple sum \nUnderoverscriptBox[\"∑\", \nRowBox[{\"i\", \"=\", \"imin\"}], \"imax\", \nLimitsPositioning->True]\nUnderoverscriptBox[\"∑\", \nRowBox[{\"j\", \"=\", \"jmin\"}], \"jmax\", \nLimitsPositioning->True]…  f . \\ \\nSum[f, i]\\ gives\\ the\\ indefinite\\ sum\\ ∑_i f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sum)))
(def SumConvergence "SumConvergence[f, n] gives conditions for the sum ∑_n^∞f to be convergent.\nSumConvergence[f, {n1, n2, …}] gives conditions for the multiple sum ∑_n1^∞∑_n2^∞… f to be convergent.\nSumConvergence[f, {n, a, ∞}] gives conditions for the sum ∑_n=a^∞f to be convergent on the interval [a, ∞).\nSumConvergence[f, {n, a, ∞}, …, {m, b, ∞}] gives conditions for the multiple sum ∑_n=a^∞… ∑_m=b^∞f to be convergent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SumConvergence)))
(def SummationLayer "SummationLayer[] represents a net layer that sums all of its input elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SummationLayer)))
(def SunPosition "SunPosition[] gives the position of the Sun for the current date and location.\nSunPosition[datespec] gives the position of the Sun for the specified date.\nSunPosition[locationspec] gives the positions of the Sun for the specified location.\nSunPosition[locationspec, datespec] gives the position of the Sun for the specified date and location.\nSunPosition[{{location1, date1}, {location2, date2}, …}] gives the positions of the Sun for all specified locations on the specified dates.\nSunPosition[locationspec, datespec, func] uses func to determine what to return for extended locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SunPosition)))
(def Sunday "Sunday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sunday)))
(def Sunrise "Sunrise[] gives the time of the next sunrise for the current date and location.\nSunrise[datespec] gives the times of the next sunrise for the specified dates.\nSunrise[locationspec] gives the times of the next sunrise for the specified locations.\nSunrise[locationspec, datespec] gives the time of the next sunrise for the specified date and location.\nSunrise[{{location1, date1}, {location2, date2}, …}] gives the times of the next sunrise for all specified locations on the specified dates.\nSunrise[locationspec, datespec, func] uses func to determine what to return for extended locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sunrise)))
(def Sunset "Sunset[] gives the time of the next sunset for the current date and location.\nSunset[datespec] gives the time of the next sunset for the specified dates.\nSunset[locationspec] gives the times of the next sunset for the specified locations.\nSunset[locationspec, datespec] gives the time of the next sunset for the specified date and location.\nSunset[{{location1, date1}, {location2, date2}, …}] gives the times of the next sunset for all specified locations on the specified dates.\nSunset[locationspec, datespec, func] uses func to determine what to return for extended locations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Sunset)))
(def SuperDagger "SuperDagger[expr] displays as expr^†." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperDagger)))
(def SuperMinus "SuperMinus[expr] displays as expr^-." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperMinus)))
(def SuperPlus "SuperPlus[expr] displays as expr^+." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperPlus)))
(def SuperStar "SuperStar[expr] displays as expr^*." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperStar)))
(def SupernovaData "SupernovaData[entity, property] gives the value of the specified property for the supernova entity.\nSupernovaData[{entity1, entity2, …}, property] gives a list of property values for the specified supernova entities.\nSupernovaData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SupernovaData)))
(def Superscript "Superscript[x, y] is an object that formats as x^y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Superscript)))
(def SuperscriptBox "SuperscriptBox[x, y] is the low‐level box representation for x^y in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperscriptBox)))
(def SuperscriptBoxOptions "SuperscriptBoxOptions is an option for selections that specifies settings for SuperscriptBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuperscriptBoxOptions)))
(def Superset "Superset[x, y, …] displays as x⊃y⊃…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Superset)))
(def SupersetEqual "SupersetEqual[x, y, …] displays as x⊇y⊇…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SupersetEqual)))
(def Surd "Surd[x, n] gives the real-valued n ^th root of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Surd)))
(def SurdForm "SurdForm is an option to RadicalBox and SqrtBox that indicates whether the radical represents a Surd expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurdForm)))
(def SurfaceArea "SurfaceArea[reg] gives the surface area of the three-dimensional region reg.\nSurfaceArea[{x1, …, xn}, {s, smin, ssmax}, {t, tmin, tmax}, {u, umin, umax}] gives the surface area of the parametrized region whose Cartesian coordinates xi are functions of s, t, u.\nSurfaceArea[{x1, …, xn}, {s, smin, ssmax}, {t, tmin, tmax}, {u, umin, umax}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurfaceArea)))
(def SurfaceData "SurfaceData[entity, property] gives the value of the specified property for the surface entity.\nSurfaceData[{entity1, entity2, …}, property] gives a list of property values for the specified surface entities.\nSurfaceData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurfaceData)))
(def SurfaceIntegrate "SurfaceIntegrate[f, {x, y, …}∈surface] computes the scalar surface integral of the function f[x, y, …] over the surface.\nSurfaceIntegrate[{p, q, …}, {x, y, …}∈surface] computes the vector surface integral of the vector field {p[x, y, …], q[x, y, …], …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurfaceIntegrate)))
(def SurvivalDistribution "SurvivalDistribution[{e1, e2, …}] represents a survival distribution with event times ei.\nSurvivalDistribution[{cw1, cw2, …}{e1, e2, …}] represents a survival distribution where events ei occur with censor weights cwi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurvivalDistribution)))
(def SurvivalFunction "SurvivalFunction[dist, x] gives the survival function for the distribution dist evaluated at x.\nSurvivalFunction[dist, {x1, x2, …}] gives the multivariate survival function for the distribution dist evaluated at {x1, x2, …}.\nSurvivalFunction[dist] gives the survival function as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurvivalFunction)))
(def SurvivalModel "SurvivalModel[…] represents the symbolic survival model obtained from functions like SurvivalModelFit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurvivalModel)))
(def SurvivalModelFit "SurvivalModelFit[{e1, e2, …}] creates a survival model for event times ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SurvivalModelFit)))
(def SuzukiDistribution "SuzukiDistribution[μ, ν] represents the Suzuki distribution with shape parameters μ and ν." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuzukiDistribution)))
(def SuzukiGroupSuz "SuzukiGroupSuz[] represents the sporadic simple Suzuki group Suz." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SuzukiGroupSuz)))
(def SwatchLegend "SwatchLegend[{col1, …}, {lbl1, …}] generates a legend that associates swatches of colors coli with labels lbli.\nSwatchLegend[{col1, …}, Automatic] generates a legend with placeholder labels for the colors coli.\nSwatchLegend[{lbl1, …}] represents a legend with inherited colors within visualization functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SwatchLegend)))
(def Switch "Switch[expr, form1, value1, form2, value2, …] evaluates expr, then compares it with each of the formi in turn, evaluating and returning the valuei corresponding to the first match found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Switch)))
(def Symbol "Symbol[\"name\"] refers to a symbol with the specified name." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Symbol)))
(def SymbolName "SymbolName[symbol] gives the name of the specified symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymbolName)))
(def SymbolicDeltaProductArray "SymbolicDeltaProductArray[{n1, n2, …}, {{j 1, 1, j 1, 2, …}, {j 2, 1, j 2, 2, …}, …}] represents an n1×n2×… array with elements a i1, i2, … equal to 1 if all i j p, 1i j p, 2…, and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymbolicDeltaProductArray)))
(def SymbolicIdentityArray "SymbolicIdentityArray[{n1, n2, …}] represents an n1×n2×…×n1×n2×… array with elements a i1, i2, …, j1, j2, … equal to 1 if all ikjk, and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymbolicIdentityArray)))
(def SymbolicOnesArray "SymbolicOnesArray[] represents an array of ones with unspecified dimensions.\nSymbolicOnesArray[{n1, n2, …}] represents an n1×n2×… array of ones." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymbolicOnesArray)))
(def SymbolicZerosArray "SymbolicZerosArray[] represents an array of zeros with unspecified dimensions.\nSymbolicZerosArray[{n1, n2, …}] represents an n1×n2×… array of zeros." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymbolicZerosArray)))
(def SymletWavelet "SymletWavelet[] represents the Symlet wavelet of order 4.\nSymletWavelet[n] represents the Symlet wavelet of order n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymletWavelet)))
(def Symmetric "Symmetric[{s1, …, sn}] represents the symmetry of a tensor that is symmetric in the slots si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Symmetric)))
(def SymmetricDifference "SymmetricDifference[list1, list2, …] gives the symmetric difference of the lists listi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricDifference)))
(def SymmetricGroup "SymmetricGroup[n] represents the symmetric group of degree n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricGroup)))
(def SymmetricKey "SymmetricKey[assoc] represents all the information needed for encryption, decryption, and other operations in a symmetric cryptographic system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricKey)))
(def SymmetricMatrix "SymmetricMatrix[smat] converts the symmetric matrix smat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricMatrix)))
(def SymmetricMatrixQ "SymmetricMatrixQ[m] gives True if m is explicitly symmetric, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricMatrixQ)))
(def SymmetricPolynomial "SymmetricPolynomial[k, {x1, …, xn}] gives the k ^th elementary symmetric polynomial in the variables x1, …, xn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricPolynomial)))
(def SymmetricReduction "SymmetricReduction[f, {x1, …, xn}] gives a pair of polynomials {p, q} in x1, …, xn such that f==p+q, where p is the symmetric part and q is the remainder.\nSymmetricReduction[f, {x1, …, xn}, {s1, …, sn}] gives the pair {p, q} with the elementary symmetric polynomials in p replaced by s1, …, sn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetricReduction)))
(def Symmetrize "Symmetrize[tensor, sym] returns the symmetrization of tensor under the symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Symmetrize)))
(def SymmetrizedArray "SymmetrizedArray[{pos1val1, pos2val2, …}, dims, sym] yields an array of dimensions dims whose entries are given by those in the rules posivali or through the symmetry sym.\nSymmetrizedArray[list] yields a symmetrized array version of list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetrizedArray)))
(def SymmetrizedArrayRules "SymmetrizedArrayRules[sa] returns a list of rules posivali of the symmetrized array sa.\nSymmetrizedArrayRules[a, sym] returns a list of rules posivali of the array a after being symmetrized with symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetrizedArrayRules)))
(def SymmetrizedDependentComponents "SymmetrizedDependentComponents[comp, sym] gives the list of components that are equivalent to the component comp by the symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetrizedDependentComponents)))
(def SymmetrizedIndependentComponents "SymmetrizedIndependentComponents[dims, sym] gives the list of independent components of an array of dimensions dims with the symmetry sym." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetrizedIndependentComponents)))
(def SymmetrizedReplacePart "SymmetrizedReplacePart[sa, {pos1val1, pos2val2, …}] replaces independent values of the symmetrized array sa as given by the rules posivali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SymmetrizedReplacePart)))
(def SynchronousInitialization "SynchronousInitialization is an option for Manipulate, DynamicModule, and related functions that specifies whether or not to evaluate the expression given as the setting for Initialization synchronously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SynchronousInitialization)))
(def SynchronousUpdating "SynchronousUpdating is an option for Manipulate, Dynamic, and related functions that specifies whether or not to evaluate their contents synchronously." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SynchronousUpdating)))
(def Synonyms "Synonyms[\"word\"] returns the synonyms associated with the specified word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Synonyms)))
(def SyntaxForm "SyntaxForm is an option for operator-like box objects that specifies the precedence level to use when the box is used as an operator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SyntaxForm)))
(def SyntaxInformation "SyntaxInformation[f] gives information used to generate syntax coloring and other advisories when f[…] is entered as input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SyntaxInformation)))
(def SyntaxLength "SyntaxLength[\"string\"] finds the number of characters starting at the beginning of a string that correspond to syntactically correct input for a single Wolfram Language expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SyntaxLength)))
(def SyntaxPacket "SyntaxPacket[integer] is a WSTP packet where integer indicates the position at which a syntax error was detected in the input line." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SyntaxPacket)))
(def SyntaxQ "SyntaxQ[\"string\"] returns True if the string corresponds to syntactically correct input for a single Wolfram Language expression, and returns False otherwise. \nSyntaxQ[\"string\", form] uses interpretation rules corresponding to the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SyntaxQ)))
(def SynthesizeMissingValues "SynthesizeMissingValues[{example1, example2, …}] replaces missing values in each example by generated values.\nSynthesizeMissingValues[dist, data] uses the distribution dist to generate values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SynthesizeMissingValues)))
(def SystemBenchmark "SystemBenchmark[] runs the WolframMark benchmark.\nSystemBenchmark[\"Notebook\"] generates a report notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemBenchmark)))
(def SystemCredential "SystemCredential[\"keyname\"] gives the expression stored under \"keyname\" in secure storage." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemCredential)))
(def SystemCredentialData "SystemCredentialData[assoc, \"pwfield\"] represents data intended for secure credential storage." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemCredentialData)))
(def SystemCredentialKey "SystemCredentialKey is an option of AuthenticationDialog that specifies the name for secure storage of the requested credentials." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemCredentialKey)))
(def SystemCredentialKeys "SystemCredentialKeys[\"patt\"] gives the list of keys in secure storage that match patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemCredentialKeys)))
(def SystemCredentialStoreObject "SystemCredentialStoreObject[assoc] represents a credential store." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemCredentialStoreObject)))
(def SystemDialogInput "SystemDialogInput[\"type\"] brings up an interactive system dialog and returns the value chosen in the dialog. \nSystemDialogInput[\"type\", init] uses init as the initial setting in the dialog." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemDialogInput)))
(def SystemInformation "SystemInformation[] gives detailed information about the Wolfram System being run. \nSystemInformation[\"comp\"] gives a list of rules with information about the component \"comp\". \nSystemInformation[\"comp\", \"prop\"] gives the value of property \"prop\" for component \"comp\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemInformation)))
(def SystemInstall "SystemInstall[pack] downloads and installs the software package pack on your machine." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemInstall)))
(def SystemModel "SystemModel[\"model\"] gives a representation of the model \"model\", usable as input to other functions.\nSystemModel[\"model\"][\"property\"] gives the specified \"property\" for the model \"model\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModel)))
(def SystemModelCalibrate "SystemModelCalibrate[data, smodel, pars] calibrates the parameters pars in the system model smodel according to data.\nSystemModelCalibrate[data, {smodel, cons}, pars] calibrates the parameters pars subject to the constraints cons.\nSystemModelCalibrate[…, spec] calibrates following the specification spec.\nSystemModelCalibrate[…, \"prop\"] gives the value of the property \"prop\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelCalibrate)))
(def SystemModelExamples "SystemModelExamples[] shows an interactive browser of system modeling example models. \nSystemModelExamples[\"Models\"] lists all example models.\nSystemModelExamples[\"Models\", patt] lists models with names matching string pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelExamples)))
(def SystemModelLinearize "SystemModelLinearize[model] gives a linearized StateSpaceModel for model at an equilibrium. \nSystemModelLinearize[model, op] linearizes at the operating point op." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelLinearize)))
(def SystemModelMeasurements "SystemModelMeasurements[sspec] computes measurement properties for the system specification sspec.\nSystemModelMeasurements[sspec, prop] computes the property prop.\nSystemModelMeasurements[sim, …] computes properties for the SystemModelSimulationData object sim." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelMeasurements)))
(def SystemModelParametricSimulate "SystemModelParametricSimulate[model, v, {p1, p2, …}] simulates model for the variable v with parameters pi.\nSystemModelParametricSimulate[model, {v1, v2, …}, {p1, p2, …}] simulates model for multiple variables vi.\nSystemModelParametricSimulate[model, vars, tmax, …] simulates from 0 to tmax.\nSystemModelParametricSimulate[model, vars, {tmin, tmax}, …] simulates from tmin to tmax." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelParametricSimulate)))
(def SystemModelPlot "SystemModelPlot[sim] shows default plots from the SystemModelSimulationData object sim.\nSystemModelPlot[sim, \"id\"] shows model plot with identifier or name \"id\".\nSystemModelPlot[sim, {v1, v2, …}] generates a plot of the variables vi in sim.\nSystemModelPlot[{sim1, sim2, …}, …] plots variables from several simulations. \nSystemModelPlot[model, …] plots from a new simulation of \"model\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelPlot)))
(def SystemModelReliability "SystemModelReliability[model] retrieves the lifetime distribution for model.\nSystemModelReliability[model, \"Components\"] gives a list of components in ReliabilityDistribution or FailureDistribution.\nSystemModelReliability[model, \"ComponentRules\"] gives a list of translation rules for components." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelReliability)))
(def SystemModelSimulate "SystemModelSimulate[model] simulates model according to experiment settings.\nSystemModelSimulate[model, tmax] simulates from 0 to tmax.\nSystemModelSimulate[model, {tmin, tmax}] simulates from tmin to tmax.\nSystemModelSimulate[model, vars, {tmin, tmax}] stores only simulation data for the variables vars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelSimulate)))
(def SystemModelSimulateSensitivity "SystemModelSimulateSensitivity[model, {p1, p2, …}] simulates model and sensitivities to parameters pi following experiment settings.\nSystemModelSimulateSensitivity[model, tmax, {p1, p2, …}] simulates from 0 to tmax.\nSystemModelSimulateSensitivity[model, {tmin, tmax}, {p1, p2, …}] simulates from tmin to tmax.\nSystemModelSimulateSensitivity[model, vars, {tmin, tmax}, {p1, p2, …}] stores only simulation data for the variables vars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelSimulateSensitivity)))
(def SystemModelSimulationData "SystemModelSimulationData[…] represents simulation data from functions such as SystemModelSimulate etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelSimulationData)))
(def SystemModelUncertaintyPlot "SystemModelUncertaintyPlot[sys, spec] plots the uncertainty in outputs in the system model sys from uncertainty in inputs according to spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModelUncertaintyPlot)))
(def SystemModeler "SystemModeler[] starts SystemModeler. \nSystemModeler[model] starts SystemModeler and opens the SystemModel model.\nSystemModeler[simulation] starts SystemModeler with SystemModelSimulationData simulation.\nSystemModeler[…, \"action\"] starts SystemModeler and completes \"action\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModeler)))
(def SystemModels "SystemModels[] returns a list of loaded system models.\nSystemModels[patt] returns the models matching the string pattern patt.\nSystemModels[patt, \"spec\"] only returns specialized models of the kind \"spec\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemModels)))
(def SystemOpen "SystemOpen[\"target\"] opens the specified file, URL, or other target with the associated program on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemOpen)))
(def SystemOptions "SystemOptions[\"name\"] gives the current setting for the internal system option with the specified name.\nSystemOptions[] gives the current settings for all settable internal system options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemOptions)))
(def SystemProcessData "SystemProcessData[] gives a dataset of information about processes that you are running on your computer system.\nSystemProcessData[All] gives information about all processes running on your computer system.\nSystemProcessData[patt] gives information about processes whose names or paths contain the string pattern patt.\nSystemProcessData[propval] gives information about processes for which property prop has value val.\nSystemProcessData[{prop1val1, …}] gives information about processes for which property propi has value vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemProcessData)))
(def SystemProcesses "SystemProcesses[] gives a list of processes that you are running on your computer system.\nSystemProcesses[All] gives a list of all processes that are running on your computer system.\nSystemProcesses[patt] gives a list of all processes whose names match the string pattern patt.\nSystemProcesses[propval] gives a list of all processes for which property prop has value val.\nSystemProcesses[{prop1val1, …}] gives a list of all processes for which property propi has value vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemProcesses)))
(def SystemsConnectionsModel "SystemsConnectionsModel[{sys1, sys2, …}, conxs, ins, outs] gives a model with inputs ins and outputs outs obtained by connecting the systems models sysi using connections conxs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsConnectionsModel)))
(def SystemsModelControllerData "SystemsModelControllerData[…] represents controller data generated by functions LQGRegulator, PIDTune, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelControllerData)))
(def SystemsModelDelay "SystemsModelDelay[δ] represents a time delay of δ in a StateSpaceModel or TransferFunctionModel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelDelay)))
(def SystemsModelDelayApproximate "SystemsModelDelayApproximate[sys, ord] gives a delay-free system by using approximations of order ord of the time delays in system sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelDelayApproximate)))
(def SystemsModelDelete "SystemsModelDelete[sys, {in1, …}] deletes the subsystem of the systems model sys associated with inputs at position ini.\nSystemsModelDelete[sys, {in1, …}, {out1, …}] also deletes the subsystem associated with outputs at positions outi.\nSystemsModelDelete[sys, {in1, …}, {out1, …}, {s1, s2, …}] deletes the subsystem of the state-space model sys associated with inputs, outputs, and states at ini, outi, and si, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelDelete)))
(def SystemsModelDimensions "SystemsModelDimensions[sys] gives the number of inputs and outputs of the systems model sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelDimensions)))
(def SystemsModelExtract "SystemsModelExtract[sys, {in1, …}] extracts the subsystem of the systems model sys associated with inputs at position ini.\nSystemsModelExtract[sys, {in1, …}, {out1, …}] extracts the subsystem associated with inputs and outputs at positions ini and outi, respectively.\nSystemsModelExtract[sys, {in1, …}, {out1, …}, {s1, …}] extracts the subsystem of the state-space model sys associated with inputs, outputs, and states at ini, outi, and si, respectively." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelExtract)))
(def SystemsModelFeedbackConnect "SystemsModelFeedbackConnect[sys] connects the outputs from sys to the inputs with negative feedback. \nSystemsModelFeedbackConnect[sys, {con1, …}] only feedback connect the outputs and inputs in coni.\nSystemsModelFeedbackConnect[sys1, sys2] connects the outputs of sys1 to sys2 and the outputs of sys2 to the inputs of sys1 in feedback.\nSystemsModelFeedbackConnect[sys1, sys2, {out1, …}, {{in1, ftype1}, …}] connects output outi of sys1 to the i ^th input of sys2 and the j ^th output of sys2 to input inj of sys1 with feedback type ftypej." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelFeedbackConnect)))
(def SystemsModelLabels "SystemsModelLabels is an option to StateSpaceModel etc. that specifies labels of variables." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelLabels)))
(def SystemsModelLinearity "SystemsModelLinearity[sys] gives the linearity of the systems model sys.\nSystemsModelLinearity[{sys, {in1, …}, {out1, …}, {s1, …}}] only considers the subsystem associated with inputs ini, outputs outj, and states sk." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelLinearity)))
(def SystemsModelMerge "SystemsModelMerge[{sys1, sys2, …}] merges the systems models sysj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelMerge)))
(def SystemsModelOrder "SystemsModelOrder[sys] gives the order of the state-space model sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelOrder)))
(def SystemsModelParallelConnect "SystemsModelParallelConnect[sys1, sys2] connects the systems models sys1 and sys2 in parallel.\nSystemsModelParallelConnect[sys1, sys2, {{in11, in21}, …}, {{out11, out21}, …}] connects the inputs in1 i to inputs in 2i and sums the outputs out1 k and outputs out2 k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelParallelConnect)))
(def SystemsModelSeriesConnect "SystemsModelSeriesConnect[sys1, sys2] connects systems models sys1 and sys2 in series. \nSystemsModelSeriesConnect[sys1, sys2, {{out11, in21}, …}] connects outputs out 1i of sys1 to inputs in 2i of sys2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelSeriesConnect)))
(def SystemsModelStateFeedbackConnect "SystemsModelStateFeedbackConnect[sys, con] connects the states of the systems model sys to the controller con and the outputs of con to the inputs of sys in feedback.\nSystemsModelStateFeedbackConnect[sys, con, {s1, …}, {{in1, ftype1}, …}] connects state si of sys to the i ^th input of con and the j ^th output of con to input inj of sys with feedback type ftypej" (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelStateFeedbackConnect)))
(def SystemsModelVectorRelativeOrders "SystemsModelVectorRelativeOrders[sys] gives the vector-relative orders of the systems model sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote SystemsModelVectorRelativeOrders)))
(def TTest "TTest[data] tests whether the mean of data is zero. \nTTest[{data1, data2}] tests whether the means of data1 and data2 are equal.\nTTest[dspec, μ0] tests the mean against μ0.\nTTest[dspec, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TTest)))
(def TabView "TabView[{lbl1expr1, lbl2expr2, …}] represents an object in which clicking the tab with label lbli displays expri. \nTabView[{lbl1expr1, lbl2expr2, …}, i] makes the i ^th tab be the one currently selected.\nTabView[{{v1, lbl1expr1}, {v2, lbl2expr2}, …}, v] associates values vi with successive tabs, and makes the tab with value v be the one currently selected. \nTabView[{expr1, expr2, …}] takes the tab labels to be successive integers." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabView)))
(def Table "Table[expr, n] generates a list of n copies of expr. \nTable[expr, {i, imax}] generates a list of the values of expr when i runs from 1 to imax. \nTable[expr, {i, imin, imax}] starts with i=imin. \nTable[expr, {i, imin, imax, di}] uses steps di. \nTable[expr, {i, {i1, i2, …}}] uses the successive values i1, i2, ….\nTable[expr, {i, imin, imax}, {j, jmin, jmax}, …] gives a nested list. The list associated with i is outermost." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Table)))
(def TableAlignments "TableAlignments is an option for TableForm and MatrixForm which specifies how entries in each dimension should be aligned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableAlignments)))
(def TableDepth "TableDepth is an option for TableForm and MatrixForm that specifies the maximum number of levels to be printed in tabular or matrix format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableDepth)))
(def TableDirections "TableDirections is an option for TableForm and MatrixForm which specifies whether successive dimensions should be arranged as rows or columns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableDirections)))
(def TableForm "TableForm[list] prints with the elements of list arranged in an array of rectangular cells." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableForm)))
(def TableHeadings "TableHeadings is an option for TableForm and MatrixForm that gives the labels to be printed for entries in each dimension of a table or matrix." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableHeadings)))
(def TableSpacing "TableSpacing is an option for TableForm and MatrixForm that specifies how many spaces should be left between each successive row or column." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableSpacing)))
(def TableView "TableView[{{expr11, expr12, …}, {expr21, expr22, …}, …}] displays as a spreadsheet-like table view for editing and viewing exprij.\nTableView[Dynamic[x]] takes the contents of the table view to be the dynamically updated current value of x, with the value of x being reset as the table view is interactively edited.\nTableView[table, type] uses the specified type by default to represent newly edited or created entries in the table view.\nTableView[] displays an empty table view." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TableView)))
(def Tabular "Tabular[data] creates a tabular object from rectangular data representing a list of rows.\nTabular[data, {key1, key2, …}] sets keyi as the name of column i of the tabular object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tabular)))
(def TabularColumn "TabularColumn[{v1, v2, …}] gives a vector with elements with values vi with an efficient element type determined automatically.\nTabularColumn[{…}, etype] uses element type etype.\nTabularColumn[{…}, etype, method] uses method to convert elements to etype." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularColumn)))
(def TabularColumnQ "TabularColumnQ[tcol] yields True if tcol is a valid TabularColumn object, and False otherwise.\nTabularColumnQ[tcol, tsel] yields True if the elements of tcol have type matching tsel, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularColumnQ)))
(def TabularQ "TabularQ[tab] gives True if tab is a valid Tabular object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularQ)))
(def TabularRow "TabularRow[data] represents a single row of a Tabular object.\nTabularRow[data, {key1, key2, …}] sets keyi as the name of column i of the tabular row object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularRow)))
(def TabularRowQ "TabularRowQ[tabr] gives True if tabr is a valid TabularRow object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularRowQ)))
(def TabularSchema "TabularSchema[…] represents the schema information associated with a Tabular object.\nTabularSchema[tab] extracts the schema information for the tabular object tab.\nTabularSchema[schema, \"prop\"->val] modifies the existing TabularSchema object schema with the new value val for the property \"prop\".\nTabularSchema[schema, <|prop1->val1, …|>] modifies multiple properties." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularSchema)))
(def TabularStructure "TabularStructure[tab] gives structural information about the Tabular tab for each column. \nTabularStructure[tab, cols] gives structural information for the columns cols. \nTabularStructure[tab, cols, props] selects the properties props to report." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TabularStructure)))
(def TagBox "TagBox[boxes, tag] is a low-level box construct that displays as boxes but maintains tag to guide the interpretation of boxes on input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TagBox)))
(def TagBoxOptions "TagBoxOptions is an option that specifies settings for TagBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TagBoxOptions)))
(def TagSet "f/:lhs=rhs assigns rhs to be the value of lhs, and associates the assignment with the symbol f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TagSet)))
(def TagSetDelayed "f/:lhs:=rhs assigns rhs to be the delayed value of lhs, and associates the assignment with the symbol f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TagSetDelayed)))
(def TagUnset "f/:lhs=. removes any rules defined for lhs, associated with the symbol f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TagUnset)))
(def TaggingRules "TaggingRules is an option for selections that specifies a list of strings to be associated with a selection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaggingRules)))
(def Take "Take[list, n] gives the first n elements of list. \nTake[list, -n] gives the last n elements of list. \nTake[list, {m, n}] gives elements m through n of list. \nTake[list, seq1, seq2, …] gives a nested list in which elements specified by seqi are taken at level i in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Take)))
(def TakeDrop "TakeDrop[list, n] gives the pair {list1, list2}, where list1 contains the first n elements of list and list2 contains the rest.\nTakeDrop[list, seq] gives the pair {Take[list, seq], Drop[list, seq]}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeDrop)))
(def TakeLargest "TakeLargest[data, n] gives the n largest elements of data, sorted in descending order.\nTakeLargest[dataprop, n] gives the property prop for the n largest elements in data.\nTakeLargest[data, n, p] uses the ordering function p for sorting.\nTakeLargest[n] represents an operator form of TakeLargest that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeLargest)))
(def TakeLargestBy "TakeLargestBy[data, f, n] gives the n elements ei in data for which f[ei] is largest, sorted in descending order.\nTakeLargestBy[dataprop, f, n] gives the property prop for the n elements in data for which f[ei] is largest.\nTakeLargestBy[data, f, n, p] uses the ordering function p for sorting.\nTakeLargestBy[f, n] represents an operator form of TakeLargestBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeLargestBy)))
(def TakeList "TakeList[list, {n1, n2, …}] gives the list of results obtained by successively taking ni elements from list.\nTakeList[list, {seq1, seq2, …}] successively uses the sequence specifications seqi. \nTakeList[list, seqs1, seqs2, …] gives a nested list in which elements specified by the lists seqsi are taken at level i in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeList)))
(def TakeSmallest "TakeSmallest[data, n] gives the n smallest elements of data, sorted in ascending order.\nTakeSmallest[dataprop, n] gives the property prop for the n smallest elements in data.\nTakeSmallest[data, n, p] uses the order function p for sorting.\nTakeSmallest[n] represents an operator form of TakeSmallest that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeSmallest)))
(def TakeSmallestBy "TakeSmallestBy[data, f, n] gives the n elements ei in data for which f[ei] is smallest, sorted in ascending order.\nTakeSmallestBy[dataprop, f, n] gives the property prop for the n elements in data for which f[ei] is smallest.\nTakeSmallestBy[data, f, n, p] uses the ordering function p for sorting.\nTakeSmallestBy[f, n] represents an operator form of TakeSmallestBy that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeSmallestBy)))
(def TakeWhile "TakeWhile[list, crit] gives elements ei from the beginning of list, continuing so long as crit[ei] is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TakeWhile)))
(def Tally "Tally[list] tallies the elements in list, listing all distinct elements together with their multiplicities.\nTally[list, test] uses test to determine whether pairs of elements should be considered equivalent, and gives a list of the first representatives of each equivalence class, together with their multiplicities." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tally)))
(def Tan "Tan[z] gives the tangent of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tan)))
(def TanDegrees "TanDegrees[θ] gives the tangent of θ degrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TanDegrees)))
(def Tanh "Tanh[z] gives the hyperbolic tangent of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tanh)))
(def TargetDevice "TargetDevice is an option for certain functions that specifies on which device the computation should be attempted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TargetDevice)))
(def TargetFunctions "TargetFunctions is an option for functions such as ComplexExpand and FindDistribution that specifies what functions to attempt to generate in the output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TargetFunctions)))
(def TargetStructure "TargetStructure is an option for linear algebra functions that specifies the representation of the result produced by the function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TargetStructure)))
(def TargetSystem "TargetSystem is an option for FunctionCompile and related functions that specifies machine architectures to be targeted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TargetSystem)))
(def TargetUnits "TargetUnits is an option used to specify the desired output units for visualization functions operating on Quantity expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TargetUnits)))
(def TaskAbort "TaskAbort[task] generates an interrupt to abort the current execution of a task." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskAbort)))
(def TaskExecute "TaskExecute[task] immediately executes an instance of the specified task, independently of any schedule given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskExecute)))
(def TaskObject "TaskObject[spec] is an object that represents a background task." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskObject)))
(def TaskRemove "TaskRemove[task] terminates and removes the specified task." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskRemove)))
(def TaskResume "TaskResume[task] resumes execution of the specified task." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskResume)))
(def TaskSuspend "TaskSuspend[task] suspends the execution of the specified task." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskSuspend)))
(def TaskWait "TaskWait[task] waits for the specified task to be completely finished." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TaskWait)))
(def Tasks "Tasks[type] gives a list of TaskObject expressions representing currently submitted tasks of given type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tasks)))
(def TautologyQ "TautologyQ[bf] gives True if all combinations of values of variables make the Boolean function bf yield True.\nTautologyQ[expr, {a1, a2, …}] gives True if all combinations of values of the ai make the Boolean expression expr yield True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TautologyQ)))
(def TeXForm "TeXForm[expr] prints as a TeX version of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TeXForm)))
(def TelegraphProcess "TelegraphProcess[μ] represents a telegraph process with rate μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TelegraphProcess)))
(def TemplateApply "TemplateApply[template] applies a template, evaluating all template elements it contains.\nTemplateApply[template, args] applies a template, using args to fill slots in the template." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateApply)))
(def TemplateBox "TemplateBox[{box1, box2, …}, tag] is a low-level box structure that parameterizes the display and evaluation of the boxes boxi.\nTemplateBox[key1expr1, key2expr2, …, tag] allows the use of arbitrary expressions that may or may not be boxes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateBox)))
(def TemplateBoxOptions "TemplateBoxOptions is an option that specifies settings for TemplateBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateBoxOptions)))
(def TemplateExpression "TemplateExpression[expr] represents an expression held until a template is applied, and then evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateExpression)))
(def TemplateIf "TemplateIf[condition, tclause] represents an element of a template object that inserts tclause if the condition evaluates to True.\nTemplateIf[condition, tclause, fclause] inserts fclause if the condition does not evaluate to True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateIf)))
(def TemplateObject "TemplateObject[expr] represents a template object to be applied using functions like TemplateApply.\nTemplateObject[form, args] yields a TemplateObject with arguments, suitable for cloud deployment or other evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateObject)))
(def TemplateSequence "TemplateSequence[body, list] represents an element of a template object that yields a sequence consisting of body applied to each element in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateSequence)))
(def TemplateSlot "TemplateSlot[n] represents a template slot to be filled from the n ^th argument when the template is applied.\nTemplateSlot[name] represents a template slot to be filled from an element with key name in an association appearing in the first argument." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateSlot)))
(def TemplateWith "TemplateWith[\"name\"->value, expr] represents an element of a template object that evaluates expr after replacing TemplateSlot[\"name\"] with value.\nTemplateWith[{name1value1, name2value2, …}, expr] evaluates expr with a list of key-value pairs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemplateWith)))
(def TemporalData "TemporalData[{v1, v2, …}, tspec] represents temporal data with values vi at times specified by tspec.\nTemporalData[{{v11, v12, …}, {v21, v22, …}, …}, tspec] represents a temporal data collection with values vij at times specified by tspec.\nTemporalData[{{t1, v1}, {t2, v2}…}] represents temporal data specified by time-value pairs {ti, vi}.\nTemporalData[{{{t11, v11}, {t12, v12}…}, {{t21, v21}, {t22, v22}, …}, …}] represents a temporal data collection given as lists of time-value pairs {tij, vij}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemporalData)))
(def TemporalRegularity "TemporalRegularity is an option for TemporalData, TimeSeries, and EventSeries that controls whether the paths are assumed to be uniformly spaced in time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TemporalRegularity)))
(def Temporary "Temporary is an attribute assigned to symbols which are created as local variables by Module." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Temporary)))
(def TensorContract "TensorContract[tensor, {{s11, s12}, {s21, s22}, …}] yields the contraction of tensor in the pairs {s i1, s i2} of slots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorContract)))
(def TensorDimensions "TensorDimensions[tensor] gives the list of dimensions of tensor." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorDimensions)))
(def TensorExpand "TensorExpand[texpr] expands out tensor-related products in the symbolic tensor expression texpr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorExpand)))
(def TensorProduct "TensorProduct[tensor1, tensor2, …] represents the tensor product of the tensori." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorProduct)))
(def TensorRank "TensorRank[tensor] gives the rank of tensor." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorRank)))
(def TensorReduce "TensorReduce[texpr] attempts to return a canonical form for the symbolic tensor expression texpr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorReduce)))
(def TensorSymmetry "TensorSymmetry[tensor] gives the symmetry of tensor under permutations of its slots.\nTensorSymmetry[tensor, slots] gives the symmetry under permutation of the specified list of slots." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorSymmetry)))
(def TensorTranspose "TensorTranspose[tensor, perm] represents the tensor obtained by transposing the slots of tensor as given by the permutation perm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorTranspose)))
(def TensorWedge "TensorWedge[tensor1, tensor2, …] represents the antisymmetrized tensor product of the tensori." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TensorWedge)))
(def TerminatedEvaluation "TerminatedEvaluation[\"reason\"] represents an expression whose evaluation overran global kernel session limits and was terminated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TerminatedEvaluation)))
(def TernaryListPlot "TernaryListPlot[{{u1, v1, w1}, …, {un, vn, wn}}] plots a list of points with specified u, v and w coordinates in a barycentric coordinate system.\nTernaryListPlot[{data1, data2, …}] plots a ternary plot with several datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TernaryListPlot)))
(def TernaryPlotCorners "TernaryPlotCorners is an option for TernaryListPlot that determines how the triangle and axes are positioned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TernaryPlotCorners)))
(def TestCreate "TestCreate[input] create a TestObject to determine whether input evaluates to True.\nTestCreate[input, expected] create a TestObject to determine whether input evaluates to expected.\nTestCreate[input, expected, messages] create a TestObject that is expected to generate the list of message names messages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestCreate)))
(def TestEvaluate "TestEvaluate[test] runs a TestObject.\nTestEvaluate[assoc] runs a test specified by assoc.\nTestEvaluate[{test1, test2, …}] runs the list of tests testi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestEvaluate)))
(def TestEvaluationFunction "TestEvaluationFunction is an option to TestReport that specifies which function to use when evaluating tests." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestEvaluationFunction)))
(def TestID "TestID is an option to TestCreate, VerificationTest and IntermediateTest that specifies a string used as an identifier for the test." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestID)))
(def TestObject "TestObject[…] gives an object that represents the results of a TestCreate." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestObject)))
(def TestReport "TestReport[\"file\"] gives a report of the results of the tests from a file.\nTestReport[{test1, test2, …}] gives a report of the results of the testi.\nTestReport[{report1, report2, …}] gives a unified report by merging all test reports reporti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestReport)))
(def TestReportObject "TestReportObject[…] gives an object that represents the results of TestReport." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TestReportObject)))
(def Tetrahedron "Tetrahedron[] represents a regular tetrahedron centered at the origin with unit edge length.\nTetrahedron[l] represents a tetrahedron with edge length l.\nTetrahedron[{θ, ϕ}, …] represents a tetrahedron rotated by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nTetrahedron[{x, y, z}, …] represents a tetrahedron centered at {x, y, z}.\nTetrahedron[{p1, p2, p3, p4}] represents a general filled tetrahedron with corners p1, p2, p3 and p4.\nTetrahedron[{{p 1, 1, p 1, 2, p 1, 3, p 1, 4}, {p 2, 1, …}, …}] represents a collection of tetrahedra." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tetrahedron)))
(def Text "Text[expr] displays with expr in plain text format. \nText[expr, coords] is a graphics primitive that displays the textual form of expr centered at the point specified by coords." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Text)))
(def TextAlignment "TextAlignment is an option for Cell, Style and related constructs which specifies how successive lines of text should be aligned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextAlignment)))
(def TextCases "TextCases[text, form] gives a list of all cases of text identified as being of type form that appear in text.\nTextCases[text, {form1, form2, …}] gives an association of results for all the types formi. \nTextCases[text, formspecprop] gives the specified property for each result found.\nTextCases[text, formspec{prop1, prop2, …}] gives a list of properties for each result found.\nTextCases[text, spec, n] gives the first n cases found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextCases)))
(def TextCell "TextCell[\"string\"] gives a text cell that can appear in a Wolfram System notebook.\nTextCell[\"string\", \"style\"] gives a text cell with the specified style.\nTextCell[\"string\", style1, style2, …] gives a text cell with multiple styles applied to it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextCell)))
(def TextClipboardType "TextClipboardType is an option for cells that specifies how Edit  ▶ Copy treats a cell when converting it for the system's textual clipboard." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextClipboardType)))
(def TextContents "TextContents[text] gives a dataset of information about entities, dates, quantities and other content-related elements found in text.\nTextContents[text, form] searches for cases of the type form.\nTextContents[text, {form1, form2, …}] searches for cases of types form1, form2, …\nTextContents[text, forms, props] includes the property props for each object in the dataset produced." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextContents)))
(def TextData "TextData[exprs] is a low-level representation of the contents of a textual cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextData)))
(def TextElement "TextElement[text, props] represents an element of text with the specified properties.\nTextElement[{elem1, elem2, …}, props] represents text formed from a sequence of elements.\nTextElement[elems] represents text where no properties are specified." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextElement)))
(def TextGrid "TextGrid[{{expr11, expr12, …}, {expr21, expr22, …}, …}] is an object that formats exprij textually and arranged in a two-dimensional grid." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextGrid)))
(def TextJustification "TextJustification is an option for Cell and Inset which specifies how much lines of text can be stretched in order to make them be the same length." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextJustification)))
(def TextPacket "TextPacket[string] is a WSTP packet containing string, the text output from the Wolfram System as produced by functions such as Print." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextPacket)))
(def TextPosition "TextPosition[text, form] gives a list of the starting and ending positions at which instances of form occur in text.\nTextPosition[text, {form1, form2, …}] gives an association of results for all the types formi.\nTextPosition[text, formspec, n] gives the positions of the first n cases found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextPosition)))
(def TextRecognize "TextRecognize[image] recognizes text in image and returns it as a string.\nTextRecognize[image, level] returns a list of strings at the specified structural level.\nTextRecognize[image, level, prop] returns prop for text at the given level.\nTextRecognize[video, …] recognizes text in frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextRecognize)))
(def TextSearch "TextSearch[source, form] searches for files referenced by source that contain text matching form.\nTextSearch[source, form, \"prop\"] returns the property prop for each result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextSearch)))
(def TextSearchReport "TextSearchReport[source, form] gives a structured report of files referenced by source that contain text matching form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextSearchReport)))
(def TextSentences "TextSentences[\"string\"] gives a list of the runs of characters identified as sentences in string.\nTextSentences[\"string\", n] gives the first n sentences in string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextSentences)))
(def TextString "TextString[expr] gives a human-readable string representation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextString)))
(def TextStructure "TextStructure[\"text\"] generates a nested collection of TextElement objects representing the grammatical structure of natural language text.\nTextStructure[\"text\", form] generates a representation of the type specified by form of the grammatical structure of text." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextStructure)))
(def TextSummarize "TextSummarize[text] generates a summary of text.\nTextSummarize[text, spec] summarizes the text according to the specification spec.\nTextSummarize[texttopic, spec] summarizes the part of text matching topic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextSummarize)))
(def TextTranslation "TextTranslation[\"text\"] translates text into the current default language. \nTextTranslation[\"text\", lang] translates text into the language specified by lang.\nTextTranslation[\"text\", lang1->lang2] translates text from language lang1 to lang2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextTranslation)))
(def TextWords "TextWords[\"string\"] gives a list of the runs of characters identified as words in string.\nTextWords[\"string\", n] gives the first n words in string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextWords)))
(def Texture "Texture[obj] is a graphics directive that specifies that obj should be used as a texture on faces of polygons and other filled graphics objects. \nTexture[obj, map] specifies the projection mapping map to assign to vertices of 3D graphics objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Texture)))
(def TextureCoordinateFunction "TextureCoordinateFunction is an option to Plot3D and similar functions that specifies a function that computes texture coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextureCoordinateFunction)))
(def TextureCoordinateScaling "TextureCoordinateScaling is an option to Plot3D and similar functions that specifies whether arguments supplied to a texture coordinate function should be scaled to lie between 0 and 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextureCoordinateScaling)))
(def TextureMapping "TextureMapping is an option for graphics primitives that specifies the texture mapping to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TextureMapping)))
(def ThemeColor "ThemeColor[\"name\"] represents a named color setting that is resolved according to the current notebook theme." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThemeColor)))
(def Therefore "Therefore[x, y] displays as x∴y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Therefore)))
(def ThermodynamicData "ThermodynamicData[\"name\", \"property\"] gives the value of the specific property for the substance \"name\".\nThermodynamicData[\"name\", \"property\", {parameter1->quantity1, parameter2->quantity}] gives the value of the specific property for the substance \"name\" at the specified parameters." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThermodynamicData)))
(def ThermometerGauge "ThermometerGauge[value] draws a thermometer showing value in a range of 0 to 1.\nThermometerGauge[value, {min, max}] draws a thermometer showing value in a range of min to max.\nThermometerGauge[Dynamic[value], …] allows value to be set interactively using the thermometer." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThermometerGauge)))
(def Thick "Thick is a graphics directive that specifies that lines which follow should be drawn thick." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thick)))
(def Thickness "Thickness[r] is a graphics directive which specifies that lines which follow are to be drawn with thickness r. The thickness r is given as a fraction of the horizontal plot range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thickness)))
(def Thin "Thin is a graphics directive that specifies that lines which follow should be drawn thin." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thin)))
(def Thinning "Thinning[image] finds the skeletons of foreground regions in image by applying morphological thinning until convergence.\nThinning[image, n] performs n iterations of morphological thinning.\nThinning[image, n, t] treats values above t as foreground." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thinning)))
(def ThomasPointProcess "ThomasPointProcess[μ, λ, σ, d] represents a Thomas cluster point process with density μ, cluster mean λ and scale parameter σ in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThomasPointProcess)))
(def ThompsonGroupTh "ThompsonGroupTh[] represents the sporadic simple Thompson group Th." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThompsonGroupTh)))
(def Thread "Thread[f[args]] \"threads\" f over any lists that appear in args. \nThread[f[args], h] threads f over any objects with head h that appear in args. \nThread[f[args], h, n] threads f over objects with head h that appear in the first n args." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thread)))
(def Threaded "Threaded[list] is an object whose elements will automatically be threaded into the lowest level of an array when used in a listable operation such as Plus.\na+Threaded[b] adds elements of an array b to elements of an array a at the lowest possible level.\na+Threaded[b, alev] adds elements at level alev of a.\na+Threaded[b, blevalev] adds elements at level alev in a to level blev in b.\nf[a, Threaded[b, …]] combines elements for a function f with the attribute Listable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Threaded)))
(def ThreadingLayer "ThreadingLayer[f] represents a net layer that takes several input arrays and applies a function f to corresponding array elements.\nThreadingLayer[f, bspec] allows array shapes to be conformed according to broadcasting specification bspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThreadingLayer)))
(def ThreeJSymbol "ThreeJSymbol[{j1, m1}, {j2, m2}, {j3, m3}] gives the values of the Wigner 3‐j symbol." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThreeJSymbol)))
(def Threshold "Threshold[data] thresholds data by replacing values close to zero by zero.\nThreshold[data, tspec] thresholds data using threshold specification tspec.\nThreshold[image, …] replaces small values of image by zero. \nThreshold[sound, …] replaces small values of sound by zero." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Threshold)))
(def Through "Through[p[f, g, …][x, y, …]] gives p[f[x, y, …], g[x, y, …], …]. \nThrough[expr, h] performs the transformation wherever h occurs in the head of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Through)))
(def Throw "Throw[value] stops evaluation and returns value as the value of the nearest enclosing Catch.\nThrow[value, tag] is caught only by Catch[expr, form], where tag matches form.\nThrow[value, tag, f] returns f[value, tag] as the top-level value if no appropriate Catch is found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Throw)))
(def ThueMorse "ThueMorse[n] gives the n ^th term in the Thue–Morse sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ThueMorse)))
(def Thumbnail "Thumbnail[image] gives a thumbnail version of an image.\nThumbnail[file] gives a thumbnail of an image stored in a file.\nThumbnail[url] gives a thumbnail of an image stored at a URL.\nThumbnail[spec, size] gives a thumbnail with the specified maximum pixel size." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thumbnail)))
(def Thursday "Thursday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Thursday)))
(def TickDirection "TickDirection is an option for AxisObject that specifies where the ticks are drawn relative to the axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickDirection)))
(def TickLabelOrientation "TickLabelOrientation is an option for AxisObject that specifies how the tick labels should be oriented relative to the axis." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickLabelOrientation)))
(def TickLabelPositioning "TickLabelPositioning is an option for AxisObject that specifies how the tick labels should be positioned relative to the ticks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickLabelPositioning)))
(def TickLabels "TickLabels is an option for AxisObject that specifies how the tick marks should be labeled." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickLabels)))
(def TickLengths "TickLengths is an option for AxisObject that specifies the lengths of the tick marks." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickLengths)))
(def TickPositions "TickPositions is an option for AxisObject that specifies where the tick marks should be positioned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TickPositions)))
(def Ticks "Ticks is an option for graphics functions that specifies tick marks for axes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Ticks)))
(def TicksStyle "TicksStyle is an option for graphics functions which specifies how ticks should be rendered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TicksStyle)))
(def TideData "TideData[spec] returns the tidal properties for a location or a set of tidal parameters.\nTideData[spec, prop] returns the specified property for the location or tidal parameters indicated.\nTideData[spec, prop, datespec] returns the value of a specified property for a date or set of dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TideData)))
(def Tilde "Tilde[x, y, …] displays as x∼y∼…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tilde)))
(def TildeEqual "TildeEqual[x, y, …] displays as x≃y≃…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TildeEqual)))
(def TildeFullEqual "TildeFullEqual[x, y, …] displays as x≅y≅…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TildeFullEqual)))
(def TildeTilde "TildeTilde[x, y, …] displays as x≈y≈…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TildeTilde)))
(def TimeConstrained "TimeConstrained[expr, t] evaluates expr, stopping after t seconds. \nTimeConstrained[expr, t, failexpr] returns failexpr if the time constraint is not met." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeConstrained)))
(def TimeConstraint "TimeConstraint is an option for various functions that specifies the maximum time to spend doing a particular operation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeConstraint)))
(def TimeDirection "TimeDirection is an option for Sunrise, Sunset, and related functions that specifies whether the next or last event should be returned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeDirection)))
(def TimeDistribution "TimeDistribution[dist, tunit] represents a linear distribution of time of day according to dist with time scale unit tunit originating at midnight.\nTimeDistribution[dist, tunit, torig] represents a linear distribution of time of day with time origin at torig." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeDistribution)))
(def TimeFormat "TimeFormat is an option that determines the time formatting that is used when formatting a TimeObject using TextString." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeFormat)))
(def TimeGoal "TimeGoal is an option for various functions that specifies how long to spend doing a particular operation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeGoal)))
(def TimeObject "TimeObject[] represents the current time.\nTimeObject[{h, m, s}] represents a time object of standard normalized form.\nTimeObject[date] gives the time component of the specified date representation.\nTimeObject[rtime, gran] gives the time object of granularity gran that includes the reference time rtime." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeObject)))
(def TimeObjectQ "TimeObjectQ[expr] gives True if expr is a TimeObject with valid arguments, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeObjectQ)))
(def TimeRemaining "TimeRemaining[] gives the number of seconds remaining until the earliest enclosing TimeConstrained will request the current computation to stop." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeRemaining)))
(def TimeSeries "TimeSeries[{{t1, v1}, {t2, v2}…}] represents a time series specified by time-value pairs {ti, vi}.\nTimeSeries[{v1, v2, …}, tspec] represents a time series with values vi at times specified by tspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeries)))
(def TimeSeriesAggregate "TimeSeriesAggregate[tseries, dt] computes the mean value of tseries over non-overlapping windows of width dt.\nTimeSeriesAggregate[tseries, dt, f] applies the function f to the values of tseries in non-overlapping windows of width dt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesAggregate)))
(def TimeSeriesForecast "TimeSeriesForecast[tproc, data, k] gives the k-step-ahead forecast beyond data according to the time series process tproc.\nTimeSeriesForecast[tsmod, k] gives the k-step-ahead forecast for TimeSeriesModel tsmod." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesForecast)))
(def TimeSeriesInsert "TimeSeriesInsert[tseries, {t, v}] inserts a value v at time t in the time series tseries.\nTimeSeriesInsert[tseries1, tseries2] inserts the time-value pairs from tseries2 into tseries1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesInsert)))
(def TimeSeriesInvertibility "TimeSeriesInvertibility[tproc] gives conditions for the time series process tproc to be invertible." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesInvertibility)))
(def TimeSeriesMap "TimeSeriesMap[f, tseries] applies f to the values in tseries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesMap)))
(def TimeSeriesMapThread "TimeSeriesMapThread[f, tseries] gives {{t1, f[t1, x1]}, {t2, f[t2, x2]}, …} for the time series tseries.\nTimeSeriesMapThread[f, tseries, {{a1, a2, …}, {b1, b2, …}, …}] gives {{t1, f[t1, x1, a1, b1, …]}, {t2, f[t2, x2, a2, b2, …]}, …} for the time series tseries." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesMapThread)))
(def TimeSeriesModel "TimeSeriesModel[…] represents the symbolic time series model obtained from TimeSeriesModelFit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesModel)))
(def TimeSeriesModelFit "TimeSeriesModelFit[data] constructs a time series model for data from an automatically selected model family.\nTimeSeriesModelFit[data, mspec] constructs a time series model for data from a model family specified by mspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesModelFit)))
(def TimeSeriesResample "TimeSeriesResample[tseries] uniformly resamples tseries according to its minimum time increment.\nTimeSeriesResample[tseries, rspec] resamples tseries according to rspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesResample)))
(def TimeSeriesRescale "TimeSeriesRescale[tseries, {tmin, tmax}] rescales the times in time series tseries to run from tmin to tmax.\nTimeSeriesRescale[tseries, {tmin, tmax, tu}] rescales times in units of tu including \"Month\", \"Quarter\", or \"Year\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesRescale)))
(def TimeSeriesShift "TimeSeriesShift[tseries, shift] shifts the time series tseries to the left or right according to shift." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesShift)))
(def TimeSeriesThread "TimeSeriesThread[f, {tseries1, tseries2, …}] combines the tseriesi using the function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesThread)))
(def TimeSeriesWindow "TimeSeriesWindow[tseries, {tmin, tmax}] gives the elements of the time series tseries that fall between tmin and tmax.\nTimeSeriesWindow[tseries, windowspec] gives the elements of the time series tseries that satisfy the window specification windowspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSeriesWindow)))
(def TimeSystem "TimeSystem is an option for time functions that specifies the time system being used to define time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSystem)))
(def TimeSystemConvert "TimeSystemConvert[date, tsys] converts the date object date to the specified time system tsys.\nTimeSystemConvert[date] converts to the default time system.\nTimeSystemConvert[{date1, …, daten}, tsys] converts date1 through daten to the specified time system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeSystemConvert)))
(def TimeUsed "TimeUsed[] gives the total number of seconds of CPU time used so far in the current Wolfram System session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeUsed)))
(def TimeValue "TimeValue[s, i, t] calculates the time value of a security s at time t for an interest specified by i." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeValue)))
(def TimeZone "TimeZone is an option for DateObject, DateString, and related functions that specifies the time zone to use for dates and times." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeZone)))
(def TimeZoneConvert "TimeZoneConvert[time, timezone] converts the date or time object time to the specified time zone timezone.\nTimeZoneConvert[time] converts to the current $TimeZone value.\nTimeZoneConvert[{time1, …, timen}, timezone] converts time1 through timen to the specified timezone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeZoneConvert)))
(def TimeZoneOffset "TimeZoneOffset[tz] gives the numeric offset between the time zone tz and GMT on the current date.\nTimeZoneOffset[loc] gives the numeric offset between the time zone for the location loc and GMT.\nTimeZoneOffset[tz, base] gives the numeric offset between tz and the specified base time zone.\nTimeZoneOffset[tz, date] gets a list of possible time zone offsets for tz at the given date list.\nTimeZoneOffset[tz, base, date] gives the numeric offset between tz and base on the specified date." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimeZoneOffset)))
(def TimelinePlot "TimelinePlot[{date1, date2, …}] makes a timeline plot with dates date1, date2, …. \nTimelinePlot[{event1, event2, …}] makes a timeline plot with events event1, event2, …. \nTimelinePlot[{data1, data2, …}] makes a timeline plot from multiple event datasets datai." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimelinePlot)))
(def Times "x*y*z, x×y×z, or x y z represents a product of terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Times)))
(def TimesBy "x*=c multiplies x by c and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TimesBy)))
(def Timing "Timing[expr] evaluates expr, and returns a list of the time in seconds used, together with the result obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Timing)))
(def Tiny "Tiny is a style or option setting that specifies that objects should be tiny." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tiny)))
(def TitsGroupT "TitsGroupT[] represents the simple Tits group T." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TitsGroupT)))
(def ToBoxes "ToBoxes[expr] generates boxes corresponding to the printed form of expr in StandardForm. \nToBoxes[expr, form] gives the boxes corresponding to output in the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToBoxes)))
(def ToCharacterCode "ToCharacterCode[\"string\"] gives a list of the integer codes corresponding to the characters in a string. \nToCharacterCode[\"string\", \"encoding\"] gives integer codes according to the specified encoding." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToCharacterCode)))
(def ToContinuousTimeModel "ToContinuousTimeModel[lsys] gives the continuous-time approximation of the discrete-time systems models lsys.\nToContinuousTimeModel[tfm, s] specifies the transform variable s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToContinuousTimeModel)))
(def ToDiscreteTimeModel "ToDiscreteTimeModel[lsys, τ] gives the discrete-time approximation, with sampling period τ, of the continuous-time systems models lsys.\nToDiscreteTimeModel[tfm, τ, z] specifies the transform variable z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToDiscreteTimeModel)))
(def ToEntity "ToEntity[expr] returns an entity object corresponding to the given expression.\nToEntity[expr, type] returns an entity object of the specified type corresponding to expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToEntity)))
(def ToExpression "ToExpression[input] gives the expression obtained by interpreting strings or boxes as Wolfram Language input. \nToExpression[input, form] uses interpretation rules corresponding to the specified form. \nToExpression[input, form, h] wraps the head h around the expression produced before evaluating it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToExpression)))
(def ToFiniteField "ToFiniteField[k, ff] converts the integer k to an element of the prime subfield of the finite field ff.\nToFiniteField[expr, ff] converts the coefficients of the rational expression expr to elements of the finite field ff.\nToFiniteField[expr, ff, t] converts the coefficients of the rational expression expr to elements of the finite field ff, with t representing the field generator." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToFiniteField)))
(def ToInvertibleTimeSeries "ToInvertibleTimeSeries[tproc] returns an invertible version of a time series process tproc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToInvertibleTimeSeries)))
(def ToLowerCase "ToLowerCase[string] yields a string in which all letters have been converted to lowercase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToLowerCase)))
(def ToMemory "ToMemory[obj] returns an in-memory version of the out-of-core object obj." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToMemory)))
(def ToNumberField "ToNumberField[a, θ] expresses the algebraic number a in the number field generated by θ. \nToNumberField[{a1, a2, …}, θ] expresses the ai in the field generated by θ.\nToNumberField[{a1, a2, …}] expresses the ai in a common extension field generated by a single algebraic number." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToNumberField)))
(def ToPolarCoordinates "ToPolarCoordinates[{x, y}] gives the {r, θ} polar coordinates corresponding to the Cartesian coordinates {x, y}.\nToPolarCoordinates[{x1, x2, …, xn}] gives the hyperspherical coordinates corresponding to the Cartesian coordinates {x1, x2, …, xn}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToPolarCoordinates)))
(def ToRadicals "ToRadicals[expr] attempts to express all Root objects in expr in terms of radicals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToRadicals)))
(def ToRawPointer "ToRawPointer[] creates a new pointer object in compiled code, suitable for use with external libraries.\nToRawPointer[val] creates a new object pointing to the initial value val.\nToRawPointer[p, val] stores val in the pointer p.\nToRawPointer[array, offset, val] stores val in the \"CArray\" array at the given offset." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToRawPointer)))
(def ToRules "ToRules[eqns] takes logical combinations of equations, in the form generated by Roots and Reduce, and converts them to lists of rules, of the form produced by Solve." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToRules)))
(def ToSphericalCoordinates "ToSphericalCoordinates[{x, y, z}] gives the {r, θ, ϕ} spherical coordinates corresponding to the Cartesian coordinates {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToSphericalCoordinates)))
(def ToString "ToString[expr] gives a string corresponding to the printed form of expr in OutputForm. \nToString[expr, form] gives the string corresponding to output in the specified form." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToString)))
(def ToTabular "ToTabular[data] converts data to a Tabular object. \nToTabular[data, form] converts from data with structure specified by form. \nToTabular[data, form, assoc] uses directives from the association assoc to give details of the conversion." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToTabular)))
(def ToUpperCase "ToUpperCase[string] yields a string in which all letters have been converted to uppercase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToUpperCase)))
(def Today "Today gives a DateObject representing the current day." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Today)))
(def ToeplitzMatrix "ToeplitzMatrix[n] gives the n×n Toeplitz matrix with first row and first column being successive integers.\nToeplitzMatrix[{c1, c2, …, cn}] gives the Toeplitz matrix whose first column consists of entries c1, c2, ….\nToeplitzMatrix[{c1, c2, …, cm}, {r1, r2, …, rn}] gives the Toeplitz matrix with entries ci down the first column, and ri across the first row." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToeplitzMatrix)))
(def Together "Together[expr] puts terms in a sum over a common denominator, and cancels factors in the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Together)))
(def Toggler "Toggler[x] represents a toggler button with setting x, that toggles between True and False. \nToggler[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the button is clicked. \nToggler[x, {val1, val2, …}] represents a toggler button that cycles through any sequence of values vali. \nToggler[x, {val1pict1, val2pict2, …}] cycles through values vali displaying them as picti. \nToggler[x, vlist, dpict] displays as dpict if x is none of the vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Toggler)))
(def TogglerBar "TogglerBar[x, {val1, val2, …}] represents a toggler bar with setting x and with toggler buttons for values vali to include in the list x.\nTogglerBar[Dynamic[x], {val1, val2, …}] takes the setting to be the dynamically updated current value of x, with the values in the list x being reset every time a toggler button is clicked.\nTogglerBar[x, {val1lbl1, val2lbl2, …}] represents a toggler bar in which the toggler button associated with value vali has label lbli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TogglerBar)))
(def TokenWords "TokenWords is an option for Read and related functions which gives a list of token words to be used to delimit words." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TokenWords)))
(def Tolerance "Tolerance is an option for various numerical options which specifies the tolerance that should be allowed in computing results." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tolerance)))
(def Tomorrow "Tomorrow gives a DateObject representing the following day." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tomorrow)))
(def Tooltip "Tooltip[expr, label] displays label as a tooltip while the mouse pointer is in the area where expr is displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tooltip)))
(def TooltipDelay "TooltipDelay is an option for objects such as Tooltip that specifies how long to delay after the mouse is over the object before displaying the tooltip." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TooltipDelay)))
(def TooltipStyle "TooltipStyle is an option for tooltips that specifies the style to use in displaying their elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TooltipStyle)))
(def ToonShading "ToonShading[] is a three-dimensional graphics directive specifying that surfaces that follow are to be drawn to emulate two-dimensional flat objects.\nToonShading[col] uses the color col as base color.\nToonShading[{dcol, bcol, hcol}] uses the dark color dcol, the base color bcol and highlight color hcol.\nToonShading[{w1, w2, w3}{dcol, bcol, hcol}] uses the colors dcol, bcol and hcol weighted by the wi.\nToonShading[\"scheme\"] uses the specified discrete color scheme in ColorData." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ToonShading)))
(def Top "Top is a symbol that represents the top for purposes of alignment and positioning." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Top)))
(def TopHatTransform "TopHatTransform[image, ker] gives the morphological top-hat transform of image with respect to structuring element ker.\nTopHatTransform[image, r] gives the top-hat transform with respect to a range-r square.\nTopHatTransform[data, …] applies top-hat transform to an array of data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TopHatTransform)))
(def TopologicalSort "TopologicalSort[g] gives a list of vertices of g in topologically sorted order for a directed acyclic graph g.\nTopologicalSort[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TopologicalSort)))
(def Torus "Torus[{x, y, z}, {rinner, router}] represents a torus centered at {x, y, z} with inner radius rinner and outer radius router." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Torus)))
(def TorusGraph "TorusGraph[{n1, n2, …, nk}] gives the k-dimensional torus graph with n1×n2×…×nk vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TorusGraph)))
(def Total "Total[list] gives the total of the elements in list. \nTotal[list, n] totals all elements down to level n. \nTotal[list, {n}] totals elements at level n. \nTotal[list, {n1, n2}] totals elements at levels n1 through n2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Total)))
(def TotalLayer "TotalLayer[] represents a net layer taking a list of input arrays and performing elementwise addition on them." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TotalLayer)))
(def TotalVariationFilter "TotalVariationFilter[data] iteratively reduces noise while preserving rapid transitions in data.\nTotalVariationFilter[data, param] assumes a regularization parameter value param." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TotalVariationFilter)))
(def TotalWidth "TotalWidth is an option that can be set for output streams to specify the maximum total number of characters of text that should be printed for each output expression. Short forms of expressions are given if the number of characters needed to print the whole expression is too large." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TotalWidth)))
(def TouchPosition "TouchPosition[] gives the list of current positions being touched in the notebook front end.\nTouchPosition[\"coords\"] gives the touch positions with respect to the specified coordinate system.\nTouchPosition[\"coords\", n] gives the position of the n ^th position being touched in an object in the specified coordinate system.\nTouchPosition[\"coords\", n, def] returns def if there are not n positions being touched." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TouchPosition)))
(def TouchscreenAutoZoom "TouchscreenAutoZoom is an option for Manipulate and Graphics3D that determines whether the interface zooms to full-screen when it is activated by touching it on supported touch screen platforms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TouchscreenAutoZoom)))
(def TouchscreenControlPlacement "TouchscreenControlPlacement is an option for Manipulate that determines the placement of the slide-out control panel on supported touchscreen platforms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TouchscreenControlPlacement)))
(def Tour3DVideo "Tour3DVideo[g] generates a video giving a standard tour around a 3D object g. \nTour3DVideo[g, tour] generates the named video tour.\nTour3DVideo[g, steps] generates a video tour from steps." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tour3DVideo)))
(def TourVideo "TourVideo[input, {step1, step2, …}] generates a video by taking a tour at steps stepi around graphics.\nTourVideo[input, {{t1, step1}, {t2, step2}, …}] takes a tour with steps stepi at times ti around graphics.\nTourVideo[input, func] samples the function func to generate step specifications for each frame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TourVideo)))
(def Tr "Tr[list] finds the trace of the matrix or tensor list. \nTr[list, f] finds a generalized trace, combining terms with f instead of Plus. \nTr[list, f, n] goes down to level n in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tr)))
(def Trace "Trace[expr] generates a list of all expressions used in the evaluation of expr. \nTrace[expr, form] includes only those expressions that match form. \nTrace[expr, s] includes all evaluations that use transformation rules associated with the symbol s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Trace)))
(def TraceAbove "TraceAbove is an option for Trace and related functions which specifies whether to include evaluation chains which contain the evaluation chain containing the pattern form sought." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceAbove)))
(def TraceBackward "TraceBackward is an option for Trace and related functions that specifies whether to include preceding expressions on the evaluation chain that contains the pattern form sought." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceBackward)))
(def TraceDepth "TraceDepth is an option for Trace and related functions which specifies the maximum nesting of evaluation chains that are to be included." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceDepth)))
(def TraceDialog "TraceDialog[expr] initiates a dialog for every expression used in the evaluation of expr. \nTraceDialog[expr, form] initiates a dialog only for expressions which match form. \nTraceDialog[expr, s] initiates dialogs only for expressions whose evaluations use transformation rules associated with the symbol s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceDialog)))
(def TraceForward "TraceForward is an option for Trace and related functions which specifies whether to include later expressions on the evaluation chain that contains the pattern form sought." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceForward)))
(def TraceOff "TraceOff is an option for Trace and related functions which specifies forms inside which tracing should be switched off." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceOff)))
(def TraceOn "TraceOn is an option for Trace and related functions which specifies when tracing should be switched on." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceOn)))
(def TraceOriginal "TraceOriginal is an option for Trace that specifies whether to test the form of each expression before its head and arguments are evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceOriginal)))
(def TracePrint "TracePrint[expr] prints all expressions used in the evaluation of expr. \nTracePrint[expr, form] includes only those expressions which match form. \nTracePrint[expr, s] includes all evaluations which use transformation rules associated with the symbol s." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TracePrint)))
(def TraceScan "TraceScan[f, expr] applies f to all expressions used in the evaluation of expr. \nTraceScan[f, expr, form] includes only those expressions which match form. \nTraceScan[f, expr, s] includes all evaluations which use transformation rules associated with the symbol s. \nTraceScan[f, expr, form, fp] applies f before evaluation and fp after evaluation to expressions used in the evaluation of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraceScan)))
(def TrackCellChangeTimes "TrackCellChangeTimes is an option to Cell that specifies whether to track when changes were made to the cell." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrackCellChangeTimes)))
(def TrackedSymbols "TrackedSymbols is an option to Refresh, Manipulate, and related functions that specifies which symbols should trigger updates when their values are changed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrackedSymbols)))
(def TrackingFunction "TrackingFunction is an option for Manipulate controls that specifies functions to use during interactive changing or editing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrackingFunction)))
(def TracyWidomDistribution "TracyWidomDistribution[β] represents a Tracy–Widom distribution with Dyson index β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TracyWidomDistribution)))
(def TradingChart "TradingChart[{{date1, {open1, high1, low1, close1, volume1}}, …}] makes a chart showing prices and volume for each date. \nTradingChart[{\"name\", daterange}] makes a financial chart for the financial entity \"name\" over the daterange. \nTradingChart[{…}, {ind1, ind2, …}] makes a financial chart with indicators ind1, ind2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TradingChart)))
(def TraditionalForm "TraditionalForm[expr] prints as an approximation to the traditional mathematical notation for expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TraditionalForm)))
(def TrainImageContentDetector "TrainImageContentDetector[{img1{bbox1class1, …}, …}] trains a ContentDetectorFunction[…] based on the examples given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainImageContentDetector)))
(def TrainTextContentDetector "TrainTextContentDetector[{text1{span1class1, …}, …}] trains a ContentDetectorFunction[…] based on the examples given." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainTextContentDetector)))
(def TrainingProgressCheckpointing "TrainingProgressCheckpointing is an option for NetTrain that specifies how to save copies of the net during training." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingProgressCheckpointing)))
(def TrainingProgressFunction "TrainingProgressFunction is an option for NetTrain that specifies a function to run periodically during training." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingProgressFunction)))
(def TrainingProgressMeasurements "TrainingProgressMeasurements is an option for NetTrain that specifies measurements to make while training is in progress." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingProgressMeasurements)))
(def TrainingProgressReporting "TrainingProgressReporting is an option for NetTrain and related functions that specifies how to report the progress of training." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingProgressReporting)))
(def TrainingStoppingCriterion "TrainingStoppingCriterion is an option for NetTrain that specifies a criterion for stopping training early in order to prevent overfitting." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingStoppingCriterion)))
(def TrainingUpdateSchedule "TrainingUpdateSchedule is an option for NetTrain that specifies which arrays of the network can be updated at each step of the optimization process." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrainingUpdateSchedule)))
(def TransferFunctionCancel "TransferFunctionCancel[tfm] cancels common poles and zeros in the TransferFunctionModel tfm.\nTransferFunctionCancel[tfm, crit] cancels only common pole-zero pairs ei for which crit[ei] is True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionCancel)))
(def TransferFunctionExpand "TransferFunctionExpand[tfm] expands polynomial terms in the numerators and denominators of the TransferFunctionModel tfm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionExpand)))
(def TransferFunctionFactor "TransferFunctionFactor[tfm] factors the polynomial terms in the numerators and denominators of the TransferFunctionModel tfm." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionFactor)))
(def TransferFunctionModel "TransferFunctionModel[g[s], s] represents the model of the transfer-function matrix g[s] with complex variable s.\nTransferFunctionModel[{n[s], d[s]}, s] specifies the numerator n[s] and denominator d[s] of a transfer-function model.\nTransferFunctionModel[{z, p, g}, s] specifies the zeros z, poles p, and gain g of a transfer-function model.\nTransferFunctionModel[sys] gives the transfer-function model of the systems model sys." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionModel)))
(def TransferFunctionPoles "TransferFunctionPoles[tfm] gives a matrix of roots of the denominators in the TransferFunctionModel tfm.\nTransferFunctionPoles[tfm, reg] only gives the roots inside the region reg on the complex plane." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionPoles)))
(def TransferFunctionTransform "TransferFunctionTransform[f, tf] transforms the TransferFunctionModel object tf using the transformation function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionTransform)))
(def TransferFunctionZeros "TransferFunctionZeros[tfm] gives a matrix of roots of the numerators in the TransferFunctionModel tfm.\nTransferFunctionZeros[tfm, reg] only gives the roots inside the region reg on the complex plane." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransferFunctionZeros)))
(def TransformAnomalies "TransformAnomalies[data, tspec] transforms anomalies in data using the transformation tspec.\nTransformAnomalies[data, dspectspec] detects the anomalies using the specification dspec.\nTransformAnomalies[tab, {col1spec1, …}] transforms tabular data tab using the specification speci for column coli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformAnomalies)))
(def TransformColumns "TransformColumns[tab, ncolf] adds a new column with name ncol by transforming the tabular data tab using the function f applied to each row.\nTransformColumns[tab, {ncol1f1, ncol2f2, …}] adds several new columns ncoli by successively applying the functions fi to each row.\nTransformColumns[transfs] represents an operator form of TransformColumns that can be applied to tabular data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformColumns)))
(def TransformMissing "TransformMissing[tab, spec] replaces instances of Missing[…] in tabular data tab according to the specification spec.\nTransformMissing[tab, {col1spec1, …}] uses the specification speci to replace missing elements in coli." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformMissing)))
(def TransformationClass "TransformationClass is an option that specifies the class of geometric transformations to be used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformationClass)))
(def TransformationFunction "TransformationFunction[data] represents a transformation function that applies geometric and other transformations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformationFunction)))
(def TransformationFunctions "TransformationFunctions is an option for Simplify and FullSimplify which gives the list of functions to apply to try to transform parts of an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformationFunctions)))
(def TransformationMatrix "TransformationMatrix[tfun] gives the homogeneous matrix associated with a TransformationFunction object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformationMatrix)))
(def TransformedDistribution "TransformedDistribution[expr, xdist] represents the transformed distribution of expr where the random variable x follows the distribution dist.\nTransformedDistribution[expr, {x1, x2, …}dist] represents the transformed distribution of expr where {x1, x2, …} follows the multivariate distribution dist.\nTransformedDistribution[expr, xproc] represents the transformed distribution where expr contains expressions of the form x[t], referring the value at time t from the random process proc.\nTransformedDistribution[expr, {x1dist1, x2dist2 , …}] represents a transformed distribution where x1, x2, … are independent and follow the distributions dist1, dist2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformedDistribution)))
(def TransformedField "TransformedField[t, f, {x1, x2, …, xn}{y1, y2, …, yn}] uses the coordinate transformation t to transform the scalar, vector, or tensor field f from coordinates xi to yi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformedField)))
(def TransformedProcess "TransformedProcess[expr, xproc, t] represents the transformed process of expr where the variable x follows the random process proc and t denotes the time.\nTransformedProcess[expr, {x1proc1, x2proc2, …}, t] represents a transformed process where x1, x2, … are independent and follow the processes proc1, proc2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformedProcess)))
(def TransformedRegion "TransformedRegion[reg, f] represents the transformed region {f(p)|p∈reg}, where reg is a region and f is a function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransformedRegion)))
(def TransitionDirection "TransitionDirection is an option for PaneSelector that specifies the direction in which a transition moves." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransitionDirection)))
(def TransitionDuration "TransitionDuration is an option for PaneSelector that specifies the duration in seconds that a transition effect should last." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransitionDuration)))
(def TransitionEffect "TransitionEffect is an option for PaneSelector that specifies the visual effect used when transitioning between states." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransitionEffect)))
(def TransitiveClosureGraph "TransitiveClosureGraph[g] gives the transitive closure of the graph g.\nTransitiveClosureGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransitiveClosureGraph)))
(def TransitiveReductionGraph "TransitiveReductionGraph[g] gives a transitive reduction of the graph g.\nTransitiveReductionGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransitiveReductionGraph)))
(def Translate "Translate[g, {x, y, …}] represents graphics primitives g translated by the vector {x, y, …}. \nTranslate[g, {{x1, y1, …}, {x2, y2, …}, …}] represents multiple copies of g translated by a collection of vectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Translate)))
(def TranslationOptions "TranslationOptions{opt1val1, opt2val2, …} is an option for Style and Cell that controls how code translations are displayed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TranslationOptions)))
(def TranslationTransform "TranslationTransform[v] gives a TransformationFunction that represents translation of points by a vector v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TranslationTransform)))
(def Transliterate "Transliterate[\"string\"] attempts to transliterate string into plain ASCII.\nTransliterate[\"string\", script] attempts to transliterate string into the specified writing script script.\nTransliterate[\"string\", script1->script2] attempts to transliterate string from script1 to script2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Transliterate)))
(def Transparent "Transparent represents perfect transparency in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Transparent)))
(def Transpose "Transpose[list] transposes the first two levels in list. \nTranspose[list, {n1, n2, …}] transposes list so that the k ^th level in list is the nk ^th level in the result. \nTranspose[list, mn] transposes levels m and n in list, leaving all other levels unchanged.\nTranspose[list, k] cycles the levels in list k positions to the right." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Transpose)))
(def TransposeLayer "TransposeLayer[] represents a net layer that transposes the first two levels of its input.\nTransposeLayer[mn] represents a net layer that transposes levels m and n of its input.\nTransposeLayer[{m1n1, m2n2, …}] represents a net layer that sequentially transposes levels mi and ni of its input.\nTransposeLayer[{n1, n2, …}] represents a net layer such that the k ^th level of the input is the nk ^th level in the output." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TransposeLayer)))
(def TravelDirections "TravelDirections[{loc1, loc2, …}] generates directions for travel from loc1 to loc2, ….\nTravelDirections[{loc1, loc2, …}, \"prop\"] gives the property prop of travel directions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelDirections)))
(def TravelDirectionsData "TravelDirectionsData[…] represents travel directions generated by TravelDirections." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelDirectionsData)))
(def TravelDistance "TravelDistance[{loc1, loc2, …}] gives the estimated distance for travel from loc1 to loc2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelDistance)))
(def TravelDistanceList "TravelDistanceList[{loc1, loc2, …, locn}] returns the list {TravelDistance[loc1, loc2], …, TravelDistance[loc n-1, locn]}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelDistanceList)))
(def TravelMethod "TravelMethod is an option for TravelDirections and related functions that specifies the mode of transportation to assume." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelMethod)))
(def TravelTime "TravelTime[{loc1, loc2, …}] gives the estimated time to travel from loc1 to loc2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TravelTime)))
(def Tree "Tree[{subtree1, subtree2, …}] represents a tree with a list of child subtrees subtreei.\nTree[key1subtree1, key2subtree2, …|>] specifies the children as an association with keys keyi.\nTree[data, subtrees] represents a tree containing data in its root, with children given by subtrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tree)))
(def TreeCases "TreeCases[tree, pattern] gives a list of subtrees of tree with data matching pattern.\nTreeCases[tree, pattern, levelspec] gives a list of all subtrees of tree on levels specified by levelspec with data that matches the pattern.\nTreeCases[tree, pattern, levelspec, n] gives the first n subtrees in tree with data that matches the pattern.\nTreeCases[pattern] represents an operator form of TreeCases that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeCases)))
(def TreeChildren "TreeChildren[tree] extracts the children of the root of the Tree object tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeChildren)))
(def TreeCount "TreeCount[tree, pattern] gives the number of subtrees of tree whose data matches pattern.\nTreeCount[tree, pattern, levelspec] gives the total number of subtrees with data matching pattern that appear at the levels in tree specified by levelspec.\nTreeCount[pattern] represents an operator form of TreeCount that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeCount)))
(def TreeData "TreeData[tree] extracts the data in the root of the Tree object tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeData)))
(def TreeDelete "TreeDelete[tree, pos] deletes the subtree of tree at the position specified by pos.\nTreeDelete[tree, {pos1, pos2, …}] deletes subtrees at several positions.\nTreeDelete[pos] represents an operator form of TreeDelete that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeDelete)))
(def TreeDepth "TreeDepth[tree] gives the maximum level of tree.\nTreeDepth[tree, pattern] gives the maximum level of the subtree with data matching pattern." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeDepth)))
(def TreeElementCoordinates "TreeElementCoordinates is an option for Tree and related functions that specifies the coordinates to use to place the center of subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementCoordinates)))
(def TreeElementLabel "TreeElementLabel is an option for Tree and related functions that specifies what labels should be used for subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementLabel)))
(def TreeElementLabelFunction "TreeElementLabelFunction is an option for Tree and related functions that specifies functions to use to generate subtree element labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementLabelFunction)))
(def TreeElementLabelStyle "TreeElementLabelStyle is an option for Tree and related functions that specifies what styles should be used for subtree element labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementLabelStyle)))
(def TreeElementShape "TreeElementShape is an option for Tree and related functions that specifies what graphics should be used for subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementShape)))
(def TreeElementShapeFunction "TreeElementShapeFunction is an option for Tree and related functions that specifies a function to use to generate primitives for rendering subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementShapeFunction)))
(def TreeElementSize "TreeElementSize is an option for Tree and related functions that specifies what size should be used for subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementSize)))
(def TreeElementSizeFunction "TreeElementSizeFunction is an option for Tree and related functions that specifies a function to use to generate sizes for subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementSizeFunction)))
(def TreeElementStyle "TreeElementStyle is an option for Tree and related functions that specifies what styles should be used for subtree elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementStyle)))
(def TreeElementStyleFunction "TreeElementStyleFunction is an option for Tree and related functions that specifies functions to use to generate subtree element styles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeElementStyleFunction)))
(def TreeExpression "TreeExpression[tree] gives an expression from the structure of the Tree object tree.\nTreeExpression[tree, struct] gives an expression with data and subtrees of tree interpreted as specified by struct." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeExpression)))
(def TreeExtract "TreeExtract[tree, pos] extracts the subtree of tree at the position specified by pos.\nTreeExtract[tree, {pos1, pos2, …}] extracts a list of subtrees of tree.\nTreeExtract[tree, pos, h] extracts subtrees of tree, applying h to each subtree.\nTreeExtract[pos] represents an operator form of TreeExtract that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeExtract)))
(def TreeFold "TreeFold[f, tree] successively folds the subtrees of tree, applying f to both the data of each subtree and the list of results for its children.\nTreeFold[f, tree, h] applies f to h[tree] instead of the data of tree.\nTreeFold[{f, f -1}, tree, h] applies f -1 at the last level and f at each inner level.\nTreeFold[f] represents an operator form of TreeFold that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeFold)))
(def TreeForm "TreeForm[expr] displays expr as a tree with different levels at different depths. \nTreeForm[expr, n] displays expr as a tree only down to level n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeForm)))
(def TreeGame "TreeGame[{player1, action1, …, actionk}] specifies an action node for player1 with possible actions actionj. \nTreeGame[Tree[playera1, {actiont1, …, actiontk}]] specifies an action node using Tree notation, with playera1 association and actiontj action trees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeGame)))
(def TreeGamePayoff "TreeGamePayoff[tgame, strat] gives the expected payoff for each player in the tree game tgame with strategy profile strat.\nTreeGamePayoff[tgame, strat, adv] gives the expected payoff for each player in the tree game tgame with the incomplete strategy profile strat and the adversary type adv." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeGamePayoff)))
(def TreeGamePlot "TreeGamePlot[tgame] generates a plot of the TreeGame tgame. \nTreeGamePlot[tgame, strat] highlights the game strategy strat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeGamePlot)))
(def TreeGraph "TreeGraph[{v1, v2, …}, {u1, u2, …}] yields a tree where ui is the predecessor of vi.\nTreeGraph[{e1, e2, …}] yields a tree with edges ej.\nTreeGraph[{v1, v2, …}, {e1, e2, …}] yields a tree with vertices vi and edges ej.\nTreeGraph[{…, wi[vi, …], …}, {…, wj[ej, …], …}] yields a tree with vertex and edge properties defined by the symbolic wrappers wk.\nTreeGraph[{vivj, …}] uses rules vivj to specify a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeGraph)))
(def TreeGraphQ "TreeGraphQ[g] yields True if the graph g is a tree and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeGraphQ)))
(def TreeInsert "TreeInsert[tree, child, pos] inserts child at the position specified by pos in tree.\nTreeInsert[tree, child, {pos1, pos2, …}] inserts child at several positions.\nTreeInsert[child, pos] represents an operator form of TreeInsert that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeInsert)))
(def TreeLayout "TreeLayout is an option to Tree and related functions that specifies what layout to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeLayout)))
(def TreeLeafCount "TreeLeafCount[tree] gives the number of leaves of tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeLeafCount)))
(def TreeLeafQ "TreeLeafQ[tree] gives True if tree is a Tree object with no children, and gives False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeLeafQ)))
(def TreeLeaves "TreeLeaves[tree] returns the list of leaves of the tree tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeLeaves)))
(def TreeLevel "TreeLevel[tree, levelspec] gives a list of all subtrees of tree on levels specified by levelspec.\nTreeLevel[tree, levelspecelem] gives a list of the element elem of subtrees on levels specified by levelspec.\nTreeLevel[levelspec] represents an operator form of TreeLevel that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeLevel)))
(def TreeMap "TreeMap[f, tree] applies f to the data of each subtree of tree.\nTreeMap[f, tree, levelspec] applies f to the data of subtrees on levels of tree specified by levelspec.\nTreeMap[f, tree, levelspecelems] applies f to the elements elems of subtrees on levels specified by levelspec.\nTreeMap[f] represents an operator form of TreeMap that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeMap)))
(def TreeMapAt "TreeMapAt[f, tree, pos] applies f to the data at the position specified by pos in tree.\nTreeMapAt[f, tree, {pos1, pos2, …}] applies f to the data at several positions.\nTreeMapAt[f, pos] represents an operator form of TreeMapAt that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeMapAt)))
(def TreeOutline "TreeOutline[tree] gives an outline of the data in tree as a nested OpenerView.\nTreeOutline[tree, pos] gives an outline of the data in tree initially opened to the subtree at the position specified by pos.\nTreeOutline[tree, {pos1, pos2, …}] opens the outline to several positions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeOutline)))
(def TreePlot "TreePlot[g] generates a tree plot of the graph g.\nTreePlot[{e1, e2, …}] generates a tree plot of the graph with edges ej.\nTreePlot[{…, w[ei], …}] plots ei with features defined by the symbolic wrapper w.\nTreePlot[{v i1v j1, …}] uses rules v i1v j1 to specify the graph g.\nTreePlot[m] generates a tree plot of the graph represented by the adjacency matrix m.\nTreePlot[…, vpos] places the root v in the plot at position pos." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreePlot)))
(def TreePosition "TreePosition[tree, pattern] gives a list of the positions of subtrees of tree whose data matches pattern.\nTreePosition[tree, pattern, levelspec] finds only matches that appear on levels of tree specified by levelspec.\nTreePosition[tree, pattern, levelspec, n] gives the positions of the first n matches found.\nTreePosition[pattern] represents an operator form of TreePosition that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreePosition)))
(def TreeQ "TreeQ[tree] yields True if tree is a valid Tree object and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeQ)))
(def TreeReplacePart "TreeReplacePart[tree, posnew] gives a tree in which the subtree of tree at the position specified by pos is replaced with new.\nTreeReplacePart[tree, {pos1new1, pos2new2, …}] replaces subtrees at positions specified by posi with newi.\nTreeReplacePart[tree, {pos1, pos2, …}new] replaces all subtrees at positions specified by posi with new.\nTreeReplacePart[tree, {{pos 1, 1, pos 1, 2, …}new1, …}] replaces subtrees at positions specified by {pos i, 1, pos i, 2, …} with newi.\nTreeReplacePart[posnew] represents an operator form of TreeReplacePart that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeReplacePart)))
(def TreeRules "TreeRules[tree] returns the rules associated with the Tree object tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeRules)))
(def TreeScan "TreeScan[f, tree] evaluates f applied to the data of each subtree of tree in turn.\nTreeScan[f, tree, levelspec] applies f to the data of subtrees on levels of tree specified by levelspec.\nTreeScan[f, tree, levelspecelems] applies f to the elements elems of subtrees on levels specified by levelspec.\nTreeScan[f] represents an operator form of TreeScan that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeScan)))
(def TreeSelect "TreeSelect[tree, crit] picks out all subtrees treei of tree for which crit[treei] is True.\nTreeSelect[tree, crit, n] picks out the first n subtrees for which crit[treei] is True.\nTreeSelect[tree, crit, levelspec, n] picks out subtrees on levels specified by levelspec.\nTreeSelect[crit] represents an operator form of TreeSelect that can be applied to a tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeSelect)))
(def TreeSize "TreeSize[tree] gives the number of subtrees of tree." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeSize)))
(def TreeTraversalOrder "TreeTraversalOrder is an option for TreeMap and related functions that specifies the order to visit subtrees." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TreeTraversalOrder)))
(def TrendStyle "TrendStyle is an option to CandlestickChart, RenkoChart, and other financial charting functions that specifies how to style price trends." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrendStyle)))
(def Triangle "Triangle[{p1, p2, p3}] represents a filled triangle with corner points p1, p2, and p3.\nTriangle[{{p11, p12, p13}, …}] represents a collection of triangles." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Triangle)))
(def TriangleCenter "TriangleCenter[tri, type] gives the specified type of center for the triangle tri.\nTriangleCenter[tri] gives the centroid of the triangle." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangleCenter)))
(def TriangleConstruct "TriangleConstruct[tri, type] gives the specified type of construct for the triangle tri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangleConstruct)))
(def TriangleMeasurement "TriangleMeasurement[tri, type] gives the specified type of measurement for the triangle tri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangleMeasurement)))
(def TriangleWave "TriangleWave[x] gives a triangle wave that varies between -1 and +1 with unit period.\nTriangleWave[{min, max}, x] gives a triangle wave that varies between min and max with unit period." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangleWave)))
(def TriangularDistribution "TriangularDistribution[{min, max}] represents a symmetric triangular statistical distribution giving values between min and max. \nTriangularDistribution[] represents a symmetric triangular statistical distribution giving values between 0 and 1.\nTriangularDistribution[{min, max}, c] represents a triangular distribution with mode at c." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangularDistribution)))
(def TriangulateMesh "TriangulateMesh[mr] generates a triangulation of the mesh region mr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TriangulateMesh)))
(def Trig "Trig is an option for various polynomial manipulation functions that specifies whether trigonometric functions should be treated like polynomial elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Trig)))
(def TrigExpand "TrigExpand[expr] expands out trigonometric functions in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrigExpand)))
(def TrigFactor "TrigFactor[expr] factors trigonometric functions in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrigFactor)))
(def TrigFactorList "TrigFactorList[expr] factors trigonometric functions in expr, yielding a list of lists containing trigonometric monomials and exponents." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrigFactorList)))
(def TrigReduce "TrigReduce[expr] rewrites products and powers of trigonometric functions in expr in terms of trigonometric functions with combined arguments." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrigReduce)))
(def TrigToExp "TrigToExp[expr] converts trigonometric functions in expr to exponentials." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrigToExp)))
(def Trigger "Trigger[Dynamic[u]] represents a trigger that can be pressed to make the dynamically updated value of u be continually increased with time from 0 to 1. \nTrigger[Dynamic[u], {umin, umax}] makes u vary from umin to umax when triggered. \nTrigger[Dynamic[u], {umin, umax, du}] makes u vary in steps du when triggered. \nTrigger[Dynamic[u], {umin, umax}, ups] makes the value of u increase at a rate of ups units per second when triggered." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Trigger)))
(def TrimmedMean "TrimmedMean[list, f] gives the mean of the elements in list after dropping a fraction f of the smallest and largest elements.\nTrimmedMean[list, {f1, f2}] gives the mean when a fraction f1 of the smallest elements and a fraction f2 of the largest elements are removed.\nTrimmedMean[list] gives the 5% trimmed mean TrimmedMean[list, 0.05].\nTrimmedMean[dist, …] gives the trimmed mean of a univariate distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrimmedMean)))
(def TrimmedVariance "TrimmedVariance[list, f] gives the variance of the elements in list after dropping a fraction f of the smallest and largest elements.\nTrimmedVariance[list, {f1, f2}] gives the variance when a fraction f1 of the smallest elements and a fraction f2 of the largest elements are removed.\nTrimmedVariance[list] gives the 5% trimmed variance TrimmedVariance[list, 0.05].\nTrimmedVariance[dist, …] gives the trimmed variance of a univariate distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrimmedVariance)))
(def TropicalStormData "TropicalStormData[entity, property] gives the value of the specified property for the tropical storm entity.\nTropicalStormData[{entity1, entity2, …}, property] gives a list of property values for the specified tropical storm entities.\nTropicalStormData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TropicalStormData)))
(def True "True is the symbol for the Boolean value true." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote True)))
(def TrueQ "TrueQ[expr] yields True if expr is True, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TrueQ)))
(def TruncateSum "TruncateSum[sexpr, n] truncates each Sum in sexpr to have at most n terms. \nTruncateSum[sexpr, {m, n, …}] truncates each multiple Sum in sexpr using the iterative specification {m, n, …}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TruncateSum)))
(def TruncatedDistribution "TruncatedDistribution[{xmin, xmax}, dist] represents the distribution obtained by truncating the values of dist to lie between xmin and xmax.\nTruncatedDistribution[{{xmin, xmax}, {ymin, ymax}, …}, dist] represents the distribution obtained by truncating the values of the multivariate distribution dist to lie between xmin and xmax, ymin and ymax, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TruncatedDistribution)))
(def TruncatedPolyhedron "TruncatedPolyhedron[poly] gives the truncated polyhedron of poly by truncating all vertices. \nTruncatedPolyhedron[poly, l] truncates the polyhedron poly by a length ratio l at its vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TruncatedPolyhedron)))
(def TsallisQExponentialDistribution "TsallisQExponentialDistribution[λ, q] represents a Tsallis q-exponential distribution with scale inversely proportional to parameter λ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TsallisQExponentialDistribution)))
(def TsallisQGaussianDistribution "TsallisQGaussianDistribution[μ, β, q] represents a Tsallis q-Gaussian distribution with mean μ, scale parameter β, and deformation parameter q.\nTsallisQGaussianDistribution[q] represents a Tsallis q-Gaussian distribution with mean 0 and scale parameter 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TsallisQGaussianDistribution)))
(def Tube "Tube[{{x1, y1, z1}, {x2, y2, z2}, …}] represents a 3D tube around the line joining a sequence of points.\nTube[{pt1, pt2, …}, r] represents a tube of radius r.\nTube[{{pt11, pt12, …}, {pt21, …}, …}, …] represents a collection of tubes.\nTube[curve, …] represents a tube around the specified 3D curve." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tube)))
(def Tuesday "Tuesday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tuesday)))
(def TukeyLambdaDistribution "TukeyLambdaDistribution[λ] represents Tukey's lambda distribution with shape parameter λ.\nTukeyLambdaDistribution[λ, μ, σ] represents Tukey's lambda distribution with location parameter μ and scale parameter σ.\nTukeyLambdaDistribution[{λ1, λ2}, μ, {σ1, σ2}] represents the generalized Tukey's lambda distribution with location parameter μ, scale parameters σ1 and σ2, and shape parameters λ1 and λ2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TukeyLambdaDistribution)))
(def TukeyWindow "TukeyWindow[x] represents a Tukey window function of x.\nTukeyWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TukeyWindow)))
(def TunnelData "TunnelData[entity, property] gives the value of the specified property for the tunnel entity.\nTunnelData[{entity1, entity2, …}, property] gives a list of property values for the specified tunnel entities.\nTunnelData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TunnelData)))
(def Tuples "Tuples[list, n] generates a list of all possible n‐tuples of elements from list. \nTuples[{list1, list2, …}] generates a list of all possible tuples whose i  ^th element is from listi. \nTuples[list, {n1, n2, …}] generates a list of all possible n1n2… arrays of elements in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Tuples)))
(def TuranGraph "TuranGraph[n, k] gives the k-partite Turán graph with n vertices T n, k." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TuranGraph)))
(def TuringMachine "TuringMachine[rule, init, t] generates a list representing the evolution of the Turing machine with the specified rule from initial condition init for t steps. \nTuringMachine[rule, init] gives the result of evolving init for one step. \nTuringMachine[rule] is an operator form of TuringMachine that corresponds to one step of evolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TuringMachine)))
(def TuttePolynomial "TuttePolynomial[g, {x, y}] gives the Tutte polynomial of the graph g.\nTuttePolynomial[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TuttePolynomial)))
(def TwoWayRule "x<->y or xy represents a two-way rule expressing exchange or correspondence of x and y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TwoWayRule)))
(def TypeDeclaration "TypeDeclaration[\"Product\", name, field1type1, field2type2, …|>] represents a declaration of a product type with the specified fields.\nTypeDeclaration[\"Abstract\", name] represents a declaration of the abstract type name.\nTypeDeclaration[\"Alias\", name, targetType] represents a declaration of the type name using the internal representation of targetType.\nTypeDeclaration[\"Macro\", name, targetType] represents a declaration specifying that all instances of name should be replaced with targetType." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TypeDeclaration)))
(def TypeEvaluate "TypeEvaluate[expr] represents a type created by evaluating expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TypeEvaluate)))
(def TypeHint "TypeHint[expr, type] represents an expression of a specified type when compiled and gives expr when evaluated." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TypeHint)))
(def TypeOf "TypeOf[expr] gives the type of expr without evaluating it.\nTypeOf[expr, Typed[x, ty]] assumes that instances of x in expr have type ty.\nTypeOf[expr, {Typed[x1, ty1], Typed[x2, ty2], …}] assumes that xi has type tyi.\nTypeOf[expr, decls] uses declarations decls." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TypeOf)))
(def TypeSpecifier "TypeSpecifier[cons] represents a type.\nTypeSpecifier[cons][type1, …] or cons::[type1, …] represents a compound type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote TypeSpecifier)))
(def Typed "Typed[expr, type] represents an expression that should be assumed to be of a specified type for compilation and other purposes." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Typed)))
(def URL "URL[\"url\"] is a symbolic representation of a URL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URL)))
(def URLBuild "URLBuild[\"path\", {param1->val1, param2->val2, …}] builds a URL with the specified path and query parameters and values parami and vali.\nURLBuild[{path1, path2, …}] builds a URL from the path components pathi.\nURLBuild[path, params] builds a URL from a specification of a path and query parameters.\nURLBuild[assoc] builds a URL from an association of components.\nURLBuild[assoc, params] builds a URL from an association of components, plus query parameters and values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLBuild)))
(def URLDecode "URLDecode[\"string\"] decodes a URL-style percent-encoded string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLDecode)))
(def URLDispatcher "URLDispatcher[{patt1content1, patt2content2, …}] represents a dispatcher for deployed URLs that specifies that URLs with relative paths matching the string patterns patti should give content represented by contenti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLDispatcher)))
(def URLDownload "URLDownload[url] downloads the content of the specified URL to a local temporary file.\nURLDownload[{url1, url2, …}] downloads the contents of the specified URLs to files in a local temporary directory.\nURLDownload[url, file] downloads to a specified file.\nURLDownload[{url1, url2, …}, dir] downloads to a specified directory.\nURLDownload[HTTPRequest[…], …] downloads the result of the specified HTTP request.\nURLDownload[{req1, req2, …}, …] downloads the results of the list of HTTP requests.\nURLDownload[req, loc, \"elem\"] returns only the element elem from the response.\nURLDownload[req, loc, \"elem\"] returns only the element elem from the response.\nURLDownload[req, loc, {elem1, elem2, …}] returns an association of the values of the elements elemi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLDownload)))
(def URLDownloadSubmit "URLDownloadSubmit[url, file] submits the specified URL to be downloaded asynchronously to the file given.\nURLDownloadSubmit[url, file, {param1val1, param2val2, …}] submits the specified URL, adding elements with names parami and values vali. \nURLDownloadSubmit[obj, …] submits the cloud object obj.\nURLDownloadSubmit[HTTPRequest[…], …] submits the specified HTTP request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLDownloadSubmit)))
(def URLEncode "URLEncode[\"string\"] converts \"string\" into a URL-style, percent-encoded ASCII string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLEncode)))
(def URLExecute "URLExecute[url] executes the specified URL, importing whatever result is generated.\nURLExecute[url, {param1val1, param2val2, …}] executes the specified URL, adding elements with names parami and values vali.\nURLExecute[url, params, format] imports the result using the specified format.\nURLExecute[CloudObject[…], …] executes a cloud object with current authentication settings. \nURLExecute[HTTPRequest[…], …] executes the specified HTTP request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLExecute)))
(def URLExpand "URLExpand[\"url\"] expands a shortened \"url\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLExpand)))
(def URLParse "URLParse[\"url\"] takes a well-formed URL and gives an association whose values correspond to the components of the URL.\nURLParse[\"url\", \"component\"] returns only the specified component.\nURLParse[\"url\", {component1, component2, …}] returns only the specified component list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLParse)))
(def URLQueryDecode "URLQueryDecode[\"string\"] decodes a URL-style query string into a list of key-value rules." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLQueryDecode)))
(def URLQueryEncode "URLQueryEncode[key1val1, key2val2, …] creates a URL-style query string from an association of keys and values. \nURLQueryEncode[{param1val1, param2val1, …}] creates a query string from a list of rules." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLQueryEncode)))
(def URLRead "URLRead[url] sends a request to a URL and reads back the response, returning it as a response object.\nURLRead[assoc] sends a request to a URL built from an association of components and metadata elements.\nURLRead[HTTPRequest[…]] sends a request specified by a symbolic HTTPRequest object.\nURLRead[req, \"elem\"] returns only the element elem from the response.\nURLRead[req, {elem1, elem2, …}] returns an association of the values of the elements elemi.\nURLRead[{req1, req2, …}, …] sends the requests reqi in parallel, giving a list of the results obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLRead)))
(def URLResponseTime "URLResponseTime[url] gives the total number of seconds to request one byte from the specified URL.\nURLResponseTime[url, prop] gives the specified timing." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLResponseTime)))
(def URLShorten "URLShorten[\"url\"] creates a shortened URL that redirects to \"url\".\nURLShorten[CloudObject[…]] creates a shortened URL that redirects to the URL for the specified cloud object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLShorten)))
(def URLSubmit "URLSubmit[url] submits the specified URL to be executed asynchronously.\nURLSubmit[url, {param1val1, param2val2, …}] submits the specified URL, adding elements with names parami and values vali. \nURLSubmit[obj, …] submits the cloud object obj.\nURLSubmit[HTTPRequest[…], …] submits the specified HTTP request." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote URLSubmit)))
(def UnateQ "UnateQ[bexpr, {x1, x2, …}] tests whether the Boolean expression bexpr is positive unate in the variables x1, x2, … .\nUnateQ[bexpr, {¬x1, ¬x2, …}] tests whether the Boolean expression bexpr is negative unate in the variables x1, x2, … ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnateQ)))
(def Uncompress "Uncompress[\"string\"] recovers an expression from a compressed string representation generated by Compress.\nUncompress[\"string\", h] wraps the head h around the expression produced before evaluating it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Uncompress)))
(def UnconstrainedParameters "UnconstrainedParameters is an option to functions like GeometricScene that specifies what parameters should be treated as unconstrained, so that they can take on any possible value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnconstrainedParameters)))
(def Undefined "Undefined is a symbol that represents a quantity with no defined value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Undefined)))
(def UnderBar "UnderBar[expr] displays with a bar under expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderBar)))
(def Underflow "Underflow[] represents a number too small to represent explicitly on your computer system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Underflow)))
(def Underlined "Underlined represents an underlined font." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Underlined)))
(def Underoverscript "Underoverscript[x, y, z] is an object that formats as x_y^z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Underoverscript)))
(def UnderoverscriptBox "UnderoverscriptBox[x, y, z] is the low‐level box representation for x_y^z in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderoverscriptBox)))
(def UnderoverscriptBoxOptions "UnderoverscriptBoxOptions is an option for selections that specifies settings for UnderoverscriptBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderoverscriptBoxOptions)))
(def Underscript "Underscript[x, y] is an object that formats as x_y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Underscript)))
(def UnderscriptBox "UnderscriptBox[x, y] is the low‐level box representation for x_y in notebook expressions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderscriptBox)))
(def UnderscriptBoxOptions "UnderscriptBoxOptions is an option for selections that specifies settings for UnderscriptBox objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderscriptBoxOptions)))
(def UnderseaFeatureData "UnderseaFeatureData[entity, property] gives the value of the specified property for the undersea feature entity.\nUnderseaFeatureData[{entity1, entity2, …}, property] gives a list of property values for the specified undersea feature entities.\nUnderseaFeatureData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnderseaFeatureData)))
(def UndirectedEdge "UndirectedEdge[u, v] or uv represents an undirected edge between u and v.\nUndirectedEdge[u, v, t] or uOverscript[, t]v represents an undirected edge between u and v with tag t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UndirectedEdge)))
(def UndirectedGraph "UndirectedGraph[g] gives an undirected graph from the directed graph g.\nUndirectedGraph[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UndirectedGraph)))
(def UndirectedGraphQ "UndirectedGraphQ[g] yields True if the graph g is an undirected graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UndirectedGraphQ)))
(def UndoOptions "UndoOptions is an option for Style that specifies settings for controlling the behavior of the front end's interactive undo/redo system." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UndoOptions)))
(def UndoTrackedVariables "UndoTrackedVariables is an option for Manipulate, DynamicModule, and related functions that sets variables that should be tracked by the front end's undo mechanism." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UndoTrackedVariables)))
(def Unequal "lhs!=rhs or lhs≠rhs returns False if lhs and rhs are identical." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unequal)))
(def UnequalTo "UnequalTo[y] is an operator form that yields x≠y when applied to an expression x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnequalTo)))
(def Unevaluated "Unevaluated[expr] represents the unevaluated form of expr when it appears as the argument to a function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unevaluated)))
(def UniformDistribution "UniformDistribution[{min, max}] represents a continuous uniform statistical distribution giving values between min and max. \nUniformDistribution[] represents a uniform distribution giving values between 0 and 1.\nUniformDistribution[{{xmin, xmax}, {ymin, ymax}, …}] represents a multivariate uniform distribution over the region {{xmin, xmax}, {ymin, ymax}, …}.\nUniformDistribution[n] represents a multivariate uniform distribution over the standard n dimensional unit hypercube." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniformDistribution)))
(def UniformGraphDistribution "UniformGraphDistribution[n, m] represents a uniform graph distribution on n-vertex, m-edge graphs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniformGraphDistribution)))
(def UniformPolyhedron "UniformPolyhedron[\"name\"] gives the uniform polyhedron with the given name.\nUniformPolyhedron[{n, m}] gives the uniform polyhedron with n sides of each face and m faces meeting at each vertex point.\nUniformPolyhedron[{r, θ, ϕ}, …] rescales the uniform polyhedron by a factor r and rotates by an angle θ with respect to the z axis and angle ϕ with respect to the y axis.\nUniformPolyhedron[{x, y, z}, {r, θ, ϕ}, …] centers the uniform polyhedron at {x, y, z}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniformPolyhedron)))
(def UniformSumDistribution "UniformSumDistribution[n] represents the distribution of a sum of n random variables uniformly distributed from 0 to 1.\nUniformSumDistribution[n, {min, max}] represents the distribution of a sum of n random variables uniformly distributed from min to max." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniformSumDistribution)))
(def UnilateralConvolve "UnilateralConvolve[f, g, u, t] gives the unilateral convolution with respect to u of the expressions f and g.\nUnilateralConvolve[f, g, {u1, …, un}, {t1, …, tn}] gives the multidimensional unilateral convolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnilateralConvolve)))
(def UnilateralDiscreteConvolve "UnilateralDiscreteConvolve[f, g, k, n] gives the unilateral discrete convolution with respect to k of the expressions f and g.\nUnilateralDiscreteConvolve[f, g, {k1, …, kp}, {n1, …, np}] gives the multidimensional unilateral discrete convolution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnilateralDiscreteConvolve)))
(def Uninstall "Uninstall[link] terminates an external program started by Install, and removes Wolfram Language definitions set up by it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Uninstall)))
(def Union "Union[list1, list2, …] gives a sorted list of all the distinct elements that appear in any of the listi. \nUnion[list] gives a sorted version of a list, in which all duplicated elements have been dropped." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Union)))
(def UnionPlus "UnionPlus[x, y, …] displays as x⊎y⊎…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnionPlus)))
(def UnionedEntityClass "UnionedEntityClass[class1, …] represents an entity class containing all the distinct entities in all the classi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnionedEntityClass)))
(def Unique "Unique[] generates a new symbol, whose name is of the form $nnn. \nUnique[x] generates a new symbol, with a name of the form x$nnn. \nUnique[{x, y, …}] generates a list of new symbols. \nUnique[\"xxx\"] generates a new symbol, with a name of the form xxxnnn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unique)))
(def UniqueElements "UniqueElements[{list1, list2, …}] gives the elements for each listi that are not in any other list.\nUniqueElements[lists, test] uses test to determine whether pairs of elements should be considered equivalent." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniqueElements)))
(def UnitBox "UnitBox[x] represents the unit box function, equal to 1 for x≤1/2 and 0 otherwise.\nUnitBox[x1, x2, …] represents the multidimensional unit box function, equal to 1 if xi≤1/2 and 0 otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitBox)))
(def UnitConvert "UnitConvert[quantity, targetunit] attempts to convert the specified quantity to the specified targetunit.\nUnitConvert[quantity] converts the specified quantity to SI base units." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitConvert)))
(def UnitDimensions "UnitDimensions[unit] returns a list of base dimensions associated with the specified unit.\nUnitDimensions[quantity] returns a list of base dimensions associated with the unit of the specified quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitDimensions)))
(def UnitRootTest "UnitRootTest[data] tests whether data came from an autoregressive time series process with unit root.\nUnitRootTest[data, model, \"property\"] returns the value of \"property\" for a given model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitRootTest)))
(def UnitSimplify "UnitSimplify[quantity] attempts to simplify the units of the specified quantity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitSimplify)))
(def UnitStep "UnitStep[x] represents the unit step function, equal to 0 for x<0 and 1 for x≥0. \nUnitStep[x1, x2, …] represents the multidimensional unit step function which is 1 only if none of the xi are negative." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitStep)))
(def UnitSystem "UnitSystem is an option for functions like AirTemperatureData that determines the units of the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitSystem)))
(def UnitTriangle "UnitTriangle[x] represents the unit triangle function on the interval x≤1 .\nUnitTriangle[x1, x2, …] represents the multidimensional unit triangle function on the interval xi≤1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitTriangle)))
(def UnitVector "UnitVector[k] gives the two-dimensional unit vector in the k ^th direction.\nUnitVector[n, k] gives the n-dimensional unit vector in the k ^th direction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitVector)))
(def UnitVectorLayer "UnitVectorLayer[n] represents a net layer that transforms integers between 1 and n into n-dimensional unit vectors. \nUnitVectorLayer[] leaves the n to be inferred from context." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitVectorLayer)))
(def UnitaryMatrix "UnitaryMatrix[umat] converts the unitary matrix umat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitaryMatrix)))
(def UnitaryMatrixQ "UnitaryMatrixQ[m] gives True if m is a unitary matrix, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnitaryMatrixQ)))
(def Unitize "Unitize[x] gives 0 when x is zero, and 1 when x has any other numerical value." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unitize)))
(def UnityDimensions "UnityDimensions is an option for UnitSimplify that specifies which UnitDimensions should be factored out." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnityDimensions)))
(def UniverseModelData "UniverseModelData[spec] returns properties of the universe based on the default model at specification defined by the time after the Big Bang, the distance to the comoving object, or the redshift of such an object.\nUniverseModelData[spec, model] returns properties of universe model at spec.\nUniverseModelData[spec, property] returns the specified property at the time or distance spec.\nUniverseModelData[spec, property, model] returns the specified property at the time or distance spec for the universe model." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniverseModelData)))
(def UniversityData "UniversityData[entity, property] gives the value of the specified property for the university entity.\nUniversityData[{entity1, entity2, …}, property] gives a list of property values for the specified university entities.\nUniversityData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UniversityData)))
(def UnixTime "UnixTime[] gives the total number of seconds since the beginning of January 1, 1970, in the GMT time zone.\nUnixTime[{y, m, d, h, m, s}] gives the Unix time specification corresponding to a date list.\nUnixTime[date] gives the Unix time specification corresponding to a DateObject.\nUnixTime[\"string\"] gives the Unix time specification corresponding to a date string.\nUnixTime[{\"string\", {e1, e2, …}}] takes the date string to contain the elements \"ei\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnixTime)))
(def UnlabeledTree "UnlabeledTree[tree] returns a tree of the same shape as tree in which the nodes and edges are displayed without labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnlabeledTree)))
(def UnmanageObject "UnmanageObject[man] takes ownership of memory wrapped in a managed object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnmanageObject)))
(def Unprotect "Unprotect[s1, s2, …] removes the attribute Protected for the symbols si.\nUnprotect[patt1, patt2, …] unprotects all symbols whose names textually match any of the arbitrary string patterns patti.\nUnprotect[{spec1, spec2, …}] unprotects any symbols that are equal to or whose names match any of the speci." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unprotect)))
(def UnregisterExternalEvaluator "UnregisterExternalEvaluator[sys, evaluator] unregisters the external evaluator referenced by evaluator for system sys so that it is not used by ExternalEvaluate and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnregisterExternalEvaluator)))
(def UnsameQ "lhs=!=rhs yields True if the expression lhs is not identical to rhs, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnsameQ)))
(def UnsavedVariables "UnsavedVariables is an option for Manipulate, DynamicModule, and related functions that specifies local symbols that should not be saved when the notebook containing them is saved." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnsavedVariables)))
(def Unset "lhs=. removes any rules defined for lhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Unset)))
(def UnsetShared "UnsetShared[s1, s2, …] stops the sharing of the variables or functions si among parallel kernels.\nUnsetShared[patt] stops the sharing of all variables and functions whose names match the string pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UnsetShared)))
(def Until "Until[test, body] evaluates body and then test, repetitively, until test first gives True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Until)))
(def UpArrow "UpArrow[x, y, …] displays as x↑y↑…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpArrow)))
(def UpArrowBar "UpArrowBar[x, y, …] displays as x⤒y⤒…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpArrowBar)))
(def UpArrowDownArrow "UpArrowDownArrow[x, y, …] displays as x⇅y⇅…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpArrowDownArrow)))
(def UpDownArrow "UpDownArrow[x, y, …] displays as x↕y↕…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpDownArrow)))
(def UpEquilibrium "UpEquilibrium[x, y, …] displays as x⥮y⥮…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpEquilibrium)))
(def UpSet "lhs^=rhs assigns rhs to be the value of lhs, and associates the assignment with symbols that occur at level one in lhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpSet)))
(def UpSetDelayed "lhs^:=rhs assigns rhs to be the delayed value of lhs, and associates the assignment with symbols that occur at level one in lhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpSetDelayed)))
(def UpTee "UpTee[x, y] displays as x⊥y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpTee)))
(def UpTeeArrow "UpTeeArrow[x, y, …] displays as x↥y↥…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpTeeArrow)))
(def UpTo "UpTo[n] is a symbolic specification that represents up to n objects or positions. If n objects or positions are available, all are used. If fewer are available, only those available are used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpTo)))
(def UpValues "UpValues[f] gives a list of transformation rules corresponding to all upvalues (values for g[…, f[…], …]) defined for the symbol f. \nUpValues[\"symbol\"] gives a list of transformation rules corresponding to all upvalues defined for the symbol named \"symbol\" if it exists." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpValues)))
(def Update "Update[symbol] tells the Wolfram Language that hidden changes have been made that could affect values associated with a symbol. \nUpdate[] specifies that the value of any symbol could be affected." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Update)))
(def UpdateInterval "UpdateInterval is an option to Refresh and Dynamic that specifies at what time interval to do updates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpdateInterval)))
(def UpdatePacletSites "UpdatePacletSites is an option to PacletInstall and PacletInstallSubmit that specifies whether to first update the local cache of information about available paclets." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpdatePacletSites)))
(def UpdateSearchIndex "UpdateSearchIndex[obj] updates the given search index object.\nUpdateSearchIndex[\"name\"] updates the search index with the specified name in the SearchIndices[] list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpdateSearchIndex)))
(def UpdateSemanticSearchIndex "UpdateSemanticSearchIndex[index, source] updates the SemanticSearchIndex[…] index with the data in source.\nUpdateSemanticSearchIndex[index, {source1, …}] updates the SemanticSearchIndex[…] index with the collection of sources sourcei.\nUpdateSemanticSearchIndex[index, {source1  val1, …}] associates the new source sourcei to the value vali." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpdateSemanticSearchIndex)))
(def UpperCaseQ "UpperCaseQ[string] yields True if all the characters in the string are uppercase letters, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperCaseQ)))
(def UpperLeftArrow "UpperLeftArrow[x, y, …] displays as x↖y↖…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperLeftArrow)))
(def UpperRightArrow "UpperRightArrow[x, y, …] displays as x↗y↗…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperRightArrow)))
(def UpperTriangularMatrix "UpperTriangularMatrix[umat] converts the upper triangular matrix umat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperTriangularMatrix)))
(def UpperTriangularMatrixQ "UpperTriangularMatrixQ[m] gives True if m is upper triangular, and False otherwise.\nUpperTriangularMatrixQ[m, k] gives True if m is upper triangular starting up from the k ^th diagonal, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperTriangularMatrixQ)))
(def UpperTriangularize "UpperTriangularize[m] gives a matrix in which all but the upper triangular elements of m are replaced with zeros. \nUpperTriangularize[m, k] replaces with zeros only the elements below the k ^th subdiagonal of m." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UpperTriangularize)))
(def Upsample "Upsample[array, n] returns an upsampled version of the array by inserting n-1 zeros between array elements.\nUpsample[array, n, offset] shifts array so that its first element moves to the position offset in the resulting array.\nUpsample[array, n, offset, val] inserts n-1 elements of value val between array elements.\nUpsample[image, …] upsamples an image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Upsample)))
(def UseEmbeddedLibrary "UseEmbeddedLibrary is an option of FunctionCompile that embeds a shared library in a CompiledCodeFunction." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UseEmbeddedLibrary)))
(def UsingFrontEnd "UsingFrontEnd[expr] evaluates expr, making use of a front end if necessary." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UsingFrontEnd)))
(def UtilityFunction "UtilityFunction is an option for Predict, Classify, and related functions that specifies the utility value to assign to each possible pairing of actual and predicted values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote UtilityFunction)))
(def ValenceErrorHandling "ValenceErrorHandling is an option for MoleculeModify that specifies whether molecule valences should be automatically adjusted after modification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValenceErrorHandling)))
(def ValenceFilling "ValenceFilling is an option for Molecule that specifies whether to fill open valences with hydrogen atoms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValenceFilling)))
(def ValidationLength "ValidationLength is an option to FindSequenceFunction and related functions that specifies the number of elements in the input sequence that should be used to validate a potential representation found." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValidationLength)))
(def ValidationSet "ValidationSet is an option for Predict, Classify, NetTrain, and related functions that specifies the validation set to be used during the training phase." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValidationSet)))
(def ValueDimensions "ValueDimensions is an option to TemporalData, TimeSeries, and EventSeries that specifies the dimension of the value space." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValueDimensions)))
(def ValuePreprocessingFunction "ValuePreprocessingFunction is an option for functions such as PersistentSymbol and InitializationValue that specifies a function to apply to a new value that is being assigned." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValuePreprocessingFunction)))
(def ValueQ "ValueQ[expr] gives True if a value has been defined for expr, and gives False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ValueQ)))
(def Values "Values[key1val1, key2val2, …] gives a list of the values vali in an association.\nValues[{key1val1, key2val2, …}] gives a list of the vali in a list of rules.\nValues[expr, h] gives a list of values in expr, wrapping each of them with head h before evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Values)))
(def VandermondeMatrix "VandermondeMatrix[{x1, x2, …, xn}] gives an n×n Vandermonde matrix corresponding to the nodes xi.\nVandermondeMatrix[{x1, x2, …, xn}, k] gives an n×k Vandermonde matrix.\nVandermondeMatrix[vmat] converts a Vandermonde matrix vmat to a structured array." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VandermondeMatrix)))
(def Variables "Variables[poly] gives a list of all independent variables in a polynomial." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Variables)))
(def Variance "Variance[data] gives the variance estimate of the elements in data. \nVariance[dist] gives the variance of the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Variance)))
(def VarianceEquivalenceTest "VarianceEquivalenceTest[{data1, data2, …}] tests whether the variances of the datai are equal. \nVarianceEquivalenceTest[{data1, …}, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VarianceEquivalenceTest)))
(def VarianceEstimatorFunction "VarianceEstimatorFunction is an option for LinearModelFit and NonlinearModelFit which specifies the variance estimator to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VarianceEstimatorFunction)))
(def VarianceGammaDistribution "VarianceGammaDistribution[λ, α, β, μ] represents a variance‐gamma distribution with location parameter μ, skewness parameter β, and shape parameters λ and α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VarianceGammaDistribution)))
(def VarianceGammaPointProcess "VarianceGammaPointProcess[μ, λ, α, β, d] represents a variance gamma cluster point process with density μ, cluster mean λ and shape parameters α and β in ^d." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VarianceGammaPointProcess)))
(def VarianceTest "VarianceTest[data] tests whether the variance of the data is one. \nVarianceTest[{data1, data2}] tests whether the variances of data1 and data2 are equal.\nVarianceTest[dspec, σ0^2] tests a dispersion measure against σ0^2.\nVarianceTest[dspec, σ0^2, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VarianceTest)))
(def VariogramFunction "VariogramFunction is an option to SpatialEstimate that specifies the local variation model to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VariogramFunction)))
(def VariogramModel "VariogramModel[\"model\", {params}] represents the function for the variogram model specified by \"model\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VariogramModel)))
(def VectorAngle "VectorAngle[u, v] gives the angle between the vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorAngle)))
(def VectorAround "VectorAround[{x1, x2, …}, {δ1, δ2, …}] represents a vector of uncorrelated approximate numbers or quantities with values xi and uncertainties δi.\nVectorAround[{x1, x2, …}, {{Δ11, Δ12, …}, {Δ12, Δ22, …}, …}] represents a vector of approximate numbers or quantities with values xi and covariance matrix Δ.\nVectorAround[{x1, x2}, {{δ1, δ2}, ρ}] represents a pair of approximate numbers or quantities with uncertainties δ1, δ2 and correlation factor ρ.\nVectorAround[{x1, x2, …}, {{δ1, δ2, …}, {{1, R12, …}, {R12, 1, …}, …}}] represents a vector of approximate numbers or quantities with uncertainties δi and correlation matrix R." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorAround)))
(def VectorAspectRatio "VectorAspectRatio is an option setting for VectorPlot and related functions that determines the relative width and length of the arrow markers in the plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorAspectRatio)))
(def VectorColorFunction "VectorColorFunction is an option for VectorPlot and related functions that specifies a function to apply to determine colors of field vectors drawn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorColorFunction)))
(def VectorColorFunctionScaling "VectorColorFunctionScaling is an option for graphics functions which specifies whether arguments supplied to a vector color function should be scaled to lie between 0 and 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorColorFunctionScaling)))
(def VectorDatabaseObject "VectorDatabaseObject[…] represents a vector database, as created by CreateVectorDatabase.\nVectorDatabaseObject[\"name\"] represents the database with the specified name in the VectorDatabaseObjects[] list.\nVectorDatabaseObject[source] attempts to recreate a VectorDatabaseObject from source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDatabaseObject)))
(def VectorDatabaseObjects "VectorDatabaseObjects[] returns a list with all the known instances instances of VectorDatabaseObject.\nVectorDatabaseObjects[patt] returns a list of databases with the name matching the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDatabaseObjects)))
(def VectorDatabaseSearch "VectorDatabaseSearch[db, vector] gives the element of the vector database db nearest to vector.\nVectorDatabaseSearch[db, vector, n] gives the n nearest vectors.\nVectorDatabaseSearch[db, vector, prop, n] returns the property prop associated with the result.\nVectorDatabaseSearch[db, vectorf, …] filters the results using the function f." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDatabaseSearch)))
(def VectorDensityPlot "VectorDensityPlot[{{vx, vy}, r}, {x, xmin, xmax}, {y, ymin, ymax}] generates a vector plot of the vector field {vx, vy} as a function of x and y, superimposed on a density plot of the scalar field r. \nVectorDensityPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] takes the scalar field to be the norm of the vector field.\nVectorDensityPlot[{{vx, vy}, {wx, wy}, …, r}, {x, xmin, xmax}, {y, ymin, ymax}] plots several vector fields. \nVectorDensityPlot[…, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDensityPlot)))
(def VectorDisplacementPlot "VectorDisplacementPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] generates a displacement plot for the vector field {vx, vy} as a function of x and y.\nVectorDisplacementPlot[{vx, vy}, {x, y}∈reg] plots the displacement over the geometric region reg.\nVectorDisplacementPlot[{{vx, vy}, s}, …] uses the scalar field s to style the displacement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDisplacementPlot)))
(def VectorDisplacementPlot3D "VectorDisplacementPlot3D[{vx, vy, vz}, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a displacement plot of the vector field {vx, vy, vz} as a function of x, y and z.\nVectorDisplacementPlot3D[{vx, vy, vz}, {x, y, z}∈reg] plots the displacement over the geometric region reg.\nVectorDisplacementPlot3D[{{vx, vy, vz}, s}, …] uses the scalar field s to style the displacement." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorDisplacementPlot3D)))
(def VectorGreater "xy or VectorGreater[{x, y}] yields True for vectors of length n if xi>yi for all components 1≤i≤n.\nxκy or VectorGreater[{x, y}, κ] yields True for x and y if x-y∈interior(κ), where κ is a proper convex cone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorGreater)))
(def VectorGreaterEqual "xy or VectorGreaterEqual[{x, y}] yields True for vectors of length n if xi≥yi for all components 1≤i≤n.\nxκy or VectorGreaterEqual[{x, y}, κ] yields True for x and y if x-y∈κ, where κ is a proper convex cone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorGreaterEqual)))
(def VectorLess "xy or VectorLess[{x, y}] yields True for vectors of length n if xi<yi for all components 1≤i≤n.\nxκy or VectorLess[{x, y}, κ] yields True for x and y if y-x∈interior(κ), where κ is a proper convex cone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorLess)))
(def VectorLessEqual "xy or VectorLessEqual[{x, y}] yields True for vectors of length n if xi≤yi for all components 1≤i≤n.\nxκy or VectorLessEqual[{x, y}, κ] yields True for x and y if y-x∈κ, where κ is a proper convex cone." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorLessEqual)))
(def VectorMarkers "VectorMarkers is an option for graphics functions like VectorPlot, ListVectorPlot and related functions that specifies what markers to draw at the field points plotted." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorMarkers)))
(def VectorPlot "VectorPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] generates a vector plot of the vector field {vx, vy} as a function of x and y. \nVectorPlot[{{vx, vy}, {wx, wy}, …}, {x, xmin, xmax}, {y, ymin, ymax}] plots several vector fields. \nVectorPlot[…, {x, y}∈reg] takes the variables {x, y} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorPlot)))
(def VectorPlot3D "VectorPlot3D[{vx, vy, vz}, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a 3D vector plot of the vector field {vx, vy, vz} as a function of x, y, and z.\nVectorPlot3D[{field1, field2, …}, {x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] plots several vector fields.\nVectorPlot3D[…, {x, y, z}∈reg] takes the variables {x, y, z} to be in the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorPlot3D)))
(def VectorPoints "VectorPoints is an option to VectorPlot, ListVectorPlot, and related functions that determines where to draw arrows." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorPoints)))
(def VectorQ "VectorQ[expr] gives True if expr is a list or a one‐dimensional SparseArray object, none of whose elements are themselves lists, and gives False otherwise. \nVectorQ[expr, test] gives True only if test yields True when applied to each of the elements in expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorQ)))
(def VectorRange "VectorRange is an option for VectorPlot and related functions that specifies the range of vector magnitudes to include in a plot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorRange)))
(def VectorScaling "VectorScaling is an option for VectorPlot and related functions that determines how the magnitudes of vectors are scaled for visualization." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorScaling)))
(def VectorSizes "VectorSizes is an option for VectorPlot and related functions that specifies the range of sizes used for arrows." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorSizes)))
(def VectorStyle "VectorStyle is an option to VectorPlot, ListVectorPlot, and related functions that determines the style to use for drawing field vectors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorStyle)))
(def VectorSymbol "VectorSymbol[v] represents a vector with name v.\nVectorSymbol[v, d] represents a vector of length d.\nVectorSymbol[v, d, dom] represents a vector with elements in the domain dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VectorSymbol)))
(def Vectors "Vectors[d] represents the domain of vectors of dimension d.\nVectors[d, dom] represents the domain of vectors of dimension d, with components in the domain dom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Vectors)))
(def Vee "Vee[x, y, …] displays as x⋁y⋁…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Vee)))
(def Verbatim "Verbatim[expr] represents expr in pattern matching, requiring that expr be matched exactly as it appears, with no substitutions for blanks or other transformations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Verbatim)))
(def VerificationTest "VerificationTest[input] runs a verification test to determine whether input evaluates to True.\nVerificationTest[input, expected] tests whether input evaluates to expected, without issuing messages.\nVerificationTest[input, expected, messages] tests whether input evaluates to expected, generating the list of message names messages." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerificationTest)))
(def VerifyConvergence "VerifyConvergence is an option to Sum, NSum, and similar functions that specifies whether convergence checking should be done." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyConvergence)))
(def VerifyDerivedKey "VerifyDerivedKey[key, password] verifies that password matches the password used to generate the derived key." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyDerivedKey)))
(def VerifyDigitalSignature "VerifyDigitalSignature[{expr, sig}, key] verifies the digital signature sig for expr using the specified public key.\nVerifyDigitalSignature[{{expr1, sig1}, {expr2, sig2}, …}, key] verifies the digital signatures sigi for each of the expri, all using the specified public key.\nVerifyDigitalSignature[key] is an operator form of VerifyDigitalSignature, suitable for application to {expr, sig} or a list of such pairs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyDigitalSignature)))
(def VerifyFileSignature "VerifyFileSignature[{\"file\", sig}, key] verifies the digital signature sig for file using the specified public key.\nVerifyFileSignature[{\"file\", range, sig}, key] verifies the digital signature sig for the specified range of bytes in the file.\nVerifyFileSignature[{{file1, range1, sig1}, {file2, range2, sig2}, …}, key] verifies the digital signatures sigi for each of rangei of bytes in the filei, all using the specified public key.\nVerifyFileSignature[key] represents an operator form of VerifyFileSignature that can be applied to files." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyFileSignature)))
(def VerifyInterpretation "VerifyInterpretation is an option for TextCases, TextPosition and TextContents that verifies that results can be interpreted using Interpreter and related functions and drops those that cannot." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyInterpretation)))
(def VerifyMatrixGameStrategy "VerifyMatrixGameStrategy[mgame, strat] verifies that the strategy profile strat is a Nash equilibrium for the matrix game mgame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyMatrixGameStrategy)))
(def VerifySecurityCertificates "VerifySecurityCertificates is an option for URLRead and related functions that specifies whether to verify security certificates when making an HTTPS connection." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifySecurityCertificates)))
(def VerifySolutions "VerifySolutions is an option to Solve and related functions that controls whether to verify solutions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifySolutions)))
(def VerifyTestAssumptions "VerifyTestAssumptions is an option to LocationTest and similar functions that controls which assumptions to verify through diagnostic tests." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyTestAssumptions)))
(def VerifyTreeGameStrategy "VerifyTreeGameStrategy[tgame, strat] verifies that the strategy profile strat is a subgame perfect equilibrium for the tree game tgame." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerifyTreeGameStrategy)))
(def VersionedPreferences "VersionedPreferences is a global front end option that specifies whether settings on $FrontEnd should be sandboxed to specific versions of the Wolfram System." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VersionedPreferences)))
(def VertexAdd "VertexAdd[g, v] makes a graph by adding the vertex v to the graph g.\nVertexAdd[g, {v1, v2, …}] adds a collection of vertices to g.\nVertexAdd[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexAdd)))
(def VertexCapacity "VertexCapacity is an option and annotation for Graph and related functions that specifies a vertex capacity." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCapacity)))
(def VertexChromaticNumber "VertexChromaticNumber[g] gives the chromatic number for the vertices of the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexChromaticNumber)))
(def VertexColors "VertexColors is an option for graphics primitives which specifies the colors to assign to vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexColors)))
(def VertexComponent "VertexComponent[g, {v1, v2, …}] gives the vertices in the graph g that have a path to at least one of v1, v2, … .\nVertexComponent[g, {v1, v2, …}, k] gives the vertices with a path to at least one of v1, v2, … of at most length k.\nVertexComponent[g, {v1, v2, …}, {k}] gives the vertices at length exactly k.\nVertexComponent[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexComponent)))
(def VertexConnectivity "VertexConnectivity[g] gives the vertex connectivity of the graph g.\nVertexConnectivity[g, s, t] gives the s-t vertex connectivity of the graph g.\nVertexConnectivity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexConnectivity)))
(def VertexContract "VertexContract[g, {v1, v2, …}] contracts a collection of vertices v1, v2, … into a single vertex of the graph g.\nVertexContract[g, {{v1, v2, …}, …}] contracts several collections of vertices. \nVertexContract[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexContract)))
(def VertexCoordinates "VertexCoordinates is an option to Graph and related functions that specifies the coordinates to use to place the center of vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCoordinates)))
(def VertexCorrelationSimilarity "VertexCorrelationSimilarity[g, u, v] gives the correlation similarity between vertices u and v of the graph g.\nVertexCorrelationSimilarity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCorrelationSimilarity)))
(def VertexCosineSimilarity "VertexCosineSimilarity[g, u, v] gives the cosine similarity between vertices u and v of the graph g.\nVertexCosineSimilarity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCosineSimilarity)))
(def VertexCount "VertexCount[g] gives a count of the number of vertices in the graph g.\nVertexCount[g, patt] gives a count of the number of vertices that match the pattern patt.\nVertexCount[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCount)))
(def VertexCoverQ "VertexCoverQ[g, vlist] yields True if the vertex list vlist is a vertex cover of the graph g, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexCoverQ)))
(def VertexDataCoordinates "VertexDataCoordinates is an option to Raster3D that determines how to map data to the displayed range." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexDataCoordinates)))
(def VertexDegree "VertexDegree[g] gives the list of vertex degrees for all vertices in the graph g.\nVertexDegree[g, v] gives the vertex degree for the vertex v.\nVertexDegree[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexDegree)))
(def VertexDelete "VertexDelete[g, v] makes a graph by deleting the vertex ν and all edges connected to v from the graph g.\nVertexDelete[g, {v1, v2, …}] deletes a collection of vertices from g.\nVertexDelete[g, patt] deletes all vertices that match the pattern patt.\nVertexDelete[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexDelete)))
(def VertexDiceSimilarity "VertexDiceSimilarity[g, u, v] gives the Dice similarity between vertices u and v of the graph g.\nVertexDiceSimilarity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexDiceSimilarity)))
(def VertexEccentricity "VertexEccentricity[g, s] gives the length of the longest shortest path from the source s to every other vertex in the graph g.\nVertexEccentricity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexEccentricity)))
(def VertexInComponent "VertexInComponent[g, {v1, v2, …}, k] gives the vertices with a directed path to at least one of v1, v2, … of at most length k.\nVertexInComponent[g, {v1, v2, …}, {k}] gives the vertices at length exactly k.\nVertexInComponent[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexInComponent)))
(def VertexInComponentGraph "VertexInComponentGraph[g, {v1, v2, …}] gives the subgraph of the graph g generated by the vertices that have a directed path to at least one of v1, v2, ….\nVertexInComponentGraph[g, {v1, v2, …}, k] gives the subgraph of g generated by vertices with a directed path of at most length k to at least one of v1, v2, ….\nVertexInComponentGraph[g, {v1, v2, …}, {k}] gives the subgraph of g generated by vertices of length exactly k.\nVertexInComponentGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexInComponentGraph)))
(def VertexInDegree "VertexInDegree[g] gives the list of vertex in-degrees for all vertices in the graph g.\nVertexInDegree[g, v] gives the vertex in-degree for the vertex v.\nVertexInDegree[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexInDegree)))
(def VertexIndex "VertexIndex[g, v] gives the integer index for the vertex v in the graph g.\nVertexIndex[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexIndex)))
(def VertexJaccardSimilarity "VertexJaccardSimilarity[g, u, v] gives the Jaccard similarity between vertices u and v of the graph g.\nVertexJaccardSimilarity[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexJaccardSimilarity)))
(def VertexLabelStyle "VertexLabelStyle is an option and property for Graph and related functions that specifies the style to use for vertex labels." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexLabelStyle)))
(def VertexLabels "VertexLabels is an option and annotation for Graph and related functions that specifies what labels and label positions should be used for vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexLabels)))
(def VertexList "VertexList[g] gives the list of vertices for the graph g.\nVertexList[g, patt] gives a list of vertices that match the pattern patt.\nVertexList[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexList)))
(def VertexNormals "VertexNormals is an option for graphics primitives which specifies the normal directions to assign to 3D vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexNormals)))
(def VertexOutComponent "VertexOutComponent[g, {v1, v2, …}] gives the vertices in the graph g that have a directed path from at least one of v1, v2, ….\nVertexOutComponent[g, {v1, v2, …}, k] gives the vertices with a directed path from at least one of v1, v2, … of at most length k.\nVertexOutComponent[g, {v1, v2, …}, {k}] gives the vertices at length exactly k.\nVertexOutComponent[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexOutComponent)))
(def VertexOutComponentGraph "VertexOutComponentGraph[g, {v1, v2, …}] gives the subgraph of the graph g generated by the vertices that have a directed path from at least one of v1, v2, ….\nVertexOutComponentGraph[g, {v1, v2, …}, k] gives the subgraph of g generated by vertices with a directed path of at most length k from at least one of v1, v2, ….\nVertexOutComponentGraph[g, {v1, v2, …}, {k}] gives the subgraph of g generated by vertices of length exactly k.\nVertexOutComponentGraph[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexOutComponentGraph)))
(def VertexOutDegree "VertexOutDegree[g] gives the list of vertex out-degrees for all vertices in the graph g.\nVertexOutDegree[g, v] gives the vertex out-degree for the vertex v.\nVertexOutDegree[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexOutDegree)))
(def VertexQ "VertexQ[g, v] yields True if v is a vertex in the graph g and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexQ)))
(def VertexReplace "VertexReplace[g, {v1w1, v2w2, …}] replaces each vertex vi in the graph g by wi.\nVertexReplace[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexReplace)))
(def VertexShape "VertexShape is an option and property for Graph and related functions that specifies the graphics used for vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexShape)))
(def VertexShapeFunction "VertexShapeFunction is an option and annotation for Graph and related functions that specifies a function to use to generate primitives for rendering each vertex." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexShapeFunction)))
(def VertexSize "VertexSize is an option and property for Graph and related functions that specifies the size used for vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexSize)))
(def VertexStyle "VertexStyle is an option and annotation for Graph and related functions that specifies what style to use for vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexStyle)))
(def VertexTextureCoordinates "VertexTextureCoordinates is an option for graphics primitives that specifies the texture coordinates to assign to vertices." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexTextureCoordinates)))
(def VertexTransitiveGraphQ "VertexTransitiveGraphQ[g] yields True if the graph g is a vertex–transitive graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexTransitiveGraphQ)))
(def VertexWeight "VertexWeight is an option and annotation for Graph and related functions that specifies a vertex weight." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexWeight)))
(def VertexWeightedGraphQ "VertexWeightedGraphQ[g] yields True if the graph g is a vertex-weighted graph, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VertexWeightedGraphQ)))
(def VerticalBar "VerticalBar[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerticalBar)))
(def VerticalGauge "VerticalGauge[value] draws a linear gauge showing value in a range of 0 to 1.\nVerticalGauge[value, {min, max}] draws a linear gauge showing value in a range of min to max.\nVerticalGauge[Dynamic[value], …] allows value to be set interactively using the gauge.\nVerticalGauge[{value1, value2, …}, …] draws a gauge showing multiple values." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerticalGauge)))
(def VerticalSeparator "VerticalSeparator[x, y, …] displays as xy…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerticalSeparator)))
(def VerticalSlider "VerticalSlider[y] represents a vertical slider at position y with range 0 to 1. \nVerticalSlider[Dynamic[y]] takes the position to be the dynamically updated current value of y, with the value of y being reset if the slider is moved. \nVerticalSlider[y, {ymin, ymax}] represents a vertical slider with range ymin to ymax. \nVerticalSlider[y, {ymin, ymax, dy}] represents a vertical slider that jumps in steps dy. \nVerticalSlider[y, {{e1, e2, …}}] represents a slider in which equally spaced intervals correspond to successive settings ei. \nVerticalSlider[y, {{{e1, h1}, {e2, h2}, …}}] uses intervals of relative heights hi for the ei." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerticalSlider)))
(def VerticalTilde "VerticalTilde[x, y, …] displays as x≀y≀…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VerticalTilde)))
(def Video "Video[file] represents video stored in the given file.\nVideo[url] represents video stored in the given URL." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Video)))
(def VideoCapture "VideoCapture[] creates a temporary interactive interface for capturing a video from an imaging device.\nVideoCapture[Dynamic[var]] creates a non-blocking asynchronous interface to capture video and saves the result in var." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoCapture)))
(def VideoCombine "VideoCombine[{obj1, obj2, …}] creates a multi-track video by combining all audio, video and subtitle tracks in all obji." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoCombine)))
(def VideoDelete "VideoDelete[video, t] deletes the first t seconds of video.\nVideoDelete[video, -t] deletes the last t seconds of video.\nVideoDelete[video, {t1, t2}] deletes from time t1 to time t2, returning the remaining video as a single Video object.\nVideoDelete[video, {{t11, t12}, …}] deletes multiple time intervals." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoDelete)))
(def VideoEncoding "VideoEncoding is an option for Export and other functions that specifies the video encoding to use when creating a video file." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoEncoding)))
(def VideoExtractFrames "VideoExtractFrames[video, t] extracts a frame at time t from video.\nVideoExtractFrames[video, tspec] extracts video frames at time specification tspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoExtractFrames)))
(def VideoExtractTracks "VideoExtractTracks[video] returns a list of video, audio and subtitle tracks of video.\nVideoExtractTracks[video, \"type\"] returns tracks from video of a given \"type\".\nVideoExtractTracks[video, trackspec] returns tracks specified by trackspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoExtractTracks)))
(def VideoFrameFold "VideoFrameFold[f, img0, video] gives a video whose frames are {f[img0, img1], f[f[img0, img1], img2], …}, where imgi are frames of video.\nVideoFrameFold[f, video] assumes the first frame to be the initial frame.\nVideoFrameFold[f, img0, video, n] uses partitions of n frames of the video for each step.\nVideoFrameFold[f, img0, video, n, d] uses partitions of n frames with offset of d frames for each step." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoFrameFold)))
(def VideoFrameList "VideoFrameList[video, n] gives a list of n images extracted from video.\nVideoFrameList[video, spec] gives a list of frames extracted based on spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoFrameList)))
(def VideoFrameMap "VideoFrameMap[f, video] applies f to each frame of the Video object video, returning a new Video object.\nVideoFrameMap[f, video, n] applies f to overlapping partitions of n video frames.\nVideoFrameMap[f, video, n, d] applies f to partitions with offset d.\nVideoFrameMap[f, {video1, video2, …}, …] applies f to a list of inputs extracted from each videoi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoFrameMap)))
(def VideoGenerator "VideoGenerator[imagespec] generates a video with frames generated from imagespec.\nVideoGenerator[<|\"Image\"imagespec, \"Audio\"audiospec|>] returns a video with audio data generated from audioexpr.\nVideoGenerator[…, dur] generates a video of duration dur." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoGenerator)))
(def VideoInsert "VideoInsert[video, tnew] inserts the video new at time t.\nVideoInsert[video, {t1, t2, …}new] inserts the same video at multiple positions.\nVideoInsert[video, {t1new1, …}] inserts multiple videos at different positions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoInsert)))
(def VideoIntervals "VideoIntervals[video, crit] returns time intervals of video for which the criterion crit is satisfied.\nVideoIntervals[video, crit, n] evaluates criterion crit on partitions of n video frames.\nVideoIntervals[video, crit, n, d] evaluates crit on partitions with offset d.\nVideoIntervals[{video1, video2, …}, crit, …] applies crit to a list of inputs extracted from each videoi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoIntervals)))
(def VideoJoin "VideoJoin[video1, video2, …] concatenates all videoi and returns a video object." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoJoin)))
(def VideoMap "VideoMap[f, video] applies f to partial video and audio data corresponding to one frame of video, returning a new video.\nVideoMap[f, video, n] applies f to data corresponding to overlapping partitions of n video frames.\nVideoMap[f, video, n, d] applies f to partitions with offset d.\nVideoMap[f, {video1, video2, …}, …] applies f to a list of inputs extracted from each videoi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoMap)))
(def VideoMapList "VideoMapList[f, video] applies f to a chunk of data corresponding to one frame from the Video object video, returning a list of results.\nVideoMapList[f, video, n] applies f to overlapping partitions corresponding to n video frames.\nVideoMapList[f, video, n, d] applies f to partitions with offset d.\nVideoMapList[f, {video1, video2, …}, …] applies f to a list of inputs extracted from each videoi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoMapList)))
(def VideoMapTimeSeries "VideoMapTimeSeries[f, video] applies f to each frame of the Video object video, returning a time series.\nVideoMapTimeSeries[f, video, n] applies f to overlapping partitions of n video frames.\nVideoMapTimeSeries[f, video, n, d] applies f to partitions with offset d.\nVideoMapTimeSeries[f, {video1, video2, …}, …] applies f to a list of inputs extracted from each videoi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoMapTimeSeries)))
(def VideoObjectTracking "VideoObjectTracking[video] detects objects of interest in video and tracks them over video frames.\nVideoObjectTracking[objects] corresponds to and tracks objects, assuming they are from video frames.\nVideoObjectTracking[…detector] uses detector to find objects of interest in the input." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoObjectTracking)))
(def VideoPadding "VideoPadding is an option for GridVideo and other video functions to specify how to pad video frames when input videos have different durations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoPadding)))
(def VideoPause "VideoPause[] pauses the playback of all VideoStream objects.\nVideoPause[vstream] pauses the playback of the VideoStream object vstream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoPause)))
(def VideoPlay "VideoPlay[video] returns a new VideoStream object from video and starts the playback.\nVideoPlay[vstream] starts playing a VideoStream object vstream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoPlay)))
(def VideoQ "VideoQ[video] yields True if video has the form of a valid Video object, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoQ)))
(def VideoRecord "VideoRecord[source] creates a VideoStream object and records from source.\nVideoRecord[vstream] starts recording a VideoStream object vstream that is connected to an imaging device, a screen or a notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoRecord)))
(def VideoReplace "VideoReplace[video, {t1, t2}new] replaces the video between t1 and t2 with the new video new.\nVideoReplace[video, {{t11, t12}, …}new] replaces multiple intervals with the same video new.\nVideoReplace[video, {{t11, t12}new1, …}] replaces multiple intervals.\nVideoReplace[video, …, durfitting] uses the specified durfitting method to replace an interval of a different duration." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoReplace)))
(def VideoScreenCapture "VideoScreenCapture[] creates a temporary interactive interface for capturing from the main screen into a video.\nVideoScreenCapture[source] captures from a screen or part of a screen specified by source.\nVideoScreenCapture[Dynamic[var]] creates a non-blocking asynchronous interface to capture video and saves the result in var.\nVideoScreenCapture[Dynamic[var], source] captures asynchronously from the specified source." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoScreenCapture)))
(def VideoSplit "VideoSplit[video, t] splits video at time t.\nVideoSplit[video, {t1, t2, …}] splits video at times ti." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoSplit)))
(def VideoStop "VideoStop[] stops the playback of all VideoStream objects.\nVideoStop[vstream] stops the playback of the VideoStream object vstream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoStop)))
(def VideoStream "VideoStream[source] creates a new VideoStream object from source.\nVideoStream[id] is an object that represents a unique video stream." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoStream)))
(def VideoStreams "VideoStreams[] returns all existing video streams." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoStreams)))
(def VideoSummaryPlot "VideoSummaryPlot[video] plots a summary of video and audio tracks of video.\nVideoSummaryPlot[video, layout] lays out the video frames according to the provided layout." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoSummaryPlot)))
(def VideoTimeStretch "VideoTimeStretch[video, spec] applies time stretching to video using the specified spec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTimeStretch)))
(def VideoTrackSelection "VideoTrackSelection is an option that specifies the video tracks of interest." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTrackSelection)))
(def VideoTranscode "VideoTranscode[video, \"format\"] converts video to the specified format.\nVideoTranscode[video, service] converts video to the specification recommended by the specified service.\nVideoTranscode[{v1, v2, …}, …] converts all vi videos to have conforming properties with respect to the given specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTranscode)))
(def VideoTranscribe "VideoTranscribe[video] recognizes speech in an audio track and adds it to video as a subtitle track." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTranscribe)))
(def VideoTransparency "VideoTransparency is an option that specifies whether to create a video with a transparency channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTransparency)))
(def VideoTrim "VideoTrim[video, t] returns the first t seconds of video.\nVideoTrim[video, -t] returns the last t seconds of video.\nVideoTrim[video, {t1, t2}] returns video starting at time t1 and ending at time t2 of video.\nVideoTrim[video, {{t11, t12}, …}] returns a list of video objects for all given intervals {t i1, t i2}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VideoTrim)))
(def ViewAngle "ViewAngle is an option for Graphics3D and related functions that gives the opening angle for a simulated camera used to view the three-dimensional scene." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewAngle)))
(def ViewCenter "ViewCenter is an option for Graphics3D and related functions which gives the scaled coordinates of the point which should appear at the center of the final image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewCenter)))
(def ViewMatrix "ViewMatrix is an option for Graphics3D and related functions that can be used to specify a pair of explicit homogeneous transformation and projection matrices for 3D coordinates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewMatrix)))
(def ViewPoint "ViewPoint is an option for Graphics3D and related functions which gives the point in space from which three‐dimensional objects are to be viewed." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewPoint)))
(def ViewProjection "ViewProjection is an option for three-dimensional graphics that specifies the projection to use for the graphic." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewProjection)))
(def ViewRange "ViewRange is an option for Graphics3D and related functions which specifies the range of distances from the view point to be included in displaying a three-dimensional scene." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewRange)))
(def ViewVector "ViewVector is an option for Graphics3D and related functions which specifies the position and direction of a simulated camera used to view three-dimensional objects." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewVector)))
(def ViewVertical "ViewVertical is an option for Graphics3D and related functions which specifies what direction in scaled coordinates should be vertical in the final image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ViewVertical)))
(def Visible "Visible is a notebook option which specifies whether the notebook should be explicitly displayed on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Visible)))
(def VoiceStyleData "VoiceStyleData[] gives the list of available voices for speech synthesis.\nVoiceStyleData[voice] returns all properties for the specified voice.\nVoiceStyleData[voice, prop] returns the specified property prop for voice." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VoiceStyleData)))
(def VoigtDistribution "VoigtDistribution[δ, σ] represents Voigt distribution with parameters δ and σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VoigtDistribution)))
(def VolcanoData "VolcanoData[entity, property] gives the value of the specified property for the volcano entity.\nVolcanoData[{entity1, entity2, …}, property] gives a list of property values for the specified volcano entities.\nVolcanoData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VolcanoData)))
(def Volume "Volume[reg] gives the volume of the three-dimensional region reg.\nVolume[{x1, …, xn}, {s, smin, smax}, {t, tmin, tmax}, {u, umin, umax}] gives the volume of the parametrized region whose Cartesian coordinates xi are functions of s, t, u.\nVolume[{x1, …, xn}, {s, smin, smax}, {t, tmin, tmax}, {u, umin, umax}, chart] interprets the xi as coordinates in the specified coordinate chart." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Volume)))
(def VonMisesDistribution "VonMisesDistribution[μ, κ] represents a von Mises distribution with mean μ and concentration κ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VonMisesDistribution)))
(def VonMisesStress "VonMisesStress[vars, pars, stress] yields the vonMises stress from stress." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VonMisesStress)))
(def VoronoiMesh "VoronoiMesh[{p1, …, pn}] gives a MeshRegion representing the Voronoi mesh from the points p1, p2, ….\nVoronoiMesh[{p1, …, pn}, {{xmin, xmax}, …}] clips the mesh to the bounds [xmin, xmax]×⋯." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote VoronoiMesh)))
(def WaitAll "WaitAll[expr] waits for all concurrent evaluations represented by EvaluationObject expressions in expr to finish, then returns the resulting expression obtained." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaitAll)))
(def WaitNext "WaitNext[{eid1, eid2, …}] waits until the first evaluation represented by any of the eidi finishes, then returns its result, the corresponding eidi, and the list of remaining eidk. \nWaitNext[{eid1, eid2, …}, h] wraps the head h around the result before returning it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaitNext)))
(def WakebyDistribution "WakebyDistribution[α, β, γ, δ, μ] represents Wakeby distribution with shape parameters β and δ, scale parameters α and γ, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WakebyDistribution)))
(def WalleniusHypergeometricDistribution "WalleniusHypergeometricDistribution[n, nsucc, ntot, w] represents a Wallenius noncentral hypergeometric distribution." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WalleniusHypergeometricDistribution)))
(def WaringYuleDistribution "WaringYuleDistribution[α] represents the Yule distribution with shape parameter α.\nWaringYuleDistribution[α, β] represents the Waring distribution with shape parameters α and β." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaringYuleDistribution)))
(def WarpingCorrespondence "WarpingCorrespondence[s1, s2] gives the time warping (DTW) similarity path between sequences s1 and s2.\nWarpingCorrespondence[s1, s2, win] uses a window specified by win for local search." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WarpingCorrespondence)))
(def WarpingDistance "WarpingDistance[s1, s2] gives the dynamic time warping (DTW) distance between sequences s1 and s2.\nWarpingDistance[s1, s2, win] uses a window specified by win for local search." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WarpingDistance)))
(def WatershedComponents "WatershedComponents[image] computes the watershed transform of image, returning the result as an array in which positive integers label the catchment basins.\nWatershedComponents[image, marker] uses a binary image marker to indicate regions where basins may be created.\nWatershedComponents[video, …] computes watershed segmentation on frames of video." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WatershedComponents)))
(def WatsonUSquareTest "WatsonUSquareTest[data] tests whether data is normally distributed using the Watson U^2 test.\nWatsonUSquareTest[data, dist] tests whether data is distributed according to dist using the Watson U^2 test.\nWatsonUSquareTest[data, dist, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WatsonUSquareTest)))
(def WattsStrogatzGraphDistribution "WattsStrogatzGraphDistribution[n, p] represents the Watts–Strogatz graph distribution for n-vertex graphs with rewiring probability p.\nWattsStrogatzGraphDistribution[n, p, k] represents the Watts–Strogatz graph distribution for n-vertex graphs with rewiring probability p starting from a 2k-regular graph." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WattsStrogatzGraphDistribution)))
(def WavePDEComponent "WavePDEComponent[vars, pars] yields a wave equation PDE term ∂u^2/∂t^2-c^2 ∇^2{x1, …, xn}u with model variables vars and model parameters pars." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WavePDEComponent)))
(def WaveletBestBasis "WaveletBestBasis[dwd] computes a best basis representation in the DiscreteWaveletData object dwd.\nWaveletBestBasis[dwd, cspec] computes a best basis representation using the cost specification cspec." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletBestBasis)))
(def WaveletFilterCoefficients "WaveletFilterCoefficients[wave, filt] gives the filter coefficients for the symbolic wavelet wave of type filt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletFilterCoefficients)))
(def WaveletImagePlot "WaveletImagePlot[dwd] plots the basis tree of wavelet image coefficients in the DiscreteWaveletData dwd.\nWaveletImagePlot[dwd, r] plots coefficients up to refinement level r.\nWaveletImagePlot[dwd, r, ifunc] applies the image function ifunc to coefficients and wavelet indexes before plotting." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletImagePlot)))
(def WaveletListPlot "WaveletListPlot[dwd] plots wavelet transform coefficients in the DiscreteWaveletData dwd.\nWaveletListPlot[dwd, wind] plots wavelet transform coefficients corresponding to the wavelet index specification wind.\nWaveletListPlot[dwd, wind, func] applies func to coefficients before plotting. \nWaveletListPlot[{dwd1, dwd2, …}, …] plots wavelet transform coefficients from several DiscreteWaveletData objects dwd1, dwd2, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletListPlot)))
(def WaveletMapIndexed "WaveletMapIndexed[f, wd] applies the function f to the arrays of coefficients and indices of a ContinuousWaveletData or DiscreteWaveletData object.\nWaveletMapIndexed[f, dwd, wind] applies f to the DiscreteWaveletData coefficients specified by wind.\nWaveletMapIndexed[f, cwd, octvoc] applies f to the ContinuousWaveletData coefficients specified by octvoc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletMapIndexed)))
(def WaveletMatrixPlot "WaveletMatrixPlot[dwd] plots the basis tree of wavelet matrix coefficients in the DiscreteWaveletData dwd.\nWaveletMatrixPlot[dwd, r] plots coefficients up to refinement level r.\nWaveletMatrixPlot[dwd, r, func] applies func to coefficients before plotting." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletMatrixPlot)))
(def WaveletPhi "WaveletPhi[wave, x] gives the scaling function ϕ(x) for the symbolic wavelet wave evaluated at x.\nWaveletPhi[wave] gives the scaling function as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletPhi)))
(def WaveletPsi "WaveletPsi[wave, x] gives the wavelet function ψ(x) for the symbolic wavelet wave evaluated at x.\nWaveletPsi[wave] gives the wavelet function as a pure function." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletPsi)))
(def WaveletScale "WaveletScale is an option for ContinuousWaveletTransform and related constructs used to specify the smallest resolvable scale." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletScale)))
(def WaveletScalogram "WaveletScalogram[wd] plots wavelet vector coefficients in a DiscreteWaveletData or ContinuousWaveletData object wd.\nWaveletScalogram[wd, wind] plots wavelet coefficients corresponding to the wavelet index specification wind.\nWaveletScalogram[wd, wind, func] applies func to coefficients before plotting." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletScalogram)))
(def WaveletThreshold "WaveletThreshold[dwd] thresholds the detail wavelet coefficients in the DiscreteWaveletData object dwd.\nWaveletThreshold[dwd, tspec] thresholds the coefficients using the thresholding specification tspec.\nWaveletThreshold[dwd, tspec, wind] thresholds the wavelet coefficients given by the wavelet indices wind." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WaveletThreshold)))
(def WeakStationarity "WeakStationarity[proc] gives conditions for the process proc to be weakly stationary." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeakStationarity)))
(def WeaklyConnectedComponents "WeaklyConnectedComponents[g] gives the weakly connected components of the graph g.\nWeaklyConnectedComponents[g, {v1, v2, …}] gives the weakly connected components that include at least one of the vertices v1, v2, ….\nWeaklyConnectedComponents[g, patt] gives the connected components that include a vertex that matches the pattern patt.\nWeaklyConnectedComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeaklyConnectedComponents)))
(def WeaklyConnectedGraphComponents "WeaklyConnectedGraphComponents[g] gives the weakly connected components of the graph g.\nWeaklyConnectedGraphComponents[g, {v1, v2, …}] gives the weakly connected components that include at least one of the vertices v1, v2, … .\nWeaklyConnectedGraphComponents[g, patt] gives the connected components that include a vertex that matches the pattern patt.\nWeaklyConnectedGraphComponents[{vw, …}, …] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeaklyConnectedGraphComponents)))
(def WeaklyConnectedGraphQ "WeaklyConnectedGraphQ[g] yields True if the graph g is weakly connected, and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeaklyConnectedGraphQ)))
(def WeatherData "WeatherData[loc, \"property\"] gives the most recent measurement for the specified weather property at the location corresponding to loc.\nWeatherData[loc, \"property\", date] gives all measurements during the specified date.\nWeatherData[loc, \"property\", {start, end}] gives a list of dates and measurements for the time interval start to end.\nWeatherData[loc, \"property\", {start, end, step}] gives measurements aggregated over the time period represented by step." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeatherData)))
(def WeatherForecastData "WeatherForecastData[loc] gives the most recent forecast for all weather forecast properties for the specified location.\nWeatherForecastData[prop] gives the forecast for the specified property for the current location.\nWeatherForecastData[date] gives the forecast at the time or times specified by date for all properties at the current location.\nWeatherForecastData[loc, prop] gives the forecast for the property at the specified location.\nWeatherForecastData[loc, prop, datespec] gives the forecast at the time or times specified by datespec for the property at the location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeatherForecastData)))
(def WebAudioSearch "WebAudioSearch[\"string\"] gives a dataset of the top web audio search results for the specified literal string.\nWebAudioSearch[query] performs a web audio search using the specified query.\nWebAudioSearch[query, format] gives the elements of the web audio search specified by format.\nWebAudioSearch[query, format, crit] returns only audio results that satisfy crit." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebAudioSearch)))
(def WebColumn "WebColumn[{expr1, expr2, …}] represents an HTML column containing the expri.\nWebColumn[expr, options] displays with expr formatted using the specified option settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebColumn)))
(def WebElementObject "WebElementObject[…] represents an element of an open webpage operated on by WebExecute." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebElementObject)))
(def WebExecute "WebExecute[cmd] executes the command cmd in a web browser. \nWebExecute[{cmd1, cmd2, …}] executes a list of commands in sequence.\nWebExecute[session, cmds] executes cmds in the specified web session." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebExecute)))
(def WebImage "WebImage[url] gives an image of the webpage specified by url.\nWebImage[list] gives images specified by URLs in list." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebImage)))
(def WebImageSearch "WebImageSearch[\"string\"] gives a list of thumbnails of the top web image search results for the specified literal string.\nWebImageSearch[form] gives the top results obtained by doing the web image search specified by form.\nWebImageSearch[form, n] picks out the first n top results obtained by doing the web image search specified by form.\nWebImageSearch[form, elems] gives the elements of the web image search specified by elems.\nWebImageSearch[form, elems, n] picks out the first n elements of the web image search specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebImageSearch)))
(def WebItem "WebItem[expr] represents an HTML element containing expr.\nWebItem[expr, options] represents an HTML element formatted using the specified option settings. \nWebItem[XMLElement[expr, …], options] represents an XMLElement formatted using options." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebItem)))
(def WebRow "WebRow[{expr1, expr2, …}] represents an HTML row containing the expri.\nWebRow[expr, options] displays with expr formatted using the specified option settings." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebRow)))
(def WebSearch "WebSearch[\"string\"] gives a dataset of the top web search results for the specified literal string.\nWebSearch[form] gives the top results obtained by doing the web search specified by form.\nWebSearch[form, elems] gives the elements of the web search specified by elems." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebSearch)))
(def WebSessionObject "WebSessionObject[…] represents a web browser session started by StartWebSession for use with WebExecute." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebSessionObject)))
(def WebSessions "WebSessions[] gives the list of all active web sessions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebSessions)))
(def WebWindowObject "WebWindowObject[…] represents an open window or tab in a web browser." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WebWindowObject)))
(def WeberE "WeberE[ν, z] gives the Weber function Eν (z).\nWeberE[ν, μ, z] gives the associated Weber function E_ν^μ(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeberE)))
(def Wedge "Wedge[x, y, …] displays as x⋀y⋀…." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Wedge)))
(def Wednesday "Wednesday is a day of the week." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Wednesday)))
(def WeibullDistribution "WeibullDistribution[α, β] represents a Weibull distribution with shape parameter α and scale parameter β.\nWeibullDistribution[α, β, μ] represents a Weibull distribution with shape parameter α, scale parameter β, and location parameter μ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeibullDistribution)))
(def WeierstrassE1 "WeierstrassE1[{g2, g3}] gives the value e1 of the Weierstrass elliptic function ℘ at the half-period ω1 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassE1)))
(def WeierstrassE2 "WeierstrassE2[{g2, g3}] gives the value e2 of the Weierstrass elliptic function ℘ at the half-period ω2 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassE2)))
(def WeierstrassE3 "WeierstrassE3[{g2, g3}] gives the value e3 of the Weierstrass elliptic function ℘ at the half-period ω3 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassE3)))
(def WeierstrassEta1 "WeierstrassEta1[{g2, g3}] gives the value η1 of the Weierstrass zeta function ζ at the half-period ω1 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassEta1)))
(def WeierstrassEta2 "WeierstrassEta2[{g2, g3}] gives the value η2 of the Weierstrass zeta function ζ at the half-period ω2 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassEta2)))
(def WeierstrassEta3 "WeierstrassEta3[{g2, g3}] gives the value η3 of the Weierstrass zeta function ζ at the half-period ω3 (g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassEta3)))
(def WeierstrassHalfPeriodW1 "WeierstrassHalfPeriodW1[{g2, g3}] gives the half-period ω1 for Weierstrass elliptic functions corresponding to the invariants {g2, g3}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassHalfPeriodW1)))
(def WeierstrassHalfPeriodW2 "WeierstrassHalfPeriodW2[{g2, g3}] gives the half-period ω2 for the Weierstrass elliptic functions corresponding to the invariants {g2, g3}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassHalfPeriodW2)))
(def WeierstrassHalfPeriodW3 "WeierstrassHalfPeriodW3[{g2, g3}] gives the half-period ω3 for the Weierstrass elliptic functions corresponding to the invariants {g2, g3}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassHalfPeriodW3)))
(def WeierstrassHalfPeriods "WeierstrassHalfPeriods[{g2, g3}] gives the half‐periods {ω1, ω3} for Weierstrass elliptic functions corresponding to the invariants {g2, g3}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassHalfPeriods)))
(def WeierstrassInvariantG2 "WeierstrassInvariantG2[{ω, ω^′}] gives the invariant g2 for the Weierstrass elliptic functions corresponding to the half‐periods {ω, ω^′}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassInvariantG2)))
(def WeierstrassInvariantG3 "WeierstrassInvariantG3[{ω, ω^′}] gives the invariant g3 for the Weierstrass elliptic functions corresponding to the half‐periods {ω, ω^′}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassInvariantG3)))
(def WeierstrassInvariants "WeierstrassInvariants[{ω1, ω3}] gives the invariants {g2, g3} for Weierstrass elliptic functions corresponding to the half‐periods {ω1, ω3}." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassInvariants)))
(def WeierstrassP "WeierstrassP[u, {g2, g3}] gives the Weierstrass elliptic function ℘ (u;g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassP)))
(def WeierstrassPPrime "WeierstrassPPrime[u, {g2, g3}] gives the derivative of the Weierstrass elliptic function ℘ (u;g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassPPrime)))
(def WeierstrassSigma "WeierstrassSigma[u, {g2, g3}] gives the Weierstrass sigma function σ (u;g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassSigma)))
(def WeierstrassZeta "WeierstrassZeta[u, {g2, g3}] gives the Weierstrass zeta function ζ (u;g2, g3)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeierstrassZeta)))
(def WeightedAdjacencyGraph "WeightedAdjacencyGraph[wmat] gives the graph with weighted adjacency matrix wmat.\nWeightedAdjacencyGraph[{v1, v2, …}, wmat] gives the graph with vertices vi and weighted adjacency matrix wmat." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeightedAdjacencyGraph)))
(def WeightedAdjacencyMatrix "WeightedAdjacencyMatrix[g] gives the adjacency matrix of edge weights of the graph g.\nWeightedAdjacencyMatrix[{vw, …}] uses rules vw to specify the graph g." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeightedAdjacencyMatrix)))
(def WeightedData "WeightedData[{x1, x2, …}, {w1, w2, …}] represents observations xi with weights wi.\nWeightedData[{x1, x2, …}, fn] represents observations xi with weighting function fn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeightedData)))
(def WeightedGraphQ "WeightedGraphQ[g] yields True if the graph g is a weighted graph and False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WeightedGraphQ)))
(def Weights "Weights is an option for various fitting and other functions which specifies weights to associate with data elements." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Weights)))
(def WelchWindow "WelchWindow[x] represents a Welch window function of x.\nWelchWindow[x, α] uses the parameter α." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WelchWindow)))
(def WheelGraph "WheelGraph[n] gives the wheel graph with n vertices Wn." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WheelGraph)))
(def WhenEvent "WhenEvent[event, action] specifies an action that occurs when the event triggers it for equations in NDSolve and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhenEvent)))
(def Which "Which[test1, value1, test2, value2, …] evaluates each of the testi in turn, returning the value of the valuei corresponding to the first one that yields True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Which)))
(def While "While[test, body] evaluates test, then body, repetitively, until test first fails to give True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote While)))
(def White "White represents the color white in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote White)))
(def WhiteNoiseProcess "WhiteNoiseProcess[] represents a Gaussian white noise process with mean 0 and standard deviation 1.\nWhiteNoiseProcess[σ] represents a Gaussian white noise process with mean 0 and standard deviation σ.\nWhiteNoiseProcess[dist] represents a white noise process based on the distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhiteNoiseProcess)))
(def WhitePoint "WhitePoint is an option for ColorConvert, ChromaticityPlot and other functions to specify the white point." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhitePoint)))
(def Whitespace "Whitespace represents a sequence of whitespace characters in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Whitespace)))
(def WhitespaceCharacter "WhitespaceCharacter represents a single whitespace character in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhitespaceCharacter)))
(def WhittakerM "WhittakerM[k, m, z] gives the Whittaker function M k, m(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhittakerM)))
(def WhittakerW "WhittakerW[k, m, z] gives the Whittaker function W k, m(z)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WhittakerW)))
(def WienerFilter "WienerFilter[data, r] removes noise from data by applying a range-r Wiener filter.\nWienerFilter[data, r, ns] assumes an additive noise power value ns.\nWienerFilter[data, {r1, r2, …}, …] uses radius ri at level i in data." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WienerFilter)))
(def WienerProcess "WienerProcess[μ, σ] represents a Wiener process with a drift μ and volatility σ.\nWienerProcess[] represents a standard Wiener process with drift 0 and volatility 1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WienerProcess)))
(def WignerD "WignerD[{j, m1, m2}, ψ, θ, ϕ] gives the Wigner D-function D _m1, m2^j(ψ, θ, ϕ).\nWignerD[{j, m1, m2}, θ, ϕ] gives the Wigner D-function D _m1, m2^j(0, θ, ϕ).\nWignerD[{j, m1, m2}, θ] gives the Wigner D-function D _m1, m2^j(0, θ, 0)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WignerD)))
(def WignerSemicircleDistribution "WignerSemicircleDistribution[r] represents a Wigner semicircle distribution with radius r centered at the origin.\nWignerSemicircleDistribution[a, r] represents a Wigner semicircle distribution with radius r centered at a." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WignerSemicircleDistribution)))
(def WikidataData "WikidataData[item, property] gives the values of the specified property for the given item.\nWikidataData[{item1, item2, …}, property] gives values for each of the itemi.\nWikidataData[item, {property1, property2, …}] gives values for each of the propertyi.\nWikidataData[items, properties] gives values for each of the properties for each of the items." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WikidataData)))
(def WikidataSearch "WikidataSearch[\"keywords\"] returns a list of Wikidata items whose labels include the given keywords.\nWikidataSearch[\"type\"->\"keywords\"] returns a list of Wikidata identifiers of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WikidataSearch)))
(def WikipediaData "WikipediaData[article] gives the plain text of the specified Wikipedia article.\nWikipediaData[{article1, article2, ...}] gives the texts for each of the articles.\nWikipediaData[article, property, options] gives the value of the specified property, modified by optional parameters, for the given Wikipedia article.\nWikipediaData[\"Category\"category, property, options] gives the value of the specified property, modified by optional parameters, for the given Wikipedia category.\nWikipediaData[\"PageID\"pageid, property, options] gives the value of the specified property, modified by optional parameters, for the article corresponding to the given numerical Wikipedia page ID." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WikipediaData)))
(def WikipediaSearch "WikipediaSearch[keywords] returns a list of Wikipedia articles whose titles include the given keywords.\nWikipediaSearch[\"Title\"keywords, options] returns a list of Wikipedia articles whose titles include the given keywords.\nWikipediaSearch[\"Category\"keywords, options] returns a list of Wikipedia categories whose titles include the given keywords.\nWikipediaSearch[\"Content\"keywords] returns a list of Wikipedia articles whose content includes the given keywords.\nWikipediaSearch[loc] returns a list of Wikipedia articles whose associated coordinates are near the given location." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WikipediaSearch)))
(def WilksW "WilksW[m1, m2] gives Wilks's  for the matrices m1 and m2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WilksW)))
(def WilksWTest "WilksWTest[m1, m2] tests whether the matrices m1 and m2 are independent.\nWilksWTest[…, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WilksWTest)))
(def WindDirectionData "WindDirectionData[] gives the most recent measurement for wind direction near the current location.\nWindDirectionData[datespec] gives the wind direction value for the specified time near the current location.\nWindDirectionData[locationspec] gives the most recent measurement for wind direction near the specified location.\nWindDirectionData[locationspec, datespec] gives the value or values for the specified date and location.\nWindDirectionData[{{location1, date1}, {location2, date2}, …}] gives values for all specified locations on the specified dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindDirectionData)))
(def WindSpeedData "WindSpeedData[] gives the most recent measurement for wind speed near the current location.\nWindSpeedData[datespec] gives the wind speed value for the specified time near the current location.\nWindSpeedData[locationspec] gives the most recent measurement for wind speed near the specified location.\nWindSpeedData[locationspec, datespec] gives the value or values for the specified date and location.\nWindSpeedData[{{location1, date1}, {location2, date2}, …}] gives values for all specified locations on the specified dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindSpeedData)))
(def WindVectorData "WindVectorData[] gives the most recent weather station measurement for wind vector near the current location.\nWindVectorData[datespec] gives the wind vector value for the specified time near the current location.\nWindVectorData[locationspec] gives the most recent measurement for wind vector near the specified location.\nWindVectorData[locationspec, datespec] gives the value or values for the specified date and location.\nWindVectorData[{{location1, date1}, {location2, date2}, …}] gives values for all specified locations on the specified dates." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindVectorData)))
(def WindingCount "WindingCount[contour, p] gives the count of the number of times a closed curve winds around a point p." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindingCount)))
(def WindingPolygon "WindingPolygon[{p1, p2, …, pn}] gives a polygon representing all points for which the closed contour p1, p2, …, pn, p1 winds around at least once. \nWindingPolygon[{{p11, p12, …}, {p21, p22, …}, …}] gives a polygon from the closed contours p11, p12, … and p21, p22, ….\nWindingPolygon[…, \"wrule\"] uses the specified winding rule \"wrule\" to define the polygon." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindingPolygon)))
(def WindowClickSelect "WindowClickSelect is a notebook option that specifies whether the window for the notebook should become selected if you click it." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowClickSelect)))
(def WindowElements "WindowElements is a notebook option that specifies the elements to include in the window used to display the notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowElements)))
(def WindowFrame "WindowFrame is a notebook option that specifies the type of frame to draw around the window in which the notebook is displayed on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowFrame)))
(def WindowFrameElements "WindowFrameElements is an option for notebooks that specifies the elements to include in the frame of the window used to display the notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowFrameElements)))
(def WindowMargins "WindowMargins is a notebook option that specifies what margins to leave around the window that is used to display the notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowMargins)))
(def WindowOpacity "WindowOpacity is a notebook option that determines the overall opacity of a displayed window." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowOpacity)))
(def WindowSize "WindowSize is a notebook option that specifies the size of window that should be used to display a notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowSize)))
(def WindowStatusArea "WindowStatusArea is a notebook option that specifies what should appear in the status area in the frame of the window used to display the notebook." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowStatusArea)))
(def WindowTitle "WindowTitle is an option that specifies the title to give for a window." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowTitle)))
(def WindowToolbars "WindowToolbars is a notebook option that specifies the toolbars to include at the top of the window used to display the notebook on the screen." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WindowToolbars)))
(def WinsorizedMean "WinsorizedMean[list, f] gives the mean of the elements in list after replacing the fraction f of the smallest and largest elements by the remaining extreme values.\nWinsorizedMean[list, {f1, f2}] gives the mean when the fraction f1 of the smallest elements and the fraction f2 of the largest elements are replaced by the remaining extreme values.\nWinsorizedMean[list] gives the 5% winsorized mean WinsorizedMean[list, 0.05].\nWinsorizedMean[dist, …] gives the winsorized mean of a univariate distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WinsorizedMean)))
(def WinsorizedVariance "WinsorizedVariance[list, f] gives the variance of the elements in list after replacing the fraction f of the smallest and largest elements by the remaining extreme values.\nWinsorizedVariance[list, {f1, f2}] gives the variance when the fraction f1 of the smallest elements and the fraction f2 of the largest elements are replaced by the remaining extreme values.\nWinsorizedVariance[list] gives the 5% winsorized variance WinsorizedVariance[list, 0.05].\nWinsorizedVariance[dist, …] gives the winsorized variance of a univariate distribution dist." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WinsorizedVariance)))
(def WishartMatrixDistribution "WishartMatrixDistribution[ν, Σ] represents a Wishart matrix distribution with ν degrees of freedom and covariance matrix Σ." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WishartMatrixDistribution)))
(def With "With[{x=x0, y=y0, …}, expr] specifies that all occurrences of the symbols x, y, … in expr should be replaced by x0, y0, …." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote With)))
(def WithCleanup "WithCleanup[expr, cleanup] evaluates expr, running cleanup before returning the result, even if an abort, throw, etc. was generated during the evaluation of expr.\nWithCleanup[init, expr, cleanup] evaluates init before evaluating expr, blocking aborts, throws, etc. in both init and cleanup." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WithCleanup)))
(def WithLock "WithLock[File[\"path\"], expr] locks the file path, evaluates expr, then releases the file.\nWithLock[LocalSymbol[\"name\"], expr] locks the local symbol name, evaluates expr, then releases the local symbol.\nWithLock[var, expr] locks the shared variable var, evaluates expr, then releases the shared variable." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WithLock)))
(def WolframAlpha "WolframAlpha[\"query\"] sends query to Wolfram|Alpha and imports the output.\nWolframAlpha[\"query\", format] imports the output according to the specified format." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WolframAlpha)))
(def WolframLanguageData "WolframLanguageData[entity, property] gives the value of the specified property for the Wolfram Language symbol entity.\nWolframLanguageData[{entity1, entity2, …}, property] gives a list of property values for the specified Wolfram Language symbol entities.\nWolframLanguageData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WolframLanguageData)))
(def Word "Word represents a word in Read, Find, and related functions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Word)))
(def WordBoundary "WordBoundary represents a boundary between words for purposes of matching in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordBoundary)))
(def WordCharacter "WordCharacter represents a letter or digit character in StringExpression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordCharacter)))
(def WordCloud "WordCloud[{s1, s2, …}] generates a word cloud graphic in which the si are sized according to their multiplicity in the list. \nWordCloud[{w1s1, …}] generates a word cloud in which the si are sized according to the weights wi. \nWordCloud[s1w1, …] also generates a word cloud in which the si are sized according to the weights wi.\nWordCloud[{w1, w2, …}{s1, s2, …}] also generates a word cloud in which the si are sized according to the weights wi. \nWordCloud[{{s1, w1}, {s2, w2}, …}] also generates a word cloud in which the si are sized according to the weights wi. \nWordCloud[data, shape] fits the word cloud into the region defined by shape." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordCloud)))
(def WordCount "WordCount[\"string\"] gives the total number of words in string." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordCount)))
(def WordCounts "WordCounts[\"string\"] gives an association whose keys are the distinct words identified in string, and whose values give the number of times those words appear in string.\nWordCounts[\"string\", n] gives counts of the distinct n-grams consisting of runs of n words in string.\nWordCounts[{string1, string2, …}, …] gives the counts for each of the stringi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordCounts)))
(def WordData "WordData[\"word\", \"property\"] gives the specified property for the English word \"word\".\nWordData[\"word\"] gives a list of full word specifications representing possible uses and senses of \"word\".\nWordData[wordspec, \"property\"] gives a property for a particular word specification." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordData)))
(def WordDefinition "WordDefinition[\"word\"] gives the dictionary definitions available for \"word\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordDefinition)))
(def WordFrequency "WordFrequency[text, word] gives the frequency of word in text.\nWordFrequency[text, {word1, word2, …}] gives an association of the frequencies of each of the wordi." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordFrequency)))
(def WordFrequencyData "WordFrequencyData[word] gives the frequency of word in typical published English text.\nWordFrequencyData[{word1, word2, …}] gives an association of frequencies of the wordi.\nWordFrequencyData[word, \"TimeSeries\"] gives a time series for the frequency of word in typical published English text.\nWordFrequencyData[word, \"TimeSeries\", datespec] gives a time series for dates specified by datespec.\nWordFrequencyData[word, \"prop\"] gives property prop of the word frequency." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordFrequencyData)))
(def WordList "WordList[] gives a list of common words.\nWordList[type] gives a list of words of the specified type." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordList)))
(def WordOrientation "WordOrientation is an option for WordCloud that specifies the orientations in which words appear." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordOrientation)))
(def WordSearch "WordSearch is an option for Find and FindList that specifies whether the text searched for must appear as a word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordSearch)))
(def WordSelectionFunction "WordSelectionFunction is an option for WordCloud and other functions that specifies which words to use." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordSelectionFunction)))
(def WordSeparators "WordSeparators is an option for Read, Find, and related functions that specifies the list of strings to be taken as delimiters for words." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordSeparators)))
(def WordSpacings "WordSpacings is an option for WordCloud that specifies the empty space to be added around each word." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordSpacings)))
(def WordStem "WordStem[\"word\"] gives a stemmed form of word, removing plurals, inflections, etc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordStem)))
(def WordTranslation "WordTranslation[\"word\", lang] gives translations for word into the language lang.\nWordTranslation[\"word\", lang1->lang2] gives translations for word from lang1 to lang2." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WordTranslation)))
(def WorkingPrecision "WorkingPrecision is an option for various numerical operations that specifies how many digits of precision should be maintained in internal computations." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WorkingPrecision)))
(def WrapAround "WrapAround is an option for NotebookFind that specifies whether the find operation should continue past the bottom or top of a document." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WrapAround)))
(def Write "Write[channel, expr1, expr2, …] writes the expressions expri in sequence, followed by a newline, to the specified output channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Write)))
(def WriteLine "WriteLine[\"file\", \"string\"] writes \"string\" to a file, followed by a newline.\nWriteLine[stream, \"string\"] writes \"string\", followed by a newline, to the specified output stream.\nWriteLine[proc, \"string\"] writes \"string\" to an external process proc." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WriteLine)))
(def WriteString "WriteString[\"file\", \"string\"] writes \"string\" to a file.\nWriteString[channel, \"string\"] writes \"string\" to a stream or process.\nWriteString[channel, expr1, expr2, …] converts the expri to strings, and then writes them in sequence to the specified output channel." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote WriteString)))
(def Wronskian "Wronskian[{y1, y2, …}, x] gives the Wronskian determinant for the functions y1, y2, … depending on x.\nWronskian[eqn, y, x] gives the Wronskian determinant for the basis of the solutions of the linear differential equation eqn with dependent variable y and independent variable x. \nWronskian[eqns, {y1, y2, …}, x] gives the Wronskian determinant for the system of linear differential equations eqns." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Wronskian)))
(def XMLElement "XMLElement[tag, {attr1val1, …}, {data1, …}] represents an element in symbolic XML." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote XMLElement)))
(def XMLObject "XMLObject[\"type\"] represents the head of an XML object in symbolic XML." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote XMLObject)))
(def XMLTemplate "XMLTemplate[\"string\"] yields a TemplateObject that represents an XML template to be applied using functions like TemplateApply.\nXMLTemplate[src] uses File[…], URL[…], or CloudObject[…] as the source for the string template.\nXMLTemplate[form, args] yields a TemplateObject with arguments, suitable for cloud deployment or other evaluation." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote XMLTemplate)))
(def XYZColor "XYZColor[x, y, z] represents a color in the XYZ color space with tristimulus values x, y and z.\nXYZColor[x, y, z, a] specifies opacity a. \nXYZColor[\"string\"] returns a color from an HTML color name etc.\nXYZColor[color] returns the XYZ representation of color." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote XYZColor)))
(def Xnor "Xnor[e1, e2, …] is the logical XNOR (not XOR) function. It gives True if an even number of the ei are True, and the rest are False. It gives False if an odd number of the ei are True, and the rest are False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Xnor)))
(def Xor "Xor[e1, e2, …] is the logical XOR (exclusive OR) function. It gives True if an odd number of the ei are True, and the rest are False. It gives False if an even number of the ei are True, and the rest are False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Xor)))
(def Yellow "Yellow represents the color yellow in graphics or style specifications." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Yellow)))
(def Yesterday "Yesterday gives a DateObject representing the previous day." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Yesterday)))
(def YuleDissimilarity "YuleDissimilarity[u, v] gives the Yule dissimilarity between Boolean vectors u and v." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote YuleDissimilarity)))
(def ZIPCodeData "ZIPCodeData[entity, property] gives the value of the specified property for the ZIP code entity.\nZIPCodeData[{entity1, entity2, …}, property] gives a list of property values for the specified ZIP code entities.\nZIPCodeData[entity, property, annotation] gives the specified annotation associated with the given property." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZIPCodeData)))
(def ZTest "ZTest[data] tests whether the mean of the data is zero. \nZTest[{data1, data2}] tests whether the means of data1 and data2 are equal.\nZTest[dspec, σ^2] tests for zero or equal means assuming a population variance σ^2.\nZTest[dspec, σ^2, μ0] tests the mean against μ0.\nZTest[dspec, σ^2, μ0, \"property\"] returns the value of \"property\"." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZTest)))
(def ZTransform "ZTransform[expr, n, z] gives the Z transform of expr. \nZTransform[expr, {n1, …, nm}, {z1, …, zm}] gives the multidimensional Z transform of expr." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZTransform)))
(def ZernikeR "ZernikeR[n, m, r] gives the radial Zernike polynomial R_n^m(r)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZernikeR)))
(def ZeroSymmetric "ZeroSymmetric[{s1, …, sn}] represents the symmetry of a zero tensor in the slots si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZeroSymmetric)))
(def ZeroTest "ZeroTest is an option to various linear algebra functions that gives a function to use in testing whether symbolic expressions should be treated as zero." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZeroTest)))
(def Zeta "Zeta[s] gives the Riemann zeta function ζ (s). \nZeta[s, a] gives the generalized Riemann zeta function ζ (s, a)." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote Zeta)))
(def ZetaZero "ZetaZero[k] represents the k ^th zero of the Riemann zeta function on the critical line.\nZetaZero[k, t] represents the k ^th zero with imaginary part greater than t." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZetaZero)))
(def ZipfDistribution "ZipfDistribution[ρ] represents a zeta distribution with parameter ρ.\nZipfDistribution[n, ρ] represents a Zipf distribution with range n." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZipfDistribution)))
(def ZoomCenter "ZoomCenter is an option for DynamicImage that specifies the position of a zoom window within an image." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZoomCenter)))
(def ZoomFactor "ZoomFactor is an option for DynamicImage that specifies the magnification factor of a zoom." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ZoomFactor)))
(def ! "!expr is the logical NOT function. It gives False if expr is True, and True if it is False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote !)))
(def && "e1&&e2&&… is the logical AND function. It evaluates its arguments in order, giving False immediately if any of them are False, and True if they are all True." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote &&)))
(def * "x*y*z, x×y×z, or x y z represents a product of terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote *)))
(def ** "x^y gives x to the power y." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote **)))
(def + "x+y+z represents a sum of terms." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote +)))
(def ++ "Conjugate[z] or z gives the complex conjugate of the complex number z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ++)))
(def ++<_> "ComplexExpand[expr] expands expr assuming that all variables are real. \nComplexExpand[expr, {x1, x2, …}] expands expr assuming that variables matching any of the xi are complex." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ++<_>)))
(def += "x+=dx adds dx to x and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote +=)))
(def - "Maps to the Wolfram function " (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote -)))
(def -= "x-=dx subtracts dx from x and returns the new value of x." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote -=)))
(def -> "lhs->rhs or lhsrhs represents a rule that transforms lhs to rhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ->)))
(def / "x/y or Divide[x, y] is equivalent to x y^-1." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote /)))
(def < "x<y yields True if x is determined to be less than y. \nx1<x2<x3 yields True if the xi form a strictly increasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <)))
(def <*> "a.b.c or Dot[a, b, c] gives products of vectors, matrices, and tensors." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <*>)))
(def <<_>> "ExpandAll[expr] expands out all products and integer powers in any part of expr. \nExpandAll[expr, patt] avoids expanding parts of expr that do not contain terms matching the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <<_>>)))
(def <= "x<=y or x≤y yields True if x is determined to be less than or equal to y.\nx1≤x2≤x3 yields True if the xi form a nondecreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <=)))
(def <> "\"s1 \"<>\"s2 \"<>…, StringJoin[\"s1\", \"s2\", …], or StringJoin[{\"s1\", \"s2\", …}] yields a string consisting of a concatenation of the si." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <>)))
(def <_> "Expand[expr] expands out products and positive integer powers in expr. \nExpand[expr, patt] leaves unexpanded any parts of expr that are free of the pattern patt." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote <_>)))
(def = "lhs=rhs evaluates rhs and assigns the result to be the value of lhs. From then on, lhs is replaced by rhs whenever it appears. \n{l1, l2, …}={r1, r2, …} evaluates the ri, and assigns the results to be the values of the corresponding li." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote =)))
(def =! "lhs=. removes any rules defined for lhs." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote =!)))
(def == "lhs==rhs returns True if lhs and rhs are identical." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ==)))
(def === "lhs===rhs yields True if the expression lhs is identical to rhs, and yields False otherwise." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ===)))
(def > "x>y yields True if x is determined to be greater than y. \nx1>x2>x3 yields True if the xi form a strictly decreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote >)))
(def >= "x>=y or x≥y yields True if x is determined to be greater than or equal to y. \nx1≥x2≥x3 yields True if the xi form a nonincreasing sequence." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote >=)))
(def >>_<< "FullSimplify[expr] tries a wide range of transformations on expr involving elementary and special functions and returns the simplest form it finds. \nFullSimplify[expr, assum] does simplification using assumptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote >>_<<)))
(def >_< "Simplify[expr] performs a sequence of algebraic and other transformations on expr and returns the simplest form it finds. \nSimplify[expr, assum] does simplification using assumptions." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote >_<)))
(def ?? "Information[expr] gives information about the expression expr. \nInformation[expr, prop] gives the value of the property prop for expr.\nInformation[{expr1, expr2, …}, …] gives information about all of the expri." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ??)))
(def _= "lhs:=rhs assigns rhs to be the delayed value of lhs. rhs is maintained in an unevaluated form. When lhs appears, it is replaced by rhs, evaluated afresh each time." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote _=)))
(def _> "lhs:>rhs or lhsrhs represents a rule that transforms lhs to rhs, evaluating rhs only after the rule is used." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote _>)))
(def do "expr1;expr2;… evaluates the expri in turn, giving the last one as the result." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote do)))
(def x> "Replace[expr, rules] applies a rule or list of rules in an attempt to transform the entire expression expr. \nReplace[expr, rules, levelspec] applies rules to parts of expr specified by levelspec. \nReplace[rules] represents an operator form of Replace that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote x>)))
(def x>> "expr/.rules or ReplaceAll[expr, rules] applies a rule or list of rules in an attempt to transform each subpart of an expression expr. \nReplaceAll[rules] represents an operator form of ReplaceAll that can be applied to an expression." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote x>>)))
(def || "e1||e2||… is the logical OR function. It evaluates its arguments in order, giving True immediately if any of them are True, and False if they are all False." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ||)))
(def √ "Sqrt[z] or Sqrt[z] gives the square root of z." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote √)))
(def ∫ "Integrate[f, x] gives the indefinite integral ∫f dx. \nIntegrate[f, {x, xmin, xmax}] gives the definite integral ∫_xmin^xmax f dx. \nIntegrate[f, {x, xmin, xmax}, {y, ymin, ymax}, …] gives the multiple integral ∫_xmin^xmaxdx ∫_ymin^ymaxdy … f. \nIntegrate[f, {x, y, …}∈reg] integrates over the geometric region reg." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ∫)))
(def ⮾ "a**b**c is a general associative, but non‐commutative, form of multiplication." (wolframite.impl.wolfram-syms.intern/wolfram-fn (quote ⮾)))
(defmacro fn
  "Creates a Wolfram anonymous function with the given arguments and single expression body.
  Example usage: `(wl/! (w/Map (w/fn [x] (w/Plus x 1)) [1 2 3]))`"
  ([body-sexp]
   ;; A pure lambda with anonymous args (#, #1, ... = Slot[1], ...) or possibly no args at all
   `(list (quote ~'Function) ~(wolframite.impl.wolfram-syms.intern/quote-args body-sexp [])))
  ([args body-sexp]
   (clojure.core/assert (clojure.core/vector? args))
   ;; If there is any w/ symbol such as w/Plus, replace it just with the fn name, `Plus` -
   ;; we need the whole body to be pure symbols and primitives only, which Wolfram will understand
   `(list (quote ~'Function) (quote ~args) ~(wolframite.impl.wolfram-syms.intern/quote-args body-sexp args))))